syntax = "proto3";

package resources.file;

import "buf/validate/validate.proto";
import "codegen/audit/redacted.proto";
import "codegen/sanitizer/sanitizer.proto";
import "resources/file/file.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/file;file";

message UploadFileRequest {
  oneof payload {
    UploadMeta meta = 1;
    // Raw bytes <= 128 KiB each, browsers should only read 64 KiB at a time, but this is a buffer just in case
    bytes data = 2 [
      (buf.validate.field).bytes.max_len = 131072,
      (codegen.audit.redacted) = true
    ];
  }
}

message UploadMeta {
  int64 parent_id = 1;
  string namespace = 2; // "documents", "wiki", â€¦
  string original_name = 3 [(buf.validate.field).string.max_len = 255];
  string content_type = 4; // optional - server re-validates
  int64 size = 5 [(buf.validate.field).int64.gt = 0]; // Size in bytes

  string reason = 6 [
    (buf.validate.field).string = {
      min_len: 3
      max_len: 255
    },
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (codegen.sanitizer.sanitizer) = {enabled: true}
  ];
}

message UploadFileResponse {
  int64 id = 1; // Unique ID for the uploaded file
  string url = 2; // URL to the uploaded file
  File file = 3; // File info
}

message DeleteFileRequest {
  int64 parent_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 file_id = 2 [(buf.validate.field).int64.gt = 0];
}

message DeleteFileResponse {}
