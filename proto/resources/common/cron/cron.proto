syntax = "proto3";

package resources.common.cron;

import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "resources/timestamp/timestamp.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/common/cron;cron";

message Cronjob {
  // Cronjob name
  string name = 1;
  /*
   * Cron schedule expression
   * For available valid expressions, see [adhocore/gronx - Cron Expressions Documentation](https://github.com/adhocore/gronx/blob/fea40e3e90e70476877cfb9b50fac10c7de41c5c/README.md#cron-expression).
   *
   * To generate Cronjob schedule expressions, you can also use web tools like https://crontab.guru/.
   */
  string schedule = 2;
  // Cronjob state
  CronjobState state = 3;
  // Next time the cronjob should be run
  resources.timestamp.Timestamp next_schedule_time = 4;
  // Last attempted start time of Cronjob
  optional resources.timestamp.Timestamp last_attempt_time = 5;
  // Time current cronjob was started
  optional resources.timestamp.Timestamp started_time = 6;

  // Optional timeout for cronjob execution
  optional google.protobuf.Duration timeout = 7;

  // Cronjob data
  CronjobData data = 8;

  // Last event info to ease debugging and tracking
  optional CronjobCompletedEvent last_completed_event = 9;
}

// States of Cronjbo
enum CronjobState {
  CRONJOB_STATE_UNSPECIFIED = 0;
  CRONJOB_STATE_WAITING = 1;
  CRONJOB_STATE_PENDING = 2;
  CRONJOB_STATE_RUNNING = 3;
}

message CronjobData {
  resources.timestamp.Timestamp updated_at = 1;
  optional google.protobuf.Any data = 2;
}

message CronjobLockOwnerState {
  // Hostname of the agent the cronjob is running on
  string hostname = 1;
  resources.timestamp.Timestamp updated_at = 2;
}

message CronjobSchedulerEvent {
  // Full Cronjob spec
  Cronjob cronjob = 1;
}

message CronjobCompletedEvent {
  // Cronjob name
  string name = 1;
  // Cronjob execution success status
  bool success = 2;
  // Cronjob execution was cancelled
  bool cancelled = 7;
  // Cronjob end time
  resources.timestamp.Timestamp end_date = 3;
  // Cronjob execution time/elapsed time
  google.protobuf.Duration elapsed = 4;

  // Cronjob data (can be empty if not touched by the Cronjob handler)
  optional CronjobData data = 5;

  // Name of the node where the cronjob was executed
  string node_name = 6;

  // Error message (if success = false)
  optional string error_message = 8;
}

message GenericCronData {
  // @sanitize: method=StripTags
  map<string, string> attributes = 1;
}
