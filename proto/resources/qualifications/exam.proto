syntax = "proto3";

package resources.qualifications;

import "resources/filestore/file.proto";
import "resources/timestamp/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/gen/go/proto/resources/qualifications;qualifications";

// Exam / Questions

message ExamQuestions {
  repeated ExamQuestion questions = 1 [(validate.rules).repeated.max_items = 50];
}

message ExamQuestion {
  uint64 id = 1;
  uint64 qualification_id = 2;
  optional resources.timestamp.Timestamp created_at = 3;
  optional resources.timestamp.Timestamp updated_at = 4;
  // @sanitize: method=StripTags
  string title = 5 [(validate.rules).string = {
    min_len: 3,
    max_len: 512
  }];
  // @sanitize: method=StripTags
  optional string description = 6 [(validate.rules).string.max_len = 1024];
  ExamQuestionData data = 7 [(validate.rules).message.required = true];
  optional ExamQuestionAnswerData answer = 8;
  optional int32 points = 9 [(validate.rules).int32.gte = 0];
}

// @dbscanner: json
message ExamQuestionData {
  oneof data {
    option (validate.required) = true;

    ExamQuestionSeparator separator = 1;
    ExamQuestionImage image = 6;
    ExamQuestionYesNo yesno  = 2;
    ExamQuestionText free_text = 3;
    ExamQuestionSingleChoice single_choice = 4;
    ExamQuestionMultipleChoice multiple_choice = 5;
  }
}

message ExamQuestionSeparator {}

message ExamQuestionImage {
  resources.filestore.File image = 1;
  optional string alt = 2 [(validate.rules).string.max_len = 128];
}

message ExamQuestionYesNo {}

message ExamQuestionText {
  int32 min_length = 1;
  int32 max_length = 2;
}

message ExamQuestionSingleChoice {
  // @sanitize: method=StripTags
  repeated string choices = 1 [(validate.rules).repeated.max_items = 10];
}

message ExamQuestionMultipleChoice {
  // @sanitize: method=StripTags
  repeated string choices = 1 [(validate.rules).repeated.max_items = 10];
  optional int32 limit = 2 [(validate.rules).int32 = {gte: 0, lte: 10}];
}

// @dbscanner: json
message ExamQuestionAnswerData {
  string answer_key = 1 [(validate.rules).string.max_len = 1024];
}

// User Response

message ExamUser {
  uint64 qualification_id = 1;
  int32 user_id = 2;
  optional resources.timestamp.Timestamp created_at = 3;
  optional resources.timestamp.Timestamp started_at = 4;
  optional resources.timestamp.Timestamp ends_at = 5;
  optional resources.timestamp.Timestamp ended_at = 6;
}

// @dbscanner: json
message ExamResponses {
  uint64 qualification_id = 1;
  int32 user_id = 2;
  repeated ExamResponse responses = 3 [(validate.rules).repeated.max_items = 50];
}

message ExamResponse {
  uint64 question_id = 1;
  int32 user_id = 2;

  ExamQuestion question = 3;
  ExamResponseData response = 4;
}

message ExamResponseData {
  oneof response {
    option (validate.required) = true;

    ExamResponseSeparator separator = 3;
    ExamResponseYesNo yesno  = 4;
    ExamResponseText free_text = 5;
    ExamResponseSingleChoice single_choice = 6;
    ExamResponseMultipleChoice multiple_choice = 7;
  }
}

message ExamResponseSeparator {}

message ExamResponseYesNo {
  bool value = 1;
}

message ExamResponseText {
  // @sanitize: method=StripTags
  string text = 1 [(validate.rules).string.max_bytes = 500000]; // 0.5 Megabyte
}

message ExamResponseSingleChoice {
  // @sanitize: method=StripTags
  string choice = 1 [(validate.rules).string.max_len = 512];
}

message ExamResponseMultipleChoice {
  // @sanitize: method=StripTags
  repeated string choices = 1 [(validate.rules).repeated.max_items = 10];
}

// @dbscanner: json
message ExamGrading {
  repeated ExamGradingResponse responses = 1 [(validate.rules).repeated.max_items = 50];
}

message ExamGradingResponse {
  uint64 question_id = 1;
  float points = 2 [(validate.rules).float = {gte: 0, lte: 1000}];
  optional bool checked = 3;
}
