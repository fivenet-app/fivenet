syntax = "proto3";

package services.completor;

import "buf/validate/validate.proto";
import "resources/documents/category.proto";
import "resources/jobs/jobs.proto";
import "resources/laws/laws.proto";
import "resources/users/labels.proto";
import "resources/users/users.proto";
import "tagger/tagger.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/completor;completor";

message CompleteCitizensRequest {
  string search = 1 [(buf.validate.field).string.max_len = 64];
  optional bool current_job = 2;
  optional bool on_duty = 3;
  repeated int32 user_ids = 4 [(buf.validate.field).repeated.items.int32.gt = 0];
  optional bool user_ids_only = 5;
}

message CompleteCitizensResponse {
  repeated resources.users.UserShort users = 1 [(tagger.tags) = "alias:\"user\""];
}

message CompleteJobsRequest {
  optional string search = 1 [(buf.validate.field).string.max_len = 64];
  optional bool exact_match = 2;
  optional bool current_job = 3;
}

message CompleteJobsResponse {
  repeated resources.jobs.Job jobs = 1;
}

message CompleteDocumentCategoriesRequest {
  string search = 1 [(buf.validate.field).string.max_len = 64];
}

message CompleteDocumentCategoriesResponse {
  repeated resources.documents.Category categories = 1;
}

message ListLawBooksRequest {}

message ListLawBooksResponse {
  repeated resources.laws.LawBook books = 1;
}

message CompleteCitizenLabelsRequest {
  string search = 1 [(buf.validate.field).string.max_len = 64];
}

message CompleteCitizenLabelsResponse {
  repeated resources.users.Label labels = 1;
}

service CompletorService {
  // @perm
  rpc CompleteCitizens(CompleteCitizensRequest) returns (CompleteCitizensResponse);
  // @perm: Name=Any
  rpc CompleteJobs(CompleteJobsRequest) returns (CompleteJobsResponse);
  // @perm: Attrs=Jobs/JobList
  rpc CompleteDocumentCategories(CompleteDocumentCategoriesRequest) returns (CompleteDocumentCategoriesResponse);
  // @perm: Name=Any
  rpc ListLawBooks(ListLawBooksRequest) returns (ListLawBooksResponse);

  // @perm: Attrs=Jobs/JobList
  rpc CompleteCitizenLabels(CompleteCitizenLabelsRequest) returns (CompleteCitizenLabelsResponse);
}
