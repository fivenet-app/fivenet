syntax = "proto3";

package services.notifications;

import "resources/common/database/database.proto";
import "resources/mailer/events.proto";
import "resources/notifications/events.proto";
import "resources/notifications/notifications.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/notifications;notifications";

message GetNotificationsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  optional bool include_read = 2;
  repeated resources.notifications.NotificationCategory categories = 3 [(validate.rules).repeated = {
    max_items: 4,
    items: {
      enum: {
        defined_only: true,
      },
    },
  }];
}

message GetNotificationsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.notifications.Notification notifications = 2;
}

message MarkNotificationsRequest {
  bool unread = 1;
  repeated uint64 ids = 2 [(validate.rules).repeated = {
    ignore_empty: true,
    min_items: 1,
    max_items: 20
  }];
  optional bool all = 3;
}

message MarkNotificationsResponse {
  uint64 updated = 1;
}

message StreamRequest {
  ClientView client_view = 1 [(validate.rules).message.required = true];
}

message ClientView {
  string object_type = 1;
  string object_id = 2;
}

message StreamResponse {
  int32 notification_count = 1;
  optional bool restart = 2;

  oneof data {
    option (validate.required) = true;

    resources.notifications.UserEvent user_event = 3;
    resources.notifications.JobEvent job_event = 4;
    resources.notifications.JobGradeEvent job_grade_event = 7;
    resources.notifications.SystemEvent system_event = 5;
    resources.mailer.MailerEvent mailer_event = 6;
  }
}

service NotificationsService {
  // @perm: Name=Any
  rpc GetNotifications(GetNotificationsRequest) returns (GetNotificationsResponse);
  // @perm: Name=Any
  rpc MarkNotifications(MarkNotificationsRequest) returns (MarkNotificationsResponse);

  // @perm: Name=Any
  rpc Stream(stream StreamRequest) returns (stream StreamResponse);
}
