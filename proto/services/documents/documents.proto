syntax = "proto3";

package services.documents;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "codegen/sanitizer/sanitizer.proto";
import "resources/common/content/content.proto";
import "resources/common/database/database.proto";
import "resources/documents/access.proto";
import "resources/documents/activity.proto";
import "resources/documents/category.proto";
import "resources/documents/comment.proto";
import "resources/documents/documents.proto";
import "resources/documents/pins.proto";
import "resources/documents/requests.proto";
import "resources/documents/templates.proto";
import "resources/file/file.proto";
import "resources/file/filestore.proto";
import "resources/timestamp/timestamp.proto";
import "tagger/tagger.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/documents;documents";

// Templates ==================================================================

message ListTemplatesRequest {}

message ListTemplatesResponse {
  repeated resources.documents.TemplateShort templates = 1;
}

message GetTemplateRequest {
  int64 template_id = 1;
  optional resources.documents.TemplateData data = 2;
  optional bool render = 3;
}

message GetTemplateResponse {
  resources.documents.Template template = 1;
  bool rendered = 2;
}

message CreateTemplateRequest {
  resources.documents.Template template = 1 [(buf.validate.field).required = true];
}

message CreateTemplateResponse {
  int64 id = 1;
}

message UpdateTemplateRequest {
  resources.documents.Template template = 1 [(buf.validate.field).required = true];
}

message UpdateTemplateResponse {
  resources.documents.Template template = 1;
}

message DeleteTemplateRequest {
  int64 id = 1;
}

message DeleteTemplateResponse {}

// Documents ==================================================================

message ListDocumentsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  optional string search = 3 [(buf.validate.field).string.max_len = 64];
  repeated int64 category_ids = 4 [(buf.validate.field).repeated.max_items = 5];
  repeated int32 creator_ids = 5 [(buf.validate.field).repeated.max_items = 5];
  optional resources.timestamp.Timestamp from = 6;
  optional resources.timestamp.Timestamp to = 7;
  optional bool closed = 8;
  repeated int64 document_ids = 9 [(buf.validate.field).repeated.max_items = 5];
  // Controls inclusion of drafts in the result:
  // - unset/null: include all documents (drafts and non-drafts)
  // - false: only non-draft documents
  // - true: only draft documents
  optional bool only_drafts = 10;
}

message ListDocumentsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.DocumentShort documents = 2 [(codegen.itemslen.enabled) = true];
}

message GetDocumentRequest {
  int64 document_id = 1;
  optional bool info_only = 2;
}

message GetDocumentResponse {
  resources.documents.Document document = 1;
  resources.documents.DocumentAccess access = 2;
}

message GetDocumentReferencesRequest {
  int64 document_id = 1;
}

message GetDocumentReferencesResponse {
  repeated resources.documents.DocumentReference references = 1 [(tagger.tags) = "alias:\"reference\""];
}

message GetDocumentRelationsRequest {
  int64 document_id = 1;
}

message GetDocumentRelationsResponse {
  repeated resources.documents.DocumentRelation relations = 1 [(tagger.tags) = "alias:\"relation\""];
}

message AddDocumentReferenceRequest {
  resources.documents.DocumentReference reference = 1 [(buf.validate.field).required = true];
}

message AddDocumentReferenceResponse {
  int64 id = 1;
}

message RemoveDocumentReferenceRequest {
  int64 id = 1;
}

message RemoveDocumentReferenceResponse {}

message AddDocumentRelationRequest {
  resources.documents.DocumentRelation relation = 1 [(buf.validate.field).required = true];
}

message AddDocumentRelationResponse {
  int64 id = 1;
}

message RemoveDocumentRelationRequest {
  int64 id = 1;
}

message RemoveDocumentRelationResponse {}

// Comments ===============================================================

message GetCommentsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 document_id = 2;
}

message GetCommentsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.Comment comments = 2 [(codegen.itemslen.enabled) = true];
}

message PostCommentRequest {
  resources.documents.Comment comment = 1 [(buf.validate.field).required = true];
}

message PostCommentResponse {
  resources.documents.Comment comment = 1;
}

message EditCommentRequest {
  resources.documents.Comment comment = 1 [(buf.validate.field).required = true];
}

message EditCommentResponse {
  resources.documents.Comment comment = 1;
}

message DeleteCommentRequest {
  int64 comment_id = 1;
}

message DeleteCommentResponse {}

message UpdateDocumentResponse {
  resources.documents.Document document = 1;
}

message DeleteDocumentRequest {
  int64 document_id = 1 [(tagger.tags) = "alias:\"id\""];
  optional string reason = 2 [
    (buf.validate.field).string = {
      min_len: 0
      max_len: 255
    },
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE,
    (codegen.sanitizer.sanitizer) = {
      enabled: true
      method: "StripTags"
    }
  ];
}

message DeleteDocumentResponse {}

message ToggleDocumentRequest {
  int64 document_id = 1;
  bool closed = 2;
}

message ToggleDocumentResponse {}

message ChangeDocumentOwnerRequest {
  int64 document_id = 1;
  optional int32 new_user_id = 2;
}

message ChangeDocumentOwnerResponse {}

message CreateDocumentRequest {
  resources.common.content.ContentType content_type = 1 [(buf.validate.field).enum.defined_only = true];
  optional int64 template_id = 2;
  optional resources.documents.TemplateData template_data = 3;
}

message CreateDocumentResponse {
  int64 id = 1;
}

message UpdateDocumentRequest {
  int64 document_id = 1 [(tagger.tags) = "alias:\"id\""];
  optional int64 category_id = 2;
  string title = 3 [
    (buf.validate.field).string = {
      min_len: 3
      max_len: 255
    },
    (tagger.tags) = "alias:\"title\"",
    (codegen.sanitizer.sanitizer) = {
      enabled: true
      method: "StripTags"
    }
  ];
  resources.common.content.Content content = 4;
  resources.common.content.ContentType content_type = 5 [(buf.validate.field).enum.defined_only = true];
  optional string data = 6 [(buf.validate.field).string = {max_bytes: 1000000}];
  string state = 7 [
    (buf.validate.field).string.max_len = 32,
    (codegen.sanitizer.sanitizer) = {enabled: true}
  ];
  bool closed = 8;
  bool draft = 9;
  bool public = 10;
  optional resources.documents.DocumentAccess access = 11;
  repeated resources.file.File files = 12 [(tagger.tags) = "alias:\"files\""];
}

// Document Activity and Requests =============================================

message ListDocumentActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 document_id = 2;
  // Search params
  repeated resources.documents.DocActivityType activity_types = 3 [(buf.validate.field).repeated = {
    max_items: 10
    items: {
      enum: {
        in: [
          13,
          14,
          15,
          16,
          17,
          18
        ]
      }
    }
  }];
}

message ListDocumentActivityResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.DocActivity activity = 2 [(codegen.itemslen.enabled) = true];
}

message ListDocumentReqsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 document_id = 2;
}

message ListDocumentReqsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.DocRequest requests = 2 [(codegen.itemslen.enabled) = true];
}

message CreateDocumentReqRequest {
  int64 document_id = 1;
  resources.documents.DocActivityType request_type = 2 [(buf.validate.field).enum = {
    in: [
      13,
      14,
      15,
      16,
      17,
      18
    ]
  }];
  optional string reason = 3 [
    (buf.validate.field).string.max_len = 255,
    (codegen.sanitizer.sanitizer) = {enabled: true}
  ];
  optional resources.documents.DocActivityData data = 4;
}

message CreateDocumentReqResponse {
  resources.documents.DocRequest request = 1;
}

message UpdateDocumentReqRequest {
  int64 document_id = 1;
  int64 request_id = 2;
  optional string reason = 3 [
    (buf.validate.field).string.max_len = 255,
    (codegen.sanitizer.sanitizer) = {enabled: true}
  ];
  optional resources.documents.DocActivityData data = 4;
  bool accepted = 5;
}

message UpdateDocumentReqResponse {
  resources.documents.DocRequest request = 1;
}

message DeleteDocumentReqRequest {
  int64 request_id = 1;
}

message DeleteDocumentReqResponse {}

// Access =====================================================================

message GetDocumentAccessRequest {
  int64 document_id = 1;
}

message GetDocumentAccessResponse {
  resources.documents.DocumentAccess access = 1 [(buf.validate.field).required = true];
}

message SetDocumentAccessRequest {
  int64 document_id = 1;
  resources.documents.DocumentAccess access = 2 [(buf.validate.field).required = true];
}

message SetDocumentAccessResponse {}

message ListUserDocumentsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  int32 user_id = 3 [(buf.validate.field).int32.gt = 0];
  repeated resources.documents.DocRelation relations = 4 [(buf.validate.field).repeated.max_items = 3];
  optional bool closed = 5;
}

message ListUserDocumentsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.DocumentRelation relations = 2 [(codegen.itemslen.enabled) = true];
}

// Categories =================================================================

message ListCategoriesRequest {}

message ListCategoriesResponse {
  repeated resources.documents.Category categories = 1;
}

message CreateOrUpdateCategoryRequest {
  resources.documents.Category category = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateCategoryResponse {
  resources.documents.Category category = 1 [(buf.validate.field).required = true];
}

message DeleteCategoryRequest {
  int64 id = 1;
}

message DeleteCategoryResponse {}

// Pins =======================================================================

message ListDocumentPinsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Search params
  // If true, only personal pins are returned
  optional bool personal = 2;
}

message ListDocumentPinsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.DocumentShort documents = 2 [(codegen.itemslen.enabled) = true];
}

message ToggleDocumentPinRequest {
  int64 document_id = 1;
  bool state = 2;
  // If true, the pin is personal and not shared with other job members
  optional bool personal = 3;
}

message ToggleDocumentPinResponse {
  optional resources.documents.DocumentPin pin = 1 [(tagger.tags) = "alias:\"pin\""];
}

// Reminders ==================================================================

message SetDocumentReminderRequest {
  int64 document_id = 1;
  optional resources.timestamp.Timestamp reminder_time = 2;
  optional string message = 3 [
    (buf.validate.field).string.max_bytes = 1024,
    (codegen.sanitizer.sanitizer) = {
      enabled: true
      method: "StripTags"
    }
  ];
  int32 max_reminder_count = 4 [(buf.validate.field).int32 = {
    gte: 1
    lte: 10
  }];
}

message SetDocumentReminderResponse {}

service DocumentsService {
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListTemplates"
    };
  }
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc UpdateTemplate(UpdateTemplateRequest) returns (UpdateTemplateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "CreateTemplate"
    };
  }
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc CreateDocument(CreateDocumentRequest) returns (CreateDocumentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "UpdateDocument"
    };
  }
  rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }
  rpc DeleteDocument(DeleteDocumentRequest) returns (DeleteDocumentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }

  rpc ToggleDocument(ToggleDocumentRequest) returns (ToggleDocumentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }

  rpc ChangeDocumentOwner(ChangeDocumentOwnerRequest) returns (ChangeDocumentOwnerResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }

  rpc GetDocumentReferences(GetDocumentReferencesRequest) returns (GetDocumentReferencesResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc GetDocumentRelations(GetDocumentRelationsRequest) returns (GetDocumentRelationsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc AddDocumentReference(AddDocumentReferenceRequest) returns (AddDocumentReferenceResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc RemoveDocumentReference(RemoveDocumentReferenceRequest) returns (RemoveDocumentReferenceResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "AddDocumentReference"
    };
  }
  rpc AddDocumentRelation(AddDocumentRelationRequest) returns (AddDocumentRelationResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc RemoveDocumentRelation(RemoveDocumentRelationRequest) returns (RemoveDocumentRelationResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "AddDocumentRelation"
    };
  }

  rpc GetComments(GetCommentsRequest) returns (GetCommentsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc PostComment(PostCommentRequest) returns (PostCommentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc EditComment(EditCommentRequest) returns (EditCommentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }

  rpc GetDocumentAccess(GetDocumentAccessRequest) returns (GetDocumentAccessResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc SetDocumentAccess(SetDocumentAccessRequest) returns (SetDocumentAccessResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "UpdateDocument"
    };
  }

  rpc ListDocumentActivity(ListDocumentActivityRequest) returns (ListDocumentActivityResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc ListDocumentReqs(ListDocumentReqsRequest) returns (ListDocumentReqsResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc CreateDocumentReq(CreateDocumentReqRequest) returns (CreateDocumentReqResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Types"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Access",
            "Closure",
            "Update",
            "Deletion",
            "OwnerChange"
          ]
        }
      ]
    };
  }

  rpc UpdateDocumentReq(UpdateDocumentReqRequest) returns (UpdateDocumentReqResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "CreateDocumentReq"
    };
  }
  rpc DeleteDocumentReq(DeleteDocumentReqRequest) returns (DeleteDocumentReqResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc ListUserDocuments(ListUserDocumentsRequest) returns (ListUserDocumentsResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc CreateOrUpdateCategory(CreateOrUpdateCategoryRequest) returns (CreateOrUpdateCategoryResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc ListDocumentPins(ListDocumentPinsRequest) returns (ListDocumentPinsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListDocuments"
    };
  }
  rpc ToggleDocumentPin(ToggleDocumentPinRequest) returns (ToggleDocumentPinResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Types"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: ["JobWide"]
        }
      ]
    };
  }

  rpc SetDocumentReminder(SetDocumentReminderRequest) returns (SetDocumentReminderResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc UploadFile(stream resources.file.UploadFileRequest) returns (resources.file.UploadFileResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "UpdateDocument"
    };
  }
}
