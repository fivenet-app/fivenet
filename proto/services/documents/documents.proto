syntax = "proto3";

package services.documents;

import "resources/common/content/content.proto";
import "resources/common/database/database.proto";
import "resources/documents/access.proto";
import "resources/documents/activity.proto";
import "resources/documents/category.proto";
import "resources/documents/comment.proto";
import "resources/documents/documents.proto";
import "resources/documents/pins.proto";
import "resources/documents/requests.proto";
import "resources/documents/templates.proto";
import "resources/file/file.proto";
import "resources/file/filestore.proto";
import "resources/timestamp/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/documents;documents";

// Templates ==================================================================

message ListTemplatesRequest {}

message ListTemplatesResponse {
  repeated resources.documents.TemplateShort templates = 1;
}

message GetTemplateRequest {
  uint64 template_id = 1;
  optional resources.documents.TemplateData data = 2;
  optional bool render = 3;
}

message GetTemplateResponse {
  resources.documents.Template template = 1;
  bool rendered = 2;
}

message CreateTemplateRequest {
  resources.documents.Template template = 1 [(validate.rules).message.required = true];
}

message CreateTemplateResponse {
  uint64 id = 1;
}

message UpdateTemplateRequest {
  resources.documents.Template template = 1 [(validate.rules).message.required = true];
}

message UpdateTemplateResponse {
  resources.documents.Template template = 1;
}

message DeleteTemplateRequest {
  uint64 id = 1;
}

message DeleteTemplateResponse {}

// Documents ==================================================================

message ListDocumentsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  optional string search = 3 [(validate.rules).string.max_len = 64];
  repeated uint64 category_ids = 4 [(validate.rules).repeated.max_items = 5];
  repeated int32 creator_ids = 5 [(validate.rules).repeated.max_items = 5];
  optional resources.timestamp.Timestamp from = 6;
  optional resources.timestamp.Timestamp to = 7;
  optional bool closed = 8;
  repeated uint64 document_ids = 9 [(validate.rules).repeated.max_items = 5];
  // Controls inclusion of drafts in the result:
  // - unset/null: include all documents (drafts and non-drafts)
  // - false: only non-draft documents
  // - true: only draft documents
  optional bool only_drafts = 10;
}

message ListDocumentsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(validate.rules).message.required = true];
  repeated resources.documents.DocumentShort documents = 2;
}

message GetDocumentRequest {
  uint64 document_id = 1;
  optional bool info_only = 2;
}

message GetDocumentResponse {
  resources.documents.Document document = 1;
  resources.documents.DocumentAccess access = 2;
}

message GetDocumentReferencesRequest {
  uint64 document_id = 1;
}

message GetDocumentReferencesResponse {
  repeated resources.documents.DocumentReference references = 1; // @gotags: alias:"reference"
}

message GetDocumentRelationsRequest {
  uint64 document_id = 1;
}

message GetDocumentRelationsResponse {
  repeated resources.documents.DocumentRelation relations = 1; // @gotags: alias:"relation"
}

message AddDocumentReferenceRequest {
  resources.documents.DocumentReference reference = 1 [(validate.rules).message.required = true];
}

message AddDocumentReferenceResponse {
  uint64 id = 1;
}

message RemoveDocumentReferenceRequest {
  uint64 id = 1;
}

message RemoveDocumentReferenceResponse {}

message AddDocumentRelationRequest {
  resources.documents.DocumentRelation relation = 1 [(validate.rules).message.required = true];
}

message AddDocumentRelationResponse {
  uint64 id = 1;
}

message RemoveDocumentRelationRequest {
  uint64 id = 1;
}

message RemoveDocumentRelationResponse {}

// Comments ===============================================================

message GetCommentsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  uint64 document_id = 2;
}

message GetCommentsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.documents.Comment comments = 2;
}

message PostCommentRequest {
  resources.documents.Comment comment = 1 [(validate.rules).message.required = true];
}

message PostCommentResponse {
  resources.documents.Comment comment = 1;
}

message EditCommentRequest {
  resources.documents.Comment comment = 1 [(validate.rules).message.required = true];
}

message EditCommentResponse {
  resources.documents.Comment comment = 1;
}

message DeleteCommentRequest {
  uint64 comment_id = 1;
}

message DeleteCommentResponse {}

message UpdateDocumentResponse {
  resources.documents.Document document = 1;
}

message DeleteDocumentRequest {
  uint64 document_id = 1; // @gotags: alias:"id"
  // @sanitize: method=StripTags
  optional string reason = 2 [(validate.rules).string.max_len = 255];
}

message DeleteDocumentResponse {}

message ToggleDocumentRequest {
  uint64 document_id = 1;
  bool closed = 2;
}

message ToggleDocumentResponse {}

message ChangeDocumentOwnerRequest {
  uint64 document_id = 1;
  optional int32 new_user_id = 2;
}

message ChangeDocumentOwnerResponse {}

message CreateDocumentRequest {
  resources.common.content.ContentType content_type = 1 [(validate.rules).enum.defined_only = true];
  optional uint64 template_id = 2;
  optional resources.documents.TemplateData template_data = 3;
}

message CreateDocumentResponse {
  uint64 id = 1;
}

message UpdateDocumentRequest {
  uint64 document_id = 1; // @gotags: alias:"id"
  optional uint64 category_id = 2;
  // @sanitize: method=StripTags
  string title = 3 [(validate.rules).string = {
    min_len: 3,
    max_len: 255
  }]; // @gotags: alias:"title"
  // @sanitize
  resources.common.content.Content content = 4;
  resources.common.content.ContentType content_type = 5 [(validate.rules).enum.defined_only = true];
  optional string data = 6 [(validate.rules).string = {
    max_bytes: 1000000 // 1 Megabyte
  }];
  // @sanitize
  string state = 7 [(validate.rules).string.max_len = 32];
  bool closed = 8;
  bool draft = 9;
  bool public = 10;
  optional resources.documents.DocumentAccess access = 11;
  repeated resources.file.File files = 12; // @gotags: alias:"files"
}

// Document Activity and Requests =============================================

message ListDocumentActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  uint64 document_id = 2;
  // Search params
  repeated resources.documents.DocActivityType activity_types = 3 [(validate.rules).repeated = {
    max_items: 10,
    items: { enum: { in: [13,14,15,16,17,18] }}
  }];
}

message ListDocumentActivityResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.documents.DocActivity activity = 2;
}

message ListDocumentReqsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  uint64 document_id = 2;
}

message ListDocumentReqsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.documents.DocRequest requests = 2;
}

message CreateDocumentReqRequest {
  uint64 document_id = 1;
  resources.documents.DocActivityType request_type = 2 [(validate.rules).enum = {in: [13,14,15,16,17,18]}];
  // @sanitize
  optional string reason = 3 [(validate.rules).string.max_len = 255];
  optional resources.documents.DocActivityData data = 4;
}

message CreateDocumentReqResponse {
  resources.documents.DocRequest request = 1;
}

message UpdateDocumentReqRequest {
  uint64 document_id = 1;
  uint64 request_id = 2;
  // @sanitize
  optional string reason = 3 [(validate.rules).string.max_len = 255];
  optional resources.documents.DocActivityData data = 4;
  bool accepted = 5;
}

message UpdateDocumentReqResponse {
  resources.documents.DocRequest request = 1;
}

message DeleteDocumentReqRequest {
  uint64 request_id = 1;
}

message DeleteDocumentReqResponse {}

// Access =====================================================================

message GetDocumentAccessRequest {
  uint64 document_id = 1;
}

message GetDocumentAccessResponse {
  resources.documents.DocumentAccess access = 1 [(validate.rules).message.required = true];
}

message SetDocumentAccessRequest {
  uint64 document_id = 1;
  resources.documents.DocumentAccess access = 2 [(validate.rules).message.required = true];
}

message SetDocumentAccessResponse {}

message ListUserDocumentsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  optional resources.common.database.Sort sort = 2;
  int32 user_id = 3 [(validate.rules).int32.gt = 0];
  repeated resources.documents.DocRelation relations = 4 [(validate.rules).repeated.max_items = 3];
  optional bool closed = 5;
}

message ListUserDocumentsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.documents.DocumentRelation relations = 2;
}

// Categories =================================================================

message ListCategoriesRequest {}

message ListCategoriesResponse {
  repeated resources.documents.Category categories = 1;
}

message CreateOrUpdateCategoryRequest {
  resources.documents.Category category = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateCategoryResponse {
  resources.documents.Category category = 1 [(validate.rules).message.required = true];
}

message DeleteCategoryRequest {
  uint64 id = 1;
}

message DeleteCategoryResponse {}

// Pins =======================================================================

message ListDocumentPinsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  // If true, only personal pins are returned
  optional bool personal = 2;
}

message ListDocumentPinsResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.documents.DocumentShort documents = 2;
}

message ToggleDocumentPinRequest {
  uint64 document_id = 1;
  bool state = 2;
  // If true, the pin is personal and not shared with other job members
  optional bool personal = 3;
}

message ToggleDocumentPinResponse {
  optional resources.documents.DocumentPin pin = 1; // @gotags: alias:"pin"
}

// Reminders ==================================================================

message SetDocumentReminderRequest {
  uint64 document_id = 1;
  optional resources.timestamp.Timestamp reminder_time = 2;
  // @sanitize: method=StripTags
  optional string message = 3 [(validate.rules).string.max_bytes = 1024];
}

message SetDocumentReminderResponse {}

service DocumentsService {
  // @perm
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse);
  // @perm: Name=ListTemplates
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse);
  // @perm
  rpc CreateTemplate(CreateTemplateRequest) returns (CreateTemplateResponse);
  // @perm: Name=CreateTemplate
  rpc UpdateTemplate(UpdateTemplateRequest) returns (UpdateTemplateResponse);
  // @perm
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse);

  // @perm
  rpc ListDocuments(ListDocumentsRequest) returns (ListDocumentsResponse);
  // @perm: Name=ListDocuments
  rpc GetDocument(GetDocumentRequest) returns (GetDocumentResponse);
  // @perm: Name=UpdateDocument
  rpc CreateDocument(CreateDocumentRequest) returns (CreateDocumentResponse);
  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc UpdateDocument(UpdateDocumentRequest) returns (UpdateDocumentResponse);
  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc DeleteDocument(DeleteDocumentRequest) returns (DeleteDocumentResponse);

  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc ToggleDocument(ToggleDocumentRequest) returns (ToggleDocumentResponse);

  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc ChangeDocumentOwner(ChangeDocumentOwnerRequest) returns (ChangeDocumentOwnerResponse);

  // @perm: Name=ListDocuments
  rpc GetDocumentReferences(GetDocumentReferencesRequest) returns (GetDocumentReferencesResponse);
  // @perm: Name=ListDocuments
  rpc GetDocumentRelations(GetDocumentRelationsRequest) returns (GetDocumentRelationsResponse);
  // @perm
  rpc AddDocumentReference(AddDocumentReferenceRequest) returns (AddDocumentReferenceResponse);
  // @perm: Name=AddDocumentReference
  rpc RemoveDocumentReference(RemoveDocumentReferenceRequest) returns (RemoveDocumentReferenceResponse);
  // @perm
  rpc AddDocumentRelation(AddDocumentRelationRequest) returns (AddDocumentRelationResponse);
  // @perm: Name=AddDocumentRelation
  rpc RemoveDocumentRelation(RemoveDocumentRelationRequest) returns (RemoveDocumentRelationResponse);

  // @perm: Name=ListDocuments
  rpc GetComments(GetCommentsRequest) returns (GetCommentsResponse);
  // @perm: Name=ListDocuments
  rpc PostComment(PostCommentRequest) returns (PostCommentResponse);
  // @perm: Name=ListDocuments
  rpc EditComment(EditCommentRequest) returns (EditCommentResponse);
  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse);

  // @perm: Name=ListDocuments
  rpc GetDocumentAccess(GetDocumentAccessRequest) returns (GetDocumentAccessResponse);
  // @perm: Name=UpdateDocument
  rpc SetDocumentAccess(SetDocumentAccessRequest) returns (SetDocumentAccessResponse);

  // @perm
  rpc ListDocumentActivity(ListDocumentActivityRequest) returns (ListDocumentActivityResponse);

  // @perm
  rpc ListDocumentReqs(ListDocumentReqsRequest) returns (ListDocumentReqsResponse);
  // @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
  rpc CreateDocumentReq(CreateDocumentReqRequest) returns (CreateDocumentReqResponse);
  // @perm: Name=CreateDocumentReq
  rpc UpdateDocumentReq(UpdateDocumentReqRequest) returns (UpdateDocumentReqResponse);
  // @perm
  rpc DeleteDocumentReq(DeleteDocumentReqRequest) returns (DeleteDocumentReqResponse);

  // @perm
  rpc ListUserDocuments(ListUserDocumentsRequest) returns (ListUserDocumentsResponse);

  // @perm
  rpc ListCategories(ListCategoriesRequest) returns (ListCategoriesResponse);
  // @perm
  rpc CreateOrUpdateCategory(CreateOrUpdateCategoryRequest) returns (CreateOrUpdateCategoryResponse);
  // @perm
  rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse);

  // @perm: Name=ListDocuments
  rpc ListDocumentPins(ListDocumentPinsRequest) returns (ListDocumentPinsResponse);
  // @perm: Attrs=Types/StringList:[]string{"JobWide"}
  rpc ToggleDocumentPin(ToggleDocumentPinRequest) returns (ToggleDocumentPinResponse);

  // @perm
  rpc SetDocumentReminder(SetDocumentReminderRequest) returns (SetDocumentReminderResponse);

  // @perm: Name=UpdateDocument
  rpc UploadFile(stream resources.file.UploadPacket) returns (resources.file.UploadResponse);
}
