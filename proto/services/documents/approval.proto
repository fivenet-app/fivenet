syntax = "proto3";

package services.documents;

import "buf/validate/validate.proto";
import "resources/common/database/database.proto";
import "resources/documents/approval.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/documents;documents";

message ApprovalPanelSnapshot {
  int64 document_id = 1;
  // Smallest incomplete order
  int32 current_order = 2;
  // With aggregates
  repeated resources.documents.ApprovalStage stages = 3;
  repeated resources.documents.ApprovalTask pending_tasks = 4;

  bool all_required_stages_satisfied = 5;
  bool any_declined = 6;
}

message StartReviewRequest {
  string document_id = 1;
  // Optional override
  resources.documents.OnEditBehavior on_edit_behavior = 2;
}

message StartReviewResponse {
  string policy_id = 1;
  ApprovalPanelSnapshot panel = 2;
}

message GetApprovalPanelRequest {
  string document_id = 1;
}

message GetApprovalPanelResponse {
  ApprovalPanelSnapshot panel = 1;
}

message ListMyApprovalTasksRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Default: PENDING
  repeated resources.documents.ApprovalTaskStatus status = 2;
}

message ListMyApprovalTasksResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.documents.ApprovalTask tasks = 2;
}

message DecisionApprove {
  string comment = 1 [(buf.validate.field).string.max_len = 255];
}

message DecisionDecline {
  string reason = 1 [(buf.validate.field).string.max_len = 255];
}

message DecideApprovalTaskRequest {
  string task_id = 1;

  oneof decision {
    DecisionApprove approve = 10;
    DecisionDecline decline = 11;
  }
}

message DecideApprovalTaskResponse {
  resources.documents.ApprovalTask updated = 1;
  bool stage_completed = 2;
  bool document_now_approved = 3;
  // Updated snapshot for optimistic UI
  ApprovalPanelSnapshot panel = 4;
}

// Leader UX: add or cancel reviewer tasks on the fly
message AddReviewersRequest {
  int64 document_id = 1;
  // Who to add
  resources.documents.PartySelector selector = 2;
  // Optional: convert to a parallel stage if needed
  int32 quorum_any = 3;
  // Optional: attach to existing stage
  int64 stage_id = 4;
}
message AddReviewersResponse {
  repeated resources.documents.ApprovalTask created_tasks = 1;
  ApprovalPanelSnapshot panel = 2;
}

message CancelReviewTasksRequest {
  int64 document_id = 1;
  repeated string task_ids = 2;
  string reason = 3 [(buf.validate.field).string.max_len = 255];
}
message CancelReviewTasksResponse {
  repeated resources.documents.ApprovalTask cancelled = 1;
  ApprovalPanelSnapshot panel = 2;
}

service ApprovalService {
  rpc StartReview(StartReviewRequest) returns (StartReviewResponse);
  rpc GetApprovalPanel(GetApprovalPanelRequest) returns (GetApprovalPanelResponse);

  rpc ListMyApprovalTasks(ListMyApprovalTasksRequest) returns (ListMyApprovalTasksResponse);
  rpc DecideApprovalTask(DecideApprovalTaskRequest) returns (DecideApprovalTaskResponse);

  // Light-weight mutations leaders will need:
  rpc AddReviewers(AddReviewersRequest) returns (AddReviewersResponse);
  rpc CancelReviewTasks(CancelReviewTasksRequest) returns (CancelReviewTasksResponse);
}
