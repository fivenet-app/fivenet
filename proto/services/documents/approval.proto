syntax = "proto3";

package services.documents;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "resources/documents/approval.proto";
import "resources/timestamp/timestamp.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/documents;documents";

message GetApprovalPolicyRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
}

message GetApprovalPolicyResponse {
  resources.documents.ApprovalPolicy policy = 1;
}

message UpsertApprovalPolicyRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
  resources.documents.ApprovalRuleKind rule_kind = 2 [(buf.validate.field).enum.defined_only = true];
  // Used if rule_kind=QUORUM_ANY
  int32 required_count = 3;
  resources.documents.OnEditBehavior on_edit_behavior = 4 [(buf.validate.field).enum.defined_only = true];
  optional resources.timestamp.Timestamp due_at = 5;
}

message UpsertApprovalPolicyResponse {
  resources.documents.ApprovalPolicy policy = 1;
}

message StartApprovalRoundRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
  // If omitted, server uses now
  resources.timestamp.Timestamp snapshot_date = 2;
}

message StartApprovalRoundResponse {
  resources.documents.ApprovalPolicy policy = 1;
  repeated resources.documents.ApprovalTask tasks = 2 [(codegen.itemslen.enabled) = true];
}

message CompleteApprovalRoundRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
}

message CompleteApprovalRoundResponse {
  resources.documents.ApprovalPolicy policy = 1;
}

message ListApprovalTasksRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
  // Search
  repeated resources.documents.ApprovalTaskStatus statuses = 2 [(buf.validate.field).repeated.max_items = 4];
}

message ListApprovalTasksResponse {
  repeated resources.documents.ApprovalTask tasks = 1 [(codegen.itemslen.enabled) = true];
}

message DecideApprovalTaskRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 task_id = 2 [(buf.validate.field).int64.gt = 0];
  resources.documents.ApprovalTaskStatus new_status = 3 [(buf.validate.field).enum.defined_only = true]; // APPROVED or DECLINED
  string comment = 4 [(buf.validate.field).string.max_len = 500];
}

message DecideApprovalTaskResponse {
  resources.documents.ApprovalTask task = 1;
  resources.documents.ApprovalPolicy policy = 2; // Counters updated
}

message ReopenApprovalTaskRequest {
  int64 task_id = 1 [(buf.validate.field).int64.gt = 0];
  string reason = 2 [(buf.validate.field).string.max_len = 255];
}

message ReopenApprovalTaskResponse {
  resources.documents.ApprovalTask task = 1;
  resources.documents.ApprovalPolicy policy = 2;
}

message RecomputeApprovalPolicyCountersRequest {
  int64 document_id = 1 [(buf.validate.field).int64.gt = 0];
}

message RecomputeApprovalPolicyCountersResponse {
  resources.documents.ApprovalPolicy policy = 1;
}

service ApprovalService {
  option (codegen.perms.perms_svc) = {
    order: 52
    icon: "i-mdi-approval"
  };

  // Policy
  rpc GetApprovalPolicy(GetApprovalPolicyRequest) returns (GetApprovalPolicyResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      service: "documents.DocumentsService"
      name: "ListDocuments"
    };
  }
  rpc UpsertApprovalPolicy(UpsertApprovalPolicyRequest) returns (UpsertApprovalPolicyResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc StartApprovalRound(StartApprovalRoundRequest) returns (StartApprovalRoundResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      service: "documents.DocumentsService"
      name: "ListDocuments"
    };
  }
  rpc CompleteApprovalRound(CompleteApprovalRoundRequest) returns (CompleteApprovalRoundResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      service: "documents.DocumentsService"
      name: "ListDocuments"
    };
  }

  // Tasks
  rpc ListApprovalTasks(ListApprovalTasksRequest) returns (ListApprovalTasksResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      service: "documents.DocumentsService"
      name: "ListDocuments"
    };
  }
  rpc DecideApprovalTask(DecideApprovalTaskRequest) returns (DecideApprovalTaskResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      service: "documents.DocumentsService"
      name: "ListDocuments"
    };
  }
  rpc ReopenApprovalTask(ReopenApprovalTaskRequest) returns (ReopenApprovalTaskResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  // Helpers
  rpc RecomputeApprovalPolicyCounters(RecomputeApprovalPolicyCountersRequest) returns (RecomputeApprovalPolicyCountersResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "UpsertApprovalPolicy"
    };
  }
}
