syntax = "proto3";

package services.sync;

import "resources/centrum/dispatches.proto";
import "resources/jobs/activity.proto";
import "resources/sync/activity.proto";
import "resources/sync/data.proto";
import "resources/users/activity.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/sync;sync";

message GetStatusRequest {}

message GetStatusResponse {
  resources.sync.DataStatus jobs = 1;
  resources.sync.DataStatus licenses = 2;

  resources.sync.DataStatus users = 3;
  resources.sync.DataStatus vehicles = 4;
}

message AddActivityRequest {
  oneof activity {
    option (validate.required) = true;

    resources.sync.UserOAuth2Conn user_oauth2 = 1;

    resources.centrum.Dispatch dispatch = 2;

    // User activity
    resources.users.UserActivity user_activity = 3;
    // Setting props will cause activity to be created automtically
    resources.sync.UserProps user_props = 4;

    // Jobs user activity
    resources.jobs.JobsUserActivity jobs_user_activity = 5;
    // Setting props will cause activity to be created automtically
    resources.sync.JobsUserProps jobs_user_props = 6;
    // Timeclock user entry
    resources.sync.TimeclockUpdate jobs_timeclock = 7;

    // User/Char info updates that aren't tracked by activity (yet)
    resources.sync.UserUpdate user_update = 8;
  }
}

message AddActivityResponse {}

message RegisterAccountRequest {
  string identifier = 1 [(validate.rules).string.max_len = 64];
  bool reset_token = 2;
  optional int32 last_char_id = 3 [(validate.rules).int32.gt = 0];
}

message RegisterAccountResponse {
  optional string reg_token = 1 [(validate.rules).string = {
    len: 6,
    pattern: "^[0-9]{6}$",
  }];
  optional uint64 account_id = 2;
  optional string username = 3;
}

message TransferAccountRequest {
  string old_license = 1 [(validate.rules).string.max_len = 64];
  string new_license = 2 [(validate.rules).string.max_len = 64];
}

message TransferAccountResponse {}

message SendDataRequest {
  oneof data {
    option (validate.required) = true;

    resources.sync.DataJobs jobs = 1;
    resources.sync.DataLicenses licenses = 2;

    resources.sync.DataUsers users = 3;
    resources.sync.DataVehicles vehicles = 4;

    resources.sync.DataUserLocations user_locations = 5;
  }
}

message SendDataResponse {
  int64 affected_rows = 1;
}

message DeleteDataRequest {
  oneof data {
    option (validate.required) = true;

    resources.sync.DeleteUsers users = 1;
    resources.sync.DeleteVehicles vehicles = 2;
  }
}

message DeleteDataResponse {
  int64 affected_rows = 1;
}

message StreamRequest {}

message StreamResponse {
  int32 user_id = 1;
}

// Sync Service handles the sync of data (e.g., users, jobs) to this FiveNet instance and API calls
// from the plugin (e.g., user activity, user props changes).
service SyncService {
  // Get basic "sync state" from server side (currently simply the count of records on the server side).
  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);

  // For "tracking" activity such as "user received traffic infraction points", timeclock entries, etc.
  rpc AddActivity(AddActivityRequest) returns (AddActivityResponse);

  // Get registration token for a new user account or return the account id and username, for a given identifier/license.
  rpc RegisterAccount(RegisterAccountRequest) returns (RegisterAccountResponse);
  // Transfer account from one license to another
  rpc TransferAccount(TransferAccountRequest) returns (TransferAccountResponse);

  // DBSync's method of sending (mass) data to the FiveNet server for storing.
  rpc SendData(SendDataRequest) returns (SendDataResponse);
  // Way for the gameserver to delete certain data as well
  rpc DeleteData(DeleteDataRequest) returns (DeleteDataResponse);

  // Used for the server to stream events to the dbsync (e.g., "refresh" of user/char data)
  rpc Stream(StreamRequest) returns (stream StreamResponse);
}
