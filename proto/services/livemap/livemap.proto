syntax = "proto3";

package services.livemap;

import "buf/validate/validate.proto";
import "codegen/perms/perms.proto";
import "resources/jobs/jobs.proto";
import "resources/livemap/marker_marker.proto";
import "resources/livemap/user_marker.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/livemap;livemap";

message StreamRequest {}

message StreamResponse {
  optional bool user_on_duty = 1;

  oneof data {
    option (buf.validate.oneof).required = true;

    JobsList jobs = 2;
    MarkerMarkersUpdates markers = 3;
    Snapshot snapshot = 4;
    UserUpdates user_updates = 5;
    UserDeletes user_deletes = 6;
  }
}

message JobsList {
  repeated resources.jobs.Job users = 1;
  repeated resources.jobs.Job markers = 2;
}

message MarkerMarkersUpdates {
  repeated resources.livemap.MarkerMarker updated = 1;
  repeated int64 deleted = 2;
  int32 part = 3;
  bool partial = 4;
}

// A roll-up of the entire USERLOC bucket.
// Published every N seconds on `$KV.user_locations._snapshot`
// with the headers:
//   Nats-Rollup: all
//   KV-Operation: ROLLUP
message Snapshot {
  // All currently-known user markers, already filtered for
  // obsolete PURGE/DELETE events.
  repeated resources.livemap.UserMarker markers = 1;
}

message UserUpdates {
  repeated resources.livemap.UserMarker updates = 1;
}

message UserDeletes {
  repeated UserDelete deletes = 1;
}

message UserDelete {
  // The user ID of an user marker that was deleted.
  int32 id = 1;

  // The job of the user that was deleted.
  string job = 2;
}

message CreateOrUpdateMarkerRequest {
  resources.livemap.MarkerMarker marker = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateMarkerResponse {
  resources.livemap.MarkerMarker marker = 1;
}

message DeleteMarkerRequest {
  int64 id = 1;
}

message DeleteMarkerResponse {}

service LivemapService {
  rpc Stream(StreamRequest) returns (stream StreamResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Markers"
          type: ATTRIBUTE_TYPE_JOB_LIST
        },
        {
          key: "Players"
          type: ATTRIBUTE_TYPE_JOB_GRADE_LIST
        }
      ]
    };
  }

  rpc CreateOrUpdateMarker(CreateOrUpdateMarkerRequest) returns (CreateOrUpdateMarkerResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }
  rpc DeleteMarker(DeleteMarkerRequest) returns (DeleteMarkerResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        }
      ]
    };
  }
}
