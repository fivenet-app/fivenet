syntax = "proto3";

package services.internet;

import "resources/internet/domain.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/gen/go/proto/services/internet;internet";

message CheckDomainAvailabilityRequest {
  // @sanitize: method=StripTags
  string name = 1 [(validate.rules).string = {
    min_len: 3,
    max_len: 60
  }];
}

message CheckDomainAvailabilityResponse {
  bool available = 1;
}

message ListDomainsRequest {}

message ListDomainsResponse {
  repeated resources.internet.Domain domains = 1;
}

message RegisterDomainRequest {
  // @sanitize: method=StripTags
  string name = 1 [(validate.rules).string = {
    min_len: 3,
    max_len: 60
  }];
}

message RegisterDomainResponse {
  resources.internet.Domain domain = 1;
}

message UpdateDomainRequest {
  resources.internet.Domain domain = 1;
}

message UpdateDomainResponse {
  resources.internet.Domain domain = 1;
}

message TransferDomainRequest {
  uint64 domain_id = 1;
  optional bool accept = 2;
}

message TransferDomainResponse {}

service DomainService {
  // @perm: Name=Any
  rpc CheckDomainAvailability(CheckDomainAvailabilityRequest) returns (CheckDomainAvailabilityResponse);

  // @perm: Name=Any
  rpc ListDomains(ListDomainsRequest) returns (ListDomainsResponse);
  // @perm: Name=Any
  rpc RegisterDomain(RegisterDomainRequest) returns (RegisterDomainResponse);
  // @perm: Name=Any
  rpc UpdateDomain(UpdateDomainRequest) returns (UpdateDomainResponse);
  // @perm: Name=Any
  rpc TransferDomain(TransferDomainRequest) returns (TransferDomainResponse);
}
