syntax = "proto3";

package services.wiki;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "resources/common/content/content.proto";
import "resources/common/database/database.proto";
import "resources/file/filestore.proto";
import "resources/wiki/activity.proto";
import "resources/wiki/page.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/wiki;wiki";

message ListPagesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  optional string job = 3 [(buf.validate.field).string.max_len = 50];
  optional bool root_only = 4;
  optional string search = 5 [(buf.validate.field).string.max_len = 64];
}

message ListPagesResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.wiki.PageShort pages = 2 [(codegen.itemslen.enabled) = true];
}

message GetPageRequest {
  int64 id = 1;
}

message GetPageResponse {
  resources.wiki.Page page = 1;
}

message CreatePageRequest {
  optional int64 parent_id = 1 [(buf.validate.field).int64.gt = 0];
  resources.common.content.ContentType content_type = 2 [(buf.validate.field).enum.defined_only = true];
}

message CreatePageResponse {
  string job = 1;
  int64 id = 2;
}

message UpdatePageRequest {
  resources.wiki.Page page = 1 [(buf.validate.field).required = true];
}

message UpdatePageResponse {
  resources.wiki.Page page = 1;
}

message DeletePageRequest {
  int64 id = 1;
}

message DeletePageResponse {}

message ListPageActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 page_id = 2;
}

message ListPageActivityResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.wiki.PageActivity activity = 2 [(codegen.itemslen.enabled) = true];
}

service WikiService {
  option (codegen.perms.perms_svc) = {
    order: 110
    icon: "i-mdi-brain"
  };

  rpc ListPages(ListPagesRequest) returns (ListPagesResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetPage(GetPageRequest) returns (GetPageResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListPages"
    };
  }
  rpc CreatePage(CreatePageRequest) returns (CreatePageResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "UpdatePage"
    };
  }
  rpc UpdatePage(UpdatePageRequest) returns (UpdatePageResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Fields"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: ["Public"]
        }
      ]
    };
  }
  rpc DeletePage(DeletePageRequest) returns (DeletePageResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc ListPageActivity(ListPageActivityRequest) returns (ListPageActivityResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }

  rpc UploadFile(stream resources.file.UploadFileRequest) returns (resources.file.UploadFileResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "UpdatePage"
    };
  }
}
