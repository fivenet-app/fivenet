syntax = "proto3";

package services.mailer;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "resources/common/database/database.proto";
import "resources/mailer/email.proto";
import "resources/mailer/message.proto";
import "resources/mailer/settings.proto";
import "resources/mailer/template.proto";
import "resources/mailer/thread.proto";
import "resources/timestamp/timestamp.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/mailer;mailer";

// Emails

message ListEmailsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Search params
  optional bool all = 2;
}

message ListEmailsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.mailer.Email emails = 2 [(codegen.itemslen.items_len) = true];
}

message GetEmailRequest {
  int64 id = 1 [(buf.validate.field).int64.gt = 0];
}

message GetEmailResponse {
  resources.mailer.Email email = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateEmailRequest {
  resources.mailer.Email email = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateEmailResponse {
  resources.mailer.Email email = 1;
}

message DeleteEmailRequest {
  int64 id = 1 [(buf.validate.field).int64.gt = 0];
}

message DeleteEmailResponse {}

message GetEmailProposalsRequest {
  string input = 1 [(buf.validate.field).string.max_len = 40];
  optional bool job = 2;
  optional int32 user_id = 3;
}

message GetEmailProposalsResponse {
  repeated string emails = 1;
  repeated string domains = 2;
}

// Templates

message ListTemplatesRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
}

message ListTemplatesResponse {
  repeated resources.mailer.Template templates = 1;
}

message GetTemplateRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 template_id = 2 [(buf.validate.field).int64.gt = 0];
}

message GetTemplateResponse {
  resources.mailer.Template template = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateTemplateRequest {
  resources.mailer.Template template = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateTemplateResponse {
  resources.mailer.Template template = 1 [(buf.validate.field).required = true];
}

message DeleteTemplateRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 id = 2 [(buf.validate.field).int64.gt = 0];
}

message DeleteTemplateResponse {}

// Threads

message ListThreadsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Search params
  repeated int64 email_ids = 2 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 10
    items: {
      int64: {gt: 0}
    }
  }];
  optional bool unread = 4;
  optional bool archived = 5;
}

message ListThreadsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.mailer.Thread threads = 2 [(codegen.itemslen.items_len) = true];
}

message GetThreadRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 thread_id = 2 [(buf.validate.field).int64.gt = 0];
}

message GetThreadResponse {
  resources.mailer.Thread thread = 1;
}

message CreateThreadRequest {
  resources.mailer.Thread thread = 1 [(buf.validate.field).required = true];
  resources.mailer.Message message = 2 [(buf.validate.field).required = true];
  // @sanitize: method=StripTags
  repeated string recipients = 3 [(buf.validate.field).repeated = {
    min_items: 1
    max_items: 15
    items: {
      string: {
        min_len: 6
        max_len: 80
      }
    }
  }];
}

message CreateThreadResponse {
  resources.mailer.Thread thread = 1;
}

message DeleteThreadRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 thread_id = 2 [(buf.validate.field).int64.gt = 0];
}

message DeleteThreadResponse {}

message GetThreadStateRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 thread_id = 2 [(buf.validate.field).int64.gt = 0];
}

message GetThreadStateResponse {
  resources.mailer.ThreadState state = 1;
}

message SetThreadStateRequest {
  resources.mailer.ThreadState state = 1 [(buf.validate.field).required = true];
}

message SetThreadStateResponse {
  resources.mailer.ThreadState state = 1;
}

message GetEmailSettingsRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
}

message GetEmailSettingsResponse {
  resources.mailer.EmailSettings settings = 1;
}

message SetEmailSettingsRequest {
  resources.mailer.EmailSettings settings = 1 [(buf.validate.field).required = true];
}

message SetEmailSettingsResponse {
  resources.mailer.EmailSettings settings = 1;
}

// Messages

message SearchThreadsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  // Search params
  string search = 2 [(buf.validate.field).string.max_len = 64];
}

message SearchThreadsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.mailer.Message messages = 2 [(codegen.itemslen.items_len) = true];
}

message ListThreadMessagesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 email_id = 2 [(buf.validate.field).int64.gt = 0];
  int64 thread_id = 3 [(buf.validate.field).int64.gt = 0];
  optional resources.timestamp.Timestamp after = 4;
}

message ListThreadMessagesResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.mailer.Message messages = 2 [(codegen.itemslen.items_len) = true];
}

message PostMessageRequest {
  resources.mailer.Message message = 1 [(buf.validate.field).required = true];
  // @sanitize: method=StripTags
  repeated string recipients = 2 [(buf.validate.field).repeated = {
    max_items: 10
    items: {
      string: {
        min_len: 6
        max_len: 80
      }
    }
  }];
}

message PostMessageResponse {
  resources.mailer.Message message = 1;
}

message DeleteMessageRequest {
  int64 email_id = 1 [(buf.validate.field).int64.gt = 0];
  int64 thread_id = 2 [(buf.validate.field).int64.gt = 0];
  int64 message_id = 3 [(buf.validate.field).int64.gt = 0];
}

message DeleteMessageResponse {}

service MailerService {
  rpc ListEmails(ListEmailsRequest) returns (ListEmailsResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetEmail(GetEmailRequest) returns (GetEmailResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc CreateOrUpdateEmail(CreateOrUpdateEmailRequest) returns (CreateOrUpdateEmailResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Fields"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: ["Job"]
        }
      ]
    };
  }
  rpc DeleteEmail(DeleteEmailRequest) returns (DeleteEmailResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetEmailProposals(GetEmailProposalsRequest) returns (GetEmailProposalsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }

  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc CreateOrUpdateTemplate(CreateOrUpdateTemplateRequest) returns (CreateOrUpdateTemplateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }

  rpc ListThreads(ListThreadsRequest) returns (ListThreadsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc GetThread(GetThreadRequest) returns (GetThreadResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc CreateThread(CreateThreadRequest) returns (CreateThreadResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc DeleteThread(DeleteThreadRequest) returns (DeleteThreadResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "Superuser"
    };
  }
  rpc GetThreadState(GetThreadStateRequest) returns (GetThreadStateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc SetThreadState(SetThreadStateRequest) returns (SetThreadStateResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }

  rpc SearchThreads(SearchThreadsRequest) returns (SearchThreadsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc ListThreadMessages(ListThreadMessagesRequest) returns (ListThreadMessagesResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc PostMessage(PostMessageRequest) returns (PostMessageResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "Superuser"
    };
  }

  rpc GetEmailSettings(GetEmailSettingsRequest) returns (GetEmailSettingsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
  rpc SetEmailSettings(SetEmailSettingsRequest) returns (SetEmailSettingsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListEmails"
    };
  }
}
