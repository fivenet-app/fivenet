

syntax = "proto3";

package services.mailer;

import "resources/common/database/database.proto";
import "resources/mailer/email.proto";
import "resources/mailer/message.proto";
import "resources/mailer/settings.proto";
import "resources/mailer/template.proto";
import "resources/mailer/thread.proto";
import "resources/timestamp/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/mailer;mailer";

// Emails

message ListEmailsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  optional bool all = 2;
}

message ListEmailsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(validate.rules).message.required = true];
  repeated resources.mailer.Email emails = 2;
}

message GetEmailRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

message GetEmailResponse {
  resources.mailer.Email email = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateEmailRequest {
  resources.mailer.Email email = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateEmailResponse {
  resources.mailer.Email email = 1;
}

message DeleteEmailRequest {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
}

message DeleteEmailResponse {}

message GetEmailProposalsRequest {
  string input = 1 [(validate.rules).string.max_len = 40];
  optional bool job = 2;
  optional int32 user_id = 3;
}

message GetEmailProposalsResponse {
  repeated string emails = 1;
  repeated string domains = 2;
}

// Templates

message ListTemplatesRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
}

message ListTemplatesResponse {
  repeated resources.mailer.Template templates = 1;
}

message GetTemplateRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 template_id = 2 [(validate.rules).uint64.gt = 0];
}

message GetTemplateResponse {
  resources.mailer.Template template = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateTemplateRequest {
  resources.mailer.Template template = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateTemplateResponse {
  resources.mailer.Template template = 1 [(validate.rules).message.required = true];
}

message DeleteTemplateRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 id = 2 [(validate.rules).uint64.gt = 0];
}

message DeleteTemplateResponse {}

// Threads

message ListThreadsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  repeated uint64 email_ids = 2 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 10,
    items: { uint64: { gt: 0 } },
  }];
  optional bool unread = 4;
  optional bool archived = 5;
}

message ListThreadsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(validate.rules).message.required = true];
  repeated resources.mailer.Thread threads = 2;
}

message GetThreadRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 thread_id = 2 [(validate.rules).uint64.gt = 0];
}

message GetThreadResponse {
  resources.mailer.Thread thread = 1;
}

message CreateThreadRequest {
  resources.mailer.Thread thread = 1 [(validate.rules).message.required = true];
  resources.mailer.Message message = 2 [(validate.rules).message.required = true];
  // @sanitize: method=StripTags
  repeated string recipients = 3 [(validate.rules).repeated = {
    min_items: 1,
    max_items: 15,
    items: { string: { min_len: 6, max_len: 80 } },
  }];
}

message CreateThreadResponse {
  resources.mailer.Thread thread = 1;
}

message DeleteThreadRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 thread_id = 2 [(validate.rules).uint64.gt = 0];
}

message DeleteThreadResponse {}

message GetThreadStateRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 thread_id = 2 [(validate.rules).uint64.gt = 0];
}

message GetThreadStateResponse {
  resources.mailer.ThreadState state = 1;
}

message SetThreadStateRequest {
  resources.mailer.ThreadState state = 1 [(validate.rules).message.required = true];
}

message SetThreadStateResponse {
  resources.mailer.ThreadState state = 1;
}

message GetEmailSettingsRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
}

message GetEmailSettingsResponse {
  resources.mailer.EmailSettings settings = 1;
}

message SetEmailSettingsRequest {
  resources.mailer.EmailSettings settings = 1 [(validate.rules).message.required = true];
}

message SetEmailSettingsResponse {
  resources.mailer.EmailSettings settings = 1;
}

// Messages

message SearchThreadsRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  // Search params
  string search = 2 [(validate.rules).string.max_len = 64];
}

message SearchThreadsResponse {
  resources.common.database.PaginationResponse pagination = 1 [(validate.rules).message.required = true];
  repeated resources.mailer.Message messages = 2;
}

message ListThreadMessagesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  uint64 email_id = 2 [(validate.rules).uint64.gt = 0];
  uint64 thread_id = 3 [(validate.rules).uint64.gt = 0];
  optional resources.timestamp.Timestamp after = 4;
}

message ListThreadMessagesResponse {
  resources.common.database.PaginationResponse pagination = 1 [(validate.rules).message.required = true];
  repeated resources.mailer.Message messages = 2;
}

message PostMessageRequest {
  resources.mailer.Message message = 1 [(validate.rules).message.required = true];
  // @sanitize: method=StripTags
  repeated string recipients = 2 [(validate.rules).repeated = {
    max_items: 10,
    items: { string: { min_len: 6, max_len: 80 } },
  }];
}

message PostMessageResponse {
  resources.mailer.Message message = 1;
}

message DeleteMessageRequest {
  uint64 email_id = 1 [(validate.rules).uint64.gt = 0];
  uint64 thread_id = 2 [(validate.rules).uint64.gt = 0];
  uint64 message_id = 3 [(validate.rules).uint64.gt = 0];
}

message DeleteMessageResponse {}

service MailerService {
  // @perm
  rpc ListEmails(ListEmailsRequest) returns (ListEmailsResponse);
  // @perm: Name=ListEmails
  rpc GetEmail(GetEmailRequest) returns (GetEmailResponse);
  // @perm: Attrs=Fields/StringList:[]string{"Job"}
  rpc CreateOrUpdateEmail(CreateOrUpdateEmailRequest) returns (CreateOrUpdateEmailResponse);
  // @perm
  rpc DeleteEmail(DeleteEmailRequest) returns (DeleteEmailResponse);
  // @perm: Name=ListEmails
  rpc GetEmailProposals(GetEmailProposalsRequest) returns (GetEmailProposalsResponse);

  // @perm: Name=ListEmails
  rpc ListTemplates(ListTemplatesRequest) returns (ListTemplatesResponse);
  // @perm: Name=ListEmails
  rpc GetTemplate(GetTemplateRequest) returns (GetTemplateResponse);
  // @perm: Name=ListEmails
  rpc CreateOrUpdateTemplate(CreateOrUpdateTemplateRequest) returns (CreateOrUpdateTemplateResponse);
  // @perm: Name=ListEmails
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateResponse);

  // @perm: Name=ListEmails
  rpc ListThreads(ListThreadsRequest) returns (ListThreadsResponse);
  // @perm: Name=ListEmails
  rpc GetThread(GetThreadRequest) returns (GetThreadResponse);
  // @perm: Name=ListEmails
  rpc CreateThread(CreateThreadRequest) returns (CreateThreadResponse);
  // @perm: Name=Superuser
  rpc DeleteThread(DeleteThreadRequest) returns (DeleteThreadResponse);
  // @perm: Name=ListEmails
  rpc GetThreadState(GetThreadStateRequest) returns (GetThreadStateResponse);
  // @perm: Name=ListEmails
  rpc SetThreadState(SetThreadStateRequest) returns (SetThreadStateResponse);

  // @perm: Name=ListEmails
  rpc SearchThreads(SearchThreadsRequest) returns (SearchThreadsResponse);
  // @perm: Name=ListEmails
  rpc ListThreadMessages(ListThreadMessagesRequest) returns (ListThreadMessagesResponse);
  // @perm: Name=ListEmails
  rpc PostMessage(PostMessageRequest) returns (PostMessageResponse);
  // @perm: Name=Superuser
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);

  // @perm: Name=ListEmails
  rpc GetEmailSettings(GetEmailSettingsRequest) returns (GetEmailSettingsResponse);
  // @perm: Name=ListEmails
  rpc SetEmailSettings(SetEmailSettingsRequest) returns (SetEmailSettingsResponse);
}
