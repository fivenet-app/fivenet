syntax = "proto3";

package services.centrum;

import "buf/validate/validate.proto";
import "resources/centrum/dispatchers.proto";
import "resources/centrum/dispatches.proto";
import "resources/centrum/settings.proto";
import "resources/centrum/units.proto";
import "resources/common/database/database.proto";
import "resources/jobs/jobs.proto";
import "resources/livemap/heatmap.proto";
import "resources/timestamp/timestamp.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/centrum;centrum";

// Common

message ListDispatchActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 id = 2;
}

message ListUnitActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  int64 id = 2;
}

message GetSettingsRequest {}

message GetSettingsResponse {
  resources.centrum.Settings settings = 1;
  resources.centrum.EffectiveAccess effective_access = 2;
}

message UpdateSettingsRequest {
  resources.centrum.Settings settings = 1;
}

message UpdateSettingsResponse {
  resources.centrum.Settings settings = 1;
}

// Unit Management

message ListUnitsRequest {
  repeated resources.centrum.StatusUnit status = 1 [(buf.validate.field).repeated.items.enum.defined_only = true];
}

message ListUnitsResponse {
  repeated resources.centrum.Unit units = 1;
}

message CreateOrUpdateUnitRequest {
  resources.centrum.Unit unit = 1 [(buf.validate.field).required = true];
}

message CreateOrUpdateUnitResponse {
  resources.centrum.Unit unit = 1;
}

message DeleteUnitRequest {
  int64 unit_id = 1;
}

message DeleteUnitResponse {}

message UpdateUnitStatusRequest {
  int64 unit_id = 1;
  resources.centrum.StatusUnit status = 2 [(buf.validate.field).enum.defined_only = true];
  // @sanitize
  optional string reason = 3 [(buf.validate.field).string.max_len = 255];
  // @sanitize
  optional string code = 4 [(buf.validate.field).string.max_len = 20];
}

message UpdateUnitStatusResponse {}

message AssignUnitRequest {
  int64 unit_id = 1;
  repeated int32 to_add = 2;
  repeated int32 to_remove = 3;
}

message AssignUnitResponse {}

message GetDispatchHeatmapRequest {}

message GetDispatchHeatmapResponse {
  int32 max_entries = 1;
  repeated resources.livemap.HeatmapEntry entries = 2;
}

message UpdateDispatchersRequest {
  repeated int32 to_remove = 1 [(buf.validate.field).repeated.max_items = 10];
}

message UpdateDispatchersResponse {
  resources.centrum.Dispatchers dispatchers = 1;
}

message ListUnitActivityResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.centrum.UnitStatus activity = 2;
}

// Dispatch Management

message TakeControlRequest {
  bool signon = 1;
}

message TakeControlResponse {}

message ListDispatchesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  repeated resources.centrum.StatusDispatch status = 2 [(buf.validate.field).repeated.items.enum.defined_only = true];
  repeated resources.centrum.StatusDispatch not_status = 3 [(buf.validate.field).repeated.items.enum.defined_only = true];
  repeated int64 ids = 4 [(buf.validate.field).repeated.max_items = 10];
  optional string postal = 5 [(buf.validate.field).string.max_len = 12];
}

message ListDispatchesResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.centrum.Dispatch dispatches = 2;
}

message GetDispatchRequest {
  int64 id = 1 [(buf.validate.field).int64.gt = 0];
}

message GetDispatchResponse {
  resources.centrum.Dispatch dispatch = 1;
}

message CreateDispatchRequest {
  resources.centrum.Dispatch dispatch = 1 [(buf.validate.field).required = true];
}

message CreateDispatchResponse {
  resources.centrum.Dispatch dispatch = 1;
}

message UpdateDispatchRequest {
  resources.centrum.Dispatch dispatch = 1 [(buf.validate.field).required = true];
}

message UpdateDispatchResponse {
  resources.centrum.Dispatch dispatch = 1;
}

message DeleteDispatchRequest {
  int64 id = 1 [(buf.validate.field).int64.gt = 0];
}

message DeleteDispatchResponse {}

message ListDispatchTargetJobsRequest {}

message ListDispatchTargetJobsResponse {
  repeated resources.jobs.Job jobs = 1;
}

message UpdateDispatchStatusRequest {
  int64 dispatch_id = 1;
  resources.centrum.StatusDispatch status = 2 [(buf.validate.field).enum.defined_only = true];
  // @sanitize
  optional string reason = 3 [(buf.validate.field).string.max_len = 255];
  // @sanitize
  optional string code = 4;
}

message UpdateDispatchStatusResponse {}

message AssignDispatchRequest {
  int64 dispatch_id = 1;
  repeated int64 to_add = 2;
  repeated int64 to_remove = 3;
  optional bool forced = 4;
}

message AssignDispatchResponse {}

message ListDispatchActivityResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.centrum.DispatchStatus activity = 2;
}

message JoinUnitRequest {
  optional int64 unit_id = 1;
}

message JoinUnitResponse {
  resources.centrum.Unit unit = 1;
}

message TakeDispatchRequest {
  repeated int64 dispatch_ids = 1 [(buf.validate.field).repeated.min_items = 1];
  resources.centrum.TakeDispatchResp resp = 2 [(buf.validate.field).enum.defined_only = true];
  // @sanitize
  optional string reason = 3 [(buf.validate.field).string.max_len = 255];
}

message TakeDispatchResponse {}

message StreamHandshake {
  resources.timestamp.Timestamp server_time = 1;
  resources.centrum.Settings settings = 2;
  resources.centrum.EffectiveAccess access = 3;
}

message LatestState {
  resources.centrum.JobDispatchers dispatchers = 1;
  optional int64 own_unit_id = 2;
  // Send the current units and dispatches
  repeated resources.centrum.Unit units = 3;
  repeated resources.centrum.Dispatch dispatches = 4;
}

message StreamRequest {}

message StreamResponse {
  oneof change {
    option (buf.validate.oneof).required = true;

    StreamHandshake handshake = 1;
    LatestState latest_state = 2;

    resources.centrum.Settings settings = 3;
    resources.centrum.EffectiveAccess access = 4;
    resources.centrum.Dispatchers dispatchers = 5;

    int64 unit_deleted = 6;
    resources.centrum.Unit unit_updated = 7;
    resources.centrum.UnitStatus unit_status = 8;

    int64 dispatch_deleted = 9;
    resources.centrum.Dispatch dispatch_updated = 10;
    resources.centrum.DispatchStatus dispatch_status = 11;
  }
}

service CentrumService {
  // @perm: Attrs=Access/StringList:[]string{"Shared", "Public"}
  rpc UpdateSettings(UpdateSettingsRequest) returns (UpdateSettingsResponse);

  // @perm
  rpc CreateDispatch(CreateDispatchRequest) returns (CreateDispatchResponse);
  // @perm
  rpc UpdateDispatch(UpdateDispatchRequest) returns (UpdateDispatchResponse);
  // @perm
  rpc DeleteDispatch(DeleteDispatchRequest) returns (DeleteDispatchResponse);

  // @perm: Name=CreateDispatch
  rpc ListDispatchTargetJobs(ListDispatchTargetJobsRequest) returns (ListDispatchTargetJobsResponse);

  // @perm
  rpc TakeControl(TakeControlRequest) returns (TakeControlResponse);
  // @perm: Name=TakeControl
  rpc AssignDispatch(AssignDispatchRequest) returns (AssignDispatchResponse);
  // @perm: Name=TakeControl
  rpc AssignUnit(AssignUnitRequest) returns (AssignUnitResponse);
  // @perm: Name=TakeControl
  rpc GetDispatchHeatmap(GetDispatchHeatmapRequest) returns (GetDispatchHeatmapResponse);

  // @perm
  rpc UpdateDispatchers(UpdateDispatchersRequest) returns (UpdateDispatchersResponse);

  // @perm
  rpc Stream(StreamRequest) returns (stream StreamResponse);

  // @perm: Name=Stream
  rpc GetSettings(GetSettingsRequest) returns (GetSettingsResponse);

  // @perm: Name=Stream
  rpc JoinUnit(JoinUnitRequest) returns (JoinUnitResponse);
  // @perm: Name=Stream
  rpc ListUnits(ListUnitsRequest) returns (ListUnitsResponse);
  // @perm: Name=Stream
  rpc ListUnitActivity(ListUnitActivityRequest) returns (ListUnitActivityResponse);

  // @perm: Name=Stream
  rpc GetDispatch(GetDispatchRequest) returns (GetDispatchResponse);
  // @perm: Name=Stream
  rpc ListDispatches(ListDispatchesRequest) returns (ListDispatchesResponse);
  // @perm: Name=Stream
  rpc ListDispatchActivity(ListDispatchActivityRequest) returns (ListDispatchActivityResponse);

  // @perm
  rpc CreateOrUpdateUnit(CreateOrUpdateUnitRequest) returns (CreateOrUpdateUnitResponse);
  // @perm
  rpc DeleteUnit(DeleteUnitRequest) returns (DeleteUnitResponse);

  // @perm
  rpc TakeDispatch(TakeDispatchRequest) returns (TakeDispatchResponse);
  // @perm: Name=TakeDispatch
  rpc UpdateUnitStatus(UpdateUnitStatusRequest) returns (UpdateUnitStatusResponse);
  // @perm: Name=TakeDispatch
  rpc UpdateDispatchStatus(UpdateDispatchStatusRequest) returns (UpdateDispatchStatusResponse);
}
