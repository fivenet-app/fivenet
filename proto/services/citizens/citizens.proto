syntax = "proto3";

package services.citizens;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "resources/common/database/database.proto";
import "resources/file/filestore.proto";
import "resources/users/activity.proto";
import "resources/users/labels.proto";
import "resources/users/props.proto";
import "resources/users/users.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/citizens;citizens";

message ListCitizensRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  string search = 3 [(buf.validate.field).string.max_len = 64];
  optional bool wanted = 4;
  optional string phone_number = 5 [(buf.validate.field).string.max_len = 20];
  optional uint32 traffic_infraction_points = 6;
  optional string dateofbirth = 7 [(buf.validate.field).string.max_len = 10];
  optional int64 open_fines = 8;
}

message ListCitizensResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.users.User users = 2 [(codegen.itemslen.items_len) = true];
}

message GetUserRequest {
  int32 user_id = 1 [(buf.validate.field).int32.gt = 0];
  optional bool info_only = 2;
}

message GetUserResponse {
  resources.users.User user = 1;
}

message ListUserActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  int32 user_id = 3 [(buf.validate.field).int32.gt = 0];
  repeated resources.users.UserActivityType types = 4 [(buf.validate.field).repeated.max_items = 20];
}

message ListUserActivityResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.users.UserActivity activity = 2 [(codegen.itemslen.items_len) = true];
}

message SetUserPropsRequest {
  resources.users.UserProps props = 1 [(buf.validate.field).required = true];
  // @sanitize
  string reason = 2 [
    (buf.validate.field).string = {
      min_len: 3
      max_len: 255
    },
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
}

message SetUserPropsResponse {
  resources.users.UserProps props = 1;
}

message DeleteAvatarRequest {}

message DeleteAvatarResponse {}

message DeleteMugshotRequest {
  int32 user_id = 1 [(buf.validate.field).int32.gt = 0];
  // @sanitize
  string reason = 2 [
    (buf.validate.field).string = {
      min_len: 3
      max_len: 255
    },
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
}

message DeleteMugshotResponse {}

message ManageLabelsRequest {
  repeated resources.users.Label labels = 1;
}

message ManageLabelsResponse {
  repeated resources.users.Label labels = 1;
}

service CitizensService {
  rpc ListCitizens(ListCitizensRequest) returns (ListCitizensResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Fields"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "PhoneNumber",
            "Licenses",
            "UserProps.Wanted",
            "UserProps.Job",
            "UserProps.TrafficInfractionPoints",
            "UserProps.OpenFines",
            "UserProps.BloodType",
            "UserProps.Mugshot",
            "UserProps.Labels",
            "UserProps.Email"
          ]
        }
      ]
    };
  }
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Jobs"
          type: ATTRIBUTE_TYPE_JOB_GRADE_LIST
        }
      ]
    };
  }

  rpc ListUserActivity(ListUserActivityRequest) returns (ListUserActivityResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Fields"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "SourceUser",
            "Own"
          ]
        }
      ]
    };
  }

  rpc SetUserProps(SetUserPropsRequest) returns (SetUserPropsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Fields"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Wanted",
            "Job",
            "TrafficInfractionPoints",
            "Mugshot",
            "Labels"
          ]
        }
      ]
    };
  }

  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc UploadAvatar(stream resources.file.UploadFileRequest) returns (resources.file.UploadFileResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "Any"
    };
  }
  rpc DeleteAvatar(DeleteAvatarRequest) returns (DeleteAvatarResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "Any"
    };
  }

  // buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
  // buf:lint:ignore RPC_REQUEST_STANDARD_NAME
  // buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
  rpc UploadMugshot(stream resources.file.UploadFileRequest) returns (resources.file.UploadFileResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "SetUserProps"
    };
  }
  rpc DeleteMugshot(DeleteMugshotRequest) returns (DeleteMugshotResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "SetUserProps"
    };
  }

  rpc ManageLabels(ManageLabelsRequest) returns (ManageLabelsResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
}
