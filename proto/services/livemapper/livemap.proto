syntax = "proto3";

package services.livemapper;

import "resources/livemap/livemap.proto";
import "resources/users/jobs.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/gen/go/proto/services/livemapper;livemapper";

message StreamRequest {}

message StreamResponse {
  oneof data {
    option (validate.required) = true;

    JobsList jobs = 1;
    MarkerMarkersUpdates markers = 2;
    UserMarkersUpdates users = 3;
  }

  optional bool user_on_duty = 4;
}

message JobsList {
  repeated resources.users.Job users = 1;
  repeated resources.users.Job markers = 2;
}

message MarkerMarkersUpdates {
  repeated resources.livemap.MarkerMarker updated = 1;
  repeated uint64 deleted = 2;
  bool partial = 3;
}

message UserMarkersUpdates {
  repeated resources.livemap.UserMarker updated = 1;
  repeated int32 deleted = 2;
  int32 part = 3;
  bool partial = 4;
}

message CreateOrUpdateMarkerRequest {
  resources.livemap.MarkerMarker marker = 1 [(validate.rules).message.required = true];
}

message CreateOrUpdateMarkerResponse {
  resources.livemap.MarkerMarker marker = 1;
}

message DeleteMarkerRequest {
  uint64 id = 1;
}

message DeleteMarkerResponse {}

service LivemapperService {
  // @perm: Attrs=Markers/JobList|Players/JobGradeList
  rpc Stream(StreamRequest) returns (stream StreamResponse);

  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc CreateOrUpdateMarker(CreateOrUpdateMarkerRequest) returns (CreateOrUpdateMarkerResponse);
  // @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
  rpc DeleteMarker(DeleteMarkerRequest) returns (DeleteMarkerResponse);
}
