syntax = "proto3";

package services.jobs;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "resources/common/database/database.proto";
import "resources/jobs/activity.proto";
import "resources/jobs/colleagues.proto";
import "resources/jobs/labels.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/jobs;jobs";

// Colleagues

message ListColleaguesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  string search = 3 [(buf.validate.field).string.max_len = 64];
  repeated int32 user_ids = 4 [(buf.validate.field).repeated.items.int32.gte = 0];
  optional bool user_only = 5;
  optional bool absent = 6;
  repeated int64 label_ids = 7;
  optional string name_prefix = 8 [(buf.validate.field).string.max_len = 12];
  optional string name_suffix = 9 [(buf.validate.field).string.max_len = 12];
}

message ListColleaguesResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.jobs.Colleague colleagues = 2 [(codegen.itemslen.items_len) = true];
}

message GetSelfRequest {}

message GetSelfResponse {
  resources.jobs.Colleague colleague = 1;
}

message GetColleagueRequest {
  int32 user_id = 1 [(buf.validate.field).int32.gte = 0];
  optional bool info_only = 2;
}

message GetColleagueResponse {
  resources.jobs.Colleague colleague = 1;
}

message ListColleagueActivityRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  repeated int32 user_ids = 3;
  repeated resources.jobs.ColleagueActivityType activity_types = 4 [(buf.validate.field).repeated.max_items = 10];
}

message ListColleagueActivityResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.jobs.ColleagueActivity activity = 2 [(codegen.itemslen.items_len) = true];
}

message SetColleaguePropsRequest {
  resources.jobs.ColleagueProps props = 1;
  // @sanitize
  string reason = 2 [
    (buf.validate.field).string = {
      min_len: 3
      max_len: 255
    },
    (buf.validate.field).ignore = IGNORE_IF_ZERO_VALUE
  ];
}

message SetColleaguePropsResponse {
  resources.jobs.ColleagueProps props = 1;
}

message GetColleagueLabelsRequest {
  optional string search = 1 [(buf.validate.field).string.max_len = 32];
}

message GetColleagueLabelsResponse {
  repeated resources.jobs.Label labels = 1;
}

message ManageLabelsRequest {
  repeated resources.jobs.Label labels = 1;
}

message ManageLabelsResponse {
  repeated resources.jobs.Label labels = 1;
}

message GetColleagueLabelsStatsRequest {
  repeated int64 label_ids = 1;
}

message GetColleagueLabelsStatsResponse {
  repeated resources.jobs.LabelCount count = 1;
}

// MOTD

message GetMOTDRequest {}

message GetMOTDResponse {
  string motd = 1;
}

message SetMOTDRequest {
  // @sanitize: method=StripTags
  string motd = 1 [(buf.validate.field).string.max_len = 1024];
}

message SetMOTDResponse {
  string motd = 1;
}

service JobsService {
  rpc ListColleagues(ListColleaguesRequest) returns (ListColleaguesResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetSelf(GetSelfRequest) returns (GetSelfResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListColleagues"
    };
  }

  rpc GetColleague(GetColleagueRequest) returns (GetColleagueResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        },
        {
          key: "Types"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Note",
            "Labels"
          ]
        }
      ]
    };
  }
  rpc ListColleagueActivity(ListColleagueActivityRequest) returns (ListColleagueActivityResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Types"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "HIRED",
            "FIRED",
            "PROMOTED",
            "DEMOTED",
            "ABSENCE_DATE",
            "NOTE",
            "LABELS",
            "NAME"
          ]
        }
      ]
    };
  }
  rpc SetColleagueProps(SetColleaguePropsRequest) returns (SetColleaguePropsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "Own",
            "Lower_Rank",
            "Same_Rank",
            "Any"
          ]
        },
        {
          key: "Types"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: [
            "AbsenceDate",
            "Note",
            "Labels",
            "Name"
          ]
        }
      ]
    };
  }
  rpc GetColleagueLabels(GetColleagueLabelsRequest) returns (GetColleagueLabelsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "GetColleague"
    };
  }
  rpc ManageLabels(ManageLabelsRequest) returns (ManageLabelsResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
  rpc GetColleagueLabelsStats(GetColleagueLabelsStatsRequest) returns (GetColleagueLabelsStatsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "GetColleague"
    };
  }

  rpc GetMOTD(GetMOTDRequest) returns (GetMOTDResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "Any"
    };
  }
  rpc SetMOTD(SetMOTDRequest) returns (SetMOTDResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
}
