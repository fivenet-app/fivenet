syntax = "proto3";

package services.jobs;

import "resources/common/database/database.proto";
import "resources/jobs/colleagues.proto";
import "resources/jobs/timeclock.proto";
import "resources/timestamp/timestamp.proto";
import "validate/validate.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/jobs;jobs";

// Time Clock

message ListTimeclockRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  resources.jobs.TimeclockUserMode user_mode = 3;
  resources.jobs.TimeclockMode mode = 4;
  optional resources.common.database.DateRange date = 5;
  bool per_day = 6;
  repeated int32 user_ids = 7 [(validate.rules).repeated.max_items = 15];
}

message ListTimeclockResponse {
  resources.common.database.PaginationResponse pagination = 1;
  resources.jobs.TimeclockStats stats = 2;
  repeated resources.jobs.TimeclockWeeklyStats stats_weekly = 3;

  oneof entries {
    option (validate.required) = true;

    TimeclockDay daily = 4;
    TimeclockWeekly weekly = 5;
    TimeclockRange range = 6;
  }
}

message TimeclockDay {
  resources.timestamp.Timestamp date = 1;
  repeated resources.jobs.TimeclockEntry entries = 2;
  int64 sum = 3;
}

message TimeclockWeekly {
  resources.timestamp.Timestamp date = 1; // @gotags: sql:"primary_key"
  repeated resources.jobs.TimeclockEntry entries = 2;
  int64 sum = 3;
}

message TimeclockRange {
  resources.timestamp.Timestamp date = 1; // @gotags: sql:"primary_key"
  repeated resources.jobs.TimeclockEntry entries = 2;
  int64 sum = 3;
}

message GetTimeclockStatsRequest {
  optional int32 user_id = 1 [(validate.rules).int32.gte = 0];
}

message GetTimeclockStatsResponse {
  resources.jobs.TimeclockStats stats = 1;
  repeated resources.jobs.TimeclockWeeklyStats weekly = 2;
}

message ListInactiveEmployeesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(validate.rules).message.required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  int32 days = 3 [(validate.rules).int32.gte = 1];
}

message ListInactiveEmployeesResponse {
  resources.common.database.PaginationResponse pagination = 1;
  repeated resources.jobs.Colleague colleagues = 2;
}

service JobsTimeclockService {
  // @perm: Attrs=Access/StringList:[]string{"All"}
  rpc ListTimeclock(ListTimeclockRequest) returns (ListTimeclockResponse);
  // @perm: Name=ListTimeclock
  rpc GetTimeclockStats(GetTimeclockStatsRequest) returns (GetTimeclockStatsResponse);

  // @perm
  rpc ListInactiveEmployees(ListInactiveEmployeesRequest) returns (ListInactiveEmployeesResponse);
}
