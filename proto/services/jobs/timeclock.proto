syntax = "proto3";

package services.jobs;

import "buf/validate/validate.proto";
import "codegen/itemslen/itemslen.proto";
import "codegen/perms/perms.proto";
import "resources/common/database/database.proto";
import "resources/jobs/colleagues.proto";
import "resources/jobs/timeclock.proto";
import "resources/timestamp/timestamp.proto";
import "tagger/tagger.proto";

option go_package = "github.com/fivenet-app/fivenet/v2025/gen/go/proto/services/jobs;jobs";

// Time Clock

message ListTimeclockRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  resources.jobs.TimeclockViewMode user_mode = 3;
  resources.jobs.TimeclockMode mode = 4;
  optional resources.common.database.DateRange date = 5;
  bool per_day = 6;
  repeated int32 user_ids = 7 [(buf.validate.field).repeated.max_items = 15];
}

message ListTimeclockResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  resources.jobs.TimeclockStats stats = 2;
  repeated resources.jobs.TimeclockWeeklyStats stats_weekly = 3;

  oneof entries {
    option (buf.validate.oneof).required = true;

    TimeclockDay daily = 4;
    TimeclockWeekly weekly = 5;
    TimeclockRange range = 6;
  }
}

message TimeclockDay {
  resources.timestamp.Timestamp date = 1;
  repeated resources.jobs.TimeclockEntry entries = 2;
  int64 sum = 3;
}

message TimeclockWeekly {
  resources.timestamp.Timestamp date = 1 [(tagger.tags) = "sql:\"primary_key\""];
  repeated resources.jobs.TimeclockEntry entries = 2;
  int64 sum = 3;
}

message TimeclockRange {
  resources.timestamp.Timestamp date = 1 [(tagger.tags) = "sql:\"primary_key\""];
  repeated resources.jobs.TimeclockEntry entries = 2;
  int64 sum = 3;
}

message GetTimeclockStatsRequest {
  optional int32 user_id = 1 [(buf.validate.field).int32.gte = 0];
}

message GetTimeclockStatsResponse {
  resources.jobs.TimeclockStats stats = 1;
  repeated resources.jobs.TimeclockWeeklyStats weekly = 2;
}

message ListInactiveEmployeesRequest {
  resources.common.database.PaginationRequest pagination = 1 [(buf.validate.field).required = true];
  optional resources.common.database.Sort sort = 2;
  // Search params
  int32 days = 3 [(buf.validate.field).int32.gte = 1];
}

message ListInactiveEmployeesResponse {
  resources.common.database.PaginationResponse pagination = 1 [(buf.validate.field).required = true];
  repeated resources.jobs.Colleague colleagues = 2 [(codegen.itemslen.items_len) = true];
}

service TimeclockService {
  rpc ListTimeclock(ListTimeclockRequest) returns (ListTimeclockResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      attrs: [
        {
          key: "Access"
          type: ATTRIBUTE_TYPE_STRING_LIST
          valid_string_list: ["All"]
        }
      ]
    };
  }
  rpc GetTimeclockStats(GetTimeclockStatsRequest) returns (GetTimeclockStatsResponse) {
    option (codegen.perms.perms) = {
      enabled: true
      name: "ListTimeclock"
    };
  }

  rpc ListInactiveEmployees(ListInactiveEmployeesRequest) returns (ListInactiveEmployeesResponse) {
    option (codegen.perms.perms) = {enabled: true};
  }
}
