package main

import (
	"path"
	"slices"
	"strings"
	"text/template"

	pgs "github.com/lyft/protoc-gen-star/v2"
	pgsgo "github.com/lyft/protoc-gen-star/v2/lang/go"
)

// ListSvcMethodsModule
type ListSvcMethodsModule struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
	tpl *template.Template
}

// Permify returns an initialized PermifyPlugin
func ListSvcMethods() *ListSvcMethodsModule {
	return &ListSvcMethodsModule{ModuleBase: &pgs.ModuleBase{}}
}

func (p *ListSvcMethodsModule) InitContext(c pgs.BuildContext) {
	p.ModuleBase.InitContext(c)
	p.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("listsvcmethods").Funcs(fns)

	p.tpl = template.Must(tpl.Parse(listSvcMethodsTpl))
}

// Name satisfies the generator.Plugin interface.
func (p *ListSvcMethodsModule) Name() string { return "listsvcmethods" }

func (p *ListSvcMethodsModule) Execute(
	targets map[string]pgs.File,
	pkgs map[string]pgs.Package,
) []pgs.Artifact {
	visited := map[string][]pgs.File{}
	for _, t := range targets {
		key := t.File().InputPath().Dir().String()
		if _, ok := visited[key]; !ok {
			visited[key] = []pgs.File{t}
			continue
		}

		visited[key] = append(visited[key], t)
	}

	data := struct {
		FS   []pgs.File
		Svcs map[string][]string
	}{
		FS:   []pgs.File{},
		Svcs: map[string][]string{},
	}
	for _, fs := range visited {
		slices.SortFunc(fs, func(a, b pgs.File) int {
			return strings.Compare(a.File().InputPath().String(), b.File().InputPath().String())
		})

		data.FS = append(data.FS, fs...)

		for _, f := range fs {
			for _, s := range f.Services() {
				sName := strings.TrimPrefix(string(s.FullyQualifiedName()), ".services.")

				p.Debugf("Service: %s", sName)

				for _, m := range s.Methods() {
					if _, ok := data.Svcs[sName]; !ok {
						data.Svcs[sName] = []string{}
					}

					data.Svcs[sName] = append(data.Svcs[sName], string(m.Name()))
				}
			}
		}
	}

	slices.SortStableFunc(data.FS, func(a, b pgs.File) int {
		return strings.Compare(a.FullyQualifiedName(), b.FullyQualifiedName())
	})

	p.AddGeneratorTemplateFile(path.Join("svcs.ts"), p.tpl, data)

	return p.Artifacts()
}

const listSvcMethodsTpl = `// Code generated by protoc-gen-fronthelper. DO NOT EDIT.
{{- range $f := .FS }}
// source: {{ $f.File.InputPath }}
{{- end }}

export const grpcServices = [
{{- range $sName, $service := $.Svcs }}
    '{{$sName}}',
{{- end }}
];

export const grpcMethods = [
{{- range $sName, $service := $.Svcs }}
	{{- range $i, $method := $service }}
	'{{ $sName }}/{{ $method }}',
	{{- end }}
{{- end }}
];
`
