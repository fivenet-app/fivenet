package main

import (
	"path"
	"slices"
	"strings"
	"text/template"

	"github.com/fivenet-app/fivenet/v2025/pkg/utils"
	pgs "github.com/lyft/protoc-gen-star/v2"
	pgsgo "github.com/lyft/protoc-gen-star/v2/lang/go"
)

// ClientsModule
type ClientsModule struct {
	*pgs.ModuleBase
	ctx pgsgo.Context
	tpl *template.Template
}

// Permify returns an initialized PermifyPlugin
func Clients() *ClientsModule {
	return &ClientsModule{ModuleBase: &pgs.ModuleBase{}}
}

func (p *ClientsModule) InitContext(c pgs.BuildContext) {
	p.ModuleBase.InitContext(c)
	p.ctx = pgsgo.InitContext(c.Parameters())

	tpl := template.New("clients").Funcs(fns)

	p.tpl = template.Must(tpl.Parse(clientsTpl))
}

// Name satisfies the generator.Plugin interface.
func (p *ClientsModule) Name() string { return "clients" }

type svcClientInfo struct {
	Svc    string
	Client string
	Import string
}

func (p *ClientsModule) Execute(targets map[string]pgs.File, pkgs map[string]pgs.Package) []pgs.Artifact {
	visited := map[string][]pgs.File{}
	for _, t := range targets {
		key := t.File().InputPath().Dir().String()
		if _, ok := visited[key]; !ok {
			visited[key] = []pgs.File{t}
			continue
		}

		visited[key] = append(visited[key], t)
	}

	data := struct {
		FS   []pgs.File
		Svcs map[string][]svcClientInfo
	}{
		FS:   []pgs.File{},
		Svcs: map[string][]svcClientInfo{},
	}
	for _, fs := range visited {
		slices.SortFunc(fs, func(a, b pgs.File) int {
			return strings.Compare(a.File().InputPath().String(), b.File().InputPath().String())
		})

		data.FS = append(data.FS, fs...)

		for _, f := range fs {
			for _, s := range f.Services() {
				sName := string(s.Name())

				categoryName := strings.TrimPrefix(f.File().FullyQualifiedName(), ".services.")

				p.Debugf("Service: %s", sName)

				if _, ok := data.Svcs[categoryName]; !ok {
					data.Svcs[categoryName] = []svcClientInfo{}
				}

				importPath := strings.ReplaceAll(string(s.File().Name()), ".proto", "") + ".client"

				data.Svcs[categoryName] = append(data.Svcs[categoryName], svcClientInfo{
					Svc:    utils.StringFirstToLower(strings.ReplaceAll(sName, "Service", "")),
					Client: sName + "Client",
					Import: importPath,
				})
			}
		}
	}

	slices.SortStableFunc(data.FS, func(a, b pgs.File) int {
		return strings.Compare(a.FullyQualifiedName(), b.FullyQualifiedName())
	})

	p.AddGeneratorTemplateFile(path.Join("clients.ts"), p.tpl, data)

	return p.Artifacts()
}

const clientsTpl = `// Code generated by protoc-gen-fronthelper. DO NOT EDIT.

import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
{{- range $sName, $service := $.Svcs }}{{- range $svc := $service }}
import { {{ $svc.Client }} as {{ $sName }}{{ $svc.Client }} } from '~~/gen/ts/{{ $svc.Import }}';
{{- end }}{{- end }}

export class GRPCClients {
{{- range $sName, $service := $.Svcs }}
    public {{$sName}}: {
    {{- range $svc := $service }}
        {{ $svc.Svc }}: {{ $sName }}{{ $svc.Client }};
    {{- end }}
    };
{{- end }}

    constructor(transport: RpcTransport) {
{{- range $sName, $service := $.Svcs }}
        this.{{ $sName }} = {
        {{- range $svc := $service }}
            {{ $svc.Svc }}: new {{ $sName }}{{ $svc.Client }}(transport),
        {{- end }}
        };
{{- end }}
    }
};
`
