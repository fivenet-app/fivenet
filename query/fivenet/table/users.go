//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Users = newUsersTable("", "users", "")

type usersTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	Identifier  mysql.ColumnString
	Group       mysql.ColumnString
	Job         mysql.ColumnString
	JobGrade    mysql.ColumnInteger
	Firstname   mysql.ColumnString
	Lastname    mysql.ColumnString
	Dateofbirth mysql.ColumnString
	Sex         mysql.ColumnString
	Height      mysql.ColumnString
	PhoneNumber mysql.ColumnString
	Visum       mysql.ColumnInteger
	Playtime    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type UsersTable struct {
	usersTable

	NEW usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		NEW:        newUsersTableImpl("", "new", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		IdentifierColumn  = mysql.StringColumn("identifier")
		GroupColumn       = mysql.StringColumn("group")
		JobColumn         = mysql.StringColumn("job")
		JobGradeColumn    = mysql.IntegerColumn("job_grade")
		FirstnameColumn   = mysql.StringColumn("firstname")
		LastnameColumn    = mysql.StringColumn("lastname")
		DateofbirthColumn = mysql.StringColumn("dateofbirth")
		SexColumn         = mysql.StringColumn("sex")
		HeightColumn      = mysql.StringColumn("height")
		PhoneNumberColumn = mysql.StringColumn("phone_number")
		VisumColumn       = mysql.IntegerColumn("visum")
		PlaytimeColumn    = mysql.IntegerColumn("playtime")
		allColumns        = mysql.ColumnList{IDColumn, IdentifierColumn, GroupColumn, JobColumn, JobGradeColumn, FirstnameColumn, LastnameColumn, DateofbirthColumn, SexColumn, HeightColumn, PhoneNumberColumn, VisumColumn, PlaytimeColumn}
		mutableColumns    = mysql.ColumnList{IDColumn, GroupColumn, JobColumn, JobGradeColumn, FirstnameColumn, LastnameColumn, DateofbirthColumn, SexColumn, HeightColumn, PhoneNumberColumn, VisumColumn, PlaytimeColumn}
		defaultColumns    = mysql.ColumnList{JobColumn, JobGradeColumn}
	)

	return usersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Identifier:  IdentifierColumn,
		Group:       GroupColumn,
		Job:         JobColumn,
		JobGrade:    JobGradeColumn,
		Firstname:   FirstnameColumn,
		Lastname:    LastnameColumn,
		Dateofbirth: DateofbirthColumn,
		Sex:         SexColumn,
		Height:      HeightColumn,
		PhoneNumber: PhoneNumberColumn,
		Visum:       VisumColumn,
		Playtime:    PlaytimeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
