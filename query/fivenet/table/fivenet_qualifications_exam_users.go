//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetQualificationsExamUsers = newFivenetQualificationsExamUsersTable("", "fivenet_qualifications_exam_users", "")

type fivenetQualificationsExamUsersTable struct {
	mysql.Table

	// Columns
	QualificationID mysql.ColumnInteger
	UserID          mysql.ColumnInteger
	CreatedAt       mysql.ColumnTimestamp
	StartedAt       mysql.ColumnTimestamp
	EndsAt          mysql.ColumnTimestamp
	EndedAt         mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetQualificationsExamUsersTable struct {
	fivenetQualificationsExamUsersTable

	NEW fivenetQualificationsExamUsersTable
}

// AS creates new FivenetQualificationsExamUsersTable with assigned alias
func (a FivenetQualificationsExamUsersTable) AS(alias string) *FivenetQualificationsExamUsersTable {
	return newFivenetQualificationsExamUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetQualificationsExamUsersTable with assigned schema name
func (a FivenetQualificationsExamUsersTable) FromSchema(schemaName string) *FivenetQualificationsExamUsersTable {
	return newFivenetQualificationsExamUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetQualificationsExamUsersTable with assigned table prefix
func (a FivenetQualificationsExamUsersTable) WithPrefix(prefix string) *FivenetQualificationsExamUsersTable {
	return newFivenetQualificationsExamUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetQualificationsExamUsersTable with assigned table suffix
func (a FivenetQualificationsExamUsersTable) WithSuffix(suffix string) *FivenetQualificationsExamUsersTable {
	return newFivenetQualificationsExamUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetQualificationsExamUsersTable(schemaName, tableName, alias string) *FivenetQualificationsExamUsersTable {
	return &FivenetQualificationsExamUsersTable{
		fivenetQualificationsExamUsersTable: newFivenetQualificationsExamUsersTableImpl(schemaName, tableName, alias),
		NEW:                                 newFivenetQualificationsExamUsersTableImpl("", "new", ""),
	}
}

func newFivenetQualificationsExamUsersTableImpl(schemaName, tableName, alias string) fivenetQualificationsExamUsersTable {
	var (
		QualificationIDColumn = mysql.IntegerColumn("qualification_id")
		UserIDColumn          = mysql.IntegerColumn("user_id")
		CreatedAtColumn       = mysql.TimestampColumn("created_at")
		StartedAtColumn       = mysql.TimestampColumn("started_at")
		EndsAtColumn          = mysql.TimestampColumn("ends_at")
		EndedAtColumn         = mysql.TimestampColumn("ended_at")
		allColumns            = mysql.ColumnList{QualificationIDColumn, UserIDColumn, CreatedAtColumn, StartedAtColumn, EndsAtColumn, EndedAtColumn}
		mutableColumns        = mysql.ColumnList{CreatedAtColumn, StartedAtColumn, EndsAtColumn, EndedAtColumn}
		defaultColumns        = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetQualificationsExamUsersTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		QualificationID: QualificationIDColumn,
		UserID:          UserIDColumn,
		CreatedAt:       CreatedAtColumn,
		StartedAt:       StartedAtColumn,
		EndsAt:          EndsAtColumn,
		EndedAt:         EndedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
