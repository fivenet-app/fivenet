//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetCentrumDispatches = newFivenetCentrumDispatchesTable("", "fivenet_centrum_dispatches", "")

type fivenetCentrumDispatchesTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp
	Jobs        mysql.ColumnString
	Message     mysql.ColumnString
	Description mysql.ColumnString
	Attributes  mysql.ColumnString
	References  mysql.ColumnString
	X           mysql.ColumnFloat
	Y           mysql.ColumnFloat
	Postal      mysql.ColumnString
	Anon        mysql.ColumnBool
	CreatorID   mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetCentrumDispatchesTable struct {
	fivenetCentrumDispatchesTable

	NEW fivenetCentrumDispatchesTable
}

// AS creates new FivenetCentrumDispatchesTable with assigned alias
func (a FivenetCentrumDispatchesTable) AS(alias string) *FivenetCentrumDispatchesTable {
	return newFivenetCentrumDispatchesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetCentrumDispatchesTable with assigned schema name
func (a FivenetCentrumDispatchesTable) FromSchema(schemaName string) *FivenetCentrumDispatchesTable {
	return newFivenetCentrumDispatchesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetCentrumDispatchesTable with assigned table prefix
func (a FivenetCentrumDispatchesTable) WithPrefix(prefix string) *FivenetCentrumDispatchesTable {
	return newFivenetCentrumDispatchesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetCentrumDispatchesTable with assigned table suffix
func (a FivenetCentrumDispatchesTable) WithSuffix(suffix string) *FivenetCentrumDispatchesTable {
	return newFivenetCentrumDispatchesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetCentrumDispatchesTable(schemaName, tableName, alias string) *FivenetCentrumDispatchesTable {
	return &FivenetCentrumDispatchesTable{
		fivenetCentrumDispatchesTable: newFivenetCentrumDispatchesTableImpl(schemaName, tableName, alias),
		NEW:                           newFivenetCentrumDispatchesTableImpl("", "new", ""),
	}
}

func newFivenetCentrumDispatchesTableImpl(schemaName, tableName, alias string) fivenetCentrumDispatchesTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		JobsColumn        = mysql.StringColumn("jobs")
		MessageColumn     = mysql.StringColumn("message")
		DescriptionColumn = mysql.StringColumn("description")
		AttributesColumn  = mysql.StringColumn("attributes")
		ReferencesColumn  = mysql.StringColumn("references")
		XColumn           = mysql.FloatColumn("x")
		YColumn           = mysql.FloatColumn("y")
		PostalColumn      = mysql.StringColumn("postal")
		AnonColumn        = mysql.BoolColumn("anon")
		CreatorIDColumn   = mysql.IntegerColumn("creator_id")
		allColumns        = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, JobsColumn, MessageColumn, DescriptionColumn, AttributesColumn, ReferencesColumn, XColumn, YColumn, PostalColumn, AnonColumn, CreatorIDColumn}
		mutableColumns    = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, JobsColumn, MessageColumn, DescriptionColumn, AttributesColumn, ReferencesColumn, XColumn, YColumn, PostalColumn, AnonColumn, CreatorIDColumn}
		defaultColumns    = mysql.ColumnList{CreatedAtColumn, AnonColumn}
	)

	return fivenetCentrumDispatchesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		Jobs:        JobsColumn,
		Message:     MessageColumn,
		Description: DescriptionColumn,
		Attributes:  AttributesColumn,
		References:  ReferencesColumn,
		X:           XColumn,
		Y:           YColumn,
		Postal:      PostalColumn,
		Anon:        AnonColumn,
		CreatorID:   CreatorIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
