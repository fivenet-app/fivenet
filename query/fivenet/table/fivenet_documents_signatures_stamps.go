//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsSignaturesStamps = newFivenetDocumentsSignaturesStampsTable("", "fivenet_documents_signatures_stamps", "")

type fivenetDocumentsSignaturesStampsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	Name         mysql.ColumnString
	SvgTemplate  mysql.ColumnString
	VariantsJSON mysql.ColumnString
	SortKey      mysql.ColumnString
	CreatedAt    mysql.ColumnTimestamp
	DeletedAt    mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsSignaturesStampsTable struct {
	fivenetDocumentsSignaturesStampsTable

	NEW fivenetDocumentsSignaturesStampsTable
}

// AS creates new FivenetDocumentsSignaturesStampsTable with assigned alias
func (a FivenetDocumentsSignaturesStampsTable) AS(alias string) *FivenetDocumentsSignaturesStampsTable {
	return newFivenetDocumentsSignaturesStampsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsSignaturesStampsTable with assigned schema name
func (a FivenetDocumentsSignaturesStampsTable) FromSchema(schemaName string) *FivenetDocumentsSignaturesStampsTable {
	return newFivenetDocumentsSignaturesStampsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsSignaturesStampsTable with assigned table prefix
func (a FivenetDocumentsSignaturesStampsTable) WithPrefix(prefix string) *FivenetDocumentsSignaturesStampsTable {
	return newFivenetDocumentsSignaturesStampsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsSignaturesStampsTable with assigned table suffix
func (a FivenetDocumentsSignaturesStampsTable) WithSuffix(suffix string) *FivenetDocumentsSignaturesStampsTable {
	return newFivenetDocumentsSignaturesStampsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsSignaturesStampsTable(schemaName, tableName, alias string) *FivenetDocumentsSignaturesStampsTable {
	return &FivenetDocumentsSignaturesStampsTable{
		fivenetDocumentsSignaturesStampsTable: newFivenetDocumentsSignaturesStampsTableImpl(schemaName, tableName, alias),
		NEW:                                   newFivenetDocumentsSignaturesStampsTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsSignaturesStampsTableImpl(schemaName, tableName, alias string) fivenetDocumentsSignaturesStampsTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		NameColumn         = mysql.StringColumn("name")
		SvgTemplateColumn  = mysql.StringColumn("svg_template")
		VariantsJSONColumn = mysql.StringColumn("variants_json")
		SortKeyColumn      = mysql.StringColumn("sort_key")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		DeletedAtColumn    = mysql.TimestampColumn("deleted_at")
		allColumns         = mysql.ColumnList{IDColumn, NameColumn, SvgTemplateColumn, VariantsJSONColumn, SortKeyColumn, CreatedAtColumn, DeletedAtColumn}
		mutableColumns     = mysql.ColumnList{NameColumn, SvgTemplateColumn, VariantsJSONColumn, SortKeyColumn, CreatedAtColumn, DeletedAtColumn}
		defaultColumns     = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetDocumentsSignaturesStampsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		Name:         NameColumn,
		SvgTemplate:  SvgTemplateColumn,
		VariantsJSON: VariantsJSONColumn,
		SortKey:      SortKeyColumn,
		CreatedAt:    CreatedAtColumn,
		DeletedAt:    DeletedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
