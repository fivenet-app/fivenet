//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetNotifications = newFivenetNotificationsTable("", "fivenet_notifications", "")

type fivenetNotificationsTable struct {
	mysql.Table

	// Columns
	ID        mysql.ColumnInteger
	CreatedAt mysql.ColumnTimestamp
	ReadAt    mysql.ColumnTimestamp
	UserID    mysql.ColumnInteger
	Job       mysql.ColumnString
	Title     mysql.ColumnString
	Type      mysql.ColumnInteger
	Content   mysql.ColumnString
	Category  mysql.ColumnInteger
	Data      mysql.ColumnString
	Starred   mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetNotificationsTable struct {
	fivenetNotificationsTable

	NEW fivenetNotificationsTable
}

// AS creates new FivenetNotificationsTable with assigned alias
func (a FivenetNotificationsTable) AS(alias string) *FivenetNotificationsTable {
	return newFivenetNotificationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetNotificationsTable with assigned schema name
func (a FivenetNotificationsTable) FromSchema(schemaName string) *FivenetNotificationsTable {
	return newFivenetNotificationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetNotificationsTable with assigned table prefix
func (a FivenetNotificationsTable) WithPrefix(prefix string) *FivenetNotificationsTable {
	return newFivenetNotificationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetNotificationsTable with assigned table suffix
func (a FivenetNotificationsTable) WithSuffix(suffix string) *FivenetNotificationsTable {
	return newFivenetNotificationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetNotificationsTable(schemaName, tableName, alias string) *FivenetNotificationsTable {
	return &FivenetNotificationsTable{
		fivenetNotificationsTable: newFivenetNotificationsTableImpl(schemaName, tableName, alias),
		NEW:                       newFivenetNotificationsTableImpl("", "new", ""),
	}
}

func newFivenetNotificationsTableImpl(schemaName, tableName, alias string) fivenetNotificationsTable {
	var (
		IDColumn        = mysql.IntegerColumn("id")
		CreatedAtColumn = mysql.TimestampColumn("created_at")
		ReadAtColumn    = mysql.TimestampColumn("read_at")
		UserIDColumn    = mysql.IntegerColumn("user_id")
		JobColumn       = mysql.StringColumn("job")
		TitleColumn     = mysql.StringColumn("title")
		TypeColumn      = mysql.IntegerColumn("type")
		ContentColumn   = mysql.StringColumn("content")
		CategoryColumn  = mysql.IntegerColumn("category")
		DataColumn      = mysql.StringColumn("data")
		StarredColumn   = mysql.BoolColumn("starred")
		allColumns      = mysql.ColumnList{IDColumn, CreatedAtColumn, ReadAtColumn, UserIDColumn, JobColumn, TitleColumn, TypeColumn, ContentColumn, CategoryColumn, DataColumn, StarredColumn}
		mutableColumns  = mysql.ColumnList{CreatedAtColumn, ReadAtColumn, UserIDColumn, JobColumn, TitleColumn, TypeColumn, ContentColumn, CategoryColumn, DataColumn, StarredColumn}
		defaultColumns  = mysql.ColumnList{CreatedAtColumn, StarredColumn}
	)

	return fivenetNotificationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		CreatedAt: CreatedAtColumn,
		ReadAt:    ReadAtColumn,
		UserID:    UserIDColumn,
		Job:       JobColumn,
		Title:     TitleColumn,
		Type:      TypeColumn,
		Content:   ContentColumn,
		Category:  CategoryColumn,
		Data:      DataColumn,
		Starred:   StarredColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
