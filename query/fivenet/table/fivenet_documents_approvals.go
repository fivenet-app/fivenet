//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsApprovals = newFivenetDocumentsApprovalsTable("", "fivenet_documents_approvals", "")

type fivenetDocumentsApprovalsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	DocumentID   mysql.ColumnInteger
	SnapshotDate mysql.ColumnTimestamp
	TaskID       mysql.ColumnInteger
	UserID       mysql.ColumnInteger
	UserJob      mysql.ColumnString
	UserJobGrade mysql.ColumnInteger
	PayloadSvg   mysql.ColumnString
	StampID      mysql.ColumnInteger
	Status       mysql.ColumnInteger
	Comment      mysql.ColumnString
	CreatedAt    mysql.ColumnTimestamp
	RevokedAt    mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsApprovalsTable struct {
	fivenetDocumentsApprovalsTable

	NEW fivenetDocumentsApprovalsTable
}

// AS creates new FivenetDocumentsApprovalsTable with assigned alias
func (a FivenetDocumentsApprovalsTable) AS(alias string) *FivenetDocumentsApprovalsTable {
	return newFivenetDocumentsApprovalsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsApprovalsTable with assigned schema name
func (a FivenetDocumentsApprovalsTable) FromSchema(schemaName string) *FivenetDocumentsApprovalsTable {
	return newFivenetDocumentsApprovalsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsApprovalsTable with assigned table prefix
func (a FivenetDocumentsApprovalsTable) WithPrefix(prefix string) *FivenetDocumentsApprovalsTable {
	return newFivenetDocumentsApprovalsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsApprovalsTable with assigned table suffix
func (a FivenetDocumentsApprovalsTable) WithSuffix(suffix string) *FivenetDocumentsApprovalsTable {
	return newFivenetDocumentsApprovalsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsApprovalsTable(schemaName, tableName, alias string) *FivenetDocumentsApprovalsTable {
	return &FivenetDocumentsApprovalsTable{
		fivenetDocumentsApprovalsTable: newFivenetDocumentsApprovalsTableImpl(schemaName, tableName, alias),
		NEW:                            newFivenetDocumentsApprovalsTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsApprovalsTableImpl(schemaName, tableName, alias string) fivenetDocumentsApprovalsTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		DocumentIDColumn   = mysql.IntegerColumn("document_id")
		SnapshotDateColumn = mysql.TimestampColumn("snapshot_date")
		TaskIDColumn       = mysql.IntegerColumn("task_id")
		UserIDColumn       = mysql.IntegerColumn("user_id")
		UserJobColumn      = mysql.StringColumn("user_job")
		UserJobGradeColumn = mysql.IntegerColumn("user_job_grade")
		PayloadSvgColumn   = mysql.StringColumn("payload_svg")
		StampIDColumn      = mysql.IntegerColumn("stamp_id")
		StatusColumn       = mysql.IntegerColumn("status")
		CommentColumn      = mysql.StringColumn("comment")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		RevokedAtColumn    = mysql.TimestampColumn("revoked_at")
		allColumns         = mysql.ColumnList{IDColumn, DocumentIDColumn, SnapshotDateColumn, TaskIDColumn, UserIDColumn, UserJobColumn, UserJobGradeColumn, PayloadSvgColumn, StampIDColumn, StatusColumn, CommentColumn, CreatedAtColumn, RevokedAtColumn}
		mutableColumns     = mysql.ColumnList{DocumentIDColumn, SnapshotDateColumn, TaskIDColumn, UserIDColumn, UserJobColumn, UserJobGradeColumn, PayloadSvgColumn, StampIDColumn, StatusColumn, CommentColumn, CreatedAtColumn, RevokedAtColumn}
		defaultColumns     = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetDocumentsApprovalsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DocumentID:   DocumentIDColumn,
		SnapshotDate: SnapshotDateColumn,
		TaskID:       TaskIDColumn,
		UserID:       UserIDColumn,
		UserJob:      UserJobColumn,
		UserJobGrade: UserJobGradeColumn,
		PayloadSvg:   PayloadSvgColumn,
		StampID:      StampIDColumn,
		Status:       StatusColumn,
		Comment:      CommentColumn,
		CreatedAt:    CreatedAtColumn,
		RevokedAt:    RevokedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
