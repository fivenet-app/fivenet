//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocuments = newFivenetDocumentsTable("", "fivenet_documents", "")

type fivenetDocumentsTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp
	DeletedAt   mysql.ColumnTimestamp
	CategoryID  mysql.ColumnInteger
	Title       mysql.ColumnString
	Summary     mysql.ColumnString
	ContentType mysql.ColumnInteger
	Content     mysql.ColumnString
	Data        mysql.ColumnString
	CreatorID   mysql.ColumnInteger
	CreatorJob  mysql.ColumnString
	State       mysql.ColumnString
	Closed      mysql.ColumnBool
	Draft       mysql.ColumnBool
	Public      mysql.ColumnBool
	TemplateID  mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsTable struct {
	fivenetDocumentsTable

	NEW fivenetDocumentsTable
}

// AS creates new FivenetDocumentsTable with assigned alias
func (a FivenetDocumentsTable) AS(alias string) *FivenetDocumentsTable {
	return newFivenetDocumentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsTable with assigned schema name
func (a FivenetDocumentsTable) FromSchema(schemaName string) *FivenetDocumentsTable {
	return newFivenetDocumentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsTable with assigned table prefix
func (a FivenetDocumentsTable) WithPrefix(prefix string) *FivenetDocumentsTable {
	return newFivenetDocumentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsTable with assigned table suffix
func (a FivenetDocumentsTable) WithSuffix(suffix string) *FivenetDocumentsTable {
	return newFivenetDocumentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsTable(schemaName, tableName, alias string) *FivenetDocumentsTable {
	return &FivenetDocumentsTable{
		fivenetDocumentsTable: newFivenetDocumentsTableImpl(schemaName, tableName, alias),
		NEW:                   newFivenetDocumentsTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsTableImpl(schemaName, tableName, alias string) fivenetDocumentsTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		DeletedAtColumn   = mysql.TimestampColumn("deleted_at")
		CategoryIDColumn  = mysql.IntegerColumn("category_id")
		TitleColumn       = mysql.StringColumn("title")
		SummaryColumn     = mysql.StringColumn("summary")
		ContentTypeColumn = mysql.IntegerColumn("content_type")
		ContentColumn     = mysql.StringColumn("content")
		DataColumn        = mysql.StringColumn("data")
		CreatorIDColumn   = mysql.IntegerColumn("creator_id")
		CreatorJobColumn  = mysql.StringColumn("creator_job")
		StateColumn       = mysql.StringColumn("state")
		ClosedColumn      = mysql.BoolColumn("closed")
		DraftColumn       = mysql.BoolColumn("draft")
		PublicColumn      = mysql.BoolColumn("public")
		TemplateIDColumn  = mysql.IntegerColumn("template_id")
		allColumns        = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, CategoryIDColumn, TitleColumn, SummaryColumn, ContentTypeColumn, ContentColumn, DataColumn, CreatorIDColumn, CreatorJobColumn, StateColumn, ClosedColumn, DraftColumn, PublicColumn, TemplateIDColumn}
		mutableColumns    = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, CategoryIDColumn, TitleColumn, SummaryColumn, ContentTypeColumn, ContentColumn, DataColumn, CreatorIDColumn, CreatorJobColumn, StateColumn, ClosedColumn, DraftColumn, PublicColumn, TemplateIDColumn}
		defaultColumns    = mysql.ColumnList{CreatedAtColumn, ClosedColumn, DraftColumn, PublicColumn}
	)

	return fivenetDocumentsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		CategoryID:  CategoryIDColumn,
		Title:       TitleColumn,
		Summary:     SummaryColumn,
		ContentType: ContentTypeColumn,
		Content:     ContentColumn,
		Data:        DataColumn,
		CreatorID:   CreatorIDColumn,
		CreatorJob:  CreatorJobColumn,
		State:       StateColumn,
		Closed:      ClosedColumn,
		Draft:       DraftColumn,
		Public:      PublicColumn,
		TemplateID:  TemplateIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
