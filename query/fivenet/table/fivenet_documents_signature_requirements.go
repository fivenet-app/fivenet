//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsSignatureRequirements = newFivenetDocumentsSignatureRequirementsTable("", "fivenet_documents_signature_requirements", "")

type fivenetDocumentsSignatureRequirementsTable struct {
	mysql.Table

	// Columns
	ID               mysql.ColumnInteger
	DocumentID       mysql.ColumnInteger
	SnapshotDate     mysql.ColumnTimestamp
	Label            mysql.ColumnString
	Required         mysql.ColumnBool
	BindingMode      mysql.ColumnInteger
	AllowedTypesMask mysql.ColumnInteger
	CollectedCount   mysql.ColumnInteger
	RequiredCount    mysql.ColumnInteger
	CreatedAt        mysql.ColumnTimestamp
	UpdatedAt        mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsSignatureRequirementsTable struct {
	fivenetDocumentsSignatureRequirementsTable

	NEW fivenetDocumentsSignatureRequirementsTable
}

// AS creates new FivenetDocumentsSignatureRequirementsTable with assigned alias
func (a FivenetDocumentsSignatureRequirementsTable) AS(alias string) *FivenetDocumentsSignatureRequirementsTable {
	return newFivenetDocumentsSignatureRequirementsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsSignatureRequirementsTable with assigned schema name
func (a FivenetDocumentsSignatureRequirementsTable) FromSchema(schemaName string) *FivenetDocumentsSignatureRequirementsTable {
	return newFivenetDocumentsSignatureRequirementsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsSignatureRequirementsTable with assigned table prefix
func (a FivenetDocumentsSignatureRequirementsTable) WithPrefix(prefix string) *FivenetDocumentsSignatureRequirementsTable {
	return newFivenetDocumentsSignatureRequirementsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsSignatureRequirementsTable with assigned table suffix
func (a FivenetDocumentsSignatureRequirementsTable) WithSuffix(suffix string) *FivenetDocumentsSignatureRequirementsTable {
	return newFivenetDocumentsSignatureRequirementsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsSignatureRequirementsTable(schemaName, tableName, alias string) *FivenetDocumentsSignatureRequirementsTable {
	return &FivenetDocumentsSignatureRequirementsTable{
		fivenetDocumentsSignatureRequirementsTable: newFivenetDocumentsSignatureRequirementsTableImpl(schemaName, tableName, alias),
		NEW: newFivenetDocumentsSignatureRequirementsTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsSignatureRequirementsTableImpl(schemaName, tableName, alias string) fivenetDocumentsSignatureRequirementsTable {
	var (
		IDColumn               = mysql.IntegerColumn("id")
		DocumentIDColumn       = mysql.IntegerColumn("document_id")
		SnapshotDateColumn     = mysql.TimestampColumn("snapshot_date")
		LabelColumn            = mysql.StringColumn("label")
		RequiredColumn         = mysql.BoolColumn("required")
		BindingModeColumn      = mysql.IntegerColumn("binding_mode")
		AllowedTypesMaskColumn = mysql.IntegerColumn("allowed_types_mask")
		CollectedCountColumn   = mysql.IntegerColumn("collected_count")
		RequiredCountColumn    = mysql.IntegerColumn("required_count")
		CreatedAtColumn        = mysql.TimestampColumn("created_at")
		UpdatedAtColumn        = mysql.TimestampColumn("updated_at")
		allColumns             = mysql.ColumnList{IDColumn, DocumentIDColumn, SnapshotDateColumn, LabelColumn, RequiredColumn, BindingModeColumn, AllowedTypesMaskColumn, CollectedCountColumn, RequiredCountColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns         = mysql.ColumnList{DocumentIDColumn, SnapshotDateColumn, LabelColumn, RequiredColumn, BindingModeColumn, AllowedTypesMaskColumn, CollectedCountColumn, RequiredCountColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns         = mysql.ColumnList{RequiredColumn, AllowedTypesMaskColumn, CollectedCountColumn, RequiredCountColumn}
	)

	return fivenetDocumentsSignatureRequirementsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		DocumentID:       DocumentIDColumn,
		SnapshotDate:     SnapshotDateColumn,
		Label:            LabelColumn,
		Required:         RequiredColumn,
		BindingMode:      BindingModeColumn,
		AllowedTypesMask: AllowedTypesMaskColumn,
		CollectedCount:   CollectedCountColumn,
		RequiredCount:    RequiredCountColumn,
		CreatedAt:        CreatedAtColumn,
		UpdatedAt:        UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
