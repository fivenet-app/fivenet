//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetCentrumDispatchesStatus = newFivenetCentrumDispatchesStatusTable("", "fivenet_centrum_dispatches_status", "")

type fivenetCentrumDispatchesStatusTable struct {
	mysql.Table

	// Columns
	ID         mysql.ColumnInteger
	CreatedAt  mysql.ColumnTimestamp
	DispatchID mysql.ColumnInteger
	UnitID     mysql.ColumnInteger
	Status     mysql.ColumnInteger
	Reason     mysql.ColumnString
	Code       mysql.ColumnString
	X          mysql.ColumnFloat
	Y          mysql.ColumnFloat
	Postal     mysql.ColumnString
	UserID     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetCentrumDispatchesStatusTable struct {
	fivenetCentrumDispatchesStatusTable

	NEW fivenetCentrumDispatchesStatusTable
}

// AS creates new FivenetCentrumDispatchesStatusTable with assigned alias
func (a FivenetCentrumDispatchesStatusTable) AS(alias string) *FivenetCentrumDispatchesStatusTable {
	return newFivenetCentrumDispatchesStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetCentrumDispatchesStatusTable with assigned schema name
func (a FivenetCentrumDispatchesStatusTable) FromSchema(schemaName string) *FivenetCentrumDispatchesStatusTable {
	return newFivenetCentrumDispatchesStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetCentrumDispatchesStatusTable with assigned table prefix
func (a FivenetCentrumDispatchesStatusTable) WithPrefix(prefix string) *FivenetCentrumDispatchesStatusTable {
	return newFivenetCentrumDispatchesStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetCentrumDispatchesStatusTable with assigned table suffix
func (a FivenetCentrumDispatchesStatusTable) WithSuffix(suffix string) *FivenetCentrumDispatchesStatusTable {
	return newFivenetCentrumDispatchesStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetCentrumDispatchesStatusTable(schemaName, tableName, alias string) *FivenetCentrumDispatchesStatusTable {
	return &FivenetCentrumDispatchesStatusTable{
		fivenetCentrumDispatchesStatusTable: newFivenetCentrumDispatchesStatusTableImpl(schemaName, tableName, alias),
		NEW:                                 newFivenetCentrumDispatchesStatusTableImpl("", "new", ""),
	}
}

func newFivenetCentrumDispatchesStatusTableImpl(schemaName, tableName, alias string) fivenetCentrumDispatchesStatusTable {
	var (
		IDColumn         = mysql.IntegerColumn("id")
		CreatedAtColumn  = mysql.TimestampColumn("created_at")
		DispatchIDColumn = mysql.IntegerColumn("dispatch_id")
		UnitIDColumn     = mysql.IntegerColumn("unit_id")
		StatusColumn     = mysql.IntegerColumn("status")
		ReasonColumn     = mysql.StringColumn("reason")
		CodeColumn       = mysql.StringColumn("code")
		XColumn          = mysql.FloatColumn("x")
		YColumn          = mysql.FloatColumn("y")
		PostalColumn     = mysql.StringColumn("postal")
		UserIDColumn     = mysql.IntegerColumn("user_id")
		allColumns       = mysql.ColumnList{IDColumn, CreatedAtColumn, DispatchIDColumn, UnitIDColumn, StatusColumn, ReasonColumn, CodeColumn, XColumn, YColumn, PostalColumn, UserIDColumn}
		mutableColumns   = mysql.ColumnList{CreatedAtColumn, DispatchIDColumn, UnitIDColumn, StatusColumn, ReasonColumn, CodeColumn, XColumn, YColumn, PostalColumn, UserIDColumn}
		defaultColumns   = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetCentrumDispatchesStatusTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		CreatedAt:  CreatedAtColumn,
		DispatchID: DispatchIDColumn,
		UnitID:     UnitIDColumn,
		Status:     StatusColumn,
		Reason:     ReasonColumn,
		Code:       CodeColumn,
		X:          XColumn,
		Y:          YColumn,
		Postal:     PostalColumn,
		UserID:     UserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
