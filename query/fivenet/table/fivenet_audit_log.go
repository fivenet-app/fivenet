//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetAuditLog = newFivenetAuditLogTable("", "fivenet_audit_log", "")

type fivenetAuditLogTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	CreatedAt     mysql.ColumnTimestamp
	UserID        mysql.ColumnInteger
	UserJob       mysql.ColumnString
	TargetUserID  mysql.ColumnInteger
	TargetUserJob mysql.ColumnString
	Service       mysql.ColumnString
	Method        mysql.ColumnString
	Action        mysql.ColumnInteger
	Result        mysql.ColumnInteger
	Meta          mysql.ColumnString
	Data          mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetAuditLogTable struct {
	fivenetAuditLogTable

	NEW fivenetAuditLogTable
}

// AS creates new FivenetAuditLogTable with assigned alias
func (a FivenetAuditLogTable) AS(alias string) *FivenetAuditLogTable {
	return newFivenetAuditLogTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetAuditLogTable with assigned schema name
func (a FivenetAuditLogTable) FromSchema(schemaName string) *FivenetAuditLogTable {
	return newFivenetAuditLogTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetAuditLogTable with assigned table prefix
func (a FivenetAuditLogTable) WithPrefix(prefix string) *FivenetAuditLogTable {
	return newFivenetAuditLogTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetAuditLogTable with assigned table suffix
func (a FivenetAuditLogTable) WithSuffix(suffix string) *FivenetAuditLogTable {
	return newFivenetAuditLogTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetAuditLogTable(schemaName, tableName, alias string) *FivenetAuditLogTable {
	return &FivenetAuditLogTable{
		fivenetAuditLogTable: newFivenetAuditLogTableImpl(schemaName, tableName, alias),
		NEW:                  newFivenetAuditLogTableImpl("", "new", ""),
	}
}

func newFivenetAuditLogTableImpl(schemaName, tableName, alias string) fivenetAuditLogTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		CreatedAtColumn     = mysql.TimestampColumn("created_at")
		UserIDColumn        = mysql.IntegerColumn("user_id")
		UserJobColumn       = mysql.StringColumn("user_job")
		TargetUserIDColumn  = mysql.IntegerColumn("target_user_id")
		TargetUserJobColumn = mysql.StringColumn("target_user_job")
		ServiceColumn       = mysql.StringColumn("service")
		MethodColumn        = mysql.StringColumn("method")
		ActionColumn        = mysql.IntegerColumn("action")
		ResultColumn        = mysql.IntegerColumn("result")
		MetaColumn          = mysql.StringColumn("meta")
		DataColumn          = mysql.StringColumn("data")
		allColumns          = mysql.ColumnList{IDColumn, CreatedAtColumn, UserIDColumn, UserJobColumn, TargetUserIDColumn, TargetUserJobColumn, ServiceColumn, MethodColumn, ActionColumn, ResultColumn, MetaColumn, DataColumn}
		mutableColumns      = mysql.ColumnList{CreatedAtColumn, UserIDColumn, UserJobColumn, TargetUserIDColumn, TargetUserJobColumn, ServiceColumn, MethodColumn, ActionColumn, ResultColumn, MetaColumn, DataColumn}
		defaultColumns      = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetAuditLogTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		UserID:        UserIDColumn,
		UserJob:       UserJobColumn,
		TargetUserID:  TargetUserIDColumn,
		TargetUserJob: TargetUserJobColumn,
		Service:       ServiceColumn,
		Method:        MethodColumn,
		Action:        ActionColumn,
		Result:        ResultColumn,
		Meta:          MetaColumn,
		Data:          DataColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
