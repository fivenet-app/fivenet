//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsRelations = newFivenetDocumentsRelationsTable("", "fivenet_documents_relations", "")

type fivenetDocumentsRelationsTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	CreatedAt    mysql.ColumnTimestamp
	DeletedAt    mysql.ColumnTimestamp
	DocumentID   mysql.ColumnInteger
	SourceUserID mysql.ColumnInteger
	Relation     mysql.ColumnInteger
	TargetUserID mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsRelationsTable struct {
	fivenetDocumentsRelationsTable

	NEW fivenetDocumentsRelationsTable
}

// AS creates new FivenetDocumentsRelationsTable with assigned alias
func (a FivenetDocumentsRelationsTable) AS(alias string) *FivenetDocumentsRelationsTable {
	return newFivenetDocumentsRelationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsRelationsTable with assigned schema name
func (a FivenetDocumentsRelationsTable) FromSchema(schemaName string) *FivenetDocumentsRelationsTable {
	return newFivenetDocumentsRelationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsRelationsTable with assigned table prefix
func (a FivenetDocumentsRelationsTable) WithPrefix(prefix string) *FivenetDocumentsRelationsTable {
	return newFivenetDocumentsRelationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsRelationsTable with assigned table suffix
func (a FivenetDocumentsRelationsTable) WithSuffix(suffix string) *FivenetDocumentsRelationsTable {
	return newFivenetDocumentsRelationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsRelationsTable(schemaName, tableName, alias string) *FivenetDocumentsRelationsTable {
	return &FivenetDocumentsRelationsTable{
		fivenetDocumentsRelationsTable: newFivenetDocumentsRelationsTableImpl(schemaName, tableName, alias),
		NEW:                            newFivenetDocumentsRelationsTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsRelationsTableImpl(schemaName, tableName, alias string) fivenetDocumentsRelationsTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		DeletedAtColumn    = mysql.TimestampColumn("deleted_at")
		DocumentIDColumn   = mysql.IntegerColumn("document_id")
		SourceUserIDColumn = mysql.IntegerColumn("source_user_id")
		RelationColumn     = mysql.IntegerColumn("relation")
		TargetUserIDColumn = mysql.IntegerColumn("target_user_id")
		allColumns         = mysql.ColumnList{IDColumn, CreatedAtColumn, DeletedAtColumn, DocumentIDColumn, SourceUserIDColumn, RelationColumn, TargetUserIDColumn}
		mutableColumns     = mysql.ColumnList{CreatedAtColumn, DeletedAtColumn, DocumentIDColumn, SourceUserIDColumn, RelationColumn, TargetUserIDColumn}
		defaultColumns     = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetDocumentsRelationsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CreatedAt:    CreatedAtColumn,
		DeletedAt:    DeletedAtColumn,
		DocumentID:   DocumentIDColumn,
		SourceUserID: SourceUserIDColumn,
		Relation:     RelationColumn,
		TargetUserID: TargetUserIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
