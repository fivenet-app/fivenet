//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetVehiclesProps = newFivenetVehiclesPropsTable("", "fivenet_vehicles_props", "")

type fivenetVehiclesPropsTable struct {
	mysql.Table

	// Columns
	Plate        mysql.ColumnString
	UpdatedAt    mysql.ColumnTimestamp
	Wanted       mysql.ColumnBool
	WantedReason mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetVehiclesPropsTable struct {
	fivenetVehiclesPropsTable

	NEW fivenetVehiclesPropsTable
}

// AS creates new FivenetVehiclesPropsTable with assigned alias
func (a FivenetVehiclesPropsTable) AS(alias string) *FivenetVehiclesPropsTable {
	return newFivenetVehiclesPropsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetVehiclesPropsTable with assigned schema name
func (a FivenetVehiclesPropsTable) FromSchema(schemaName string) *FivenetVehiclesPropsTable {
	return newFivenetVehiclesPropsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetVehiclesPropsTable with assigned table prefix
func (a FivenetVehiclesPropsTable) WithPrefix(prefix string) *FivenetVehiclesPropsTable {
	return newFivenetVehiclesPropsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetVehiclesPropsTable with assigned table suffix
func (a FivenetVehiclesPropsTable) WithSuffix(suffix string) *FivenetVehiclesPropsTable {
	return newFivenetVehiclesPropsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetVehiclesPropsTable(schemaName, tableName, alias string) *FivenetVehiclesPropsTable {
	return &FivenetVehiclesPropsTable{
		fivenetVehiclesPropsTable: newFivenetVehiclesPropsTableImpl(schemaName, tableName, alias),
		NEW:                       newFivenetVehiclesPropsTableImpl("", "new", ""),
	}
}

func newFivenetVehiclesPropsTableImpl(schemaName, tableName, alias string) fivenetVehiclesPropsTable {
	var (
		PlateColumn        = mysql.StringColumn("plate")
		UpdatedAtColumn    = mysql.TimestampColumn("updated_at")
		WantedColumn       = mysql.BoolColumn("wanted")
		WantedReasonColumn = mysql.StringColumn("wanted_reason")
		allColumns         = mysql.ColumnList{PlateColumn, UpdatedAtColumn, WantedColumn, WantedReasonColumn}
		mutableColumns     = mysql.ColumnList{UpdatedAtColumn, WantedColumn, WantedReasonColumn}
		defaultColumns     = mysql.ColumnList{WantedColumn}
	)

	return fivenetVehiclesPropsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Plate:        PlateColumn,
		UpdatedAt:    UpdatedAtColumn,
		Wanted:       WantedColumn,
		WantedReason: WantedReasonColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
