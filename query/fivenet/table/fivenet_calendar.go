//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetCalendar = newFivenetCalendarTable("", "fivenet_calendar", "")

type fivenetCalendarTable struct {
	mysql.Table

	// Columns
	ID          mysql.ColumnInteger
	CreatedAt   mysql.ColumnTimestamp
	UpdatedAt   mysql.ColumnTimestamp
	DeletedAt   mysql.ColumnTimestamp
	Job         mysql.ColumnString
	Name        mysql.ColumnString
	Description mysql.ColumnString
	Public      mysql.ColumnBool
	Closed      mysql.ColumnBool
	Color       mysql.ColumnString
	CreatorID   mysql.ColumnInteger
	CreatorJob  mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetCalendarTable struct {
	fivenetCalendarTable

	NEW fivenetCalendarTable
}

// AS creates new FivenetCalendarTable with assigned alias
func (a FivenetCalendarTable) AS(alias string) *FivenetCalendarTable {
	return newFivenetCalendarTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetCalendarTable with assigned schema name
func (a FivenetCalendarTable) FromSchema(schemaName string) *FivenetCalendarTable {
	return newFivenetCalendarTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetCalendarTable with assigned table prefix
func (a FivenetCalendarTable) WithPrefix(prefix string) *FivenetCalendarTable {
	return newFivenetCalendarTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetCalendarTable with assigned table suffix
func (a FivenetCalendarTable) WithSuffix(suffix string) *FivenetCalendarTable {
	return newFivenetCalendarTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetCalendarTable(schemaName, tableName, alias string) *FivenetCalendarTable {
	return &FivenetCalendarTable{
		fivenetCalendarTable: newFivenetCalendarTableImpl(schemaName, tableName, alias),
		NEW:                  newFivenetCalendarTableImpl("", "new", ""),
	}
}

func newFivenetCalendarTableImpl(schemaName, tableName, alias string) fivenetCalendarTable {
	var (
		IDColumn          = mysql.IntegerColumn("id")
		CreatedAtColumn   = mysql.TimestampColumn("created_at")
		UpdatedAtColumn   = mysql.TimestampColumn("updated_at")
		DeletedAtColumn   = mysql.TimestampColumn("deleted_at")
		JobColumn         = mysql.StringColumn("job")
		NameColumn        = mysql.StringColumn("name")
		DescriptionColumn = mysql.StringColumn("description")
		PublicColumn      = mysql.BoolColumn("public")
		ClosedColumn      = mysql.BoolColumn("closed")
		ColorColumn       = mysql.StringColumn("color")
		CreatorIDColumn   = mysql.IntegerColumn("creator_id")
		CreatorJobColumn  = mysql.StringColumn("creator_job")
		allColumns        = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, JobColumn, NameColumn, DescriptionColumn, PublicColumn, ClosedColumn, ColorColumn, CreatorIDColumn, CreatorJobColumn}
		mutableColumns    = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, DeletedAtColumn, JobColumn, NameColumn, DescriptionColumn, PublicColumn, ClosedColumn, ColorColumn, CreatorIDColumn, CreatorJobColumn}
		defaultColumns    = mysql.ColumnList{CreatedAtColumn, PublicColumn, ClosedColumn, ColorColumn}
	)

	return fivenetCalendarTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,
		DeletedAt:   DeletedAtColumn,
		Job:         JobColumn,
		Name:        NameColumn,
		Description: DescriptionColumn,
		Public:      PublicColumn,
		Closed:      ClosedColumn,
		Color:       ColorColumn,
		CreatorID:   CreatorIDColumn,
		CreatorJob:  CreatorJobColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
