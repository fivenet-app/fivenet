//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetRbacRolesPermissions = newFivenetRbacRolesPermissionsTable("", "fivenet_rbac_roles_permissions", "")

type fivenetRbacRolesPermissionsTable struct {
	mysql.Table

	// Columns
	RoleID       mysql.ColumnInteger
	PermissionID mysql.ColumnInteger
	Val          mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetRbacRolesPermissionsTable struct {
	fivenetRbacRolesPermissionsTable

	NEW fivenetRbacRolesPermissionsTable
}

// AS creates new FivenetRbacRolesPermissionsTable with assigned alias
func (a FivenetRbacRolesPermissionsTable) AS(alias string) *FivenetRbacRolesPermissionsTable {
	return newFivenetRbacRolesPermissionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetRbacRolesPermissionsTable with assigned schema name
func (a FivenetRbacRolesPermissionsTable) FromSchema(schemaName string) *FivenetRbacRolesPermissionsTable {
	return newFivenetRbacRolesPermissionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetRbacRolesPermissionsTable with assigned table prefix
func (a FivenetRbacRolesPermissionsTable) WithPrefix(prefix string) *FivenetRbacRolesPermissionsTable {
	return newFivenetRbacRolesPermissionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetRbacRolesPermissionsTable with assigned table suffix
func (a FivenetRbacRolesPermissionsTable) WithSuffix(suffix string) *FivenetRbacRolesPermissionsTable {
	return newFivenetRbacRolesPermissionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetRbacRolesPermissionsTable(schemaName, tableName, alias string) *FivenetRbacRolesPermissionsTable {
	return &FivenetRbacRolesPermissionsTable{
		fivenetRbacRolesPermissionsTable: newFivenetRbacRolesPermissionsTableImpl(schemaName, tableName, alias),
		NEW:                              newFivenetRbacRolesPermissionsTableImpl("", "new", ""),
	}
}

func newFivenetRbacRolesPermissionsTableImpl(schemaName, tableName, alias string) fivenetRbacRolesPermissionsTable {
	var (
		RoleIDColumn       = mysql.IntegerColumn("role_id")
		PermissionIDColumn = mysql.IntegerColumn("permission_id")
		ValColumn          = mysql.BoolColumn("val")
		allColumns         = mysql.ColumnList{RoleIDColumn, PermissionIDColumn, ValColumn}
		mutableColumns     = mysql.ColumnList{ValColumn}
		defaultColumns     = mysql.ColumnList{}
	)

	return fivenetRbacRolesPermissionsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		RoleID:       RoleIDColumn,
		PermissionID: PermissionIDColumn,
		Val:          ValColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
