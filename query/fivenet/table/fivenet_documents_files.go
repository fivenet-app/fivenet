//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsFiles = newFivenetDocumentsFilesTable("", "fivenet_documents_files", "")

type fivenetDocumentsFilesTable struct {
	mysql.Table

	// Columns
	DocumentID mysql.ColumnInteger
	FileID     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsFilesTable struct {
	fivenetDocumentsFilesTable

	NEW fivenetDocumentsFilesTable
}

// AS creates new FivenetDocumentsFilesTable with assigned alias
func (a FivenetDocumentsFilesTable) AS(alias string) *FivenetDocumentsFilesTable {
	return newFivenetDocumentsFilesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsFilesTable with assigned schema name
func (a FivenetDocumentsFilesTable) FromSchema(schemaName string) *FivenetDocumentsFilesTable {
	return newFivenetDocumentsFilesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsFilesTable with assigned table prefix
func (a FivenetDocumentsFilesTable) WithPrefix(prefix string) *FivenetDocumentsFilesTable {
	return newFivenetDocumentsFilesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsFilesTable with assigned table suffix
func (a FivenetDocumentsFilesTable) WithSuffix(suffix string) *FivenetDocumentsFilesTable {
	return newFivenetDocumentsFilesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsFilesTable(schemaName, tableName, alias string) *FivenetDocumentsFilesTable {
	return &FivenetDocumentsFilesTable{
		fivenetDocumentsFilesTable: newFivenetDocumentsFilesTableImpl(schemaName, tableName, alias),
		NEW:                        newFivenetDocumentsFilesTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsFilesTableImpl(schemaName, tableName, alias string) fivenetDocumentsFilesTable {
	var (
		DocumentIDColumn = mysql.IntegerColumn("document_id")
		FileIDColumn     = mysql.IntegerColumn("file_id")
		allColumns       = mysql.ColumnList{DocumentIDColumn, FileIDColumn}
		mutableColumns   = mysql.ColumnList{}
		defaultColumns   = mysql.ColumnList{}
	)

	return fivenetDocumentsFilesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		DocumentID: DocumentIDColumn,
		FileID:     FileIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
