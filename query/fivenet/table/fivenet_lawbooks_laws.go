//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetLawbooksLaws = newFivenetLawbooksLawsTable("", "fivenet_lawbooks_laws", "")

type fivenetLawbooksLawsTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	CreatedAt     mysql.ColumnTimestamp
	UpdatedAt     mysql.ColumnTimestamp
	LawbookID     mysql.ColumnInteger
	Name          mysql.ColumnString
	Description   mysql.ColumnString
	Hint          mysql.ColumnString
	Fine          mysql.ColumnInteger
	DetentionTime mysql.ColumnInteger
	StvoPoints    mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetLawbooksLawsTable struct {
	fivenetLawbooksLawsTable

	NEW fivenetLawbooksLawsTable
}

// AS creates new FivenetLawbooksLawsTable with assigned alias
func (a FivenetLawbooksLawsTable) AS(alias string) *FivenetLawbooksLawsTable {
	return newFivenetLawbooksLawsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetLawbooksLawsTable with assigned schema name
func (a FivenetLawbooksLawsTable) FromSchema(schemaName string) *FivenetLawbooksLawsTable {
	return newFivenetLawbooksLawsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetLawbooksLawsTable with assigned table prefix
func (a FivenetLawbooksLawsTable) WithPrefix(prefix string) *FivenetLawbooksLawsTable {
	return newFivenetLawbooksLawsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetLawbooksLawsTable with assigned table suffix
func (a FivenetLawbooksLawsTable) WithSuffix(suffix string) *FivenetLawbooksLawsTable {
	return newFivenetLawbooksLawsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetLawbooksLawsTable(schemaName, tableName, alias string) *FivenetLawbooksLawsTable {
	return &FivenetLawbooksLawsTable{
		fivenetLawbooksLawsTable: newFivenetLawbooksLawsTableImpl(schemaName, tableName, alias),
		NEW:                      newFivenetLawbooksLawsTableImpl("", "new", ""),
	}
}

func newFivenetLawbooksLawsTableImpl(schemaName, tableName, alias string) fivenetLawbooksLawsTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		CreatedAtColumn     = mysql.TimestampColumn("created_at")
		UpdatedAtColumn     = mysql.TimestampColumn("updated_at")
		LawbookIDColumn     = mysql.IntegerColumn("lawbook_id")
		NameColumn          = mysql.StringColumn("name")
		DescriptionColumn   = mysql.StringColumn("description")
		HintColumn          = mysql.StringColumn("hint")
		FineColumn          = mysql.IntegerColumn("fine")
		DetentionTimeColumn = mysql.IntegerColumn("detention_time")
		StvoPointsColumn    = mysql.IntegerColumn("stvo_points")
		allColumns          = mysql.ColumnList{IDColumn, CreatedAtColumn, UpdatedAtColumn, LawbookIDColumn, NameColumn, DescriptionColumn, HintColumn, FineColumn, DetentionTimeColumn, StvoPointsColumn}
		mutableColumns      = mysql.ColumnList{CreatedAtColumn, UpdatedAtColumn, LawbookIDColumn, NameColumn, DescriptionColumn, HintColumn, FineColumn, DetentionTimeColumn, StvoPointsColumn}
		defaultColumns      = mysql.ColumnList{CreatedAtColumn, FineColumn, DetentionTimeColumn, StvoPointsColumn}
	)

	return fivenetLawbooksLawsTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		LawbookID:     LawbookIDColumn,
		Name:          NameColumn,
		Description:   DescriptionColumn,
		Hint:          HintColumn,
		Fine:          FineColumn,
		DetentionTime: DetentionTimeColumn,
		StvoPoints:    StvoPointsColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
