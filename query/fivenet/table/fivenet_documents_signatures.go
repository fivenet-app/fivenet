//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsSignatures = newFivenetDocumentsSignaturesTable("", "fivenet_documents_signatures", "")

type fivenetDocumentsSignaturesTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	DocumentID   mysql.ColumnInteger
	SnapshotDate mysql.ColumnTimestamp
	UserID       mysql.ColumnInteger
	UserJob      mysql.ColumnString
	UserJobGrade mysql.ColumnInteger
	Type         mysql.ColumnInteger
	PayloadSvg   mysql.ColumnString
	StampID      mysql.ColumnInteger
	Status       mysql.ColumnInteger
	Reason       mysql.ColumnString
	TaskID       mysql.ColumnInteger
	CreatedAt    mysql.ColumnTimestamp
	RevokedAt    mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsSignaturesTable struct {
	fivenetDocumentsSignaturesTable

	NEW fivenetDocumentsSignaturesTable
}

// AS creates new FivenetDocumentsSignaturesTable with assigned alias
func (a FivenetDocumentsSignaturesTable) AS(alias string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsSignaturesTable with assigned schema name
func (a FivenetDocumentsSignaturesTable) FromSchema(schemaName string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsSignaturesTable with assigned table prefix
func (a FivenetDocumentsSignaturesTable) WithPrefix(prefix string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsSignaturesTable with assigned table suffix
func (a FivenetDocumentsSignaturesTable) WithSuffix(suffix string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsSignaturesTable(schemaName, tableName, alias string) *FivenetDocumentsSignaturesTable {
	return &FivenetDocumentsSignaturesTable{
		fivenetDocumentsSignaturesTable: newFivenetDocumentsSignaturesTableImpl(schemaName, tableName, alias),
		NEW:                             newFivenetDocumentsSignaturesTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsSignaturesTableImpl(schemaName, tableName, alias string) fivenetDocumentsSignaturesTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		DocumentIDColumn   = mysql.IntegerColumn("document_id")
		SnapshotDateColumn = mysql.TimestampColumn("snapshot_date")
		UserIDColumn       = mysql.IntegerColumn("user_id")
		UserJobColumn      = mysql.StringColumn("user_job")
		UserJobGradeColumn = mysql.IntegerColumn("user_job_grade")
		TypeColumn         = mysql.IntegerColumn("type")
		PayloadSvgColumn   = mysql.StringColumn("payload_svg")
		StampIDColumn      = mysql.IntegerColumn("stamp_id")
		StatusColumn       = mysql.IntegerColumn("status")
		ReasonColumn       = mysql.StringColumn("reason")
		TaskIDColumn       = mysql.IntegerColumn("task_id")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		RevokedAtColumn    = mysql.TimestampColumn("revoked_at")
		allColumns         = mysql.ColumnList{IDColumn, DocumentIDColumn, SnapshotDateColumn, UserIDColumn, UserJobColumn, UserJobGradeColumn, TypeColumn, PayloadSvgColumn, StampIDColumn, StatusColumn, ReasonColumn, TaskIDColumn, CreatedAtColumn, RevokedAtColumn}
		mutableColumns     = mysql.ColumnList{DocumentIDColumn, SnapshotDateColumn, UserIDColumn, UserJobColumn, UserJobGradeColumn, TypeColumn, PayloadSvgColumn, StampIDColumn, StatusColumn, ReasonColumn, TaskIDColumn, CreatedAtColumn, RevokedAtColumn}
		defaultColumns     = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetDocumentsSignaturesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DocumentID:   DocumentIDColumn,
		SnapshotDate: SnapshotDateColumn,
		UserID:       UserIDColumn,
		UserJob:      UserJobColumn,
		UserJobGrade: UserJobGradeColumn,
		Type:         TypeColumn,
		PayloadSvg:   PayloadSvgColumn,
		StampID:      StampIDColumn,
		Status:       StatusColumn,
		Reason:       ReasonColumn,
		TaskID:       TaskIDColumn,
		CreatedAt:    CreatedAtColumn,
		RevokedAt:    RevokedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
