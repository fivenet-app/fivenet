//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsSignatures = newFivenetDocumentsSignaturesTable("", "fivenet_documents_signatures", "")

type fivenetDocumentsSignaturesTable struct {
	mysql.Table

	// Columns
	ID            mysql.ColumnInteger
	DocumentID    mysql.ColumnInteger
	SnapshotDate  mysql.ColumnTimestamp
	RequirementID mysql.ColumnInteger
	UserID        mysql.ColumnInteger
	UserJob       mysql.ColumnString
	Type          mysql.ColumnInteger
	PayloadJSON   mysql.ColumnString
	StampID       mysql.ColumnInteger
	Status        mysql.ColumnInteger
	Reason        mysql.ColumnString
	CreatedAt     mysql.ColumnTimestamp
	RevokedAt     mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsSignaturesTable struct {
	fivenetDocumentsSignaturesTable

	NEW fivenetDocumentsSignaturesTable
}

// AS creates new FivenetDocumentsSignaturesTable with assigned alias
func (a FivenetDocumentsSignaturesTable) AS(alias string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsSignaturesTable with assigned schema name
func (a FivenetDocumentsSignaturesTable) FromSchema(schemaName string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsSignaturesTable with assigned table prefix
func (a FivenetDocumentsSignaturesTable) WithPrefix(prefix string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsSignaturesTable with assigned table suffix
func (a FivenetDocumentsSignaturesTable) WithSuffix(suffix string) *FivenetDocumentsSignaturesTable {
	return newFivenetDocumentsSignaturesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsSignaturesTable(schemaName, tableName, alias string) *FivenetDocumentsSignaturesTable {
	return &FivenetDocumentsSignaturesTable{
		fivenetDocumentsSignaturesTable: newFivenetDocumentsSignaturesTableImpl(schemaName, tableName, alias),
		NEW:                             newFivenetDocumentsSignaturesTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsSignaturesTableImpl(schemaName, tableName, alias string) fivenetDocumentsSignaturesTable {
	var (
		IDColumn            = mysql.IntegerColumn("id")
		DocumentIDColumn    = mysql.IntegerColumn("document_id")
		SnapshotDateColumn  = mysql.TimestampColumn("snapshot_date")
		RequirementIDColumn = mysql.IntegerColumn("requirement_id")
		UserIDColumn        = mysql.IntegerColumn("user_id")
		UserJobColumn       = mysql.StringColumn("user_job")
		TypeColumn          = mysql.IntegerColumn("type")
		PayloadJSONColumn   = mysql.StringColumn("payload_json")
		StampIDColumn       = mysql.IntegerColumn("stamp_id")
		StatusColumn        = mysql.IntegerColumn("status")
		ReasonColumn        = mysql.StringColumn("reason")
		CreatedAtColumn     = mysql.TimestampColumn("created_at")
		RevokedAtColumn     = mysql.TimestampColumn("revoked_at")
		allColumns          = mysql.ColumnList{IDColumn, DocumentIDColumn, SnapshotDateColumn, RequirementIDColumn, UserIDColumn, UserJobColumn, TypeColumn, PayloadJSONColumn, StampIDColumn, StatusColumn, ReasonColumn, CreatedAtColumn, RevokedAtColumn}
		mutableColumns      = mysql.ColumnList{DocumentIDColumn, SnapshotDateColumn, RequirementIDColumn, UserIDColumn, UserJobColumn, TypeColumn, PayloadJSONColumn, StampIDColumn, StatusColumn, ReasonColumn, CreatedAtColumn, RevokedAtColumn}
		defaultColumns      = mysql.ColumnList{}
	)

	return fivenetDocumentsSignaturesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		DocumentID:    DocumentIDColumn,
		SnapshotDate:  SnapshotDateColumn,
		RequirementID: RequirementIDColumn,
		UserID:        UserIDColumn,
		UserJob:       UserJobColumn,
		Type:          TypeColumn,
		PayloadJSON:   PayloadJSONColumn,
		StampID:       StampIDColumn,
		Status:        StatusColumn,
		Reason:        ReasonColumn,
		CreatedAt:     CreatedAtColumn,
		RevokedAt:     RevokedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
