//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetAccountsOauth2 = newFivenetAccountsOauth2Table("", "fivenet_accounts_oauth2", "")

type fivenetAccountsOauth2Table struct {
	mysql.Table

	// Columns
	AccountID    mysql.ColumnInteger
	CreatedAt    mysql.ColumnTimestamp
	Provider     mysql.ColumnString
	ExternalID   mysql.ColumnString
	Username     mysql.ColumnString
	Avatar       mysql.ColumnString
	AccessToken  mysql.ColumnString
	RefreshToken mysql.ColumnString
	TokenType    mysql.ColumnString
	Scope        mysql.ColumnString
	ExpiresIn    mysql.ColumnInteger
	ObtainedAt   mysql.ColumnTimestamp

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetAccountsOauth2Table struct {
	fivenetAccountsOauth2Table

	NEW fivenetAccountsOauth2Table
}

// AS creates new FivenetAccountsOauth2Table with assigned alias
func (a FivenetAccountsOauth2Table) AS(alias string) *FivenetAccountsOauth2Table {
	return newFivenetAccountsOauth2Table(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetAccountsOauth2Table with assigned schema name
func (a FivenetAccountsOauth2Table) FromSchema(schemaName string) *FivenetAccountsOauth2Table {
	return newFivenetAccountsOauth2Table(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetAccountsOauth2Table with assigned table prefix
func (a FivenetAccountsOauth2Table) WithPrefix(prefix string) *FivenetAccountsOauth2Table {
	return newFivenetAccountsOauth2Table(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetAccountsOauth2Table with assigned table suffix
func (a FivenetAccountsOauth2Table) WithSuffix(suffix string) *FivenetAccountsOauth2Table {
	return newFivenetAccountsOauth2Table(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetAccountsOauth2Table(schemaName, tableName, alias string) *FivenetAccountsOauth2Table {
	return &FivenetAccountsOauth2Table{
		fivenetAccountsOauth2Table: newFivenetAccountsOauth2TableImpl(schemaName, tableName, alias),
		NEW:                        newFivenetAccountsOauth2TableImpl("", "new", ""),
	}
}

func newFivenetAccountsOauth2TableImpl(schemaName, tableName, alias string) fivenetAccountsOauth2Table {
	var (
		AccountIDColumn    = mysql.IntegerColumn("account_id")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		ProviderColumn     = mysql.StringColumn("provider")
		ExternalIDColumn   = mysql.StringColumn("external_id")
		UsernameColumn     = mysql.StringColumn("username")
		AvatarColumn       = mysql.StringColumn("avatar")
		AccessTokenColumn  = mysql.StringColumn("access_token")
		RefreshTokenColumn = mysql.StringColumn("refresh_token")
		TokenTypeColumn    = mysql.StringColumn("token_type")
		ScopeColumn        = mysql.StringColumn("scope")
		ExpiresInColumn    = mysql.IntegerColumn("expires_in")
		ObtainedAtColumn   = mysql.TimestampColumn("obtained_at")
		allColumns         = mysql.ColumnList{AccountIDColumn, CreatedAtColumn, ProviderColumn, ExternalIDColumn, UsernameColumn, AvatarColumn, AccessTokenColumn, RefreshTokenColumn, TokenTypeColumn, ScopeColumn, ExpiresInColumn, ObtainedAtColumn}
		mutableColumns     = mysql.ColumnList{AccountIDColumn, CreatedAtColumn, ProviderColumn, ExternalIDColumn, UsernameColumn, AvatarColumn, AccessTokenColumn, RefreshTokenColumn, TokenTypeColumn, ScopeColumn, ExpiresInColumn, ObtainedAtColumn}
		defaultColumns     = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetAccountsOauth2Table{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		AccountID:    AccountIDColumn,
		CreatedAt:    CreatedAtColumn,
		Provider:     ProviderColumn,
		ExternalID:   ExternalIDColumn,
		Username:     UsernameColumn,
		Avatar:       AvatarColumn,
		AccessToken:  AccessTokenColumn,
		RefreshToken: RefreshTokenColumn,
		TokenType:    TokenTypeColumn,
		Scope:        ScopeColumn,
		ExpiresIn:    ExpiresInColumn,
		ObtainedAt:   ObtainedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
