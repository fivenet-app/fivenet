//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetDocumentsSignatureTasks = newFivenetDocumentsSignatureTasksTable("", "fivenet_documents_signature_tasks", "")

type fivenetDocumentsSignatureTasksTable struct {
	mysql.Table

	// Columns
	ID           mysql.ColumnInteger
	DocumentID   mysql.ColumnInteger
	SnapshotDate mysql.ColumnTimestamp
	PolicyID     mysql.ColumnInteger
	AssigneeKind mysql.ColumnInteger
	UserID       mysql.ColumnInteger
	Job          mysql.ColumnString
	MinimumGrade mysql.ColumnInteger
	Status       mysql.ColumnInteger
	Comment      mysql.ColumnString
	DueAt        mysql.ColumnTimestamp
	CreatedAt    mysql.ColumnTimestamp
	CompletedAt  mysql.ColumnTimestamp
	SignatureID  mysql.ColumnInteger
	CreatorID    mysql.ColumnInteger
	CreatorJob   mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
	DefaultColumns mysql.ColumnList
}

type FivenetDocumentsSignatureTasksTable struct {
	fivenetDocumentsSignatureTasksTable

	NEW fivenetDocumentsSignatureTasksTable
}

// AS creates new FivenetDocumentsSignatureTasksTable with assigned alias
func (a FivenetDocumentsSignatureTasksTable) AS(alias string) *FivenetDocumentsSignatureTasksTable {
	return newFivenetDocumentsSignatureTasksTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetDocumentsSignatureTasksTable with assigned schema name
func (a FivenetDocumentsSignatureTasksTable) FromSchema(schemaName string) *FivenetDocumentsSignatureTasksTable {
	return newFivenetDocumentsSignatureTasksTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetDocumentsSignatureTasksTable with assigned table prefix
func (a FivenetDocumentsSignatureTasksTable) WithPrefix(prefix string) *FivenetDocumentsSignatureTasksTable {
	return newFivenetDocumentsSignatureTasksTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetDocumentsSignatureTasksTable with assigned table suffix
func (a FivenetDocumentsSignatureTasksTable) WithSuffix(suffix string) *FivenetDocumentsSignatureTasksTable {
	return newFivenetDocumentsSignatureTasksTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetDocumentsSignatureTasksTable(schemaName, tableName, alias string) *FivenetDocumentsSignatureTasksTable {
	return &FivenetDocumentsSignatureTasksTable{
		fivenetDocumentsSignatureTasksTable: newFivenetDocumentsSignatureTasksTableImpl(schemaName, tableName, alias),
		NEW:                                 newFivenetDocumentsSignatureTasksTableImpl("", "new", ""),
	}
}

func newFivenetDocumentsSignatureTasksTableImpl(schemaName, tableName, alias string) fivenetDocumentsSignatureTasksTable {
	var (
		IDColumn           = mysql.IntegerColumn("id")
		DocumentIDColumn   = mysql.IntegerColumn("document_id")
		SnapshotDateColumn = mysql.TimestampColumn("snapshot_date")
		PolicyIDColumn     = mysql.IntegerColumn("policy_id")
		AssigneeKindColumn = mysql.IntegerColumn("assignee_kind")
		UserIDColumn       = mysql.IntegerColumn("user_id")
		JobColumn          = mysql.StringColumn("job")
		MinimumGradeColumn = mysql.IntegerColumn("minimum_grade")
		StatusColumn       = mysql.IntegerColumn("status")
		CommentColumn      = mysql.StringColumn("comment")
		DueAtColumn        = mysql.TimestampColumn("due_at")
		CreatedAtColumn    = mysql.TimestampColumn("created_at")
		CompletedAtColumn  = mysql.TimestampColumn("completed_at")
		SignatureIDColumn  = mysql.IntegerColumn("signature_id")
		CreatorIDColumn    = mysql.IntegerColumn("creator_id")
		CreatorJobColumn   = mysql.StringColumn("creator_job")
		allColumns         = mysql.ColumnList{IDColumn, DocumentIDColumn, SnapshotDateColumn, PolicyIDColumn, AssigneeKindColumn, UserIDColumn, JobColumn, MinimumGradeColumn, StatusColumn, CommentColumn, DueAtColumn, CreatedAtColumn, CompletedAtColumn, SignatureIDColumn, CreatorIDColumn, CreatorJobColumn}
		mutableColumns     = mysql.ColumnList{DocumentIDColumn, SnapshotDateColumn, PolicyIDColumn, AssigneeKindColumn, UserIDColumn, JobColumn, MinimumGradeColumn, StatusColumn, CommentColumn, DueAtColumn, CreatedAtColumn, CompletedAtColumn, SignatureIDColumn, CreatorIDColumn, CreatorJobColumn}
		defaultColumns     = mysql.ColumnList{CreatedAtColumn}
	)

	return fivenetDocumentsSignatureTasksTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		DocumentID:   DocumentIDColumn,
		SnapshotDate: SnapshotDateColumn,
		PolicyID:     PolicyIDColumn,
		AssigneeKind: AssigneeKindColumn,
		UserID:       UserIDColumn,
		Job:          JobColumn,
		MinimumGrade: MinimumGradeColumn,
		Status:       StatusColumn,
		Comment:      CommentColumn,
		DueAt:        DueAtColumn,
		CreatedAt:    CreatedAtColumn,
		CompletedAt:  CompletedAtColumn,
		SignatureID:  SignatureIDColumn,
		CreatorID:    CreatorIDColumn,
		CreatorJob:   CreatorJobColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
