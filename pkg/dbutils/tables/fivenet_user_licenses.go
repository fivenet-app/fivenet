//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package tables

import (
	"github.com/go-jet/jet/v2/mysql"
)

var FivenetUserLicenses = newFivenetUserLicensesTable("", "fivenet_user_licenses", "")

type fivenetUserLicensesTable struct {
	mysql.Table

	// Columns
	Type  mysql.ColumnString
	Owner mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type FivenetUserLicensesTable struct {
	fivenetUserLicensesTable

	NEW fivenetUserLicensesTable
}

// AS creates new FivenetUserLicensesTable with assigned alias
func (a FivenetUserLicensesTable) AS(alias string) *FivenetUserLicensesTable {
	return newFivenetUserLicensesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new FivenetUserLicensesTable with assigned schema name
func (a FivenetUserLicensesTable) FromSchema(schemaName string) *FivenetUserLicensesTable {
	return newFivenetUserLicensesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new FivenetUserLicensesTable with assigned table prefix
func (a FivenetUserLicensesTable) WithPrefix(prefix string) *FivenetUserLicensesTable {
	return newFivenetUserLicensesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new FivenetUserLicensesTable with assigned table suffix
func (a FivenetUserLicensesTable) WithSuffix(suffix string) *FivenetUserLicensesTable {
	return newFivenetUserLicensesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newFivenetUserLicensesTable(schemaName, tableName, alias string) *FivenetUserLicensesTable {
	return &FivenetUserLicensesTable{
		fivenetUserLicensesTable: newFivenetUserLicensesTableImpl(schemaName, tableName, alias),
		NEW:                      newFivenetUserLicensesTableImpl("", "new", ""),
	}
}

func newFivenetUserLicensesTableImpl(schemaName, tableName, alias string) fivenetUserLicensesTable {
	var (
		TypeColumn     = mysql.StringColumn("type")
		OwnerColumn    = mysql.StringColumn("owner")
		allColumns     = mysql.ColumnList{TypeColumn, OwnerColumn}
		mutableColumns = mysql.ColumnList{}
	)

	return fivenetUserLicensesTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Type:  TypeColumn,
		Owner: OwnerColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
