watchConfig: true

stateFile: "dbsync.state.yaml"

destination:
  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)
  url: "fivenet.example.com"
  token: "YOUR_SYNC_API_TOKEN"
  # Disable TLS verification (not recommended)
  insecure: false
  # Sync Interval can also be specified per table in the `tables:` section
  syncInterval: 5s

# Changes to the source require a restart of the dbsync
source:
  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details
  # Please note that the `parseTime` parameter is allows set to true
  dsn: "DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin"

# A query for each "piece of data" FiveNet needs to function
tables:
  # The example queries here are for the ESX framework
  jobs:
    # Must return `job.name`, `job.label` columns
    enabled: true
    query: |
      SELECT
        `jobs`.`name` AS `job.name`,
        `jobs`.`label` AS `job.label`
      FROM
        `jobs`
      LIMIT $limit
      OFFSET $offset;
  jobGrades:
    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)
    enabled: true
    query:
      SELECT
        `job_grades`.`job_name` AS `job_grade.job_name`,
        `job_grades`.`grade` AS `job_grade.grade`,
        `job_grades`.`name` AS `job_grade.name`,
        `job_grades`.`label` AS `job_grade.label`
      FROM
        `job_grades`
      WHERE
        `job_grades`.`job_name` = $jobName
      LIMIT $limit
      OFFSET $offset;
  licenses:
    # Must return `license.type`, `license.label` columns
    enabled: true
    query: |
      SELECT
        `licenses`.`type` AS `license.type`,
        `licenses`.`label` AS `license.label`
      FROM
        `licenses`
      LIMIT $limit
      OFFSET $offset;
  users:
    # Must return `user.user_id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns
    # Optional columns: `user.height`, `user.visum`, `user.playtime`
    enabled: true
    # If your "players"/"users" data has a timestamp/datetime column that is updated on update,
    # configure it here so that after the initial sync only the changed data is synced again.
    #updatedTimeColumn: "last_seen"
    # The identifier column should be a smart combination of values when using a multichar system.
    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`
    query: |
      SELECT
        `users`.`id` AS `user.id`,
        `users`.`identifier` AS `user.identifier`,
        `users`.`group` AS `user.group`,
        `users`.`firstname` AS `user.firstname`,
        `users`.`lastname` AS `user.lastname`,
        `users`.`dateofbirth` AS `user.dateofbirth`,
        `users`.`job` AS `user.job`,
        `users`.`job_grade` AS `user.job_grade`,
        `users`.`sex` AS `user.sex`,
        `users`.`phone_number` AS `user.phone_number`,
        `users`.`height` AS `user.height`,
        `users`.`visum` AS `user.visum`,
        `users`.`playtime` AS `user.playtime`
      FROM
        `users`
      $whereCondition
      LIMIT $limit
      OFFSET $offset;
    # If a lastname is not returned by the query, attempt to split the firstname into "two" parts
    splitName: true
    # Normalize date of birth value to the output format if possible
    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout
    dateOfBirth:
      formats:
        - "2006-01-02" # 2000-10-18 = YYYY-MM-DD
        - "02/01/2006" # 09/06/1993 = MM/DD/YYYY
        - "02.01.2006" # 01.08.1982 = DD.MM.YYYY
      outputFormat: "02.01.2006" # DD.MM.YYYY
    valueMapping:
      # This allows to map values to different values for FiveNet
      # E.g., the sex of a char must be either `m`, `f`, or `d`
      sex:
        fallback: 'm'
        values:
          '1': 'f'
    # If the firstname or lastname is empty or null, do not sync the user at all
    ignoreEmptyNames: true
  userLicenses:
    # Must return `user_license.type`, `user_license.owner` columns
    enabled: true
    query: |
      SELECT
        `user_licenses`.`type` AS `user_license.type`,
        `user_licenses`.`owner` AS `user_license.owner`
      FROM
        `user_licenses`
      WHERE
        `user_licenses`.`owner` = $identifier
      LIMIT $limit
      OFFSET $offset;
  vehicles:
    # Must return `vehicle.owner_id` (the user's DB ID) or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` and `vehicle.job` columns
    enabled: true
    query: |
      SELECT
        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,
        `owned_vehicles`.`plate` AS `vehicle.plate`,
        `owned_vehicles`.`type` AS `vehicle.type`,
        `owned_vehicles`.`model` AS `vehicle.model`
      FROM
        `owned_vehicles`
      LIMIT $limit
      OFFSET $offset;
