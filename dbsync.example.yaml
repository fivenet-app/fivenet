enabled: true

stateFile: "dbsync.state.yaml"

destination:
  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs)
  url: "example.fivenet.app"
  token: "YOUR_SYNC_API_TOKEN"
  insecure: false

source:
  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details
  dsn: "DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&parseTime=True&loc=Europe%2FBerlin"

# A query for each "piece of data" FiveNet needs to function
tables:
  # The example queries here are for the ESX framework
  jobs:
    # Must return `name`, `label` columns
    enabled: true
    query: |
      SELECT
        `name`,
        `label`
      FROM
        `jobs`
      LIMIT $limit
      OFFSET $offset;
  jobGrades:
    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name`)
    enabled: true
    query:
      SELECT
        `job_name`,
        `grade`,
        `name`,
        `label`
      FROM
        `job_grades`
      WHERE
        `job_name` = $jobName
      LIMIT $limit
      OFFSET $offset;
  licenses:
    # Must return `type`, `label` columns
    enabled: true
    query: |
      SELECT
        `type`,
        `label`
      FROM
        `licenses`
      LIMIT $limit
      OFFSET $offset;
  users:
    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns
    # Optional columns: `height`, `visum`, `playtime`
    enabled: true
    # If your "players"/"users" data has a timestamp/datetime column that is updated on update,
    # configure it here so that after the initial sync only the changed data is synced again.
    #updatedTimeColumn: "last_seen"
    # The identifier column should be a smart combination of values when using a multichar system.
    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`
    query: |
      SELECT
        `id`,
        `identifier`,
        `group`,
        `firstname`,
        `lastname`,
        `dateofbirth`,
        `job`,
        `job_grade`,
        `sex`,
        `phone_number`,
        `height`,
        `visum`,
        `playtime`
      FROM
        `users`
      $whereCondition
      LIMIT $limit
      OFFSET $offset;
    # If a lastname is not returned by the query, attempt to split the firstname into "two" parts
    splitName: true
    # Normalize date of birth value to the output format if possible
    dateOfBirth:
      formats:
        - "2006-01-02" # 2000-10-18 = YYYY-MM-DD
        - "02/01/2006" # 09/06/1993 = MM/DD/YYYY
        - "02.01.2006" # 01.08.1982 = DD.MM.YYYY
      outputFormat: "02.01.2006" # DD.MM.YYYY
    valueMapping:
      # This allows to map values to different values for FiveNet
      # E.g., the sex of a char must be either `m`, `f`, or `d`
      sex:
        fallback: 'm'
        values:
          '1': 'f'
  userLicenses:
    # Must return `type`, `owner` columns
    enabled: true
    query: |
      SELECT
        `type`,
        `owner`
      FROM
        `user_licenses`
      WHERE
        `owner` = $identifier
      LIMIT $limit
      OFFSET $offset;
  vehicles:
    # Must return `owner`, `plate`, `type`, `model` columns
    enabled: true
    query: |
      SELECT
        `owner`,
        `plate`,
        `type`,
        `model`
      FROM
        `owned_vehicles`
      LIMIT $limit
      OFFSET $offset;
