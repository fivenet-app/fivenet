name: Build & Publish Release
on:
  release:
    types: [created]

permissions:
  contents: write
  packages: write

jobs:
  build-images:
    name: Build Images
    uses: ./.github/workflows/build_image.yml
    secrets: inherit

  build-binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    outputs:
      APP_VERSION: ${{ steps.set-version.outputs.APP_VERSION }}
    strategy:
      matrix:
        # Build and publish in parallel: linux/amd64, linux/arm64, windows/amd64
        goos: [linux, windows]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set APP_VERSION env
        id: set-version
        run: |
          APP_VERSION=$(git describe --tags --exclude='fivenet-*')
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT

      - name: Release Binaries
        uses: wangyoucao577/go-release-action@v1.53
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          goos: ${{ matrix.goos }}
          goarch: ${{ matrix.goarch }}
          goversion: '1.24.1'
          binary_name: 'fivenet'
          extra_files: LICENSE README.md VERSION config.example.yaml dbsync.example.yaml
          ldflags: '-X github.com/fivenet-app/fivenet/v2025/pkg/version.Version=${{ env.APP_VERSION }}'

  update-channels:
    needs:
      - build-images
      - build-binaries
    runs-on: ubuntu-latest
    steps:
      - name: Update dev channel
        uses: ./.github/actions/update-channel.yml
        with:
          channel: dev
          image_tag: ${{ jobs.build-binaries.outputs.APP_VERSION }}

      - name: Update stable channel
        uses: ./.github/actions/update-channel.yml
        with:
          channel: stable
          image_tag: ${{ jobs.build-binaries.outputs.APP_VERSION }}
