name: 'Push: Test Code & Build Image'
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

  workflow_call:
    inputs:
      skipImageBuild:
        description: 'If images should be built'
        default: false
        required: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  golang-tests:
    name: Golang Test
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '^1.24.5'

      - name: Run Go Tests
        env:
          TZ: "Europe/Berlin"
        run: go test ./...

  node-lint-tests:
    name: Node Lint Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lint
        run: pnpm lint

  node-build-tests:
    name: Node Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm build
        env:
          NUXT_UI_PRO_LICENSE: "${{ secrets.NUXT_UI_PRO_LICENSE }}"
          NODE_OPTIONS: "--max-old-space-size=8192"
        run: pnpm build

  container-build:
    name: Container Build Test
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: actions/checkout@v4

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/fivenet-app/fivenet
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern=v{{version}}
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=sha

      - name: Build Container Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NUXT_UI_PRO_LICENSE=${{ secrets.NUXT_UI_PRO_LICENSE }}

  binary-build:
    name: Binaries Build Test
    needs:
      - golang-tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # build in parallel: linux/amd64, linux/arm64, windows/amd64
        goos: [linux, windows]
        goarch: [amd64, arm64]
        exclude:
          - goarch: arm64
            goos: windows
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '^1.24.5'

      - name: Run Go Build
        run: GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o fivenet .

  build-image:
    name: Image Build
    if: ${{ github.event_name != 'pull_request' && !inputs.skipImageBuild }}
    needs:
      - container-build
      - node-lint-tests
      - node-build-tests
      - binary-build
    uses: ./.github/workflows/build_image.yml
    secrets: inherit

  update-dev-channel:
    name: Update Dev Channel
    if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/develop' }}
    needs: build-image
    uses: ./.github/workflows/update-channel.yml
    with:
      channel: dev
      image_tag: ${{ needs.build-image.outputs.image_tag }}
