// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/sync/sync.proto

package sync

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusRequestMultiError, or nil if none found.
func (m *GetStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetStatusRequestMultiError(errors)
	}

	return nil
}

// GetStatusRequestMultiError is an error wrapping multiple validation errors
// returned by GetStatusRequest.ValidateAll() if the designated constraints
// aren't met.
type GetStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusRequestMultiError) AllErrors() []error { return m }

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on GetStatusResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetStatusResponseMultiError, or nil if none found.
func (m *GetStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobs()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Jobs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Jobs",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobs()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Jobs",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLicenses()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Licenses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Licenses",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLicenses()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Licenses",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUsers()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Users",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVehicles()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetStatusResponseValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVehicles()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetStatusResponseValidationError{
				field:  "Vehicles",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetStatusResponseMultiError(errors)
	}

	return nil
}

// GetStatusResponseMultiError is an error wrapping multiple validation errors
// returned by GetStatusResponse.ValidateAll() if the designated constraints
// aren't met.
type GetStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetStatusResponseMultiError) AllErrors() []error { return m }

// GetStatusResponseValidationError is the validation error returned by
// GetStatusResponse.Validate if the designated constraints aren't met.
type GetStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusResponseValidationError) ErrorName() string {
	return "GetStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusResponseValidationError{}

// Validate checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActivityRequestMultiError, or nil if none found.
func (m *AddActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofActivityPresent := false
	switch v := m.Activity.(type) {
	case *AddActivityRequest_UserOauth2:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetUserOauth2()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserOauth2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserOauth2",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserOauth2()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "UserOauth2",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_Dispatch:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetDispatch()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "Dispatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "Dispatch",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatch()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_UserActivity:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetUserActivity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserActivity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "UserActivity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_UserProps:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetUserProps()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserProps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "UserProps",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_JobColleagueActivity:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetJobColleagueActivity()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "JobColleagueActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "JobColleagueActivity",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobColleagueActivity()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "JobColleagueActivity",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_ColleagueProps:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetColleagueProps()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "ColleagueProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "ColleagueProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetColleagueProps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "ColleagueProps",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_JobTimeclock:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetJobTimeclock()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "JobTimeclock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "JobTimeclock",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobTimeclock()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "JobTimeclock",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AddActivityRequest_UserUpdate:
		if v == nil {
			err := AddActivityRequestValidationError{
				field:  "Activity",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofActivityPresent = true

		if all {
			switch v := interface{}(m.GetUserUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddActivityRequestValidationError{
						field:  "UserUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddActivityRequestValidationError{
					field:  "UserUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofActivityPresent {
		err := AddActivityRequestValidationError{
			field:  "Activity",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddActivityRequestMultiError(errors)
	}

	return nil
}

// AddActivityRequestMultiError is an error wrapping multiple validation errors
// returned by AddActivityRequest.ValidateAll() if the designated constraints
// aren't met.
type AddActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityRequestMultiError) AllErrors() []error { return m }

// AddActivityRequestValidationError is the validation error returned by
// AddActivityRequest.Validate if the designated constraints aren't met.
type AddActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityRequestValidationError) ErrorName() string {
	return "AddActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityRequestValidationError{}

// Validate checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddActivityResponseMultiError, or nil if none found.
func (m *AddActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddActivityResponseMultiError(errors)
	}

	return nil
}

// AddActivityResponseMultiError is an error wrapping multiple validation
// errors returned by AddActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type AddActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddActivityResponseMultiError) AllErrors() []error { return m }

// AddActivityResponseValidationError is the validation error returned by
// AddActivityResponse.Validate if the designated constraints aren't met.
type AddActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddActivityResponseValidationError) ErrorName() string {
	return "AddActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddActivityResponseValidationError{}

// Validate checks the field values on RegisterAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAccountRequestMultiError, or nil if none found.
func (m *RegisterAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetIdentifier()) > 64 {
		err := RegisterAccountRequestValidationError{
			field:  "Identifier",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for ResetToken

	if m.LastCharId != nil {

		if m.GetLastCharId() <= 0 {
			err := RegisterAccountRequestValidationError{
				field:  "LastCharId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegisterAccountRequestMultiError(errors)
	}

	return nil
}

// RegisterAccountRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAccountRequestMultiError) AllErrors() []error { return m }

// RegisterAccountRequestValidationError is the validation error returned by
// RegisterAccountRequest.Validate if the designated constraints aren't met.
type RegisterAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAccountRequestValidationError) ErrorName() string {
	return "RegisterAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAccountRequestValidationError{}

// Validate checks the field values on RegisterAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterAccountResponseMultiError, or nil if none found.
func (m *RegisterAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RegToken != nil {

		if utf8.RuneCountInString(m.GetRegToken()) != 6 {
			err := RegisterAccountResponseValidationError{
				field:  "RegToken",
				reason: "value length must be 6 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

		if !_RegisterAccountResponse_RegToken_Pattern.MatchString(m.GetRegToken()) {
			err := RegisterAccountResponseValidationError{
				field:  "RegToken",
				reason: "value does not match regex pattern \"^[0-9]{6}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.AccountId != nil {
		// no validation rules for AccountId
	}

	if m.Username != nil {
		// no validation rules for Username
	}

	if len(errors) > 0 {
		return RegisterAccountResponseMultiError(errors)
	}

	return nil
}

// RegisterAccountResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterAccountResponseMultiError) AllErrors() []error { return m }

// RegisterAccountResponseValidationError is the validation error returned by
// RegisterAccountResponse.Validate if the designated constraints aren't met.
type RegisterAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterAccountResponseValidationError) ErrorName() string {
	return "RegisterAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterAccountResponseValidationError{}

var _RegisterAccountResponse_RegToken_Pattern = regexp.MustCompile("^[0-9]{6}$")

// Validate checks the field values on TransferAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferAccountRequestMultiError, or nil if none found.
func (m *TransferAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOldLicense()) > 64 {
		err := TransferAccountRequestValidationError{
			field:  "OldLicense",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNewLicense()) > 64 {
		err := TransferAccountRequestValidationError{
			field:  "NewLicense",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TransferAccountRequestMultiError(errors)
	}

	return nil
}

// TransferAccountRequestMultiError is an error wrapping multiple validation
// errors returned by TransferAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type TransferAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferAccountRequestMultiError) AllErrors() []error { return m }

// TransferAccountRequestValidationError is the validation error returned by
// TransferAccountRequest.Validate if the designated constraints aren't met.
type TransferAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferAccountRequestValidationError) ErrorName() string {
	return "TransferAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TransferAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferAccountRequestValidationError{}

// Validate checks the field values on TransferAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TransferAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TransferAccountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TransferAccountResponseMultiError, or nil if none found.
func (m *TransferAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TransferAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TransferAccountResponseMultiError(errors)
	}

	return nil
}

// TransferAccountResponseMultiError is an error wrapping multiple validation
// errors returned by TransferAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type TransferAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TransferAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TransferAccountResponseMultiError) AllErrors() []error { return m }

// TransferAccountResponseValidationError is the validation error returned by
// TransferAccountResponse.Validate if the designated constraints aren't met.
type TransferAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TransferAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TransferAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TransferAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TransferAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TransferAccountResponseValidationError) ErrorName() string {
	return "TransferAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TransferAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTransferAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TransferAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TransferAccountResponseValidationError{}

// Validate checks the field values on SendDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendDataRequestMultiError, or nil if none found.
func (m *SendDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *SendDataRequest_Jobs:
		if v == nil {
			err := SendDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetJobs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Jobs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Jobs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendDataRequestValidationError{
					field:  "Jobs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendDataRequest_Licenses:
		if v == nil {
			err := SendDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetLicenses()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Licenses",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Licenses",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLicenses()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendDataRequestValidationError{
					field:  "Licenses",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendDataRequest_Users:
		if v == nil {
			err := SendDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetUsers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendDataRequestValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendDataRequest_Vehicles:
		if v == nil {
			err := SendDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetVehicles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVehicles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendDataRequestValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SendDataRequest_UserLocations:
		if v == nil {
			err := SendDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetUserLocations()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "UserLocations",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SendDataRequestValidationError{
						field:  "UserLocations",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUserLocations()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SendDataRequestValidationError{
					field:  "UserLocations",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := SendDataRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SendDataRequestMultiError(errors)
	}

	return nil
}

// SendDataRequestMultiError is an error wrapping multiple validation errors
// returned by SendDataRequest.ValidateAll() if the designated constraints
// aren't met.
type SendDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDataRequestMultiError) AllErrors() []error { return m }

// SendDataRequestValidationError is the validation error returned by
// SendDataRequest.Validate if the designated constraints aren't met.
type SendDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDataRequestValidationError) ErrorName() string { return "SendDataRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDataRequestValidationError{}

// Validate checks the field values on SendDataResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendDataResponseMultiError, or nil if none found.
func (m *SendDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffectedRows

	if len(errors) > 0 {
		return SendDataResponseMultiError(errors)
	}

	return nil
}

// SendDataResponseMultiError is an error wrapping multiple validation errors
// returned by SendDataResponse.ValidateAll() if the designated constraints
// aren't met.
type SendDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendDataResponseMultiError) AllErrors() []error { return m }

// SendDataResponseValidationError is the validation error returned by
// SendDataResponse.Validate if the designated constraints aren't met.
type SendDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendDataResponseValidationError) ErrorName() string { return "SendDataResponseValidationError" }

// Error satisfies the builtin error interface
func (e SendDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendDataResponseValidationError{}

// Validate checks the field values on DeleteDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataRequestMultiError, or nil if none found.
func (m *DeleteDataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *DeleteDataRequest_Users:
		if v == nil {
			err := DeleteDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetUsers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataRequestValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataRequestValidationError{
						field:  "Users",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUsers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataRequestValidationError{
					field:  "Users",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *DeleteDataRequest_Vehicles:
		if v == nil {
			err := DeleteDataRequestValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetVehicles()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteDataRequestValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteDataRequestValidationError{
						field:  "Vehicles",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetVehicles()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteDataRequestValidationError{
					field:  "Vehicles",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := DeleteDataRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDataRequestMultiError(errors)
	}

	return nil
}

// DeleteDataRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteDataRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataRequestMultiError) AllErrors() []error { return m }

// DeleteDataRequestValidationError is the validation error returned by
// DeleteDataRequest.Validate if the designated constraints aren't met.
type DeleteDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataRequestValidationError) ErrorName() string {
	return "DeleteDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataRequestValidationError{}

// Validate checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDataResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDataResponseMultiError, or nil if none found.
func (m *DeleteDataResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDataResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AffectedRows

	if len(errors) > 0 {
		return DeleteDataResponseMultiError(errors)
	}

	return nil
}

// DeleteDataResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteDataResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteDataResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDataResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDataResponseMultiError) AllErrors() []error { return m }

// DeleteDataResponseValidationError is the validation error returned by
// DeleteDataResponse.Validate if the designated constraints aren't met.
type DeleteDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDataResponseValidationError) ErrorName() string {
	return "DeleteDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDataResponseValidationError{}

// Validate checks the field values on StreamRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamRequestMultiError, or
// nil if none found.
func (m *StreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamRequestMultiError(errors)
	}

	return nil
}

// StreamRequestMultiError is an error wrapping multiple validation errors
// returned by StreamRequest.ValidateAll() if the designated constraints
// aren't met.
type StreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRequestMultiError) AllErrors() []error { return m }

// StreamRequestValidationError is the validation error returned by
// StreamRequest.Validate if the designated constraints aren't met.
type StreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRequestValidationError) ErrorName() string { return "StreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e StreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRequestValidationError{}

// Validate checks the field values on StreamResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamResponseMultiError,
// or nil if none found.
func (m *StreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return StreamResponseMultiError(errors)
	}

	return nil
}

// StreamResponseMultiError is an error wrapping multiple validation errors
// returned by StreamResponse.ValidateAll() if the designated constraints
// aren't met.
type StreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamResponseMultiError) AllErrors() []error { return m }

// StreamResponseValidationError is the validation error returned by
// StreamResponse.Validate if the designated constraints aren't met.
type StreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamResponseValidationError) ErrorName() string { return "StreamResponseValidationError" }

// Error satisfies the builtin error interface
func (e StreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamResponseValidationError{}
