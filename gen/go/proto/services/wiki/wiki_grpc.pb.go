// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/wiki/wiki.proto

package wiki

import (
	context "context"
	file "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/file"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WikiService_ListPages_FullMethodName        = "/services.wiki.WikiService/ListPages"
	WikiService_GetPage_FullMethodName          = "/services.wiki.WikiService/GetPage"
	WikiService_CreatePage_FullMethodName       = "/services.wiki.WikiService/CreatePage"
	WikiService_UpdatePage_FullMethodName       = "/services.wiki.WikiService/UpdatePage"
	WikiService_DeletePage_FullMethodName       = "/services.wiki.WikiService/DeletePage"
	WikiService_ListPageActivity_FullMethodName = "/services.wiki.WikiService/ListPageActivity"
	WikiService_UploadFile_FullMethodName       = "/services.wiki.WikiService/UploadFile"
)

// WikiServiceClient is the client API for WikiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiServiceClient interface {
	// @perm
	ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error)
	// @perm: Name=ListPages
	GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error)
	// @perm: Name=UpdatePage
	CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Public"}
	UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error)
	// @perm
	DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error)
	// @perm
	ListPageActivity(ctx context.Context, in *ListPageActivityRequest, opts ...grpc.CallOption) (*ListPageActivityResponse, error)
	// @perm: Name=UpdatePage
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse], error)
}

type wikiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiServiceClient(cc grpc.ClientConnInterface) WikiServiceClient {
	return &wikiServiceClient{cc}
}

func (c *wikiServiceClient) ListPages(ctx context.Context, in *ListPagesRequest, opts ...grpc.CallOption) (*ListPagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPagesResponse)
	err := c.cc.Invoke(ctx, WikiService_ListPages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) GetPage(ctx context.Context, in *GetPageRequest, opts ...grpc.CallOption) (*GetPageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPageResponse)
	err := c.cc.Invoke(ctx, WikiService_GetPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) CreatePage(ctx context.Context, in *CreatePageRequest, opts ...grpc.CallOption) (*CreatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePageResponse)
	err := c.cc.Invoke(ctx, WikiService_CreatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) UpdatePage(ctx context.Context, in *UpdatePageRequest, opts ...grpc.CallOption) (*UpdatePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePageResponse)
	err := c.cc.Invoke(ctx, WikiService_UpdatePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) DeletePage(ctx context.Context, in *DeletePageRequest, opts ...grpc.CallOption) (*DeletePageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePageResponse)
	err := c.cc.Invoke(ctx, WikiService_DeletePage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) ListPageActivity(ctx context.Context, in *ListPageActivityRequest, opts ...grpc.CallOption) (*ListPageActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPageActivityResponse)
	err := c.cc.Invoke(ctx, WikiService_ListPageActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WikiService_ServiceDesc.Streams[0], WikiService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[file.UploadPacket, file.UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WikiService_UploadFileClient = grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse]

// WikiServiceServer is the server API for WikiService service.
// All implementations must embed UnimplementedWikiServiceServer
// for forward compatibility.
type WikiServiceServer interface {
	// @perm
	ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error)
	// @perm: Name=ListPages
	GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error)
	// @perm: Name=UpdatePage
	CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Public"}
	UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error)
	// @perm
	DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error)
	// @perm
	ListPageActivity(context.Context, *ListPageActivityRequest) (*ListPageActivityResponse, error)
	// @perm: Name=UpdatePage
	UploadFile(grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]) error
	mustEmbedUnimplementedWikiServiceServer()
}

// UnimplementedWikiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWikiServiceServer struct{}

func (UnimplementedWikiServiceServer) ListPages(context.Context, *ListPagesRequest) (*ListPagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPages not implemented")
}
func (UnimplementedWikiServiceServer) GetPage(context.Context, *GetPageRequest) (*GetPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (UnimplementedWikiServiceServer) CreatePage(context.Context, *CreatePageRequest) (*CreatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePage not implemented")
}
func (UnimplementedWikiServiceServer) UpdatePage(context.Context, *UpdatePageRequest) (*UpdatePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePage not implemented")
}
func (UnimplementedWikiServiceServer) DeletePage(context.Context, *DeletePageRequest) (*DeletePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (UnimplementedWikiServiceServer) ListPageActivity(context.Context, *ListPageActivityRequest) (*ListPageActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPageActivity not implemented")
}
func (UnimplementedWikiServiceServer) UploadFile(grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedWikiServiceServer) mustEmbedUnimplementedWikiServiceServer() {}
func (UnimplementedWikiServiceServer) testEmbeddedByValue()                     {}

// UnsafeWikiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiServiceServer will
// result in compilation errors.
type UnsafeWikiServiceServer interface {
	mustEmbedUnimplementedWikiServiceServer()
}

func RegisterWikiServiceServer(s grpc.ServiceRegistrar, srv WikiServiceServer) {
	// If the following call pancis, it indicates UnimplementedWikiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WikiService_ServiceDesc, srv)
}

func _WikiService_ListPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).ListPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiService_ListPages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).ListPages(ctx, req.(*ListPagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiService_GetPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).GetPage(ctx, req.(*GetPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_CreatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).CreatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiService_CreatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).CreatePage(ctx, req.(*CreatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_UpdatePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).UpdatePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiService_UpdatePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).UpdatePage(ctx, req.(*UpdatePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiService_DeletePage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).DeletePage(ctx, req.(*DeletePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_ListPageActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPageActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiServiceServer).ListPageActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WikiService_ListPageActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiServiceServer).ListPageActivity(ctx, req.(*ListPageActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WikiServiceServer).UploadFile(&grpc.GenericServerStream[file.UploadPacket, file.UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WikiService_UploadFileServer = grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]

// WikiService_ServiceDesc is the grpc.ServiceDesc for WikiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.wiki.WikiService",
	HandlerType: (*WikiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPages",
			Handler:    _WikiService_ListPages_Handler,
		},
		{
			MethodName: "GetPage",
			Handler:    _WikiService_GetPage_Handler,
		},
		{
			MethodName: "CreatePage",
			Handler:    _WikiService_CreatePage_Handler,
		},
		{
			MethodName: "UpdatePage",
			Handler:    _WikiService_UpdatePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _WikiService_DeletePage_Handler,
		},
		{
			MethodName: "ListPageActivity",
			Handler:    _WikiService_ListPageActivity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _WikiService_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/wiki/wiki.proto",
}
