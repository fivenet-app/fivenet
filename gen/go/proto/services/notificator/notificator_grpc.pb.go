// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: services/notificator/notificator.proto

package notificator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NotificatorService_GetNotifications_FullMethodName  = "/services.notificator.NotificatorService/GetNotifications"
	NotificatorService_MarkNotifications_FullMethodName = "/services.notificator.NotificatorService/MarkNotifications"
	NotificatorService_Stream_FullMethodName            = "/services.notificator.NotificatorService/Stream"
)

// NotificatorServiceClient is the client API for NotificatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificatorServiceClient interface {
	// @perm: Name=Any
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	// @perm: Name=Any
	MarkNotifications(ctx context.Context, in *MarkNotificationsRequest, opts ...grpc.CallOption) (*MarkNotificationsResponse, error)
	// @perm: Name=Any
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
}

type notificatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificatorServiceClient(cc grpc.ClientConnInterface) NotificatorServiceClient {
	return &notificatorServiceClient{cc}
}

func (c *notificatorServiceClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificatorService_GetNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorServiceClient) MarkNotifications(ctx context.Context, in *MarkNotificationsRequest, opts ...grpc.CallOption) (*MarkNotificationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkNotificationsResponse)
	err := c.cc.Invoke(ctx, NotificatorService_MarkNotifications_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificatorServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NotificatorService_ServiceDesc.Streams[0], NotificatorService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificatorService_StreamClient = grpc.ServerStreamingClient[StreamResponse]

// NotificatorServiceServer is the server API for NotificatorService service.
// All implementations must embed UnimplementedNotificatorServiceServer
// for forward compatibility.
type NotificatorServiceServer interface {
	// @perm: Name=Any
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	// @perm: Name=Any
	MarkNotifications(context.Context, *MarkNotificationsRequest) (*MarkNotificationsResponse, error)
	// @perm: Name=Any
	Stream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error
	mustEmbedUnimplementedNotificatorServiceServer()
}

// UnimplementedNotificatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNotificatorServiceServer struct{}

func (UnimplementedNotificatorServiceServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificatorServiceServer) MarkNotifications(context.Context, *MarkNotificationsRequest) (*MarkNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotifications not implemented")
}
func (UnimplementedNotificatorServiceServer) Stream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedNotificatorServiceServer) mustEmbedUnimplementedNotificatorServiceServer() {}
func (UnimplementedNotificatorServiceServer) testEmbeddedByValue()                            {}

// UnsafeNotificatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificatorServiceServer will
// result in compilation errors.
type UnsafeNotificatorServiceServer interface {
	mustEmbedUnimplementedNotificatorServiceServer()
}

func RegisterNotificatorServiceServer(s grpc.ServiceRegistrar, srv NotificatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedNotificatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NotificatorService_ServiceDesc, srv)
}

func _NotificatorService_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServiceServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificatorService_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServiceServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificatorService_MarkNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificatorServiceServer).MarkNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificatorService_MarkNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificatorServiceServer).MarkNotifications(ctx, req.(*MarkNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificatorService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NotificatorServiceServer).Stream(m, &grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NotificatorService_StreamServer = grpc.ServerStreamingServer[StreamResponse]

// NotificatorService_ServiceDesc is the grpc.ServiceDesc for NotificatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.notificator.NotificatorService",
	HandlerType: (*NotificatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotifications",
			Handler:    _NotificatorService_GetNotifications_Handler,
		},
		{
			MethodName: "MarkNotifications",
			Handler:    _NotificatorService_MarkNotifications_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _NotificatorService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/notificator/notificator.proto",
}
