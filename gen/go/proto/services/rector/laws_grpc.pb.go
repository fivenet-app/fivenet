// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/rector/laws.proto

package rector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RectorLawsService_CreateOrUpdateLawBook_FullMethodName = "/services.rector.RectorLawsService/CreateOrUpdateLawBook"
	RectorLawsService_DeleteLawBook_FullMethodName         = "/services.rector.RectorLawsService/DeleteLawBook"
	RectorLawsService_CreateOrUpdateLaw_FullMethodName     = "/services.rector.RectorLawsService/CreateOrUpdateLaw"
	RectorLawsService_DeleteLaw_FullMethodName             = "/services.rector.RectorLawsService/DeleteLaw"
)

// RectorLawsServiceClient is the client API for RectorLawsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RectorLawsServiceClient interface {
	// @perm
	CreateOrUpdateLawBook(ctx context.Context, in *CreateOrUpdateLawBookRequest, opts ...grpc.CallOption) (*CreateOrUpdateLawBookResponse, error)
	// @perm
	DeleteLawBook(ctx context.Context, in *DeleteLawBookRequest, opts ...grpc.CallOption) (*DeleteLawBookResponse, error)
	// @perm: Name=CreateOrUpdateLawBook
	CreateOrUpdateLaw(ctx context.Context, in *CreateOrUpdateLawRequest, opts ...grpc.CallOption) (*CreateOrUpdateLawResponse, error)
	// @perm: Name=DeleteLawBook
	DeleteLaw(ctx context.Context, in *DeleteLawRequest, opts ...grpc.CallOption) (*DeleteLawResponse, error)
}

type rectorLawsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRectorLawsServiceClient(cc grpc.ClientConnInterface) RectorLawsServiceClient {
	return &rectorLawsServiceClient{cc}
}

func (c *rectorLawsServiceClient) CreateOrUpdateLawBook(ctx context.Context, in *CreateOrUpdateLawBookRequest, opts ...grpc.CallOption) (*CreateOrUpdateLawBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateLawBookResponse)
	err := c.cc.Invoke(ctx, RectorLawsService_CreateOrUpdateLawBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorLawsServiceClient) DeleteLawBook(ctx context.Context, in *DeleteLawBookRequest, opts ...grpc.CallOption) (*DeleteLawBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLawBookResponse)
	err := c.cc.Invoke(ctx, RectorLawsService_DeleteLawBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorLawsServiceClient) CreateOrUpdateLaw(ctx context.Context, in *CreateOrUpdateLawRequest, opts ...grpc.CallOption) (*CreateOrUpdateLawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateLawResponse)
	err := c.cc.Invoke(ctx, RectorLawsService_CreateOrUpdateLaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorLawsServiceClient) DeleteLaw(ctx context.Context, in *DeleteLawRequest, opts ...grpc.CallOption) (*DeleteLawResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteLawResponse)
	err := c.cc.Invoke(ctx, RectorLawsService_DeleteLaw_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RectorLawsServiceServer is the server API for RectorLawsService service.
// All implementations must embed UnimplementedRectorLawsServiceServer
// for forward compatibility.
type RectorLawsServiceServer interface {
	// @perm
	CreateOrUpdateLawBook(context.Context, *CreateOrUpdateLawBookRequest) (*CreateOrUpdateLawBookResponse, error)
	// @perm
	DeleteLawBook(context.Context, *DeleteLawBookRequest) (*DeleteLawBookResponse, error)
	// @perm: Name=CreateOrUpdateLawBook
	CreateOrUpdateLaw(context.Context, *CreateOrUpdateLawRequest) (*CreateOrUpdateLawResponse, error)
	// @perm: Name=DeleteLawBook
	DeleteLaw(context.Context, *DeleteLawRequest) (*DeleteLawResponse, error)
	mustEmbedUnimplementedRectorLawsServiceServer()
}

// UnimplementedRectorLawsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRectorLawsServiceServer struct{}

func (UnimplementedRectorLawsServiceServer) CreateOrUpdateLawBook(context.Context, *CreateOrUpdateLawBookRequest) (*CreateOrUpdateLawBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateLawBook not implemented")
}
func (UnimplementedRectorLawsServiceServer) DeleteLawBook(context.Context, *DeleteLawBookRequest) (*DeleteLawBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLawBook not implemented")
}
func (UnimplementedRectorLawsServiceServer) CreateOrUpdateLaw(context.Context, *CreateOrUpdateLawRequest) (*CreateOrUpdateLawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateLaw not implemented")
}
func (UnimplementedRectorLawsServiceServer) DeleteLaw(context.Context, *DeleteLawRequest) (*DeleteLawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLaw not implemented")
}
func (UnimplementedRectorLawsServiceServer) mustEmbedUnimplementedRectorLawsServiceServer() {}
func (UnimplementedRectorLawsServiceServer) testEmbeddedByValue()                           {}

// UnsafeRectorLawsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RectorLawsServiceServer will
// result in compilation errors.
type UnsafeRectorLawsServiceServer interface {
	mustEmbedUnimplementedRectorLawsServiceServer()
}

func RegisterRectorLawsServiceServer(s grpc.ServiceRegistrar, srv RectorLawsServiceServer) {
	// If the following call pancis, it indicates UnimplementedRectorLawsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RectorLawsService_ServiceDesc, srv)
}

func _RectorLawsService_CreateOrUpdateLawBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateLawBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorLawsServiceServer).CreateOrUpdateLawBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorLawsService_CreateOrUpdateLawBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorLawsServiceServer).CreateOrUpdateLawBook(ctx, req.(*CreateOrUpdateLawBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorLawsService_DeleteLawBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLawBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorLawsServiceServer).DeleteLawBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorLawsService_DeleteLawBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorLawsServiceServer).DeleteLawBook(ctx, req.(*DeleteLawBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorLawsService_CreateOrUpdateLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateLawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorLawsServiceServer).CreateOrUpdateLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorLawsService_CreateOrUpdateLaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorLawsServiceServer).CreateOrUpdateLaw(ctx, req.(*CreateOrUpdateLawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorLawsService_DeleteLaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorLawsServiceServer).DeleteLaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorLawsService_DeleteLaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorLawsServiceServer).DeleteLaw(ctx, req.(*DeleteLawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RectorLawsService_ServiceDesc is the grpc.ServiceDesc for RectorLawsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RectorLawsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.rector.RectorLawsService",
	HandlerType: (*RectorLawsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateLawBook",
			Handler:    _RectorLawsService_CreateOrUpdateLawBook_Handler,
		},
		{
			MethodName: "DeleteLawBook",
			Handler:    _RectorLawsService_DeleteLawBook_Handler,
		},
		{
			MethodName: "CreateOrUpdateLaw",
			Handler:    _RectorLawsService_CreateOrUpdateLaw_Handler,
		},
		{
			MethodName: "DeleteLaw",
			Handler:    _RectorLawsService_DeleteLaw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/rector/laws.proto",
}
