// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/rector/filestore.proto

package rector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RectorFilestoreService_ListFiles_FullMethodName  = "/services.rector.RectorFilestoreService/ListFiles"
	RectorFilestoreService_UploadFile_FullMethodName = "/services.rector.RectorFilestoreService/UploadFile"
	RectorFilestoreService_DeleteFile_FullMethodName = "/services.rector.RectorFilestoreService/DeleteFile"
)

// RectorFilestoreServiceClient is the client API for RectorFilestoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RectorFilestoreServiceClient interface {
	// @perm: Name=SuperUser
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// @perm: Name=SuperUser
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	// @perm: Name=SuperUser
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
}

type rectorFilestoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRectorFilestoreServiceClient(cc grpc.ClientConnInterface) RectorFilestoreServiceClient {
	return &rectorFilestoreServiceClient{cc}
}

func (c *rectorFilestoreServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, RectorFilestoreService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorFilestoreServiceClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, RectorFilestoreService_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorFilestoreServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, RectorFilestoreService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RectorFilestoreServiceServer is the server API for RectorFilestoreService service.
// All implementations must embed UnimplementedRectorFilestoreServiceServer
// for forward compatibility.
type RectorFilestoreServiceServer interface {
	// @perm: Name=SuperUser
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// @perm: Name=SuperUser
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	// @perm: Name=SuperUser
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	mustEmbedUnimplementedRectorFilestoreServiceServer()
}

// UnimplementedRectorFilestoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRectorFilestoreServiceServer struct{}

func (UnimplementedRectorFilestoreServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedRectorFilestoreServiceServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedRectorFilestoreServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedRectorFilestoreServiceServer) mustEmbedUnimplementedRectorFilestoreServiceServer() {
}
func (UnimplementedRectorFilestoreServiceServer) testEmbeddedByValue() {}

// UnsafeRectorFilestoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RectorFilestoreServiceServer will
// result in compilation errors.
type UnsafeRectorFilestoreServiceServer interface {
	mustEmbedUnimplementedRectorFilestoreServiceServer()
}

func RegisterRectorFilestoreServiceServer(s grpc.ServiceRegistrar, srv RectorFilestoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedRectorFilestoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RectorFilestoreService_ServiceDesc, srv)
}

func _RectorFilestoreService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorFilestoreServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorFilestoreService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorFilestoreServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorFilestoreService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorFilestoreServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorFilestoreService_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorFilestoreServiceServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorFilestoreService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorFilestoreServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorFilestoreService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorFilestoreServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RectorFilestoreService_ServiceDesc is the grpc.ServiceDesc for RectorFilestoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RectorFilestoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.rector.RectorFilestoreService",
	HandlerType: (*RectorFilestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _RectorFilestoreService_ListFiles_Handler,
		},
		{
			MethodName: "UploadFile",
			Handler:    _RectorFilestoreService_UploadFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RectorFilestoreService_DeleteFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/rector/filestore.proto",
}
