// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: services/rector/config.proto

package rector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RectorConfigService_GetAppConfig_FullMethodName    = "/services.rector.RectorConfigService/GetAppConfig"
	RectorConfigService_UpdateAppConfig_FullMethodName = "/services.rector.RectorConfigService/UpdateAppConfig"
)

// RectorConfigServiceClient is the client API for RectorConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RectorConfigServiceClient interface {
	// @perm: Name=SuperUser
	GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...grpc.CallOption) (*GetAppConfigResponse, error)
	// @perm: Name=SuperUser
	UpdateAppConfig(ctx context.Context, in *UpdateAppConfigRequest, opts ...grpc.CallOption) (*UpdateAppConfigResponse, error)
}

type rectorConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRectorConfigServiceClient(cc grpc.ClientConnInterface) RectorConfigServiceClient {
	return &rectorConfigServiceClient{cc}
}

func (c *rectorConfigServiceClient) GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...grpc.CallOption) (*GetAppConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppConfigResponse)
	err := c.cc.Invoke(ctx, RectorConfigService_GetAppConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rectorConfigServiceClient) UpdateAppConfig(ctx context.Context, in *UpdateAppConfigRequest, opts ...grpc.CallOption) (*UpdateAppConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppConfigResponse)
	err := c.cc.Invoke(ctx, RectorConfigService_UpdateAppConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RectorConfigServiceServer is the server API for RectorConfigService service.
// All implementations must embed UnimplementedRectorConfigServiceServer
// for forward compatibility.
type RectorConfigServiceServer interface {
	// @perm: Name=SuperUser
	GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigResponse, error)
	// @perm: Name=SuperUser
	UpdateAppConfig(context.Context, *UpdateAppConfigRequest) (*UpdateAppConfigResponse, error)
	mustEmbedUnimplementedRectorConfigServiceServer()
}

// UnimplementedRectorConfigServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRectorConfigServiceServer struct{}

func (UnimplementedRectorConfigServiceServer) GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppConfig not implemented")
}
func (UnimplementedRectorConfigServiceServer) UpdateAppConfig(context.Context, *UpdateAppConfigRequest) (*UpdateAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppConfig not implemented")
}
func (UnimplementedRectorConfigServiceServer) mustEmbedUnimplementedRectorConfigServiceServer() {}
func (UnimplementedRectorConfigServiceServer) testEmbeddedByValue()                             {}

// UnsafeRectorConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RectorConfigServiceServer will
// result in compilation errors.
type UnsafeRectorConfigServiceServer interface {
	mustEmbedUnimplementedRectorConfigServiceServer()
}

func RegisterRectorConfigServiceServer(s grpc.ServiceRegistrar, srv RectorConfigServiceServer) {
	// If the following call pancis, it indicates UnimplementedRectorConfigServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RectorConfigService_ServiceDesc, srv)
}

func _RectorConfigService_GetAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorConfigServiceServer).GetAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorConfigService_GetAppConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorConfigServiceServer).GetAppConfig(ctx, req.(*GetAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RectorConfigService_UpdateAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RectorConfigServiceServer).UpdateAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RectorConfigService_UpdateAppConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RectorConfigServiceServer).UpdateAppConfig(ctx, req.(*UpdateAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RectorConfigService_ServiceDesc is the grpc.ServiceDesc for RectorConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RectorConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.rector.RectorConfigService",
	HandlerType: (*RectorConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppConfig",
			Handler:    _RectorConfigService_GetAppConfig_Handler,
		},
		{
			MethodName: "UpdateAppConfig",
			Handler:    _RectorConfigService_UpdateAppConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/rector/config.proto",
}
