// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: services/mailer/mailer.proto

package mailer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MailerService_ListEmails_FullMethodName             = "/services.mailer.MailerService/ListEmails"
	MailerService_GetEmail_FullMethodName               = "/services.mailer.MailerService/GetEmail"
	MailerService_CreateOrUpdateEmail_FullMethodName    = "/services.mailer.MailerService/CreateOrUpdateEmail"
	MailerService_DeleteEmail_FullMethodName            = "/services.mailer.MailerService/DeleteEmail"
	MailerService_GetEmailProposals_FullMethodName      = "/services.mailer.MailerService/GetEmailProposals"
	MailerService_ListTemplates_FullMethodName          = "/services.mailer.MailerService/ListTemplates"
	MailerService_GetTemplate_FullMethodName            = "/services.mailer.MailerService/GetTemplate"
	MailerService_CreateOrUpdateTemplate_FullMethodName = "/services.mailer.MailerService/CreateOrUpdateTemplate"
	MailerService_DeleteTemplate_FullMethodName         = "/services.mailer.MailerService/DeleteTemplate"
	MailerService_ListThreads_FullMethodName            = "/services.mailer.MailerService/ListThreads"
	MailerService_GetThread_FullMethodName              = "/services.mailer.MailerService/GetThread"
	MailerService_CreateThread_FullMethodName           = "/services.mailer.MailerService/CreateThread"
	MailerService_DeleteThread_FullMethodName           = "/services.mailer.MailerService/DeleteThread"
	MailerService_GetThreadState_FullMethodName         = "/services.mailer.MailerService/GetThreadState"
	MailerService_SetThreadState_FullMethodName         = "/services.mailer.MailerService/SetThreadState"
	MailerService_SearchThreads_FullMethodName          = "/services.mailer.MailerService/SearchThreads"
	MailerService_ListThreadMessages_FullMethodName     = "/services.mailer.MailerService/ListThreadMessages"
	MailerService_PostMessage_FullMethodName            = "/services.mailer.MailerService/PostMessage"
	MailerService_DeleteMessage_FullMethodName          = "/services.mailer.MailerService/DeleteMessage"
	MailerService_GetEmailSettings_FullMethodName       = "/services.mailer.MailerService/GetEmailSettings"
	MailerService_SetEmailSettings_FullMethodName       = "/services.mailer.MailerService/SetEmailSettings"
)

// MailerServiceClient is the client API for MailerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailerServiceClient interface {
	// @perm
	ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*ListEmailsResponse, error)
	// @perm: Name=ListEmails
	GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Job"}
	CreateOrUpdateEmail(ctx context.Context, in *CreateOrUpdateEmailRequest, opts ...grpc.CallOption) (*CreateOrUpdateEmailResponse, error)
	// @perm
	DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*DeleteEmailResponse, error)
	// @perm: Name=ListEmails
	GetEmailProposals(ctx context.Context, in *GetEmailProposalsRequest, opts ...grpc.CallOption) (*GetEmailProposalsResponse, error)
	// @perm: Name=ListEmails
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// @perm: Name=ListEmails
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// @perm: Name=ListEmails
	CreateOrUpdateTemplate(ctx context.Context, in *CreateOrUpdateTemplateRequest, opts ...grpc.CallOption) (*CreateOrUpdateTemplateResponse, error)
	// @perm: Name=ListEmails
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	// @perm: Name=ListEmails
	ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error)
	// @perm: Name=ListEmails
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadResponse, error)
	// @perm: Name=ListEmails
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	// @perm: Name=Superuser
	DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error)
	// @perm: Name=ListEmails
	GetThreadState(ctx context.Context, in *GetThreadStateRequest, opts ...grpc.CallOption) (*GetThreadStateResponse, error)
	// @perm: Name=ListEmails
	SetThreadState(ctx context.Context, in *SetThreadStateRequest, opts ...grpc.CallOption) (*SetThreadStateResponse, error)
	// @perm: Name=ListEmails
	SearchThreads(ctx context.Context, in *SearchThreadsRequest, opts ...grpc.CallOption) (*SearchThreadsResponse, error)
	// @perm: Name=ListEmails
	ListThreadMessages(ctx context.Context, in *ListThreadMessagesRequest, opts ...grpc.CallOption) (*ListThreadMessagesResponse, error)
	// @perm: Name=ListEmails
	PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error)
	// @perm: Name=Superuser
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	// @perm: Name=ListEmails
	GetEmailSettings(ctx context.Context, in *GetEmailSettingsRequest, opts ...grpc.CallOption) (*GetEmailSettingsResponse, error)
	// @perm: Name=ListEmails
	SetEmailSettings(ctx context.Context, in *SetEmailSettingsRequest, opts ...grpc.CallOption) (*SetEmailSettingsResponse, error)
}

type mailerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailerServiceClient(cc grpc.ClientConnInterface) MailerServiceClient {
	return &mailerServiceClient{cc}
}

func (c *mailerServiceClient) ListEmails(ctx context.Context, in *ListEmailsRequest, opts ...grpc.CallOption) (*ListEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEmailsResponse)
	err := c.cc.Invoke(ctx, MailerService_ListEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) GetEmail(ctx context.Context, in *GetEmailRequest, opts ...grpc.CallOption) (*GetEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailResponse)
	err := c.cc.Invoke(ctx, MailerService_GetEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) CreateOrUpdateEmail(ctx context.Context, in *CreateOrUpdateEmailRequest, opts ...grpc.CallOption) (*CreateOrUpdateEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateEmailResponse)
	err := c.cc.Invoke(ctx, MailerService_CreateOrUpdateEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) DeleteEmail(ctx context.Context, in *DeleteEmailRequest, opts ...grpc.CallOption) (*DeleteEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEmailResponse)
	err := c.cc.Invoke(ctx, MailerService_DeleteEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) GetEmailProposals(ctx context.Context, in *GetEmailProposalsRequest, opts ...grpc.CallOption) (*GetEmailProposalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailProposalsResponse)
	err := c.cc.Invoke(ctx, MailerService_GetEmailProposals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, MailerService_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, MailerService_GetTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) CreateOrUpdateTemplate(ctx context.Context, in *CreateOrUpdateTemplateRequest, opts ...grpc.CallOption) (*CreateOrUpdateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateTemplateResponse)
	err := c.cc.Invoke(ctx, MailerService_CreateOrUpdateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, MailerService_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) ListThreads(ctx context.Context, in *ListThreadsRequest, opts ...grpc.CallOption) (*ListThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThreadsResponse)
	err := c.cc.Invoke(ctx, MailerService_ListThreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThreadResponse)
	err := c.cc.Invoke(ctx, MailerService_GetThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateThreadResponse)
	err := c.cc.Invoke(ctx, MailerService_CreateThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) DeleteThread(ctx context.Context, in *DeleteThreadRequest, opts ...grpc.CallOption) (*DeleteThreadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteThreadResponse)
	err := c.cc.Invoke(ctx, MailerService_DeleteThread_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) GetThreadState(ctx context.Context, in *GetThreadStateRequest, opts ...grpc.CallOption) (*GetThreadStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThreadStateResponse)
	err := c.cc.Invoke(ctx, MailerService_GetThreadState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) SetThreadState(ctx context.Context, in *SetThreadStateRequest, opts ...grpc.CallOption) (*SetThreadStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetThreadStateResponse)
	err := c.cc.Invoke(ctx, MailerService_SetThreadState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) SearchThreads(ctx context.Context, in *SearchThreadsRequest, opts ...grpc.CallOption) (*SearchThreadsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchThreadsResponse)
	err := c.cc.Invoke(ctx, MailerService_SearchThreads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) ListThreadMessages(ctx context.Context, in *ListThreadMessagesRequest, opts ...grpc.CallOption) (*ListThreadMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThreadMessagesResponse)
	err := c.cc.Invoke(ctx, MailerService_ListThreadMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) PostMessage(ctx context.Context, in *PostMessageRequest, opts ...grpc.CallOption) (*PostMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostMessageResponse)
	err := c.cc.Invoke(ctx, MailerService_PostMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, MailerService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) GetEmailSettings(ctx context.Context, in *GetEmailSettingsRequest, opts ...grpc.CallOption) (*GetEmailSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEmailSettingsResponse)
	err := c.cc.Invoke(ctx, MailerService_GetEmailSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailerServiceClient) SetEmailSettings(ctx context.Context, in *SetEmailSettingsRequest, opts ...grpc.CallOption) (*SetEmailSettingsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEmailSettingsResponse)
	err := c.cc.Invoke(ctx, MailerService_SetEmailSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailerServiceServer is the server API for MailerService service.
// All implementations must embed UnimplementedMailerServiceServer
// for forward compatibility.
type MailerServiceServer interface {
	// @perm
	ListEmails(context.Context, *ListEmailsRequest) (*ListEmailsResponse, error)
	// @perm: Name=ListEmails
	GetEmail(context.Context, *GetEmailRequest) (*GetEmailResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Job"}
	CreateOrUpdateEmail(context.Context, *CreateOrUpdateEmailRequest) (*CreateOrUpdateEmailResponse, error)
	// @perm
	DeleteEmail(context.Context, *DeleteEmailRequest) (*DeleteEmailResponse, error)
	// @perm: Name=ListEmails
	GetEmailProposals(context.Context, *GetEmailProposalsRequest) (*GetEmailProposalsResponse, error)
	// @perm: Name=ListEmails
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// @perm: Name=ListEmails
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// @perm: Name=ListEmails
	CreateOrUpdateTemplate(context.Context, *CreateOrUpdateTemplateRequest) (*CreateOrUpdateTemplateResponse, error)
	// @perm: Name=ListEmails
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	// @perm: Name=ListEmails
	ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error)
	// @perm: Name=ListEmails
	GetThread(context.Context, *GetThreadRequest) (*GetThreadResponse, error)
	// @perm: Name=ListEmails
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	// @perm: Name=Superuser
	DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadResponse, error)
	// @perm: Name=ListEmails
	GetThreadState(context.Context, *GetThreadStateRequest) (*GetThreadStateResponse, error)
	// @perm: Name=ListEmails
	SetThreadState(context.Context, *SetThreadStateRequest) (*SetThreadStateResponse, error)
	// @perm: Name=ListEmails
	SearchThreads(context.Context, *SearchThreadsRequest) (*SearchThreadsResponse, error)
	// @perm: Name=ListEmails
	ListThreadMessages(context.Context, *ListThreadMessagesRequest) (*ListThreadMessagesResponse, error)
	// @perm: Name=ListEmails
	PostMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error)
	// @perm: Name=Superuser
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	// @perm: Name=ListEmails
	GetEmailSettings(context.Context, *GetEmailSettingsRequest) (*GetEmailSettingsResponse, error)
	// @perm: Name=ListEmails
	SetEmailSettings(context.Context, *SetEmailSettingsRequest) (*SetEmailSettingsResponse, error)
	mustEmbedUnimplementedMailerServiceServer()
}

// UnimplementedMailerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMailerServiceServer struct{}

func (UnimplementedMailerServiceServer) ListEmails(context.Context, *ListEmailsRequest) (*ListEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmails not implemented")
}
func (UnimplementedMailerServiceServer) GetEmail(context.Context, *GetEmailRequest) (*GetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmail not implemented")
}
func (UnimplementedMailerServiceServer) CreateOrUpdateEmail(context.Context, *CreateOrUpdateEmailRequest) (*CreateOrUpdateEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateEmail not implemented")
}
func (UnimplementedMailerServiceServer) DeleteEmail(context.Context, *DeleteEmailRequest) (*DeleteEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmail not implemented")
}
func (UnimplementedMailerServiceServer) GetEmailProposals(context.Context, *GetEmailProposalsRequest) (*GetEmailProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailProposals not implemented")
}
func (UnimplementedMailerServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedMailerServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedMailerServiceServer) CreateOrUpdateTemplate(context.Context, *CreateOrUpdateTemplateRequest) (*CreateOrUpdateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateTemplate not implemented")
}
func (UnimplementedMailerServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedMailerServiceServer) ListThreads(context.Context, *ListThreadsRequest) (*ListThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreads not implemented")
}
func (UnimplementedMailerServiceServer) GetThread(context.Context, *GetThreadRequest) (*GetThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedMailerServiceServer) CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedMailerServiceServer) DeleteThread(context.Context, *DeleteThreadRequest) (*DeleteThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThread not implemented")
}
func (UnimplementedMailerServiceServer) GetThreadState(context.Context, *GetThreadStateRequest) (*GetThreadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreadState not implemented")
}
func (UnimplementedMailerServiceServer) SetThreadState(context.Context, *SetThreadStateRequest) (*SetThreadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetThreadState not implemented")
}
func (UnimplementedMailerServiceServer) SearchThreads(context.Context, *SearchThreadsRequest) (*SearchThreadsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchThreads not implemented")
}
func (UnimplementedMailerServiceServer) ListThreadMessages(context.Context, *ListThreadMessagesRequest) (*ListThreadMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreadMessages not implemented")
}
func (UnimplementedMailerServiceServer) PostMessage(context.Context, *PostMessageRequest) (*PostMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostMessage not implemented")
}
func (UnimplementedMailerServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedMailerServiceServer) GetEmailSettings(context.Context, *GetEmailSettingsRequest) (*GetEmailSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailSettings not implemented")
}
func (UnimplementedMailerServiceServer) SetEmailSettings(context.Context, *SetEmailSettingsRequest) (*SetEmailSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmailSettings not implemented")
}
func (UnimplementedMailerServiceServer) mustEmbedUnimplementedMailerServiceServer() {}
func (UnimplementedMailerServiceServer) testEmbeddedByValue()                       {}

// UnsafeMailerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailerServiceServer will
// result in compilation errors.
type UnsafeMailerServiceServer interface {
	mustEmbedUnimplementedMailerServiceServer()
}

func RegisterMailerServiceServer(s grpc.ServiceRegistrar, srv MailerServiceServer) {
	// If the following call pancis, it indicates UnimplementedMailerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MailerService_ServiceDesc, srv)
}

func _MailerService_ListEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).ListEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_ListEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).ListEmails(ctx, req.(*ListEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_GetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).GetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_GetEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).GetEmail(ctx, req.(*GetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_CreateOrUpdateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).CreateOrUpdateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_CreateOrUpdateEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).CreateOrUpdateEmail(ctx, req.(*CreateOrUpdateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_DeleteEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).DeleteEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_DeleteEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).DeleteEmail(ctx, req.(*DeleteEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_GetEmailProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).GetEmailProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_GetEmailProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).GetEmailProposals(ctx, req.(*GetEmailProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_CreateOrUpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).CreateOrUpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_CreateOrUpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).CreateOrUpdateTemplate(ctx, req.(*CreateOrUpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_ListThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).ListThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_ListThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).ListThreads(ctx, req.(*ListThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_GetThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_CreateThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_DeleteThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).DeleteThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_DeleteThread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).DeleteThread(ctx, req.(*DeleteThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_GetThreadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).GetThreadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_GetThreadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).GetThreadState(ctx, req.(*GetThreadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_SetThreadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetThreadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).SetThreadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_SetThreadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).SetThreadState(ctx, req.(*SetThreadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_SearchThreads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchThreadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).SearchThreads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_SearchThreads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).SearchThreads(ctx, req.(*SearchThreadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_ListThreadMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreadMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).ListThreadMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_ListThreadMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).ListThreadMessages(ctx, req.(*ListThreadMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_PostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).PostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_PostMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).PostMessage(ctx, req.(*PostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_GetEmailSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).GetEmailSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_GetEmailSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).GetEmailSettings(ctx, req.(*GetEmailSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailerService_SetEmailSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailerServiceServer).SetEmailSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailerService_SetEmailSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailerServiceServer).SetEmailSettings(ctx, req.(*SetEmailSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailerService_ServiceDesc is the grpc.ServiceDesc for MailerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.mailer.MailerService",
	HandlerType: (*MailerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEmails",
			Handler:    _MailerService_ListEmails_Handler,
		},
		{
			MethodName: "GetEmail",
			Handler:    _MailerService_GetEmail_Handler,
		},
		{
			MethodName: "CreateOrUpdateEmail",
			Handler:    _MailerService_CreateOrUpdateEmail_Handler,
		},
		{
			MethodName: "DeleteEmail",
			Handler:    _MailerService_DeleteEmail_Handler,
		},
		{
			MethodName: "GetEmailProposals",
			Handler:    _MailerService_GetEmailProposals_Handler,
		},
		{
			MethodName: "ListTemplates",
			Handler:    _MailerService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _MailerService_GetTemplate_Handler,
		},
		{
			MethodName: "CreateOrUpdateTemplate",
			Handler:    _MailerService_CreateOrUpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _MailerService_DeleteTemplate_Handler,
		},
		{
			MethodName: "ListThreads",
			Handler:    _MailerService_ListThreads_Handler,
		},
		{
			MethodName: "GetThread",
			Handler:    _MailerService_GetThread_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _MailerService_CreateThread_Handler,
		},
		{
			MethodName: "DeleteThread",
			Handler:    _MailerService_DeleteThread_Handler,
		},
		{
			MethodName: "GetThreadState",
			Handler:    _MailerService_GetThreadState_Handler,
		},
		{
			MethodName: "SetThreadState",
			Handler:    _MailerService_SetThreadState_Handler,
		},
		{
			MethodName: "SearchThreads",
			Handler:    _MailerService_SearchThreads_Handler,
		},
		{
			MethodName: "ListThreadMessages",
			Handler:    _MailerService_ListThreadMessages_Handler,
		},
		{
			MethodName: "PostMessage",
			Handler:    _MailerService_PostMessage_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _MailerService_DeleteMessage_Handler,
		},
		{
			MethodName: "GetEmailSettings",
			Handler:    _MailerService_GetEmailSettings_Handler,
		},
		{
			MethodName: "SetEmailSettings",
			Handler:    _MailerService_SetEmailSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/mailer/mailer.proto",
}
