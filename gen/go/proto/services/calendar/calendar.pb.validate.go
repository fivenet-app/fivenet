// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/calendar/calendar.proto

package calendar

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	calendar "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/calendar"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = calendar.AccessLevel(0)
)

// Validate checks the field values on ListCalendarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsRequestMultiError, or nil if none found.
func (m *ListCalendarsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCalendarsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OnlyPublic

	if m.MinAccessLevel != nil {
		// no validation rules for MinAccessLevel
	}

	if m.After != nil {

		if all {
			switch v := interface{}(m.GetAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarsRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarsRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarsRequestValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarsRequestMultiError(errors)
	}

	return nil
}

// ListCalendarsRequestMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsRequestMultiError) AllErrors() []error { return m }

// ListCalendarsRequestValidationError is the validation error returned by
// ListCalendarsRequest.Validate if the designated constraints aren't met.
type ListCalendarsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsRequestValidationError) ErrorName() string {
	return "ListCalendarsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsRequestValidationError{}

// Validate checks the field values on ListCalendarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarsResponseMultiError, or nil if none found.
func (m *ListCalendarsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCalendarsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetCalendars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarsResponseValidationError{
						field:  fmt.Sprintf("Calendars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarsResponseValidationError{
						field:  fmt.Sprintf("Calendars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarsResponseValidationError{
					field:  fmt.Sprintf("Calendars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarsResponseMultiError(errors)
	}

	return nil
}

// ListCalendarsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCalendarsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCalendarsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarsResponseMultiError) AllErrors() []error { return m }

// ListCalendarsResponseValidationError is the validation error returned by
// ListCalendarsResponse.Validate if the designated constraints aren't met.
type ListCalendarsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarsResponseValidationError) ErrorName() string {
	return "ListCalendarsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarsResponseValidationError{}

// Validate checks the field values on GetCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCalendarRequestMultiError, or nil if none found.
func (m *GetCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	if len(errors) > 0 {
		return GetCalendarRequestMultiError(errors)
	}

	return nil
}

// GetCalendarRequestMultiError is an error wrapping multiple validation errors
// returned by GetCalendarRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCalendarRequestMultiError) AllErrors() []error { return m }

// GetCalendarRequestValidationError is the validation error returned by
// GetCalendarRequest.Validate if the designated constraints aren't met.
type GetCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCalendarRequestValidationError) ErrorName() string {
	return "GetCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCalendarRequestValidationError{}

// Validate checks the field values on GetCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCalendarResponseMultiError, or nil if none found.
func (m *GetCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCalendarResponseValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCalendarResponseMultiError(errors)
	}

	return nil
}

// GetCalendarResponseMultiError is an error wrapping multiple validation
// errors returned by GetCalendarResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCalendarResponseMultiError) AllErrors() []error { return m }

// GetCalendarResponseValidationError is the validation error returned by
// GetCalendarResponse.Validate if the designated constraints aren't met.
type GetCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCalendarResponseValidationError) ErrorName() string {
	return "GetCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCalendarResponseValidationError{}

// Validate checks the field values on CreateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCalendarRequestMultiError, or nil if none found.
func (m *CreateCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCalendar() == nil {
		err := CreateCalendarRequestValidationError{
			field:  "Calendar",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarRequestValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCalendarRequestMultiError(errors)
	}

	return nil
}

// CreateCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCalendarRequestMultiError) AllErrors() []error { return m }

// CreateCalendarRequestValidationError is the validation error returned by
// CreateCalendarRequest.Validate if the designated constraints aren't met.
type CreateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarRequestValidationError) ErrorName() string {
	return "CreateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarRequestValidationError{}

// Validate checks the field values on CreateCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCalendarResponseMultiError, or nil if none found.
func (m *CreateCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCalendarResponseValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCalendarResponseMultiError(errors)
	}

	return nil
}

// CreateCalendarResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCalendarResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCalendarResponseMultiError) AllErrors() []error { return m }

// CreateCalendarResponseValidationError is the validation error returned by
// CreateCalendarResponse.Validate if the designated constraints aren't met.
type CreateCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCalendarResponseValidationError) ErrorName() string {
	return "CreateCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCalendarResponseValidationError{}

// Validate checks the field values on UpdateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCalendarRequestMultiError, or nil if none found.
func (m *UpdateCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCalendar() == nil {
		err := UpdateCalendarRequestValidationError{
			field:  "Calendar",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCalendarRequestValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCalendarRequestValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCalendarRequestMultiError(errors)
	}

	return nil
}

// UpdateCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCalendarRequestMultiError) AllErrors() []error { return m }

// UpdateCalendarRequestValidationError is the validation error returned by
// UpdateCalendarRequest.Validate if the designated constraints aren't met.
type UpdateCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCalendarRequestValidationError) ErrorName() string {
	return "UpdateCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCalendarRequestValidationError{}

// Validate checks the field values on UpdateCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCalendarResponseMultiError, or nil if none found.
func (m *UpdateCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCalendar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCalendarResponseValidationError{
					field:  "Calendar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCalendar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCalendarResponseValidationError{
				field:  "Calendar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateCalendarResponseMultiError(errors)
	}

	return nil
}

// UpdateCalendarResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCalendarResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCalendarResponseMultiError) AllErrors() []error { return m }

// UpdateCalendarResponseValidationError is the validation error returned by
// UpdateCalendarResponse.Validate if the designated constraints aren't met.
type UpdateCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCalendarResponseValidationError) ErrorName() string {
	return "UpdateCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCalendarResponseValidationError{}

// Validate checks the field values on DeleteCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarRequestMultiError, or nil if none found.
func (m *DeleteCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CalendarId

	if len(errors) > 0 {
		return DeleteCalendarRequestMultiError(errors)
	}

	return nil
}

// DeleteCalendarRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCalendarRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarRequestMultiError) AllErrors() []error { return m }

// DeleteCalendarRequestValidationError is the validation error returned by
// DeleteCalendarRequest.Validate if the designated constraints aren't met.
type DeleteCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarRequestValidationError) ErrorName() string {
	return "DeleteCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarRequestValidationError{}

// Validate checks the field values on DeleteCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarResponseMultiError, or nil if none found.
func (m *DeleteCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCalendarResponseMultiError(errors)
	}

	return nil
}

// DeleteCalendarResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCalendarResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarResponseMultiError) AllErrors() []error { return m }

// DeleteCalendarResponseValidationError is the validation error returned by
// DeleteCalendarResponse.Validate if the designated constraints aren't met.
type DeleteCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarResponseValidationError) ErrorName() string {
	return "DeleteCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarResponseValidationError{}

// Validate checks the field values on ListCalendarEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarEntriesRequestMultiError, or nil if none found.
func (m *ListCalendarEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetYear() < 2023 {
		err := ListCalendarEntriesRequestValidationError{
			field:  "Year",
			reason: "value must be greater than or equal to 2023",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMonth(); val < 1 || val > 12 {
		err := ListCalendarEntriesRequestValidationError{
			field:  "Month",
			reason: "value must be inside range [1, 12]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.ShowHidden != nil {
		// no validation rules for ShowHidden
	}

	if m.After != nil {

		if all {
			switch v := interface{}(m.GetAfter()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarEntriesRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarEntriesRequestValidationError{
						field:  "After",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAfter()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarEntriesRequestValidationError{
					field:  "After",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarEntriesRequestMultiError(errors)
	}

	return nil
}

// ListCalendarEntriesRequestMultiError is an error wrapping multiple
// validation errors returned by ListCalendarEntriesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarEntriesRequestMultiError) AllErrors() []error { return m }

// ListCalendarEntriesRequestValidationError is the validation error returned
// by ListCalendarEntriesRequest.Validate if the designated constraints aren't met.
type ListCalendarEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarEntriesRequestValidationError) ErrorName() string {
	return "ListCalendarEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarEntriesRequestValidationError{}

// Validate checks the field values on ListCalendarEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarEntriesResponseMultiError, or nil if none found.
func (m *ListCalendarEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarEntriesResponseMultiError(errors)
	}

	return nil
}

// ListCalendarEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListCalendarEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarEntriesResponseMultiError) AllErrors() []error { return m }

// ListCalendarEntriesResponseValidationError is the validation error returned
// by ListCalendarEntriesResponse.Validate if the designated constraints
// aren't met.
type ListCalendarEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarEntriesResponseValidationError) ErrorName() string {
	return "ListCalendarEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarEntriesResponseValidationError{}

// Validate checks the field values on GetUpcomingEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpcomingEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpcomingEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpcomingEntriesRequestMultiError, or nil if none found.
func (m *GetUpcomingEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpcomingEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Seconds

	if len(errors) > 0 {
		return GetUpcomingEntriesRequestMultiError(errors)
	}

	return nil
}

// GetUpcomingEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by GetUpcomingEntriesRequest.ValidateAll() if the
// designated constraints aren't met.
type GetUpcomingEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpcomingEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpcomingEntriesRequestMultiError) AllErrors() []error { return m }

// GetUpcomingEntriesRequestValidationError is the validation error returned by
// GetUpcomingEntriesRequest.Validate if the designated constraints aren't met.
type GetUpcomingEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpcomingEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpcomingEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpcomingEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpcomingEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpcomingEntriesRequestValidationError) ErrorName() string {
	return "GetUpcomingEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpcomingEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpcomingEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpcomingEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpcomingEntriesRequestValidationError{}

// Validate checks the field values on GetUpcomingEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUpcomingEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUpcomingEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUpcomingEntriesResponseMultiError, or nil if none found.
func (m *GetUpcomingEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUpcomingEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUpcomingEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUpcomingEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUpcomingEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetUpcomingEntriesResponseMultiError(errors)
	}

	return nil
}

// GetUpcomingEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by GetUpcomingEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetUpcomingEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUpcomingEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUpcomingEntriesResponseMultiError) AllErrors() []error { return m }

// GetUpcomingEntriesResponseValidationError is the validation error returned
// by GetUpcomingEntriesResponse.Validate if the designated constraints aren't met.
type GetUpcomingEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUpcomingEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUpcomingEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUpcomingEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUpcomingEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUpcomingEntriesResponseValidationError) ErrorName() string {
	return "GetUpcomingEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUpcomingEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUpcomingEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUpcomingEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUpcomingEntriesResponseValidationError{}

// Validate checks the field values on GetCalendarEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCalendarEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCalendarEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCalendarEntryRequestMultiError, or nil if none found.
func (m *GetCalendarEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCalendarEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryId

	if len(errors) > 0 {
		return GetCalendarEntryRequestMultiError(errors)
	}

	return nil
}

// GetCalendarEntryRequestMultiError is an error wrapping multiple validation
// errors returned by GetCalendarEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCalendarEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCalendarEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCalendarEntryRequestMultiError) AllErrors() []error { return m }

// GetCalendarEntryRequestValidationError is the validation error returned by
// GetCalendarEntryRequest.Validate if the designated constraints aren't met.
type GetCalendarEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCalendarEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCalendarEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCalendarEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCalendarEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCalendarEntryRequestValidationError) ErrorName() string {
	return "GetCalendarEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCalendarEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCalendarEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCalendarEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCalendarEntryRequestValidationError{}

// Validate checks the field values on GetCalendarEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCalendarEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCalendarEntryResponseMultiError, or nil if none found.
func (m *GetCalendarEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCalendarEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCalendarEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCalendarEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCalendarEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCalendarEntryResponseMultiError(errors)
	}

	return nil
}

// GetCalendarEntryResponseMultiError is an error wrapping multiple validation
// errors returned by GetCalendarEntryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCalendarEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCalendarEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCalendarEntryResponseMultiError) AllErrors() []error { return m }

// GetCalendarEntryResponseValidationError is the validation error returned by
// GetCalendarEntryResponse.Validate if the designated constraints aren't met.
type GetCalendarEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCalendarEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCalendarEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCalendarEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCalendarEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCalendarEntryResponseValidationError) ErrorName() string {
	return "GetCalendarEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCalendarEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCalendarEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCalendarEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCalendarEntryResponseValidationError{}

// Validate checks the field values on CreateOrUpdateCalendarEntryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateCalendarEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCalendarEntryRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCalendarEntryRequestMultiError, or nil if none found.
func (m *CreateOrUpdateCalendarEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCalendarEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := CreateOrUpdateCalendarEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCalendarEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCalendarEntryRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCalendarEntryRequestMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateCalendarEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCalendarEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCalendarEntryRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateCalendarEntryRequestValidationError is the validation error
// returned by CreateOrUpdateCalendarEntryRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCalendarEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCalendarEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCalendarEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCalendarEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCalendarEntryRequestValidationError) ErrorName() string {
	return "CreateOrUpdateCalendarEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCalendarEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCalendarEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCalendarEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCalendarEntryRequestValidationError{}

// Validate checks the field values on CreateOrUpdateCalendarEntryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CreateOrUpdateCalendarEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCalendarEntryResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCalendarEntryResponseMultiError, or nil if none found.
func (m *CreateOrUpdateCalendarEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCalendarEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCalendarEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCalendarEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCalendarEntryResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCalendarEntryResponseMultiError is an error wrapping multiple
// validation errors returned by
// CreateOrUpdateCalendarEntryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCalendarEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCalendarEntryResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateCalendarEntryResponseValidationError is the validation error
// returned by CreateOrUpdateCalendarEntryResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCalendarEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCalendarEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCalendarEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCalendarEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCalendarEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCalendarEntryResponseValidationError) ErrorName() string {
	return "CreateOrUpdateCalendarEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCalendarEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCalendarEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCalendarEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCalendarEntryResponseValidationError{}

// Validate checks the field values on DeleteCalendarEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarEntryRequestMultiError, or nil if none found.
func (m *DeleteCalendarEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryId

	if len(errors) > 0 {
		return DeleteCalendarEntryRequestMultiError(errors)
	}

	return nil
}

// DeleteCalendarEntryRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteCalendarEntryRequest.ValidateAll() if
// the designated constraints aren't met.
type DeleteCalendarEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarEntryRequestMultiError) AllErrors() []error { return m }

// DeleteCalendarEntryRequestValidationError is the validation error returned
// by DeleteCalendarEntryRequest.Validate if the designated constraints aren't met.
type DeleteCalendarEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarEntryRequestValidationError) ErrorName() string {
	return "DeleteCalendarEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarEntryRequestValidationError{}

// Validate checks the field values on DeleteCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCalendarEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCalendarEntryResponseMultiError, or nil if none found.
func (m *DeleteCalendarEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCalendarEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCalendarEntryResponseMultiError(errors)
	}

	return nil
}

// DeleteCalendarEntryResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteCalendarEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteCalendarEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCalendarEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCalendarEntryResponseMultiError) AllErrors() []error { return m }

// DeleteCalendarEntryResponseValidationError is the validation error returned
// by DeleteCalendarEntryResponse.Validate if the designated constraints
// aren't met.
type DeleteCalendarEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCalendarEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCalendarEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCalendarEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCalendarEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCalendarEntryResponseValidationError) ErrorName() string {
	return "DeleteCalendarEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCalendarEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCalendarEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCalendarEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCalendarEntryResponseValidationError{}

// Validate checks the field values on ShareCalendarEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareCalendarEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareCalendarEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareCalendarEntryRequestMultiError, or nil if none found.
func (m *ShareCalendarEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareCalendarEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EntryId

	if len(errors) > 0 {
		return ShareCalendarEntryRequestMultiError(errors)
	}

	return nil
}

// ShareCalendarEntryRequestMultiError is an error wrapping multiple validation
// errors returned by ShareCalendarEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type ShareCalendarEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareCalendarEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareCalendarEntryRequestMultiError) AllErrors() []error { return m }

// ShareCalendarEntryRequestValidationError is the validation error returned by
// ShareCalendarEntryRequest.Validate if the designated constraints aren't met.
type ShareCalendarEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareCalendarEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareCalendarEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareCalendarEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareCalendarEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareCalendarEntryRequestValidationError) ErrorName() string {
	return "ShareCalendarEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShareCalendarEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareCalendarEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareCalendarEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareCalendarEntryRequestValidationError{}

// Validate checks the field values on ShareCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShareCalendarEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShareCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShareCalendarEntryResponseMultiError, or nil if none found.
func (m *ShareCalendarEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShareCalendarEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ShareCalendarEntryResponseMultiError(errors)
	}

	return nil
}

// ShareCalendarEntryResponseMultiError is an error wrapping multiple
// validation errors returned by ShareCalendarEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type ShareCalendarEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShareCalendarEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShareCalendarEntryResponseMultiError) AllErrors() []error { return m }

// ShareCalendarEntryResponseValidationError is the validation error returned
// by ShareCalendarEntryResponse.Validate if the designated constraints aren't met.
type ShareCalendarEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShareCalendarEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShareCalendarEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShareCalendarEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShareCalendarEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShareCalendarEntryResponseValidationError) ErrorName() string {
	return "ShareCalendarEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShareCalendarEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShareCalendarEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShareCalendarEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShareCalendarEntryResponseValidationError{}

// Validate checks the field values on ListCalendarEntryRSVPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarEntryRSVPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarEntryRSVPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCalendarEntryRSVPRequestMultiError, or nil if none found.
func (m *ListCalendarEntryRSVPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarEntryRSVPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCalendarEntryRSVPRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarEntryRSVPRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarEntryRSVPRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarEntryRSVPRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for EntryId

	if len(errors) > 0 {
		return ListCalendarEntryRSVPRequestMultiError(errors)
	}

	return nil
}

// ListCalendarEntryRSVPRequestMultiError is an error wrapping multiple
// validation errors returned by ListCalendarEntryRSVPRequest.ValidateAll() if
// the designated constraints aren't met.
type ListCalendarEntryRSVPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarEntryRSVPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarEntryRSVPRequestMultiError) AllErrors() []error { return m }

// ListCalendarEntryRSVPRequestValidationError is the validation error returned
// by ListCalendarEntryRSVPRequest.Validate if the designated constraints
// aren't met.
type ListCalendarEntryRSVPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarEntryRSVPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarEntryRSVPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarEntryRSVPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarEntryRSVPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarEntryRSVPRequestValidationError) ErrorName() string {
	return "ListCalendarEntryRSVPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarEntryRSVPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarEntryRSVPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarEntryRSVPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarEntryRSVPRequestValidationError{}

// Validate checks the field values on ListCalendarEntryRSVPResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCalendarEntryRSVPResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCalendarEntryRSVPResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListCalendarEntryRSVPResponseMultiError, or nil if none found.
func (m *ListCalendarEntryRSVPResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCalendarEntryRSVPResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCalendarEntryRSVPResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCalendarEntryRSVPResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCalendarEntryRSVPResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCalendarEntryRSVPResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCalendarEntryRSVPResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCalendarEntryRSVPResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCalendarEntryRSVPResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCalendarEntryRSVPResponseMultiError(errors)
	}

	return nil
}

// ListCalendarEntryRSVPResponseMultiError is an error wrapping multiple
// validation errors returned by ListCalendarEntryRSVPResponse.ValidateAll()
// if the designated constraints aren't met.
type ListCalendarEntryRSVPResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCalendarEntryRSVPResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCalendarEntryRSVPResponseMultiError) AllErrors() []error { return m }

// ListCalendarEntryRSVPResponseValidationError is the validation error
// returned by ListCalendarEntryRSVPResponse.Validate if the designated
// constraints aren't met.
type ListCalendarEntryRSVPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCalendarEntryRSVPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCalendarEntryRSVPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCalendarEntryRSVPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCalendarEntryRSVPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCalendarEntryRSVPResponseValidationError) ErrorName() string {
	return "ListCalendarEntryRSVPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCalendarEntryRSVPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCalendarEntryRSVPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCalendarEntryRSVPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCalendarEntryRSVPResponseValidationError{}

// Validate checks the field values on RSVPCalendarEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RSVPCalendarEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RSVPCalendarEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RSVPCalendarEntryRequestMultiError, or nil if none found.
func (m *RSVPCalendarEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RSVPCalendarEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RSVPCalendarEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RSVPCalendarEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RSVPCalendarEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Subscribe

	if m.Remove != nil {
		// no validation rules for Remove
	}

	if len(errors) > 0 {
		return RSVPCalendarEntryRequestMultiError(errors)
	}

	return nil
}

// RSVPCalendarEntryRequestMultiError is an error wrapping multiple validation
// errors returned by RSVPCalendarEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type RSVPCalendarEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RSVPCalendarEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RSVPCalendarEntryRequestMultiError) AllErrors() []error { return m }

// RSVPCalendarEntryRequestValidationError is the validation error returned by
// RSVPCalendarEntryRequest.Validate if the designated constraints aren't met.
type RSVPCalendarEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RSVPCalendarEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RSVPCalendarEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RSVPCalendarEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RSVPCalendarEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RSVPCalendarEntryRequestValidationError) ErrorName() string {
	return "RSVPCalendarEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RSVPCalendarEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRSVPCalendarEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RSVPCalendarEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RSVPCalendarEntryRequestValidationError{}

// Validate checks the field values on RSVPCalendarEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RSVPCalendarEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RSVPCalendarEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RSVPCalendarEntryResponseMultiError, or nil if none found.
func (m *RSVPCalendarEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RSVPCalendarEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Entry != nil {

		if all {
			switch v := interface{}(m.GetEntry()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RSVPCalendarEntryResponseValidationError{
						field:  "Entry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RSVPCalendarEntryResponseValidationError{
						field:  "Entry",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RSVPCalendarEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RSVPCalendarEntryResponseMultiError(errors)
	}

	return nil
}

// RSVPCalendarEntryResponseMultiError is an error wrapping multiple validation
// errors returned by RSVPCalendarEntryResponse.ValidateAll() if the
// designated constraints aren't met.
type RSVPCalendarEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RSVPCalendarEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RSVPCalendarEntryResponseMultiError) AllErrors() []error { return m }

// RSVPCalendarEntryResponseValidationError is the validation error returned by
// RSVPCalendarEntryResponse.Validate if the designated constraints aren't met.
type RSVPCalendarEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RSVPCalendarEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RSVPCalendarEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RSVPCalendarEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RSVPCalendarEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RSVPCalendarEntryResponseValidationError) ErrorName() string {
	return "RSVPCalendarEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RSVPCalendarEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRSVPCalendarEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RSVPCalendarEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RSVPCalendarEntryResponseValidationError{}

// Validate checks the field values on ListSubscriptionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubscriptionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubscriptionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubscriptionsRequestMultiError, or nil if none found.
func (m *ListSubscriptionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubscriptionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListSubscriptionsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubscriptionsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubscriptionsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubscriptionsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSubscriptionsRequestMultiError(errors)
	}

	return nil
}

// ListSubscriptionsRequestMultiError is an error wrapping multiple validation
// errors returned by ListSubscriptionsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSubscriptionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubscriptionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubscriptionsRequestMultiError) AllErrors() []error { return m }

// ListSubscriptionsRequestValidationError is the validation error returned by
// ListSubscriptionsRequest.Validate if the designated constraints aren't met.
type ListSubscriptionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsRequestValidationError) ErrorName() string {
	return "ListSubscriptionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsRequestValidationError{}

// Validate checks the field values on ListSubscriptionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSubscriptionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSubscriptionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSubscriptionsResponseMultiError, or nil if none found.
func (m *ListSubscriptionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSubscriptionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListSubscriptionsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSubscriptionsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSubscriptionsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSubscriptionsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSubs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSubscriptionsResponseValidationError{
						field:  fmt.Sprintf("Subs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSubscriptionsResponseValidationError{
					field:  fmt.Sprintf("Subs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSubscriptionsResponseMultiError(errors)
	}

	return nil
}

// ListSubscriptionsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSubscriptionsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListSubscriptionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSubscriptionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSubscriptionsResponseMultiError) AllErrors() []error { return m }

// ListSubscriptionsResponseValidationError is the validation error returned by
// ListSubscriptionsResponse.Validate if the designated constraints aren't met.
type ListSubscriptionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSubscriptionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSubscriptionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSubscriptionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSubscriptionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSubscriptionsResponseValidationError) ErrorName() string {
	return "ListSubscriptionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSubscriptionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSubscriptionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSubscriptionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSubscriptionsResponseValidationError{}

// Validate checks the field values on SubscribeToCalendarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeToCalendarRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeToCalendarRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeToCalendarRequestMultiError, or nil if none found.
func (m *SubscribeToCalendarRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeToCalendarRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeToCalendarRequestValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeToCalendarRequestValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeToCalendarRequestValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Delete

	if len(errors) > 0 {
		return SubscribeToCalendarRequestMultiError(errors)
	}

	return nil
}

// SubscribeToCalendarRequestMultiError is an error wrapping multiple
// validation errors returned by SubscribeToCalendarRequest.ValidateAll() if
// the designated constraints aren't met.
type SubscribeToCalendarRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeToCalendarRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeToCalendarRequestMultiError) AllErrors() []error { return m }

// SubscribeToCalendarRequestValidationError is the validation error returned
// by SubscribeToCalendarRequest.Validate if the designated constraints aren't met.
type SubscribeToCalendarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeToCalendarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeToCalendarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeToCalendarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeToCalendarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeToCalendarRequestValidationError) ErrorName() string {
	return "SubscribeToCalendarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeToCalendarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeToCalendarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeToCalendarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeToCalendarRequestValidationError{}

// Validate checks the field values on SubscribeToCalendarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SubscribeToCalendarResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SubscribeToCalendarResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SubscribeToCalendarResponseMultiError, or nil if none found.
func (m *SubscribeToCalendarResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SubscribeToCalendarResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSub()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SubscribeToCalendarResponseValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SubscribeToCalendarResponseValidationError{
					field:  "Sub",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSub()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SubscribeToCalendarResponseValidationError{
				field:  "Sub",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SubscribeToCalendarResponseMultiError(errors)
	}

	return nil
}

// SubscribeToCalendarResponseMultiError is an error wrapping multiple
// validation errors returned by SubscribeToCalendarResponse.ValidateAll() if
// the designated constraints aren't met.
type SubscribeToCalendarResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SubscribeToCalendarResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SubscribeToCalendarResponseMultiError) AllErrors() []error { return m }

// SubscribeToCalendarResponseValidationError is the validation error returned
// by SubscribeToCalendarResponse.Validate if the designated constraints
// aren't met.
type SubscribeToCalendarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SubscribeToCalendarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SubscribeToCalendarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SubscribeToCalendarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SubscribeToCalendarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SubscribeToCalendarResponseValidationError) ErrorName() string {
	return "SubscribeToCalendarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SubscribeToCalendarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSubscribeToCalendarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SubscribeToCalendarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SubscribeToCalendarResponseValidationError{}
