// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v3.20.3
// source: services/calendar/calendar.proto

package calendar

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	calendar "github.com/fivenet-app/fivenet/gen/go/proto/resources/calendar"
	database "github.com/fivenet-app/fivenet/gen/go/proto/resources/common/database"
	timestamp "github.com/fivenet-app/fivenet/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListCalendarsRequest struct {
	state          protoimpl.MessageState      `protogen:"open.v1"`
	Pagination     *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	OnlyPublic     bool                        `protobuf:"varint,2,opt,name=only_public,json=onlyPublic,proto3" json:"only_public,omitempty"`
	MinAccessLevel *calendar.AccessLevel       `protobuf:"varint,3,opt,name=min_access_level,json=minAccessLevel,proto3,enum=resources.calendar.AccessLevel,oneof" json:"min_access_level,omitempty"`
	After          *timestamp.Timestamp        `protobuf:"bytes,4,opt,name=after,proto3,oneof" json:"after,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListCalendarsRequest) Reset() {
	*x = ListCalendarsRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsRequest) ProtoMessage() {}

func (x *ListCalendarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarsRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{0}
}

func (x *ListCalendarsRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCalendarsRequest) GetOnlyPublic() bool {
	if x != nil {
		return x.OnlyPublic
	}
	return false
}

func (x *ListCalendarsRequest) GetMinAccessLevel() calendar.AccessLevel {
	if x != nil && x.MinAccessLevel != nil {
		return *x.MinAccessLevel
	}
	return calendar.AccessLevel(0)
}

func (x *ListCalendarsRequest) GetAfter() *timestamp.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type ListCalendarsResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Calendars     []*calendar.Calendar         `protobuf:"bytes,2,rep,name=calendars,proto3" json:"calendars,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarsResponse) Reset() {
	*x = ListCalendarsResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarsResponse) ProtoMessage() {}

func (x *ListCalendarsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarsResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarsResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{1}
}

func (x *ListCalendarsResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCalendarsResponse) GetCalendars() []*calendar.Calendar {
	if x != nil {
		return x.Calendars
	}
	return nil
}

type GetCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CalendarId    uint64                 `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCalendarRequest) Reset() {
	*x = GetCalendarRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarRequest) ProtoMessage() {}

func (x *GetCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarRequest.ProtoReflect.Descriptor instead.
func (*GetCalendarRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{2}
}

func (x *GetCalendarRequest) GetCalendarId() uint64 {
	if x != nil {
		return x.CalendarId
	}
	return 0
}

type GetCalendarResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendar      *calendar.Calendar     `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCalendarResponse) Reset() {
	*x = GetCalendarResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarResponse) ProtoMessage() {}

func (x *GetCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarResponse.ProtoReflect.Descriptor instead.
func (*GetCalendarResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{3}
}

func (x *GetCalendarResponse) GetCalendar() *calendar.Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

type CreateOrUpdateCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendar      *calendar.Calendar     `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateCalendarRequest) Reset() {
	*x = CreateOrUpdateCalendarRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateCalendarRequest) ProtoMessage() {}

func (x *CreateOrUpdateCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateCalendarRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateCalendarRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrUpdateCalendarRequest) GetCalendar() *calendar.Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

type CreateOrUpdateCalendarResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Calendar      *calendar.Calendar     `protobuf:"bytes,1,opt,name=calendar,proto3" json:"calendar,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateCalendarResponse) Reset() {
	*x = CreateOrUpdateCalendarResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateCalendarResponse) ProtoMessage() {}

func (x *CreateOrUpdateCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateCalendarResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateCalendarResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrUpdateCalendarResponse) GetCalendar() *calendar.Calendar {
	if x != nil {
		return x.Calendar
	}
	return nil
}

type DeleteCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CalendarId    uint64                 `protobuf:"varint,1,opt,name=calendar_id,json=calendarId,proto3" json:"calendar_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarRequest) Reset() {
	*x = DeleteCalendarRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarRequest) ProtoMessage() {}

func (x *DeleteCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalendarRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCalendarRequest) GetCalendarId() uint64 {
	if x != nil {
		return x.CalendarId
	}
	return 0
}

type DeleteCalendarResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarResponse) Reset() {
	*x = DeleteCalendarResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarResponse) ProtoMessage() {}

func (x *DeleteCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarResponse.ProtoReflect.Descriptor instead.
func (*DeleteCalendarResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{7}
}

type ListCalendarEntriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Month         int32                  `protobuf:"varint,2,opt,name=month,proto3" json:"month,omitempty"`
	CalendarIds   []uint64               `protobuf:"varint,3,rep,packed,name=calendar_ids,json=calendarIds,proto3" json:"calendar_ids,omitempty"`
	ShowHidden    *bool                  `protobuf:"varint,4,opt,name=show_hidden,json=showHidden,proto3,oneof" json:"show_hidden,omitempty"`
	After         *timestamp.Timestamp   `protobuf:"bytes,5,opt,name=after,proto3,oneof" json:"after,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarEntriesRequest) Reset() {
	*x = ListCalendarEntriesRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarEntriesRequest) ProtoMessage() {}

func (x *ListCalendarEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarEntriesRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarEntriesRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{8}
}

func (x *ListCalendarEntriesRequest) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *ListCalendarEntriesRequest) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *ListCalendarEntriesRequest) GetCalendarIds() []uint64 {
	if x != nil {
		return x.CalendarIds
	}
	return nil
}

func (x *ListCalendarEntriesRequest) GetShowHidden() bool {
	if x != nil && x.ShowHidden != nil {
		return *x.ShowHidden
	}
	return false
}

func (x *ListCalendarEntriesRequest) GetAfter() *timestamp.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type ListCalendarEntriesResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Entries       []*calendar.CalendarEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarEntriesResponse) Reset() {
	*x = ListCalendarEntriesResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarEntriesResponse) ProtoMessage() {}

func (x *ListCalendarEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarEntriesResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarEntriesResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{9}
}

func (x *ListCalendarEntriesResponse) GetEntries() []*calendar.CalendarEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetUpcomingEntriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Seconds       int32                  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUpcomingEntriesRequest) Reset() {
	*x = GetUpcomingEntriesRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpcomingEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpcomingEntriesRequest) ProtoMessage() {}

func (x *GetUpcomingEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpcomingEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetUpcomingEntriesRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{10}
}

func (x *GetUpcomingEntriesRequest) GetSeconds() int32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type GetUpcomingEntriesResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Entries       []*calendar.CalendarEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUpcomingEntriesResponse) Reset() {
	*x = GetUpcomingEntriesResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUpcomingEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUpcomingEntriesResponse) ProtoMessage() {}

func (x *GetUpcomingEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUpcomingEntriesResponse.ProtoReflect.Descriptor instead.
func (*GetUpcomingEntriesResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{11}
}

func (x *GetUpcomingEntriesResponse) GetEntries() []*calendar.CalendarEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type GetCalendarEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryId       uint64                 `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCalendarEntryRequest) Reset() {
	*x = GetCalendarEntryRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCalendarEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarEntryRequest) ProtoMessage() {}

func (x *GetCalendarEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarEntryRequest.ProtoReflect.Descriptor instead.
func (*GetCalendarEntryRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{12}
}

func (x *GetCalendarEntryRequest) GetEntryId() uint64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type GetCalendarEntryResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Entry         *calendar.CalendarEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCalendarEntryResponse) Reset() {
	*x = GetCalendarEntryResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCalendarEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCalendarEntryResponse) ProtoMessage() {}

func (x *GetCalendarEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCalendarEntryResponse.ProtoReflect.Descriptor instead.
func (*GetCalendarEntryResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{13}
}

func (x *GetCalendarEntryResponse) GetEntry() *calendar.CalendarEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type CreateOrUpdateCalendarEntryRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Entry         *calendar.CalendarEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	UserIds       []int32                 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateCalendarEntryRequest) Reset() {
	*x = CreateOrUpdateCalendarEntryRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateCalendarEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateCalendarEntryRequest) ProtoMessage() {}

func (x *CreateOrUpdateCalendarEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateCalendarEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateCalendarEntryRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{14}
}

func (x *CreateOrUpdateCalendarEntryRequest) GetEntry() *calendar.CalendarEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *CreateOrUpdateCalendarEntryRequest) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type CreateOrUpdateCalendarEntryResponse struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Entry         *calendar.CalendarEntry `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateCalendarEntryResponse) Reset() {
	*x = CreateOrUpdateCalendarEntryResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateCalendarEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateCalendarEntryResponse) ProtoMessage() {}

func (x *CreateOrUpdateCalendarEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateCalendarEntryResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateCalendarEntryResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{15}
}

func (x *CreateOrUpdateCalendarEntryResponse) GetEntry() *calendar.CalendarEntry {
	if x != nil {
		return x.Entry
	}
	return nil
}

type DeleteCalendarEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryId       uint64                 `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarEntryRequest) Reset() {
	*x = DeleteCalendarEntryRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarEntryRequest) ProtoMessage() {}

func (x *DeleteCalendarEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarEntryRequest.ProtoReflect.Descriptor instead.
func (*DeleteCalendarEntryRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteCalendarEntryRequest) GetEntryId() uint64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type DeleteCalendarEntryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCalendarEntryResponse) Reset() {
	*x = DeleteCalendarEntryResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCalendarEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCalendarEntryResponse) ProtoMessage() {}

func (x *DeleteCalendarEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCalendarEntryResponse.ProtoReflect.Descriptor instead.
func (*DeleteCalendarEntryResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{17}
}

type ShareCalendarEntryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EntryId       uint64                 `protobuf:"varint,1,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	UserIds       []int32                `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShareCalendarEntryRequest) Reset() {
	*x = ShareCalendarEntryRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareCalendarEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCalendarEntryRequest) ProtoMessage() {}

func (x *ShareCalendarEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCalendarEntryRequest.ProtoReflect.Descriptor instead.
func (*ShareCalendarEntryRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{18}
}

func (x *ShareCalendarEntryRequest) GetEntryId() uint64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

func (x *ShareCalendarEntryRequest) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type ShareCalendarEntryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShareCalendarEntryResponse) Reset() {
	*x = ShareCalendarEntryResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShareCalendarEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareCalendarEntryResponse) ProtoMessage() {}

func (x *ShareCalendarEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareCalendarEntryResponse.ProtoReflect.Descriptor instead.
func (*ShareCalendarEntryResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{19}
}

type ListCalendarEntryRSVPRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Pagination    *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	EntryId       uint64                      `protobuf:"varint,2,opt,name=entry_id,json=entryId,proto3" json:"entry_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarEntryRSVPRequest) Reset() {
	*x = ListCalendarEntryRSVPRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarEntryRSVPRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarEntryRSVPRequest) ProtoMessage() {}

func (x *ListCalendarEntryRSVPRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarEntryRSVPRequest.ProtoReflect.Descriptor instead.
func (*ListCalendarEntryRSVPRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{20}
}

func (x *ListCalendarEntryRSVPRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCalendarEntryRSVPRequest) GetEntryId() uint64 {
	if x != nil {
		return x.EntryId
	}
	return 0
}

type ListCalendarEntryRSVPResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Pagination    *database.PaginationResponse  `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Entries       []*calendar.CalendarEntryRSVP `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCalendarEntryRSVPResponse) Reset() {
	*x = ListCalendarEntryRSVPResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCalendarEntryRSVPResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCalendarEntryRSVPResponse) ProtoMessage() {}

func (x *ListCalendarEntryRSVPResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCalendarEntryRSVPResponse.ProtoReflect.Descriptor instead.
func (*ListCalendarEntryRSVPResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{21}
}

func (x *ListCalendarEntryRSVPResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListCalendarEntryRSVPResponse) GetEntries() []*calendar.CalendarEntryRSVP {
	if x != nil {
		return x.Entries
	}
	return nil
}

type RSVPCalendarEntryRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Entry         *calendar.CalendarEntryRSVP `protobuf:"bytes,1,opt,name=entry,proto3" json:"entry,omitempty"`
	Subscribe     bool                        `protobuf:"varint,2,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	Remove        *bool                       `protobuf:"varint,3,opt,name=remove,proto3,oneof" json:"remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RSVPCalendarEntryRequest) Reset() {
	*x = RSVPCalendarEntryRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RSVPCalendarEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSVPCalendarEntryRequest) ProtoMessage() {}

func (x *RSVPCalendarEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSVPCalendarEntryRequest.ProtoReflect.Descriptor instead.
func (*RSVPCalendarEntryRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{22}
}

func (x *RSVPCalendarEntryRequest) GetEntry() *calendar.CalendarEntryRSVP {
	if x != nil {
		return x.Entry
	}
	return nil
}

func (x *RSVPCalendarEntryRequest) GetSubscribe() bool {
	if x != nil {
		return x.Subscribe
	}
	return false
}

func (x *RSVPCalendarEntryRequest) GetRemove() bool {
	if x != nil && x.Remove != nil {
		return *x.Remove
	}
	return false
}

type RSVPCalendarEntryResponse struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Entry         *calendar.CalendarEntryRSVP `protobuf:"bytes,1,opt,name=entry,proto3,oneof" json:"entry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RSVPCalendarEntryResponse) Reset() {
	*x = RSVPCalendarEntryResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RSVPCalendarEntryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSVPCalendarEntryResponse) ProtoMessage() {}

func (x *RSVPCalendarEntryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSVPCalendarEntryResponse.ProtoReflect.Descriptor instead.
func (*RSVPCalendarEntryResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{23}
}

func (x *RSVPCalendarEntryResponse) GetEntry() *calendar.CalendarEntryRSVP {
	if x != nil {
		return x.Entry
	}
	return nil
}

type ListSubscriptionsRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Pagination    *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubscriptionsRequest) Reset() {
	*x = ListSubscriptionsRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscriptionsRequest) ProtoMessage() {}

func (x *ListSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*ListSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{24}
}

func (x *ListSubscriptionsRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListSubscriptionsResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Subs          []*calendar.CalendarSub      `protobuf:"bytes,2,rep,name=subs,proto3" json:"subs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSubscriptionsResponse) Reset() {
	*x = ListSubscriptionsResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubscriptionsResponse) ProtoMessage() {}

func (x *ListSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*ListSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{25}
}

func (x *ListSubscriptionsResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSubscriptionsResponse) GetSubs() []*calendar.CalendarSub {
	if x != nil {
		return x.Subs
	}
	return nil
}

type SubscribeToCalendarRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sub           *calendar.CalendarSub  `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	Delete        bool                   `protobuf:"varint,2,opt,name=delete,proto3" json:"delete,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToCalendarRequest) Reset() {
	*x = SubscribeToCalendarRequest{}
	mi := &file_services_calendar_calendar_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToCalendarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToCalendarRequest) ProtoMessage() {}

func (x *SubscribeToCalendarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToCalendarRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToCalendarRequest) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{26}
}

func (x *SubscribeToCalendarRequest) GetSub() *calendar.CalendarSub {
	if x != nil {
		return x.Sub
	}
	return nil
}

func (x *SubscribeToCalendarRequest) GetDelete() bool {
	if x != nil {
		return x.Delete
	}
	return false
}

type SubscribeToCalendarResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sub           *calendar.CalendarSub  `protobuf:"bytes,1,opt,name=sub,proto3" json:"sub,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeToCalendarResponse) Reset() {
	*x = SubscribeToCalendarResponse{}
	mi := &file_services_calendar_calendar_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeToCalendarResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToCalendarResponse) ProtoMessage() {}

func (x *SubscribeToCalendarResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_calendar_calendar_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToCalendarResponse.ProtoReflect.Descriptor instead.
func (*SubscribeToCalendarResponse) Descriptor() ([]byte, []int) {
	return file_services_calendar_calendar_proto_rawDescGZIP(), []int{27}
}

func (x *SubscribeToCalendarResponse) GetSub() *calendar.CalendarSub {
	if x != nil {
		return x.Sub
	}
	return nil
}

var File_services_calendar_calendar_proto protoreflect.FileDescriptor

var file_services_calendar_calendar_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x1a, 0x28, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x21, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x12, 0x4e, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x01, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0xac, 0x01,
	0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3a, 0x0a, 0x09, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x22, 0x35, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x49, 0x64, 0x22, 0x4f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x22, 0x63, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x08, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x22, 0x5a, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x08, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x22, 0x38, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x1a, 0x03, 0x28, 0xe7, 0x0f,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xfa, 0x42, 0x06, 0x1a, 0x04, 0x18, 0x0c, 0x28, 0x01,
	0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0b, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48,
	0x01, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x68, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x35, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x34, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x82,
	0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0x37, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x0a, 0x19, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x1c,
	0x0a, 0x1a, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x91, 0x01, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x53, 0x56, 0x50, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x22, 0xb9, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x53, 0x56, 0x50, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x53, 0x56, 0x50, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x18, 0x52, 0x53, 0x56, 0x50, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x53, 0x56, 0x50, 0x52,
	0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x67, 0x0a, 0x19,
	0x52, 0x53, 0x56, 0x50, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x53, 0x56, 0x50, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x72, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x04, 0x73, 0x75, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75, 0x62, 0x52,
	0x04, 0x73, 0x75, 0x62, 0x73, 0x22, 0x67, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75,
	0x62, 0x52, 0x03, 0x73, 0x75, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x50,
	0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x03, 0x73, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x75, 0x62, 0x52, 0x03, 0x73, 0x75, 0x62,
	0x32, 0xd9, 0x0c, 0x0a, 0x0f, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x62, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64,
	0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x12, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x55, 0x70, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x8c, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x35, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x74, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e,
	0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x12, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7a, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x53, 0x56, 0x50, 0x12, 0x2f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x53, 0x56, 0x50, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x53, 0x56, 0x50, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x52, 0x53, 0x56, 0x50, 0x43, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x52, 0x53, 0x56, 0x50, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x52, 0x53, 0x56,
	0x50, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x12, 0x2d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6c,
	0x65, 0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x43, 0x61, 0x6c, 0x65,
	0x6e, 0x64, 0x61, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x48, 0x5a, 0x46,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x6e,
	0x65, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x3b, 0x63, 0x61,
	0x6c, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_services_calendar_calendar_proto_rawDescOnce sync.Once
	file_services_calendar_calendar_proto_rawDescData []byte
)

func file_services_calendar_calendar_proto_rawDescGZIP() []byte {
	file_services_calendar_calendar_proto_rawDescOnce.Do(func() {
		file_services_calendar_calendar_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_calendar_calendar_proto_rawDesc), len(file_services_calendar_calendar_proto_rawDesc)))
	})
	return file_services_calendar_calendar_proto_rawDescData
}

var file_services_calendar_calendar_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_services_calendar_calendar_proto_goTypes = []any{
	(*ListCalendarsRequest)(nil),                // 0: services.calendar.ListCalendarsRequest
	(*ListCalendarsResponse)(nil),               // 1: services.calendar.ListCalendarsResponse
	(*GetCalendarRequest)(nil),                  // 2: services.calendar.GetCalendarRequest
	(*GetCalendarResponse)(nil),                 // 3: services.calendar.GetCalendarResponse
	(*CreateOrUpdateCalendarRequest)(nil),       // 4: services.calendar.CreateOrUpdateCalendarRequest
	(*CreateOrUpdateCalendarResponse)(nil),      // 5: services.calendar.CreateOrUpdateCalendarResponse
	(*DeleteCalendarRequest)(nil),               // 6: services.calendar.DeleteCalendarRequest
	(*DeleteCalendarResponse)(nil),              // 7: services.calendar.DeleteCalendarResponse
	(*ListCalendarEntriesRequest)(nil),          // 8: services.calendar.ListCalendarEntriesRequest
	(*ListCalendarEntriesResponse)(nil),         // 9: services.calendar.ListCalendarEntriesResponse
	(*GetUpcomingEntriesRequest)(nil),           // 10: services.calendar.GetUpcomingEntriesRequest
	(*GetUpcomingEntriesResponse)(nil),          // 11: services.calendar.GetUpcomingEntriesResponse
	(*GetCalendarEntryRequest)(nil),             // 12: services.calendar.GetCalendarEntryRequest
	(*GetCalendarEntryResponse)(nil),            // 13: services.calendar.GetCalendarEntryResponse
	(*CreateOrUpdateCalendarEntryRequest)(nil),  // 14: services.calendar.CreateOrUpdateCalendarEntryRequest
	(*CreateOrUpdateCalendarEntryResponse)(nil), // 15: services.calendar.CreateOrUpdateCalendarEntryResponse
	(*DeleteCalendarEntryRequest)(nil),          // 16: services.calendar.DeleteCalendarEntryRequest
	(*DeleteCalendarEntryResponse)(nil),         // 17: services.calendar.DeleteCalendarEntryResponse
	(*ShareCalendarEntryRequest)(nil),           // 18: services.calendar.ShareCalendarEntryRequest
	(*ShareCalendarEntryResponse)(nil),          // 19: services.calendar.ShareCalendarEntryResponse
	(*ListCalendarEntryRSVPRequest)(nil),        // 20: services.calendar.ListCalendarEntryRSVPRequest
	(*ListCalendarEntryRSVPResponse)(nil),       // 21: services.calendar.ListCalendarEntryRSVPResponse
	(*RSVPCalendarEntryRequest)(nil),            // 22: services.calendar.RSVPCalendarEntryRequest
	(*RSVPCalendarEntryResponse)(nil),           // 23: services.calendar.RSVPCalendarEntryResponse
	(*ListSubscriptionsRequest)(nil),            // 24: services.calendar.ListSubscriptionsRequest
	(*ListSubscriptionsResponse)(nil),           // 25: services.calendar.ListSubscriptionsResponse
	(*SubscribeToCalendarRequest)(nil),          // 26: services.calendar.SubscribeToCalendarRequest
	(*SubscribeToCalendarResponse)(nil),         // 27: services.calendar.SubscribeToCalendarResponse
	(*database.PaginationRequest)(nil),          // 28: resources.common.database.PaginationRequest
	(calendar.AccessLevel)(0),                   // 29: resources.calendar.AccessLevel
	(*timestamp.Timestamp)(nil),                 // 30: resources.timestamp.Timestamp
	(*database.PaginationResponse)(nil),         // 31: resources.common.database.PaginationResponse
	(*calendar.Calendar)(nil),                   // 32: resources.calendar.Calendar
	(*calendar.CalendarEntry)(nil),              // 33: resources.calendar.CalendarEntry
	(*calendar.CalendarEntryRSVP)(nil),          // 34: resources.calendar.CalendarEntryRSVP
	(*calendar.CalendarSub)(nil),                // 35: resources.calendar.CalendarSub
}
var file_services_calendar_calendar_proto_depIdxs = []int32{
	28, // 0: services.calendar.ListCalendarsRequest.pagination:type_name -> resources.common.database.PaginationRequest
	29, // 1: services.calendar.ListCalendarsRequest.min_access_level:type_name -> resources.calendar.AccessLevel
	30, // 2: services.calendar.ListCalendarsRequest.after:type_name -> resources.timestamp.Timestamp
	31, // 3: services.calendar.ListCalendarsResponse.pagination:type_name -> resources.common.database.PaginationResponse
	32, // 4: services.calendar.ListCalendarsResponse.calendars:type_name -> resources.calendar.Calendar
	32, // 5: services.calendar.GetCalendarResponse.calendar:type_name -> resources.calendar.Calendar
	32, // 6: services.calendar.CreateOrUpdateCalendarRequest.calendar:type_name -> resources.calendar.Calendar
	32, // 7: services.calendar.CreateOrUpdateCalendarResponse.calendar:type_name -> resources.calendar.Calendar
	30, // 8: services.calendar.ListCalendarEntriesRequest.after:type_name -> resources.timestamp.Timestamp
	33, // 9: services.calendar.ListCalendarEntriesResponse.entries:type_name -> resources.calendar.CalendarEntry
	33, // 10: services.calendar.GetUpcomingEntriesResponse.entries:type_name -> resources.calendar.CalendarEntry
	33, // 11: services.calendar.GetCalendarEntryResponse.entry:type_name -> resources.calendar.CalendarEntry
	33, // 12: services.calendar.CreateOrUpdateCalendarEntryRequest.entry:type_name -> resources.calendar.CalendarEntry
	33, // 13: services.calendar.CreateOrUpdateCalendarEntryResponse.entry:type_name -> resources.calendar.CalendarEntry
	28, // 14: services.calendar.ListCalendarEntryRSVPRequest.pagination:type_name -> resources.common.database.PaginationRequest
	31, // 15: services.calendar.ListCalendarEntryRSVPResponse.pagination:type_name -> resources.common.database.PaginationResponse
	34, // 16: services.calendar.ListCalendarEntryRSVPResponse.entries:type_name -> resources.calendar.CalendarEntryRSVP
	34, // 17: services.calendar.RSVPCalendarEntryRequest.entry:type_name -> resources.calendar.CalendarEntryRSVP
	34, // 18: services.calendar.RSVPCalendarEntryResponse.entry:type_name -> resources.calendar.CalendarEntryRSVP
	28, // 19: services.calendar.ListSubscriptionsRequest.pagination:type_name -> resources.common.database.PaginationRequest
	31, // 20: services.calendar.ListSubscriptionsResponse.pagination:type_name -> resources.common.database.PaginationResponse
	35, // 21: services.calendar.ListSubscriptionsResponse.subs:type_name -> resources.calendar.CalendarSub
	35, // 22: services.calendar.SubscribeToCalendarRequest.sub:type_name -> resources.calendar.CalendarSub
	35, // 23: services.calendar.SubscribeToCalendarResponse.sub:type_name -> resources.calendar.CalendarSub
	0,  // 24: services.calendar.CalendarService.ListCalendars:input_type -> services.calendar.ListCalendarsRequest
	2,  // 25: services.calendar.CalendarService.GetCalendar:input_type -> services.calendar.GetCalendarRequest
	4,  // 26: services.calendar.CalendarService.CreateOrUpdateCalendar:input_type -> services.calendar.CreateOrUpdateCalendarRequest
	6,  // 27: services.calendar.CalendarService.DeleteCalendar:input_type -> services.calendar.DeleteCalendarRequest
	8,  // 28: services.calendar.CalendarService.ListCalendarEntries:input_type -> services.calendar.ListCalendarEntriesRequest
	10, // 29: services.calendar.CalendarService.GetUpcomingEntries:input_type -> services.calendar.GetUpcomingEntriesRequest
	12, // 30: services.calendar.CalendarService.GetCalendarEntry:input_type -> services.calendar.GetCalendarEntryRequest
	14, // 31: services.calendar.CalendarService.CreateOrUpdateCalendarEntry:input_type -> services.calendar.CreateOrUpdateCalendarEntryRequest
	16, // 32: services.calendar.CalendarService.DeleteCalendarEntry:input_type -> services.calendar.DeleteCalendarEntryRequest
	18, // 33: services.calendar.CalendarService.ShareCalendarEntry:input_type -> services.calendar.ShareCalendarEntryRequest
	20, // 34: services.calendar.CalendarService.ListCalendarEntryRSVP:input_type -> services.calendar.ListCalendarEntryRSVPRequest
	22, // 35: services.calendar.CalendarService.RSVPCalendarEntry:input_type -> services.calendar.RSVPCalendarEntryRequest
	24, // 36: services.calendar.CalendarService.ListSubscriptions:input_type -> services.calendar.ListSubscriptionsRequest
	26, // 37: services.calendar.CalendarService.SubscribeToCalendar:input_type -> services.calendar.SubscribeToCalendarRequest
	1,  // 38: services.calendar.CalendarService.ListCalendars:output_type -> services.calendar.ListCalendarsResponse
	3,  // 39: services.calendar.CalendarService.GetCalendar:output_type -> services.calendar.GetCalendarResponse
	5,  // 40: services.calendar.CalendarService.CreateOrUpdateCalendar:output_type -> services.calendar.CreateOrUpdateCalendarResponse
	7,  // 41: services.calendar.CalendarService.DeleteCalendar:output_type -> services.calendar.DeleteCalendarResponse
	9,  // 42: services.calendar.CalendarService.ListCalendarEntries:output_type -> services.calendar.ListCalendarEntriesResponse
	11, // 43: services.calendar.CalendarService.GetUpcomingEntries:output_type -> services.calendar.GetUpcomingEntriesResponse
	13, // 44: services.calendar.CalendarService.GetCalendarEntry:output_type -> services.calendar.GetCalendarEntryResponse
	15, // 45: services.calendar.CalendarService.CreateOrUpdateCalendarEntry:output_type -> services.calendar.CreateOrUpdateCalendarEntryResponse
	17, // 46: services.calendar.CalendarService.DeleteCalendarEntry:output_type -> services.calendar.DeleteCalendarEntryResponse
	19, // 47: services.calendar.CalendarService.ShareCalendarEntry:output_type -> services.calendar.ShareCalendarEntryResponse
	21, // 48: services.calendar.CalendarService.ListCalendarEntryRSVP:output_type -> services.calendar.ListCalendarEntryRSVPResponse
	23, // 49: services.calendar.CalendarService.RSVPCalendarEntry:output_type -> services.calendar.RSVPCalendarEntryResponse
	25, // 50: services.calendar.CalendarService.ListSubscriptions:output_type -> services.calendar.ListSubscriptionsResponse
	27, // 51: services.calendar.CalendarService.SubscribeToCalendar:output_type -> services.calendar.SubscribeToCalendarResponse
	38, // [38:52] is the sub-list for method output_type
	24, // [24:38] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_services_calendar_calendar_proto_init() }
func file_services_calendar_calendar_proto_init() {
	if File_services_calendar_calendar_proto != nil {
		return
	}
	file_services_calendar_calendar_proto_msgTypes[0].OneofWrappers = []any{}
	file_services_calendar_calendar_proto_msgTypes[8].OneofWrappers = []any{}
	file_services_calendar_calendar_proto_msgTypes[22].OneofWrappers = []any{}
	file_services_calendar_calendar_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_calendar_calendar_proto_rawDesc), len(file_services_calendar_calendar_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_calendar_calendar_proto_goTypes,
		DependencyIndexes: file_services_calendar_calendar_proto_depIdxs,
		MessageInfos:      file_services_calendar_calendar_proto_msgTypes,
	}.Build()
	File_services_calendar_calendar_proto = out.File
	file_services_calendar_calendar_proto_goTypes = nil
	file_services_calendar_calendar_proto_depIdxs = nil
}
