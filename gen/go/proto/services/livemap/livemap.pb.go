// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        (unknown)
// source: services/livemap/livemap.proto

package livemap

import (
	_ "github.com/fivenet-app/fivenet/v2025/gen/go/proto/codegen/perms"
	jobs "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/jobs"
	livemap "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/livemap"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	mi := &file_services_livemap_livemap_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{0}
}

type StreamResponse struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	UserOnDuty *bool                  `protobuf:"varint,1,opt,name=user_on_duty,json=userOnDuty,proto3,oneof" json:"user_on_duty,omitempty"`
	// Types that are valid to be assigned to Data:
	//
	//	*StreamResponse_Jobs
	//	*StreamResponse_Markers
	//	*StreamResponse_Snapshot
	//	*StreamResponse_UserUpdates
	//	*StreamResponse_UserDeletes
	Data          isStreamResponse_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	mi := &file_services_livemap_livemap_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{1}
}

func (x *StreamResponse) GetUserOnDuty() bool {
	if x != nil && x.UserOnDuty != nil {
		return *x.UserOnDuty
	}
	return false
}

func (x *StreamResponse) GetData() isStreamResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamResponse) GetJobs() *JobsList {
	if x != nil {
		if x, ok := x.Data.(*StreamResponse_Jobs); ok {
			return x.Jobs
		}
	}
	return nil
}

func (x *StreamResponse) GetMarkers() *MarkerMarkersUpdates {
	if x != nil {
		if x, ok := x.Data.(*StreamResponse_Markers); ok {
			return x.Markers
		}
	}
	return nil
}

func (x *StreamResponse) GetSnapshot() *Snapshot {
	if x != nil {
		if x, ok := x.Data.(*StreamResponse_Snapshot); ok {
			return x.Snapshot
		}
	}
	return nil
}

func (x *StreamResponse) GetUserUpdates() *UserUpdates {
	if x != nil {
		if x, ok := x.Data.(*StreamResponse_UserUpdates); ok {
			return x.UserUpdates
		}
	}
	return nil
}

func (x *StreamResponse) GetUserDeletes() *UserDeletes {
	if x != nil {
		if x, ok := x.Data.(*StreamResponse_UserDeletes); ok {
			return x.UserDeletes
		}
	}
	return nil
}

type isStreamResponse_Data interface {
	isStreamResponse_Data()
}

type StreamResponse_Jobs struct {
	Jobs *JobsList `protobuf:"bytes,2,opt,name=jobs,proto3,oneof"`
}

type StreamResponse_Markers struct {
	Markers *MarkerMarkersUpdates `protobuf:"bytes,3,opt,name=markers,proto3,oneof"`
}

type StreamResponse_Snapshot struct {
	Snapshot *Snapshot `protobuf:"bytes,4,opt,name=snapshot,proto3,oneof"`
}

type StreamResponse_UserUpdates struct {
	UserUpdates *UserUpdates `protobuf:"bytes,5,opt,name=user_updates,json=userUpdates,proto3,oneof"`
}

type StreamResponse_UserDeletes struct {
	UserDeletes *UserDeletes `protobuf:"bytes,6,opt,name=user_deletes,json=userDeletes,proto3,oneof"`
}

func (*StreamResponse_Jobs) isStreamResponse_Data() {}

func (*StreamResponse_Markers) isStreamResponse_Data() {}

func (*StreamResponse_Snapshot) isStreamResponse_Data() {}

func (*StreamResponse_UserUpdates) isStreamResponse_Data() {}

func (*StreamResponse_UserDeletes) isStreamResponse_Data() {}

type JobsList struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Users         []*jobs.Job            `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Markers       []*jobs.Job            `protobuf:"bytes,2,rep,name=markers,proto3" json:"markers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JobsList) Reset() {
	*x = JobsList{}
	mi := &file_services_livemap_livemap_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JobsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobsList) ProtoMessage() {}

func (x *JobsList) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobsList.ProtoReflect.Descriptor instead.
func (*JobsList) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{2}
}

func (x *JobsList) GetUsers() []*jobs.Job {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *JobsList) GetMarkers() []*jobs.Job {
	if x != nil {
		return x.Markers
	}
	return nil
}

type MarkerMarkersUpdates struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Updated       []*livemap.MarkerMarker `protobuf:"bytes,1,rep,name=updated,proto3" json:"updated,omitempty"`
	Deleted       []int64                 `protobuf:"varint,2,rep,packed,name=deleted,proto3" json:"deleted,omitempty"`
	Part          int32                   `protobuf:"varint,3,opt,name=part,proto3" json:"part,omitempty"`
	Partial       bool                    `protobuf:"varint,4,opt,name=partial,proto3" json:"partial,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarkerMarkersUpdates) Reset() {
	*x = MarkerMarkersUpdates{}
	mi := &file_services_livemap_livemap_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarkerMarkersUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkerMarkersUpdates) ProtoMessage() {}

func (x *MarkerMarkersUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkerMarkersUpdates.ProtoReflect.Descriptor instead.
func (*MarkerMarkersUpdates) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{3}
}

func (x *MarkerMarkersUpdates) GetUpdated() []*livemap.MarkerMarker {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *MarkerMarkersUpdates) GetDeleted() []int64 {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *MarkerMarkersUpdates) GetPart() int32 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *MarkerMarkersUpdates) GetPartial() bool {
	if x != nil {
		return x.Partial
	}
	return false
}

// A roll-up of the entire USERLOC bucket.
// Published every N seconds on `$KV.user_locations._snapshot`
// with the headers:
//
//	Nats-Rollup: all
//	KV-Operation: ROLLUP
type Snapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// All currently-known user markers, already filtered for
	// obsolete PURGE/DELETE events.
	Markers       []*livemap.UserMarker `protobuf:"bytes,1,rep,name=markers,proto3" json:"markers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_services_livemap_livemap_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{4}
}

func (x *Snapshot) GetMarkers() []*livemap.UserMarker {
	if x != nil {
		return x.Markers
	}
	return nil
}

type UserUpdates struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Updates       []*livemap.UserMarker  `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserUpdates) Reset() {
	*x = UserUpdates{}
	mi := &file_services_livemap_livemap_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserUpdates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserUpdates) ProtoMessage() {}

func (x *UserUpdates) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserUpdates.ProtoReflect.Descriptor instead.
func (*UserUpdates) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{5}
}

func (x *UserUpdates) GetUpdates() []*livemap.UserMarker {
	if x != nil {
		return x.Updates
	}
	return nil
}

type UserDeletes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Deletes       []*UserDelete          `protobuf:"bytes,1,rep,name=deletes,proto3" json:"deletes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDeletes) Reset() {
	*x = UserDeletes{}
	mi := &file_services_livemap_livemap_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDeletes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeletes) ProtoMessage() {}

func (x *UserDeletes) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeletes.ProtoReflect.Descriptor instead.
func (*UserDeletes) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{6}
}

func (x *UserDeletes) GetDeletes() []*UserDelete {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type UserDelete struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The user ID of an user marker that was deleted.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The job of the user that was deleted.
	Job           string `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserDelete) Reset() {
	*x = UserDelete{}
	mi := &file_services_livemap_livemap_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDelete) ProtoMessage() {}

func (x *UserDelete) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDelete.ProtoReflect.Descriptor instead.
func (*UserDelete) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{7}
}

func (x *UserDelete) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDelete) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

type CreateOrUpdateMarkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Marker        *livemap.MarkerMarker  `protobuf:"bytes,1,opt,name=marker,proto3" json:"marker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateMarkerRequest) Reset() {
	*x = CreateOrUpdateMarkerRequest{}
	mi := &file_services_livemap_livemap_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateMarkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateMarkerRequest) ProtoMessage() {}

func (x *CreateOrUpdateMarkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateMarkerRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateMarkerRequest) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{8}
}

func (x *CreateOrUpdateMarkerRequest) GetMarker() *livemap.MarkerMarker {
	if x != nil {
		return x.Marker
	}
	return nil
}

type CreateOrUpdateMarkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Marker        *livemap.MarkerMarker  `protobuf:"bytes,1,opt,name=marker,proto3" json:"marker,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateMarkerResponse) Reset() {
	*x = CreateOrUpdateMarkerResponse{}
	mi := &file_services_livemap_livemap_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateMarkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateMarkerResponse) ProtoMessage() {}

func (x *CreateOrUpdateMarkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateMarkerResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateMarkerResponse) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{9}
}

func (x *CreateOrUpdateMarkerResponse) GetMarker() *livemap.MarkerMarker {
	if x != nil {
		return x.Marker
	}
	return nil
}

type DeleteMarkerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMarkerRequest) Reset() {
	*x = DeleteMarkerRequest{}
	mi := &file_services_livemap_livemap_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMarkerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkerRequest) ProtoMessage() {}

func (x *DeleteMarkerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkerRequest.ProtoReflect.Descriptor instead.
func (*DeleteMarkerRequest) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteMarkerRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMarkerResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMarkerResponse) Reset() {
	*x = DeleteMarkerResponse{}
	mi := &file_services_livemap_livemap_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMarkerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkerResponse) ProtoMessage() {}

func (x *DeleteMarkerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_livemap_livemap_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkerResponse.ProtoReflect.Descriptor instead.
func (*DeleteMarkerResponse) Descriptor() ([]byte, []int) {
	return file_services_livemap_livemap_proto_rawDescGZIP(), []int{11}
}

var File_services_livemap_livemap_proto protoreflect.FileDescriptor

const file_services_livemap_livemap_proto_rawDesc = "" +
	"\n" +
	"\x1eservices/livemap/livemap.proto\x12\x10services.livemap\x1a\x19codegen/perms/perms.proto\x1a\x19resources/jobs/jobs.proto\x1a%resources/livemap/marker_marker.proto\x1a#resources/livemap/user_marker.proto\"\x0f\n" +
	"\rStreamRequest\"\x8f\x03\n" +
	"\x0eStreamResponse\x12%\n" +
	"\fuser_on_duty\x18\x01 \x01(\bH\x01R\n" +
	"userOnDuty\x88\x01\x01\x120\n" +
	"\x04jobs\x18\x02 \x01(\v2\x1a.services.livemap.JobsListH\x00R\x04jobs\x12B\n" +
	"\amarkers\x18\x03 \x01(\v2&.services.livemap.MarkerMarkersUpdatesH\x00R\amarkers\x128\n" +
	"\bsnapshot\x18\x04 \x01(\v2\x1a.services.livemap.SnapshotH\x00R\bsnapshot\x12B\n" +
	"\fuser_updates\x18\x05 \x01(\v2\x1d.services.livemap.UserUpdatesH\x00R\vuserUpdates\x12B\n" +
	"\fuser_deletes\x18\x06 \x01(\v2\x1d.services.livemap.UserDeletesH\x00R\vuserDeletesB\r\n" +
	"\x04data\x12\x05\xbaH\x02\b\x01B\x0f\n" +
	"\r_user_on_duty\"d\n" +
	"\bJobsList\x12)\n" +
	"\x05users\x18\x01 \x03(\v2\x13.resources.jobs.JobR\x05users\x12-\n" +
	"\amarkers\x18\x02 \x03(\v2\x13.resources.jobs.JobR\amarkers\"\x99\x01\n" +
	"\x14MarkerMarkersUpdates\x129\n" +
	"\aupdated\x18\x01 \x03(\v2\x1f.resources.livemap.MarkerMarkerR\aupdated\x12\x18\n" +
	"\adeleted\x18\x02 \x03(\x03R\adeleted\x12\x12\n" +
	"\x04part\x18\x03 \x01(\x05R\x04part\x12\x18\n" +
	"\apartial\x18\x04 \x01(\bR\apartial\"C\n" +
	"\bSnapshot\x127\n" +
	"\amarkers\x18\x01 \x03(\v2\x1d.resources.livemap.UserMarkerR\amarkers\"F\n" +
	"\vUserUpdates\x127\n" +
	"\aupdates\x18\x01 \x03(\v2\x1d.resources.livemap.UserMarkerR\aupdates\"E\n" +
	"\vUserDeletes\x126\n" +
	"\adeletes\x18\x01 \x03(\v2\x1c.services.livemap.UserDeleteR\adeletes\".\n" +
	"\n" +
	"UserDelete\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x05R\x02id\x12\x10\n" +
	"\x03job\x18\x02 \x01(\tR\x03job\"^\n" +
	"\x1bCreateOrUpdateMarkerRequest\x12?\n" +
	"\x06marker\x18\x01 \x01(\v2\x1f.resources.livemap.MarkerMarkerB\x06\xbaH\x03\xc8\x01\x01R\x06marker\"W\n" +
	"\x1cCreateOrUpdateMarkerResponse\x127\n" +
	"\x06marker\x18\x01 \x01(\v2\x1f.resources.livemap.MarkerMarkerR\x06marker\"%\n" +
	"\x13DeleteMarkerRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x16\n" +
	"\x14DeleteMarkerResponse2\xc3\x03\n" +
	"\x0eLivemapService\x12o\n" +
	"\x06Stream\x12\x1f.services.livemap.StreamRequest\x1a .services.livemap.StreamResponse\" \xd2\xf3\x18\x1c\b\x01*\v\n" +
	"\aMarkers\x18\x02*\v\n" +
	"\aPlayers\x18\x030\x01\x12\xaa\x01\n" +
	"\x14CreateOrUpdateMarker\x12-.services.livemap.CreateOrUpdateMarkerRequest\x1a..services.livemap.CreateOrUpdateMarkerResponse\"3\xd2\xf3\x18/\b\x01*+\n" +
	"\x06Access\x18\x01\"\x03Own\"\n" +
	"Lower_Rank\"\tSame_Rank\"\x03Any\x12\x92\x01\n" +
	"\fDeleteMarker\x12%.services.livemap.DeleteMarkerRequest\x1a&.services.livemap.DeleteMarkerResponse\"3\xd2\xf3\x18/\b\x01*+\n" +
	"\x06Access\x18\x01\"\x03Own\"\n" +
	"Lower_Rank\"\tSame_Rank\"\x03AnyBLZJgithub.com/fivenet-app/fivenet/v2025/gen/go/proto/services/livemap;livemapb\x06proto3"

var (
	file_services_livemap_livemap_proto_rawDescOnce sync.Once
	file_services_livemap_livemap_proto_rawDescData []byte
)

func file_services_livemap_livemap_proto_rawDescGZIP() []byte {
	file_services_livemap_livemap_proto_rawDescOnce.Do(func() {
		file_services_livemap_livemap_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_livemap_livemap_proto_rawDesc), len(file_services_livemap_livemap_proto_rawDesc)))
	})
	return file_services_livemap_livemap_proto_rawDescData
}

var file_services_livemap_livemap_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_services_livemap_livemap_proto_goTypes = []any{
	(*StreamRequest)(nil),                // 0: services.livemap.StreamRequest
	(*StreamResponse)(nil),               // 1: services.livemap.StreamResponse
	(*JobsList)(nil),                     // 2: services.livemap.JobsList
	(*MarkerMarkersUpdates)(nil),         // 3: services.livemap.MarkerMarkersUpdates
	(*Snapshot)(nil),                     // 4: services.livemap.Snapshot
	(*UserUpdates)(nil),                  // 5: services.livemap.UserUpdates
	(*UserDeletes)(nil),                  // 6: services.livemap.UserDeletes
	(*UserDelete)(nil),                   // 7: services.livemap.UserDelete
	(*CreateOrUpdateMarkerRequest)(nil),  // 8: services.livemap.CreateOrUpdateMarkerRequest
	(*CreateOrUpdateMarkerResponse)(nil), // 9: services.livemap.CreateOrUpdateMarkerResponse
	(*DeleteMarkerRequest)(nil),          // 10: services.livemap.DeleteMarkerRequest
	(*DeleteMarkerResponse)(nil),         // 11: services.livemap.DeleteMarkerResponse
	(*jobs.Job)(nil),                     // 12: resources.jobs.Job
	(*livemap.MarkerMarker)(nil),         // 13: resources.livemap.MarkerMarker
	(*livemap.UserMarker)(nil),           // 14: resources.livemap.UserMarker
}
var file_services_livemap_livemap_proto_depIdxs = []int32{
	2,  // 0: services.livemap.StreamResponse.jobs:type_name -> services.livemap.JobsList
	3,  // 1: services.livemap.StreamResponse.markers:type_name -> services.livemap.MarkerMarkersUpdates
	4,  // 2: services.livemap.StreamResponse.snapshot:type_name -> services.livemap.Snapshot
	5,  // 3: services.livemap.StreamResponse.user_updates:type_name -> services.livemap.UserUpdates
	6,  // 4: services.livemap.StreamResponse.user_deletes:type_name -> services.livemap.UserDeletes
	12, // 5: services.livemap.JobsList.users:type_name -> resources.jobs.Job
	12, // 6: services.livemap.JobsList.markers:type_name -> resources.jobs.Job
	13, // 7: services.livemap.MarkerMarkersUpdates.updated:type_name -> resources.livemap.MarkerMarker
	14, // 8: services.livemap.Snapshot.markers:type_name -> resources.livemap.UserMarker
	14, // 9: services.livemap.UserUpdates.updates:type_name -> resources.livemap.UserMarker
	7,  // 10: services.livemap.UserDeletes.deletes:type_name -> services.livemap.UserDelete
	13, // 11: services.livemap.CreateOrUpdateMarkerRequest.marker:type_name -> resources.livemap.MarkerMarker
	13, // 12: services.livemap.CreateOrUpdateMarkerResponse.marker:type_name -> resources.livemap.MarkerMarker
	0,  // 13: services.livemap.LivemapService.Stream:input_type -> services.livemap.StreamRequest
	8,  // 14: services.livemap.LivemapService.CreateOrUpdateMarker:input_type -> services.livemap.CreateOrUpdateMarkerRequest
	10, // 15: services.livemap.LivemapService.DeleteMarker:input_type -> services.livemap.DeleteMarkerRequest
	1,  // 16: services.livemap.LivemapService.Stream:output_type -> services.livemap.StreamResponse
	9,  // 17: services.livemap.LivemapService.CreateOrUpdateMarker:output_type -> services.livemap.CreateOrUpdateMarkerResponse
	11, // 18: services.livemap.LivemapService.DeleteMarker:output_type -> services.livemap.DeleteMarkerResponse
	16, // [16:19] is the sub-list for method output_type
	13, // [13:16] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_services_livemap_livemap_proto_init() }
func file_services_livemap_livemap_proto_init() {
	if File_services_livemap_livemap_proto != nil {
		return
	}
	file_services_livemap_livemap_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamResponse_Jobs)(nil),
		(*StreamResponse_Markers)(nil),
		(*StreamResponse_Snapshot)(nil),
		(*StreamResponse_UserUpdates)(nil),
		(*StreamResponse_UserDeletes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_livemap_livemap_proto_rawDesc), len(file_services_livemap_livemap_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_livemap_livemap_proto_goTypes,
		DependencyIndexes: file_services_livemap_livemap_proto_depIdxs,
		MessageInfos:      file_services_livemap_livemap_proto_msgTypes,
	}.Build()
	File_services_livemap_livemap_proto = out.File
	file_services_livemap_livemap_proto_goTypes = nil
	file_services_livemap_livemap_proto_depIdxs = nil
}
