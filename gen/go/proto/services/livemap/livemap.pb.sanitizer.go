// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: services/livemap/livemap.proto

package livemap

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CreateOrUpdateMarkerRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Marker
	if m.Marker != nil {
		if v, ok := any(m.GetMarker()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CreateOrUpdateMarkerResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Marker
	if m.Marker != nil {
		if v, ok := any(m.GetMarker()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteMarkerRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteMarkerResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *JobsList) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Markers
	for idx, item := range m.Markers {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Users
	for idx, item := range m.Users {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *MarkerMarkersUpdates) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Updated
	for idx, item := range m.Updated {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Snapshot) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Markers
	for idx, item := range m.Markers {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *StreamRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *StreamResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Jobs
	switch v := m.Data.(type) {

	case *StreamResponse_Jobs:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Markers
	case *StreamResponse_Markers:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Snapshot
	case *StreamResponse_Snapshot:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: UserDeletes
	case *StreamResponse_UserDeletes:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: UserUpdates
	case *StreamResponse_UserUpdates:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UserDelete) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UserDeletes) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Deletes
	for idx, item := range m.Deletes {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UserUpdates) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Updates
	for idx, item := range m.Updates {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
