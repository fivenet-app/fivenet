// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/livemap/livemap.proto

package livemap

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LivemapService_Stream_FullMethodName               = "/services.livemap.LivemapService/Stream"
	LivemapService_CreateOrUpdateMarker_FullMethodName = "/services.livemap.LivemapService/CreateOrUpdateMarker"
	LivemapService_DeleteMarker_FullMethodName         = "/services.livemap.LivemapService/DeleteMarker"
)

// LivemapServiceClient is the client API for LivemapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LivemapServiceClient interface {
	// @perm: Attrs=Markers/JobList|Players/JobGradeList
	Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	CreateOrUpdateMarker(ctx context.Context, in *CreateOrUpdateMarkerRequest, opts ...grpc.CallOption) (*CreateOrUpdateMarkerResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	DeleteMarker(ctx context.Context, in *DeleteMarkerRequest, opts ...grpc.CallOption) (*DeleteMarkerResponse, error)
}

type livemapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLivemapServiceClient(cc grpc.ClientConnInterface) LivemapServiceClient {
	return &livemapServiceClient{cc}
}

func (c *livemapServiceClient) Stream(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LivemapService_ServiceDesc.Streams[0], LivemapService_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamRequest, StreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LivemapService_StreamClient = grpc.ServerStreamingClient[StreamResponse]

func (c *livemapServiceClient) CreateOrUpdateMarker(ctx context.Context, in *CreateOrUpdateMarkerRequest, opts ...grpc.CallOption) (*CreateOrUpdateMarkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateMarkerResponse)
	err := c.cc.Invoke(ctx, LivemapService_CreateOrUpdateMarker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *livemapServiceClient) DeleteMarker(ctx context.Context, in *DeleteMarkerRequest, opts ...grpc.CallOption) (*DeleteMarkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMarkerResponse)
	err := c.cc.Invoke(ctx, LivemapService_DeleteMarker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LivemapServiceServer is the server API for LivemapService service.
// All implementations must embed UnimplementedLivemapServiceServer
// for forward compatibility.
type LivemapServiceServer interface {
	// @perm: Attrs=Markers/JobList|Players/JobGradeList
	Stream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	CreateOrUpdateMarker(context.Context, *CreateOrUpdateMarkerRequest) (*CreateOrUpdateMarkerResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	DeleteMarker(context.Context, *DeleteMarkerRequest) (*DeleteMarkerResponse, error)
	mustEmbedUnimplementedLivemapServiceServer()
}

// UnimplementedLivemapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLivemapServiceServer struct{}

func (UnimplementedLivemapServiceServer) Stream(*StreamRequest, grpc.ServerStreamingServer[StreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedLivemapServiceServer) CreateOrUpdateMarker(context.Context, *CreateOrUpdateMarkerRequest) (*CreateOrUpdateMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateMarker not implemented")
}
func (UnimplementedLivemapServiceServer) DeleteMarker(context.Context, *DeleteMarkerRequest) (*DeleteMarkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarker not implemented")
}
func (UnimplementedLivemapServiceServer) mustEmbedUnimplementedLivemapServiceServer() {}
func (UnimplementedLivemapServiceServer) testEmbeddedByValue()                        {}

// UnsafeLivemapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LivemapServiceServer will
// result in compilation errors.
type UnsafeLivemapServiceServer interface {
	mustEmbedUnimplementedLivemapServiceServer()
}

func RegisterLivemapServiceServer(s grpc.ServiceRegistrar, srv LivemapServiceServer) {
	// If the following call pancis, it indicates UnimplementedLivemapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LivemapService_ServiceDesc, srv)
}

func _LivemapService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LivemapServiceServer).Stream(m, &grpc.GenericServerStream[StreamRequest, StreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LivemapService_StreamServer = grpc.ServerStreamingServer[StreamResponse]

func _LivemapService_CreateOrUpdateMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivemapServiceServer).CreateOrUpdateMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivemapService_CreateOrUpdateMarker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivemapServiceServer).CreateOrUpdateMarker(ctx, req.(*CreateOrUpdateMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LivemapService_DeleteMarker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMarkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LivemapServiceServer).DeleteMarker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LivemapService_DeleteMarker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LivemapServiceServer).DeleteMarker(ctx, req.(*DeleteMarkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LivemapService_ServiceDesc is the grpc.ServiceDesc for LivemapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LivemapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.livemap.LivemapService",
	HandlerType: (*LivemapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateMarker",
			Handler:    _LivemapService_CreateOrUpdateMarker_Handler,
		},
		{
			MethodName: "DeleteMarker",
			Handler:    _LivemapService_DeleteMarker_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _LivemapService_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/livemap/livemap.proto",
}
