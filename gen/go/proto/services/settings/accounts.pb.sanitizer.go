// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: services/settings/accounts.proto

package settings

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CreateAccountRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Char
	if m.Char != nil {
		if v, ok := any(m.GetChar()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: License
	m.License = htmlsanitizer.Sanitize(m.License)

	// Field: Username
	m.Username = htmlsanitizer.Sanitize(m.Username)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CreateAccountResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: RegToken
	m.RegToken = htmlsanitizer.Sanitize(m.RegToken)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteAccountRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteAccountResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DisconnectOAuth2ConnectionRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ProviderName
	m.ProviderName = htmlsanitizer.Sanitize(m.ProviderName)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DisconnectOAuth2ConnectionResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListAccountsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ExternalId
	if m.ExternalId != nil {
		*m.ExternalId = htmlsanitizer.Sanitize(*m.ExternalId)
	}

	// Field: License
	if m.License != nil {
		*m.License = htmlsanitizer.Sanitize(*m.License)
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Sort
	if m.Sort != nil {
		if v, ok := any(m.GetSort()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Username
	if m.Username != nil {
		*m.Username = htmlsanitizer.Sanitize(*m.Username)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListAccountsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Accounts
	for idx, item := range m.Accounts {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpdateAccountRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpdateAccountResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Account
	if m.Account != nil {
		if v, ok := any(m.GetAccount()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
