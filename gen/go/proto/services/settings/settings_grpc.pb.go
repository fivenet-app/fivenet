// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/settings/settings.proto

package settings

import (
	context "context"
	file "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/file"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SettingsService_GetJobProps_FullMethodName             = "/services.settings.SettingsService/GetJobProps"
	SettingsService_SetJobProps_FullMethodName             = "/services.settings.SettingsService/SetJobProps"
	SettingsService_GetRoles_FullMethodName                = "/services.settings.SettingsService/GetRoles"
	SettingsService_GetRole_FullMethodName                 = "/services.settings.SettingsService/GetRole"
	SettingsService_CreateRole_FullMethodName              = "/services.settings.SettingsService/CreateRole"
	SettingsService_DeleteRole_FullMethodName              = "/services.settings.SettingsService/DeleteRole"
	SettingsService_UpdateRolePerms_FullMethodName         = "/services.settings.SettingsService/UpdateRolePerms"
	SettingsService_GetPermissions_FullMethodName          = "/services.settings.SettingsService/GetPermissions"
	SettingsService_GetEffectivePermissions_FullMethodName = "/services.settings.SettingsService/GetEffectivePermissions"
	SettingsService_ViewAuditLog_FullMethodName            = "/services.settings.SettingsService/ViewAuditLog"
	SettingsService_GetAllPermissions_FullMethodName       = "/services.settings.SettingsService/GetAllPermissions"
	SettingsService_GetJobLimits_FullMethodName            = "/services.settings.SettingsService/GetJobLimits"
	SettingsService_UpdateJobLimits_FullMethodName         = "/services.settings.SettingsService/UpdateJobLimits"
	SettingsService_DeleteFaction_FullMethodName           = "/services.settings.SettingsService/DeleteFaction"
	SettingsService_ListDiscordChannels_FullMethodName     = "/services.settings.SettingsService/ListDiscordChannels"
	SettingsService_ListUserGuilds_FullMethodName          = "/services.settings.SettingsService/ListUserGuilds"
	SettingsService_UploadJobLogo_FullMethodName           = "/services.settings.SettingsService/UploadJobLogo"
	SettingsService_DeleteJobLogo_FullMethodName           = "/services.settings.SettingsService/DeleteJobLogo"
)

// SettingsServiceClient is the client API for SettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingsServiceClient interface {
	// @perm
	GetJobProps(ctx context.Context, in *GetJobPropsRequest, opts ...grpc.CallOption) (*GetJobPropsResponse, error)
	// @perm
	SetJobProps(ctx context.Context, in *SetJobPropsRequest, opts ...grpc.CallOption) (*SetJobPropsResponse, error)
	// @perm
	GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	// @perm: Name=GetRoles
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
	// @perm
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error)
	// @perm
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// @perm
	UpdateRolePerms(ctx context.Context, in *UpdateRolePermsRequest, opts ...grpc.CallOption) (*UpdateRolePermsResponse, error)
	// @perm: Name=GetRoles
	GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error)
	// @perm: Name=GetRoles
	GetEffectivePermissions(ctx context.Context, in *GetEffectivePermissionsRequest, opts ...grpc.CallOption) (*GetEffectivePermissionsResponse, error)
	// @perm
	ViewAuditLog(ctx context.Context, in *ViewAuditLogRequest, opts ...grpc.CallOption) (*ViewAuditLogResponse, error)
	// @perm: Name=Superuser
	GetAllPermissions(ctx context.Context, in *GetAllPermissionsRequest, opts ...grpc.CallOption) (*GetAllPermissionsResponse, error)
	// @perm: Name=Superuser
	GetJobLimits(ctx context.Context, in *GetJobLimitsRequest, opts ...grpc.CallOption) (*GetJobLimitsResponse, error)
	// @perm: Name=Superuser
	UpdateJobLimits(ctx context.Context, in *UpdateJobLimitsRequest, opts ...grpc.CallOption) (*UpdateJobLimitsResponse, error)
	// @perm: Name=Superuser
	DeleteFaction(ctx context.Context, in *DeleteFactionRequest, opts ...grpc.CallOption) (*DeleteFactionResponse, error)
	// @perm: Name=SetJobProps
	ListDiscordChannels(ctx context.Context, in *ListDiscordChannelsRequest, opts ...grpc.CallOption) (*ListDiscordChannelsResponse, error)
	// @perm: Name=SetJobProps
	ListUserGuilds(ctx context.Context, in *ListUserGuildsRequest, opts ...grpc.CallOption) (*ListUserGuildsResponse, error)
	// @perm: Name=SetJobProps
	UploadJobLogo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse], error)
	// @perm: Name=SetJobProps
	DeleteJobLogo(ctx context.Context, in *DeleteJobLogoRequest, opts ...grpc.CallOption) (*DeleteJobLogoResponse, error)
}

type settingsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingsServiceClient(cc grpc.ClientConnInterface) SettingsServiceClient {
	return &settingsServiceClient{cc}
}

func (c *settingsServiceClient) GetJobProps(ctx context.Context, in *GetJobPropsRequest, opts ...grpc.CallOption) (*GetJobPropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobPropsResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetJobProps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) SetJobProps(ctx context.Context, in *SetJobPropsRequest, opts ...grpc.CallOption) (*SetJobPropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetJobPropsResponse)
	err := c.cc.Invoke(ctx, SettingsService_SetJobProps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetRoles(ctx context.Context, in *GetRolesRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRoleResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*CreateRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRoleResponse)
	err := c.cc.Invoke(ctx, SettingsService_CreateRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, SettingsService_DeleteRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) UpdateRolePerms(ctx context.Context, in *UpdateRolePermsRequest, opts ...grpc.CallOption) (*UpdateRolePermsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRolePermsResponse)
	err := c.cc.Invoke(ctx, SettingsService_UpdateRolePerms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetPermissions(ctx context.Context, in *GetPermissionsRequest, opts ...grpc.CallOption) (*GetPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPermissionsResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetEffectivePermissions(ctx context.Context, in *GetEffectivePermissionsRequest, opts ...grpc.CallOption) (*GetEffectivePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEffectivePermissionsResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetEffectivePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) ViewAuditLog(ctx context.Context, in *ViewAuditLogRequest, opts ...grpc.CallOption) (*ViewAuditLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewAuditLogResponse)
	err := c.cc.Invoke(ctx, SettingsService_ViewAuditLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetAllPermissions(ctx context.Context, in *GetAllPermissionsRequest, opts ...grpc.CallOption) (*GetAllPermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllPermissionsResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetAllPermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) GetJobLimits(ctx context.Context, in *GetJobLimitsRequest, opts ...grpc.CallOption) (*GetJobLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetJobLimitsResponse)
	err := c.cc.Invoke(ctx, SettingsService_GetJobLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) UpdateJobLimits(ctx context.Context, in *UpdateJobLimitsRequest, opts ...grpc.CallOption) (*UpdateJobLimitsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateJobLimitsResponse)
	err := c.cc.Invoke(ctx, SettingsService_UpdateJobLimits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) DeleteFaction(ctx context.Context, in *DeleteFactionRequest, opts ...grpc.CallOption) (*DeleteFactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFactionResponse)
	err := c.cc.Invoke(ctx, SettingsService_DeleteFaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) ListDiscordChannels(ctx context.Context, in *ListDiscordChannelsRequest, opts ...grpc.CallOption) (*ListDiscordChannelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDiscordChannelsResponse)
	err := c.cc.Invoke(ctx, SettingsService_ListDiscordChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) ListUserGuilds(ctx context.Context, in *ListUserGuildsRequest, opts ...grpc.CallOption) (*ListUserGuildsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserGuildsResponse)
	err := c.cc.Invoke(ctx, SettingsService_ListUserGuilds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingsServiceClient) UploadJobLogo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SettingsService_ServiceDesc.Streams[0], SettingsService_UploadJobLogo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[file.UploadPacket, file.UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SettingsService_UploadJobLogoClient = grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse]

func (c *settingsServiceClient) DeleteJobLogo(ctx context.Context, in *DeleteJobLogoRequest, opts ...grpc.CallOption) (*DeleteJobLogoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteJobLogoResponse)
	err := c.cc.Invoke(ctx, SettingsService_DeleteJobLogo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingsServiceServer is the server API for SettingsService service.
// All implementations must embed UnimplementedSettingsServiceServer
// for forward compatibility.
type SettingsServiceServer interface {
	// @perm
	GetJobProps(context.Context, *GetJobPropsRequest) (*GetJobPropsResponse, error)
	// @perm
	SetJobProps(context.Context, *SetJobPropsRequest) (*SetJobPropsResponse, error)
	// @perm
	GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error)
	// @perm: Name=GetRoles
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
	// @perm
	CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error)
	// @perm
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// @perm
	UpdateRolePerms(context.Context, *UpdateRolePermsRequest) (*UpdateRolePermsResponse, error)
	// @perm: Name=GetRoles
	GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error)
	// @perm: Name=GetRoles
	GetEffectivePermissions(context.Context, *GetEffectivePermissionsRequest) (*GetEffectivePermissionsResponse, error)
	// @perm
	ViewAuditLog(context.Context, *ViewAuditLogRequest) (*ViewAuditLogResponse, error)
	// @perm: Name=Superuser
	GetAllPermissions(context.Context, *GetAllPermissionsRequest) (*GetAllPermissionsResponse, error)
	// @perm: Name=Superuser
	GetJobLimits(context.Context, *GetJobLimitsRequest) (*GetJobLimitsResponse, error)
	// @perm: Name=Superuser
	UpdateJobLimits(context.Context, *UpdateJobLimitsRequest) (*UpdateJobLimitsResponse, error)
	// @perm: Name=Superuser
	DeleteFaction(context.Context, *DeleteFactionRequest) (*DeleteFactionResponse, error)
	// @perm: Name=SetJobProps
	ListDiscordChannels(context.Context, *ListDiscordChannelsRequest) (*ListDiscordChannelsResponse, error)
	// @perm: Name=SetJobProps
	ListUserGuilds(context.Context, *ListUserGuildsRequest) (*ListUserGuildsResponse, error)
	// @perm: Name=SetJobProps
	UploadJobLogo(grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]) error
	// @perm: Name=SetJobProps
	DeleteJobLogo(context.Context, *DeleteJobLogoRequest) (*DeleteJobLogoResponse, error)
	mustEmbedUnimplementedSettingsServiceServer()
}

// UnimplementedSettingsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSettingsServiceServer struct{}

func (UnimplementedSettingsServiceServer) GetJobProps(context.Context, *GetJobPropsRequest) (*GetJobPropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobProps not implemented")
}
func (UnimplementedSettingsServiceServer) SetJobProps(context.Context, *SetJobPropsRequest) (*SetJobPropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobProps not implemented")
}
func (UnimplementedSettingsServiceServer) GetRoles(context.Context, *GetRolesRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedSettingsServiceServer) GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedSettingsServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*CreateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedSettingsServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedSettingsServiceServer) UpdateRolePerms(context.Context, *UpdateRolePermsRequest) (*UpdateRolePermsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRolePerms not implemented")
}
func (UnimplementedSettingsServiceServer) GetPermissions(context.Context, *GetPermissionsRequest) (*GetPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedSettingsServiceServer) GetEffectivePermissions(context.Context, *GetEffectivePermissionsRequest) (*GetEffectivePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectivePermissions not implemented")
}
func (UnimplementedSettingsServiceServer) ViewAuditLog(context.Context, *ViewAuditLogRequest) (*ViewAuditLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewAuditLog not implemented")
}
func (UnimplementedSettingsServiceServer) GetAllPermissions(context.Context, *GetAllPermissionsRequest) (*GetAllPermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPermissions not implemented")
}
func (UnimplementedSettingsServiceServer) GetJobLimits(context.Context, *GetJobLimitsRequest) (*GetJobLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobLimits not implemented")
}
func (UnimplementedSettingsServiceServer) UpdateJobLimits(context.Context, *UpdateJobLimitsRequest) (*UpdateJobLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJobLimits not implemented")
}
func (UnimplementedSettingsServiceServer) DeleteFaction(context.Context, *DeleteFactionRequest) (*DeleteFactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFaction not implemented")
}
func (UnimplementedSettingsServiceServer) ListDiscordChannels(context.Context, *ListDiscordChannelsRequest) (*ListDiscordChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiscordChannels not implemented")
}
func (UnimplementedSettingsServiceServer) ListUserGuilds(context.Context, *ListUserGuildsRequest) (*ListUserGuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserGuilds not implemented")
}
func (UnimplementedSettingsServiceServer) UploadJobLogo(grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadJobLogo not implemented")
}
func (UnimplementedSettingsServiceServer) DeleteJobLogo(context.Context, *DeleteJobLogoRequest) (*DeleteJobLogoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteJobLogo not implemented")
}
func (UnimplementedSettingsServiceServer) mustEmbedUnimplementedSettingsServiceServer() {}
func (UnimplementedSettingsServiceServer) testEmbeddedByValue()                         {}

// UnsafeSettingsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingsServiceServer will
// result in compilation errors.
type UnsafeSettingsServiceServer interface {
	mustEmbedUnimplementedSettingsServiceServer()
}

func RegisterSettingsServiceServer(s grpc.ServiceRegistrar, srv SettingsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSettingsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SettingsService_ServiceDesc, srv)
}

func _SettingsService_GetJobProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetJobProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetJobProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetJobProps(ctx, req.(*GetJobPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_SetJobProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).SetJobProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_SetJobProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).SetJobProps(ctx, req.(*SetJobPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetRoles(ctx, req.(*GetRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_UpdateRolePerms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRolePermsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).UpdateRolePerms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_UpdateRolePerms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).UpdateRolePerms(ctx, req.(*UpdateRolePermsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetPermissions(ctx, req.(*GetPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetEffectivePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectivePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetEffectivePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetEffectivePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetEffectivePermissions(ctx, req.(*GetEffectivePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_ViewAuditLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAuditLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).ViewAuditLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_ViewAuditLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).ViewAuditLog(ctx, req.(*ViewAuditLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetAllPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetAllPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetAllPermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetAllPermissions(ctx, req.(*GetAllPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_GetJobLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).GetJobLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_GetJobLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).GetJobLimits(ctx, req.(*GetJobLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_UpdateJobLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).UpdateJobLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_UpdateJobLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).UpdateJobLimits(ctx, req.(*UpdateJobLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_DeleteFaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).DeleteFaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_DeleteFaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).DeleteFaction(ctx, req.(*DeleteFactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_ListDiscordChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiscordChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).ListDiscordChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_ListDiscordChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).ListDiscordChannels(ctx, req.(*ListDiscordChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_ListUserGuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserGuildsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).ListUserGuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_ListUserGuilds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).ListUserGuilds(ctx, req.(*ListUserGuildsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SettingsService_UploadJobLogo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SettingsServiceServer).UploadJobLogo(&grpc.GenericServerStream[file.UploadPacket, file.UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SettingsService_UploadJobLogoServer = grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]

func _SettingsService_DeleteJobLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteJobLogoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingsServiceServer).DeleteJobLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SettingsService_DeleteJobLogo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingsServiceServer).DeleteJobLogo(ctx, req.(*DeleteJobLogoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SettingsService_ServiceDesc is the grpc.ServiceDesc for SettingsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SettingsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.settings.SettingsService",
	HandlerType: (*SettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJobProps",
			Handler:    _SettingsService_GetJobProps_Handler,
		},
		{
			MethodName: "SetJobProps",
			Handler:    _SettingsService_SetJobProps_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _SettingsService_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _SettingsService_GetRole_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _SettingsService_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _SettingsService_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRolePerms",
			Handler:    _SettingsService_UpdateRolePerms_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _SettingsService_GetPermissions_Handler,
		},
		{
			MethodName: "GetEffectivePermissions",
			Handler:    _SettingsService_GetEffectivePermissions_Handler,
		},
		{
			MethodName: "ViewAuditLog",
			Handler:    _SettingsService_ViewAuditLog_Handler,
		},
		{
			MethodName: "GetAllPermissions",
			Handler:    _SettingsService_GetAllPermissions_Handler,
		},
		{
			MethodName: "GetJobLimits",
			Handler:    _SettingsService_GetJobLimits_Handler,
		},
		{
			MethodName: "UpdateJobLimits",
			Handler:    _SettingsService_UpdateJobLimits_Handler,
		},
		{
			MethodName: "DeleteFaction",
			Handler:    _SettingsService_DeleteFaction_Handler,
		},
		{
			MethodName: "ListDiscordChannels",
			Handler:    _SettingsService_ListDiscordChannels_Handler,
		},
		{
			MethodName: "ListUserGuilds",
			Handler:    _SettingsService_ListUserGuilds_Handler,
		},
		{
			MethodName: "DeleteJobLogo",
			Handler:    _SettingsService_DeleteJobLogo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadJobLogo",
			Handler:       _SettingsService_UploadJobLogo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/settings/settings.proto",
}
