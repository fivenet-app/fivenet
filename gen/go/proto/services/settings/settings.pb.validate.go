// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/settings/settings.proto

package settings

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetJobPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobPropsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobPropsRequestMultiError, or nil if none found.
func (m *GetJobPropsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobPropsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetJobPropsRequestMultiError(errors)
	}

	return nil
}

// GetJobPropsRequestMultiError is an error wrapping multiple validation errors
// returned by GetJobPropsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetJobPropsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobPropsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobPropsRequestMultiError) AllErrors() []error { return m }

// GetJobPropsRequestValidationError is the validation error returned by
// GetJobPropsRequest.Validate if the designated constraints aren't met.
type GetJobPropsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobPropsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobPropsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobPropsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobPropsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobPropsRequestValidationError) ErrorName() string {
	return "GetJobPropsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobPropsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobPropsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobPropsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobPropsRequestValidationError{}

// Validate checks the field values on GetJobPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobPropsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobPropsResponseMultiError, or nil if none found.
func (m *GetJobPropsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobPropsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetJobPropsResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetJobPropsResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetJobPropsResponseValidationError{
				field:  "JobProps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetJobPropsResponseMultiError(errors)
	}

	return nil
}

// GetJobPropsResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobPropsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobPropsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobPropsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobPropsResponseMultiError) AllErrors() []error { return m }

// GetJobPropsResponseValidationError is the validation error returned by
// GetJobPropsResponse.Validate if the designated constraints aren't met.
type GetJobPropsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobPropsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobPropsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobPropsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobPropsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobPropsResponseValidationError) ErrorName() string {
	return "GetJobPropsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobPropsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobPropsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobPropsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobPropsResponseValidationError{}

// Validate checks the field values on SetJobPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobPropsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobPropsRequestMultiError, or nil if none found.
func (m *SetJobPropsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobPropsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobPropsRequestValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobPropsRequestValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobPropsRequestValidationError{
				field:  "JobProps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobPropsRequestMultiError(errors)
	}

	return nil
}

// SetJobPropsRequestMultiError is an error wrapping multiple validation errors
// returned by SetJobPropsRequest.ValidateAll() if the designated constraints
// aren't met.
type SetJobPropsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobPropsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobPropsRequestMultiError) AllErrors() []error { return m }

// SetJobPropsRequestValidationError is the validation error returned by
// SetJobPropsRequest.Validate if the designated constraints aren't met.
type SetJobPropsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobPropsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobPropsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobPropsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobPropsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobPropsRequestValidationError) ErrorName() string {
	return "SetJobPropsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobPropsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobPropsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobPropsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobPropsRequestValidationError{}

// Validate checks the field values on SetJobPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobPropsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobPropsResponseMultiError, or nil if none found.
func (m *SetJobPropsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobPropsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJobProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobPropsResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobPropsResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobPropsResponseValidationError{
				field:  "JobProps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobPropsResponseMultiError(errors)
	}

	return nil
}

// SetJobPropsResponseMultiError is an error wrapping multiple validation
// errors returned by SetJobPropsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetJobPropsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobPropsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobPropsResponseMultiError) AllErrors() []error { return m }

// SetJobPropsResponseValidationError is the validation error returned by
// SetJobPropsResponse.Validate if the designated constraints aren't met.
type SetJobPropsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobPropsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobPropsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobPropsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobPropsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobPropsResponseValidationError) ErrorName() string {
	return "SetJobPropsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobPropsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobPropsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobPropsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobPropsResponseValidationError{}

// Validate checks the field values on GetRolesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRolesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesRequestMultiError, or nil if none found.
func (m *GetRolesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.LowestRank != nil {
		// no validation rules for LowestRank
	}

	if len(errors) > 0 {
		return GetRolesRequestMultiError(errors)
	}

	return nil
}

// GetRolesRequestMultiError is an error wrapping multiple validation errors
// returned by GetRolesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRolesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesRequestMultiError) AllErrors() []error { return m }

// GetRolesRequestValidationError is the validation error returned by
// GetRolesRequest.Validate if the designated constraints aren't met.
type GetRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesRequestValidationError) ErrorName() string { return "GetRolesRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesRequestValidationError{}

// Validate checks the field values on GetRolesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRolesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRolesResponseMultiError, or nil if none found.
func (m *GetRolesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRolesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetRolesResponseValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetRolesResponseValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetRolesResponseMultiError(errors)
	}

	return nil
}

// GetRolesResponseMultiError is an error wrapping multiple validation errors
// returned by GetRolesResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRolesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRolesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRolesResponseMultiError) AllErrors() []error { return m }

// GetRolesResponseValidationError is the validation error returned by
// GetRolesResponse.Validate if the designated constraints aren't met.
type GetRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRolesResponseValidationError) ErrorName() string { return "GetRolesResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRolesResponseValidationError{}

// Validate checks the field values on GetRoleRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRoleRequestMultiError,
// or nil if none found.
func (m *GetRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRoleRequestMultiError(errors)
	}

	return nil
}

// GetRoleRequestMultiError is an error wrapping multiple validation errors
// returned by GetRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleRequestMultiError) AllErrors() []error { return m }

// GetRoleRequestValidationError is the validation error returned by
// GetRoleRequest.Validate if the designated constraints aren't met.
type GetRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleRequestValidationError) ErrorName() string { return "GetRoleRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleRequestValidationError{}

// Validate checks the field values on GetRoleResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRoleResponseMultiError, or nil if none found.
func (m *GetRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRoleResponseMultiError(errors)
	}

	return nil
}

// GetRoleResponseMultiError is an error wrapping multiple validation errors
// returned by GetRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type GetRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRoleResponseMultiError) AllErrors() []error { return m }

// GetRoleResponseValidationError is the validation error returned by
// GetRoleResponse.Validate if the designated constraints aren't met.
type GetRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRoleResponseValidationError) ErrorName() string { return "GetRoleResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRoleResponseValidationError{}

// Validate checks the field values on CreateRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleRequestMultiError, or nil if none found.
func (m *CreateRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := CreateRoleRequestValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGrade() < 0 {
		err := CreateRoleRequestValidationError{
			field:  "Grade",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRoleRequestMultiError(errors)
	}

	return nil
}

// CreateRoleRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleRequestMultiError) AllErrors() []error { return m }

// CreateRoleRequestValidationError is the validation error returned by
// CreateRoleRequest.Validate if the designated constraints aren't met.
type CreateRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleRequestValidationError) ErrorName() string {
	return "CreateRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleRequestValidationError{}

// Validate checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRoleResponseMultiError, or nil if none found.
func (m *CreateRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRoleResponseMultiError(errors)
	}

	return nil
}

// CreateRoleResponseMultiError is an error wrapping multiple validation errors
// returned by CreateRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRoleResponseMultiError) AllErrors() []error { return m }

// CreateRoleResponseValidationError is the validation error returned by
// CreateRoleResponse.Validate if the designated constraints aren't met.
type CreateRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRoleResponseValidationError) ErrorName() string {
	return "CreateRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRoleResponseValidationError{}

// Validate checks the field values on DeleteRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleRequestMultiError, or nil if none found.
func (m *DeleteRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteRoleRequestMultiError(errors)
	}

	return nil
}

// DeleteRoleRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleRequestMultiError) AllErrors() []error { return m }

// DeleteRoleRequestValidationError is the validation error returned by
// DeleteRoleRequest.Validate if the designated constraints aren't met.
type DeleteRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleRequestValidationError) ErrorName() string {
	return "DeleteRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleRequestValidationError{}

// Validate checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRoleResponseMultiError, or nil if none found.
func (m *DeleteRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRoleResponseMultiError(errors)
	}

	return nil
}

// DeleteRoleResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRoleResponseMultiError) AllErrors() []error { return m }

// DeleteRoleResponseValidationError is the validation error returned by
// DeleteRoleResponse.Validate if the designated constraints aren't met.
type DeleteRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRoleResponseValidationError) ErrorName() string {
	return "DeleteRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRoleResponseValidationError{}

// Validate checks the field values on UpdateRolePermsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRolePermsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRolePermsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRolePermsRequestMultiError, or nil if none found.
func (m *UpdateRolePermsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRolePermsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.Perms != nil {

		if all {
			switch v := interface{}(m.GetPerms()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRolePermsRequestValidationError{
						field:  "Perms",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRolePermsRequestValidationError{
						field:  "Perms",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPerms()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRolePermsRequestValidationError{
					field:  "Perms",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Attrs != nil {

		if all {
			switch v := interface{}(m.GetAttrs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateRolePermsRequestValidationError{
						field:  "Attrs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateRolePermsRequestValidationError{
						field:  "Attrs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAttrs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateRolePermsRequestValidationError{
					field:  "Attrs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateRolePermsRequestMultiError(errors)
	}

	return nil
}

// UpdateRolePermsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRolePermsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRolePermsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRolePermsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRolePermsRequestMultiError) AllErrors() []error { return m }

// UpdateRolePermsRequestValidationError is the validation error returned by
// UpdateRolePermsRequest.Validate if the designated constraints aren't met.
type UpdateRolePermsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRolePermsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRolePermsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRolePermsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRolePermsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRolePermsRequestValidationError) ErrorName() string {
	return "UpdateRolePermsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRolePermsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRolePermsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRolePermsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRolePermsRequestValidationError{}

// Validate checks the field values on PermsUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PermsUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PermsUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermsUpdateMultiError, or
// nil if none found.
func (m *PermsUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *PermsUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetToUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermsUpdateValidationError{
						field:  fmt.Sprintf("ToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermsUpdateValidationError{
						field:  fmt.Sprintf("ToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermsUpdateValidationError{
					field:  fmt.Sprintf("ToUpdate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetToRemove() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermsUpdateValidationError{
						field:  fmt.Sprintf("ToRemove[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermsUpdateValidationError{
						field:  fmt.Sprintf("ToRemove[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermsUpdateValidationError{
					field:  fmt.Sprintf("ToRemove[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PermsUpdateMultiError(errors)
	}

	return nil
}

// PermsUpdateMultiError is an error wrapping multiple validation errors
// returned by PermsUpdate.ValidateAll() if the designated constraints aren't met.
type PermsUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermsUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermsUpdateMultiError) AllErrors() []error { return m }

// PermsUpdateValidationError is the validation error returned by
// PermsUpdate.Validate if the designated constraints aren't met.
type PermsUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermsUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermsUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermsUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermsUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermsUpdateValidationError) ErrorName() string { return "PermsUpdateValidationError" }

// Error satisfies the builtin error interface
func (e PermsUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermsUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermsUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermsUpdateValidationError{}

// Validate checks the field values on AttrsUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrsUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrsUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttrsUpdateMultiError, or
// nil if none found.
func (m *AttrsUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrsUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetToUpdate() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttrsUpdateValidationError{
						field:  fmt.Sprintf("ToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttrsUpdateValidationError{
						field:  fmt.Sprintf("ToUpdate[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttrsUpdateValidationError{
					field:  fmt.Sprintf("ToUpdate[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetToRemove() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttrsUpdateValidationError{
						field:  fmt.Sprintf("ToRemove[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttrsUpdateValidationError{
						field:  fmt.Sprintf("ToRemove[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttrsUpdateValidationError{
					field:  fmt.Sprintf("ToRemove[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AttrsUpdateMultiError(errors)
	}

	return nil
}

// AttrsUpdateMultiError is an error wrapping multiple validation errors
// returned by AttrsUpdate.ValidateAll() if the designated constraints aren't met.
type AttrsUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrsUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrsUpdateMultiError) AllErrors() []error { return m }

// AttrsUpdateValidationError is the validation error returned by
// AttrsUpdate.Validate if the designated constraints aren't met.
type AttrsUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrsUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrsUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrsUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrsUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrsUpdateValidationError) ErrorName() string { return "AttrsUpdateValidationError" }

// Error satisfies the builtin error interface
func (e AttrsUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrsUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrsUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrsUpdateValidationError{}

// Validate checks the field values on UpdateRolePermsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRolePermsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRolePermsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRolePermsResponseMultiError, or nil if none found.
func (m *UpdateRolePermsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRolePermsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRolePermsResponseMultiError(errors)
	}

	return nil
}

// UpdateRolePermsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateRolePermsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateRolePermsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRolePermsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRolePermsResponseMultiError) AllErrors() []error { return m }

// UpdateRolePermsResponseValidationError is the validation error returned by
// UpdateRolePermsResponse.Validate if the designated constraints aren't met.
type UpdateRolePermsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRolePermsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRolePermsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRolePermsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRolePermsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRolePermsResponseValidationError) ErrorName() string {
	return "UpdateRolePermsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRolePermsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRolePermsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRolePermsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRolePermsResponseValidationError{}

// Validate checks the field values on GetPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsRequestMultiError, or nil if none found.
func (m *GetPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetPermissionsRequestMultiError(errors)
	}

	return nil
}

// GetPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsRequestMultiError) AllErrors() []error { return m }

// GetPermissionsRequestValidationError is the validation error returned by
// GetPermissionsRequest.Validate if the designated constraints aren't met.
type GetPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsRequestValidationError) ErrorName() string {
	return "GetPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsRequestValidationError{}

// Validate checks the field values on GetPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPermissionsResponseMultiError, or nil if none found.
func (m *GetPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetPermissionsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetPermissionsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetPermissionsResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetPermissionsResponseMultiError(errors)
	}

	return nil
}

// GetPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetPermissionsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPermissionsResponseMultiError) AllErrors() []error { return m }

// GetPermissionsResponseValidationError is the validation error returned by
// GetPermissionsResponse.Validate if the designated constraints aren't met.
type GetPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPermissionsResponseValidationError) ErrorName() string {
	return "GetPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPermissionsResponseValidationError{}

// Validate checks the field values on GetEffectivePermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEffectivePermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEffectivePermissionsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEffectivePermissionsRequestMultiError, or nil if none found.
func (m *GetEffectivePermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEffectivePermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetEffectivePermissionsRequestMultiError(errors)
	}

	return nil
}

// GetEffectivePermissionsRequestMultiError is an error wrapping multiple
// validation errors returned by GetEffectivePermissionsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetEffectivePermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEffectivePermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEffectivePermissionsRequestMultiError) AllErrors() []error { return m }

// GetEffectivePermissionsRequestValidationError is the validation error
// returned by GetEffectivePermissionsRequest.Validate if the designated
// constraints aren't met.
type GetEffectivePermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEffectivePermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEffectivePermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEffectivePermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEffectivePermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEffectivePermissionsRequestValidationError) ErrorName() string {
	return "GetEffectivePermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEffectivePermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEffectivePermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEffectivePermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEffectivePermissionsRequestValidationError{}

// Validate checks the field values on GetEffectivePermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEffectivePermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEffectivePermissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetEffectivePermissionsResponseMultiError, or nil if none found.
func (m *GetEffectivePermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEffectivePermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEffectivePermissionsResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEffectivePermissionsResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEffectivePermissionsResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEffectivePermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEffectivePermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEffectivePermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetEffectivePermissionsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetEffectivePermissionsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetEffectivePermissionsResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetEffectivePermissionsResponseMultiError(errors)
	}

	return nil
}

// GetEffectivePermissionsResponseMultiError is an error wrapping multiple
// validation errors returned by GetEffectivePermissionsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetEffectivePermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEffectivePermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEffectivePermissionsResponseMultiError) AllErrors() []error { return m }

// GetEffectivePermissionsResponseValidationError is the validation error
// returned by GetEffectivePermissionsResponse.Validate if the designated
// constraints aren't met.
type GetEffectivePermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEffectivePermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEffectivePermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEffectivePermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEffectivePermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEffectivePermissionsResponseValidationError) ErrorName() string {
	return "GetEffectivePermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEffectivePermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEffectivePermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEffectivePermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEffectivePermissionsResponseValidationError{}

// Validate checks the field values on ViewAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewAuditLogRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewAuditLogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewAuditLogRequestMultiError, or nil if none found.
func (m *ViewAuditLogRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewAuditLogRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ViewAuditLogRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewAuditLogRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewAuditLogRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewAuditLogRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetServices()) > 10 {
		err := ViewAuditLogRequestValidationError{
			field:  "Services",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 64 {
			err := ViewAuditLogRequestValidationError{
				field:  fmt.Sprintf("Services[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetMethods()) > 10 {
		err := ViewAuditLogRequestValidationError{
			field:  "Methods",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetMethods() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 64 {
			err := ViewAuditLogRequestValidationError{
				field:  fmt.Sprintf("Methods[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewAuditLogRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewAuditLogRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewAuditLogRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewAuditLogRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewAuditLogRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewAuditLogRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewAuditLogRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewAuditLogRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewAuditLogRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 64 {
			err := ViewAuditLogRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ViewAuditLogRequestMultiError(errors)
	}

	return nil
}

// ViewAuditLogRequestMultiError is an error wrapping multiple validation
// errors returned by ViewAuditLogRequest.ValidateAll() if the designated
// constraints aren't met.
type ViewAuditLogRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewAuditLogRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewAuditLogRequestMultiError) AllErrors() []error { return m }

// ViewAuditLogRequestValidationError is the validation error returned by
// ViewAuditLogRequest.Validate if the designated constraints aren't met.
type ViewAuditLogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewAuditLogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewAuditLogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewAuditLogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewAuditLogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewAuditLogRequestValidationError) ErrorName() string {
	return "ViewAuditLogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ViewAuditLogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewAuditLogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewAuditLogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewAuditLogRequestValidationError{}

// Validate checks the field values on ViewAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ViewAuditLogResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewAuditLogResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewAuditLogResponseMultiError, or nil if none found.
func (m *ViewAuditLogResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewAuditLogResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ViewAuditLogResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ViewAuditLogResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewAuditLogResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetLogs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ViewAuditLogResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ViewAuditLogResponseValidationError{
						field:  fmt.Sprintf("Logs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ViewAuditLogResponseValidationError{
					field:  fmt.Sprintf("Logs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ViewAuditLogResponseMultiError(errors)
	}

	return nil
}

// ViewAuditLogResponseMultiError is an error wrapping multiple validation
// errors returned by ViewAuditLogResponse.ValidateAll() if the designated
// constraints aren't met.
type ViewAuditLogResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewAuditLogResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewAuditLogResponseMultiError) AllErrors() []error { return m }

// ViewAuditLogResponseValidationError is the validation error returned by
// ViewAuditLogResponse.Validate if the designated constraints aren't met.
type ViewAuditLogResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewAuditLogResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewAuditLogResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewAuditLogResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewAuditLogResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewAuditLogResponseValidationError) ErrorName() string {
	return "ViewAuditLogResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ViewAuditLogResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewAuditLogResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewAuditLogResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewAuditLogResponseValidationError{}

// Validate checks the field values on GetAllPermissionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPermissionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPermissionsRequestMultiError, or nil if none found.
func (m *GetAllPermissionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPermissionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := GetAllPermissionsRequestValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetAllPermissionsRequestMultiError(errors)
	}

	return nil
}

// GetAllPermissionsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllPermissionsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllPermissionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPermissionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPermissionsRequestMultiError) AllErrors() []error { return m }

// GetAllPermissionsRequestValidationError is the validation error returned by
// GetAllPermissionsRequest.Validate if the designated constraints aren't met.
type GetAllPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPermissionsRequestValidationError) ErrorName() string {
	return "GetAllPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPermissionsRequestValidationError{}

// Validate checks the field values on GetAllPermissionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllPermissionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllPermissionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllPermissionsResponseMultiError, or nil if none found.
func (m *GetAllPermissionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllPermissionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllPermissionsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllPermissionsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllPermissionsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllPermissionsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllPermissionsResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllPermissionsResponseMultiError(errors)
	}

	return nil
}

// GetAllPermissionsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllPermissionsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetAllPermissionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllPermissionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllPermissionsResponseMultiError) AllErrors() []error { return m }

// GetAllPermissionsResponseValidationError is the validation error returned by
// GetAllPermissionsResponse.Validate if the designated constraints aren't met.
type GetAllPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllPermissionsResponseValidationError) ErrorName() string {
	return "GetAllPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllPermissionsResponseValidationError{}

// Validate checks the field values on GetJobLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobLimitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobLimitsRequestMultiError, or nil if none found.
func (m *GetJobLimitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobLimitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := GetJobLimitsRequestValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetJobLimitsRequestMultiError(errors)
	}

	return nil
}

// GetJobLimitsRequestMultiError is an error wrapping multiple validation
// errors returned by GetJobLimitsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetJobLimitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobLimitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobLimitsRequestMultiError) AllErrors() []error { return m }

// GetJobLimitsRequestValidationError is the validation error returned by
// GetJobLimitsRequest.Validate if the designated constraints aren't met.
type GetJobLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobLimitsRequestValidationError) ErrorName() string {
	return "GetJobLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobLimitsRequestValidationError{}

// Validate checks the field values on GetJobLimitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetJobLimitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetJobLimitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetJobLimitsResponseMultiError, or nil if none found.
func (m *GetJobLimitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetJobLimitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := GetJobLimitsResponseValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobLimitsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobLimitsResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobLimitsResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetJobLimitsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetJobLimitsResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetJobLimitsResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.JobLabel != nil {
		// no validation rules for JobLabel
	}

	if len(errors) > 0 {
		return GetJobLimitsResponseMultiError(errors)
	}

	return nil
}

// GetJobLimitsResponseMultiError is an error wrapping multiple validation
// errors returned by GetJobLimitsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetJobLimitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetJobLimitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetJobLimitsResponseMultiError) AllErrors() []error { return m }

// GetJobLimitsResponseValidationError is the validation error returned by
// GetJobLimitsResponse.Validate if the designated constraints aren't met.
type GetJobLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetJobLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetJobLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetJobLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetJobLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetJobLimitsResponseValidationError) ErrorName() string {
	return "GetJobLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetJobLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetJobLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetJobLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetJobLimitsResponseValidationError{}

// Validate checks the field values on UpdateJobLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobLimitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobLimitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobLimitsRequestMultiError, or nil if none found.
func (m *UpdateJobLimitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobLimitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := UpdateJobLimitsRequestValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Perms != nil {

		if all {
			switch v := interface{}(m.GetPerms()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateJobLimitsRequestValidationError{
						field:  "Perms",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateJobLimitsRequestValidationError{
						field:  "Perms",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPerms()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateJobLimitsRequestValidationError{
					field:  "Perms",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Attrs != nil {

		if all {
			switch v := interface{}(m.GetAttrs()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateJobLimitsRequestValidationError{
						field:  "Attrs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateJobLimitsRequestValidationError{
						field:  "Attrs",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAttrs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateJobLimitsRequestValidationError{
					field:  "Attrs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateJobLimitsRequestMultiError(errors)
	}

	return nil
}

// UpdateJobLimitsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateJobLimitsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobLimitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobLimitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobLimitsRequestMultiError) AllErrors() []error { return m }

// UpdateJobLimitsRequestValidationError is the validation error returned by
// UpdateJobLimitsRequest.Validate if the designated constraints aren't met.
type UpdateJobLimitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobLimitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobLimitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobLimitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobLimitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobLimitsRequestValidationError) ErrorName() string {
	return "UpdateJobLimitsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobLimitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobLimitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobLimitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobLimitsRequestValidationError{}

// Validate checks the field values on UpdateJobLimitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateJobLimitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateJobLimitsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateJobLimitsResponseMultiError, or nil if none found.
func (m *UpdateJobLimitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateJobLimitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateJobLimitsResponseMultiError(errors)
	}

	return nil
}

// UpdateJobLimitsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateJobLimitsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateJobLimitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateJobLimitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateJobLimitsResponseMultiError) AllErrors() []error { return m }

// UpdateJobLimitsResponseValidationError is the validation error returned by
// UpdateJobLimitsResponse.Validate if the designated constraints aren't met.
type UpdateJobLimitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJobLimitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJobLimitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJobLimitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJobLimitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJobLimitsResponseValidationError) ErrorName() string {
	return "UpdateJobLimitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJobLimitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJobLimitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJobLimitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJobLimitsResponseValidationError{}

// Validate checks the field values on DeleteJobLogoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobLogoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobLogoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobLogoRequestMultiError, or nil if none found.
func (m *DeleteJobLogoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobLogoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobLogoRequestMultiError(errors)
	}

	return nil
}

// DeleteJobLogoRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteJobLogoRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobLogoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobLogoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobLogoRequestMultiError) AllErrors() []error { return m }

// DeleteJobLogoRequestValidationError is the validation error returned by
// DeleteJobLogoRequest.Validate if the designated constraints aren't met.
type DeleteJobLogoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobLogoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobLogoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobLogoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobLogoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobLogoRequestValidationError) ErrorName() string {
	return "DeleteJobLogoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobLogoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobLogoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobLogoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobLogoRequestValidationError{}

// Validate checks the field values on DeleteJobLogoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteJobLogoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteJobLogoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteJobLogoResponseMultiError, or nil if none found.
func (m *DeleteJobLogoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteJobLogoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteJobLogoResponseMultiError(errors)
	}

	return nil
}

// DeleteJobLogoResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteJobLogoResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteJobLogoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteJobLogoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteJobLogoResponseMultiError) AllErrors() []error { return m }

// DeleteJobLogoResponseValidationError is the validation error returned by
// DeleteJobLogoResponse.Validate if the designated constraints aren't met.
type DeleteJobLogoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteJobLogoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteJobLogoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteJobLogoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteJobLogoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteJobLogoResponseValidationError) ErrorName() string {
	return "DeleteJobLogoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteJobLogoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteJobLogoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteJobLogoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteJobLogoResponseValidationError{}

// Validate checks the field values on DeleteFactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFactionRequestMultiError, or nil if none found.
func (m *DeleteFactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := DeleteFactionRequestValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteFactionRequestMultiError(errors)
	}

	return nil
}

// DeleteFactionRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteFactionRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteFactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFactionRequestMultiError) AllErrors() []error { return m }

// DeleteFactionRequestValidationError is the validation error returned by
// DeleteFactionRequest.Validate if the designated constraints aren't met.
type DeleteFactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFactionRequestValidationError) ErrorName() string {
	return "DeleteFactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFactionRequestValidationError{}

// Validate checks the field values on DeleteFactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFactionResponseMultiError, or nil if none found.
func (m *DeleteFactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFactionResponseMultiError(errors)
	}

	return nil
}

// DeleteFactionResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteFactionResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteFactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFactionResponseMultiError) AllErrors() []error { return m }

// DeleteFactionResponseValidationError is the validation error returned by
// DeleteFactionResponse.Validate if the designated constraints aren't met.
type DeleteFactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFactionResponseValidationError) ErrorName() string {
	return "DeleteFactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFactionResponseValidationError{}
