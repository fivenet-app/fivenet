// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: services/settings/system.proto

package settings

func (m *DBSyncStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: LastSyncedActivity
	if m.LastSyncedActivity != nil {
		if v, ok := any(m.GetLastSyncedActivity()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: LastSyncedData
	if m.LastSyncedData != nil {
		if v, ok := any(m.GetLastSyncedData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Database) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteFactionRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteFactionResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetAllPermissionsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetAllPermissionsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attributes
	for idx, item := range m.Attributes {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Permissions
	for idx, item := range m.Permissions {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetJobLimitsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetJobLimitsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attributes
	for idx, item := range m.Attributes {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Permissions
	for idx, item := range m.Permissions {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *GetStatusRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetStatusResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Database
	if m.Database != nil {
		if v, ok := any(m.GetDatabase()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Dbsync
	if m.Dbsync != nil {
		if v, ok := any(m.GetDbsync()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Nats
	if m.Nats != nil {
		if v, ok := any(m.GetNats()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Version
	if m.Version != nil {
		if v, ok := any(m.GetVersion()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Nats) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *NewVersionInfo) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ReleaseDate
	if m.ReleaseDate != nil {
		if v, ok := any(m.GetReleaseDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *UpdateJobLimitsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attrs
	if m.Attrs != nil {
		if v, ok := any(m.GetAttrs()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Perms
	if m.Perms != nil {
		if v, ok := any(m.GetPerms()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *UpdateJobLimitsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *VersionStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: NewVersion
	if m.NewVersion != nil {
		if v, ok := any(m.GetNewVersion()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
