// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: services/documents/approval.proto

package documents

import (
	_ "github.com/fivenet-app/fivenet/v2025/gen/go/proto/codegen/itemslen"
	_ "github.com/fivenet-app/fivenet/v2025/gen/go/proto/codegen/perms"
	_ "github.com/fivenet-app/fivenet/v2025/gen/go/proto/codegen/sanitizer"
	database "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/common/database"
	documents "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/documents"
	timestamp "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListApprovalTasksInboxRequest struct {
	state      protoimpl.MessageState         `protogen:"open.v1"`
	Pagination *database.PaginationRequest    `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Statuses   []documents.ApprovalTaskStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=resources.documents.ApprovalTaskStatus" json:"statuses,omitempty"`
	// Controls inclusion of drafts in the result:
	// - unset/null: include all documents (drafts and non-drafts)
	// - false: only non-draft documents
	// - true: only draft documents
	OnlyDrafts    *bool `protobuf:"varint,3,opt,name=only_drafts,json=onlyDrafts,proto3,oneof" json:"only_drafts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalTasksInboxRequest) Reset() {
	*x = ListApprovalTasksInboxRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalTasksInboxRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalTasksInboxRequest) ProtoMessage() {}

func (x *ListApprovalTasksInboxRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalTasksInboxRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalTasksInboxRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{0}
}

func (x *ListApprovalTasksInboxRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListApprovalTasksInboxRequest) GetStatuses() []documents.ApprovalTaskStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

func (x *ListApprovalTasksInboxRequest) GetOnlyDrafts() bool {
	if x != nil && x.OnlyDrafts != nil {
		return *x.OnlyDrafts
	}
	return false
}

type ListApprovalTasksInboxResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Tasks         []*documents.ApprovalTask    `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalTasksInboxResponse) Reset() {
	*x = ListApprovalTasksInboxResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalTasksInboxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalTasksInboxResponse) ProtoMessage() {}

func (x *ListApprovalTasksInboxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalTasksInboxResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalTasksInboxResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{1}
}

func (x *ListApprovalTasksInboxResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListApprovalTasksInboxResponse) GetTasks() []*documents.ApprovalTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type ListApprovalPoliciesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalPoliciesRequest) Reset() {
	*x = ListApprovalPoliciesRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalPoliciesRequest) ProtoMessage() {}

func (x *ListApprovalPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{2}
}

func (x *ListApprovalPoliciesRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

// Only one policy per document is supported currently.
type ListApprovalPoliciesResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalPoliciesResponse) Reset() {
	*x = ListApprovalPoliciesResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalPoliciesResponse) ProtoMessage() {}

func (x *ListApprovalPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{3}
}

func (x *ListApprovalPoliciesResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpsertApprovalPolicyRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertApprovalPolicyRequest) Reset() {
	*x = UpsertApprovalPolicyRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertApprovalPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApprovalPolicyRequest) ProtoMessage() {}

func (x *UpsertApprovalPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApprovalPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpsertApprovalPolicyRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{4}
}

func (x *UpsertApprovalPolicyRequest) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpsertApprovalPolicyResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertApprovalPolicyResponse) Reset() {
	*x = UpsertApprovalPolicyResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertApprovalPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApprovalPolicyResponse) ProtoMessage() {}

func (x *UpsertApprovalPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApprovalPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpsertApprovalPolicyResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{5}
}

func (x *UpsertApprovalPolicyResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ListApprovalTasksRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	DocumentId    int64                          `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Statuses      []documents.ApprovalTaskStatus `protobuf:"varint,2,rep,packed,name=statuses,proto3,enum=resources.documents.ApprovalTaskStatus" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalTasksRequest) Reset() {
	*x = ListApprovalTasksRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalTasksRequest) ProtoMessage() {}

func (x *ListApprovalTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalTasksRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalTasksRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{6}
}

func (x *ListApprovalTasksRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ListApprovalTasksRequest) GetStatuses() []documents.ApprovalTaskStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ListApprovalTasksResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Tasks         []*documents.ApprovalTask `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalTasksResponse) Reset() {
	*x = ListApprovalTasksResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalTasksResponse) ProtoMessage() {}

func (x *ListApprovalTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalTasksResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalTasksResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{7}
}

func (x *ListApprovalTasksResponse) GetTasks() []*documents.ApprovalTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

// A declarative "ensure" for tasks under one policy/snapshot.
// Exactly one target must be set: user_id OR (job + minimum_grade).
type ApprovalTaskSeed struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If set -> USER task; slots is forced to 1
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// If user_id == 0 -> JOB task
	Job          string `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
	MinimumGrade int32  `protobuf:"varint,3,opt,name=minimum_grade,json=minimumGrade,proto3" json:"minimum_grade,omitempty"`
	// Label of task
	Label             *string `protobuf:"bytes,4,opt,name=label,proto3,oneof" json:"label,omitempty"`
	SignatureRequired bool    `protobuf:"varint,5,opt,name=signature_required,json=signatureRequired,proto3" json:"signature_required,omitempty"`
	// Only for JOB tasks; number of PENDING slots to ensure (>=1)
	Slots int32 `protobuf:"varint,6,opt,name=slots,proto3" json:"slots,omitempty"`
	// Optional default due date for created slots
	DueAt *timestamp.Timestamp `protobuf:"bytes,7,opt,name=due_at,json=dueAt,proto3,oneof" json:"due_at,omitempty"`
	// Optional note set on created tasks
	Comment       *string `protobuf:"bytes,8,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovalTaskSeed) Reset() {
	*x = ApprovalTaskSeed{}
	mi := &file_services_documents_approval_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalTaskSeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalTaskSeed) ProtoMessage() {}

func (x *ApprovalTaskSeed) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalTaskSeed.ProtoReflect.Descriptor instead.
func (*ApprovalTaskSeed) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{8}
}

func (x *ApprovalTaskSeed) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ApprovalTaskSeed) GetJob() string {
	if x != nil {
		return x.Job
	}
	return ""
}

func (x *ApprovalTaskSeed) GetMinimumGrade() int32 {
	if x != nil {
		return x.MinimumGrade
	}
	return 0
}

func (x *ApprovalTaskSeed) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *ApprovalTaskSeed) GetSignatureRequired() bool {
	if x != nil {
		return x.SignatureRequired
	}
	return false
}

func (x *ApprovalTaskSeed) GetSlots() int32 {
	if x != nil {
		return x.Slots
	}
	return 0
}

func (x *ApprovalTaskSeed) GetDueAt() *timestamp.Timestamp {
	if x != nil {
		return x.DueAt
	}
	return nil
}

func (x *ApprovalTaskSeed) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

// Upsert = insert missing PENDING tasks/slots; will NOT delete existing tasks.
// Identity rules (server-side):
//   - USER task: unique by (document_id, snapshot_date, assignee_kind=USER, user_id)
//   - JOB task: unique by (document_id, snapshot_date, assignee_kind=JOB, job, minimum_grade, slot_no)
//
// For JOB seeds with slots=N, the server ensures there are at least N PENDING slots (slot_no 1..N).
type UpsertApprovalTasksRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	DocumentId int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	// If empty, use policy.snapshot_date
	SnapshotDate  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=snapshot_date,json=snapshotDate,proto3,oneof" json:"snapshot_date,omitempty"`
	Seeds         []*ApprovalTaskSeed  `protobuf:"bytes,3,rep,name=seeds,proto3" json:"seeds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertApprovalTasksRequest) Reset() {
	*x = UpsertApprovalTasksRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertApprovalTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApprovalTasksRequest) ProtoMessage() {}

func (x *UpsertApprovalTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApprovalTasksRequest.ProtoReflect.Descriptor instead.
func (*UpsertApprovalTasksRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{9}
}

func (x *UpsertApprovalTasksRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *UpsertApprovalTasksRequest) GetSnapshotDate() *timestamp.Timestamp {
	if x != nil {
		return x.SnapshotDate
	}
	return nil
}

func (x *UpsertApprovalTasksRequest) GetSeeds() []*ApprovalTaskSeed {
	if x != nil {
		return x.Seeds
	}
	return nil
}

type UpsertApprovalTasksResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of new task rows inserted
	TasksCreated int32 `protobuf:"varint,1,opt,name=tasks_created,json=tasksCreated,proto3" json:"tasks_created,omitempty"`
	// Number of requested targets already satisfied (no-op)
	TasksEnsured int32 `protobuf:"varint,2,opt,name=tasks_ensured,json=tasksEnsured,proto3" json:"tasks_ensured,omitempty"`
	// Echo (optional convenience)
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertApprovalTasksResponse) Reset() {
	*x = UpsertApprovalTasksResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertApprovalTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApprovalTasksResponse) ProtoMessage() {}

func (x *UpsertApprovalTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApprovalTasksResponse.ProtoReflect.Descriptor instead.
func (*UpsertApprovalTasksResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{10}
}

func (x *UpsertApprovalTasksResponse) GetTasksCreated() int32 {
	if x != nil {
		return x.TasksCreated
	}
	return 0
}

func (x *UpsertApprovalTasksResponse) GetTasksEnsured() int32 {
	if x != nil {
		return x.TasksEnsured
	}
	return 0
}

func (x *UpsertApprovalTasksResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type DeleteApprovalTasksRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	DocumentId int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	TaskIds    []int64                `protobuf:"varint,2,rep,packed,name=task_ids,json=taskIds,proto3" json:"task_ids,omitempty"`
	// If true, ignore task_ids and delete all PENDING tasks under this policy
	DeleteAllPending bool `protobuf:"varint,3,opt,name=delete_all_pending,json=deleteAllPending,proto3" json:"delete_all_pending,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeleteApprovalTasksRequest) Reset() {
	*x = DeleteApprovalTasksRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApprovalTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApprovalTasksRequest) ProtoMessage() {}

func (x *DeleteApprovalTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApprovalTasksRequest.ProtoReflect.Descriptor instead.
func (*DeleteApprovalTasksRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteApprovalTasksRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *DeleteApprovalTasksRequest) GetTaskIds() []int64 {
	if x != nil {
		return x.TaskIds
	}
	return nil
}

func (x *DeleteApprovalTasksRequest) GetDeleteAllPending() bool {
	if x != nil {
		return x.DeleteAllPending
	}
	return false
}

type DeleteApprovalTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApprovalTasksResponse) Reset() {
	*x = DeleteApprovalTasksResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApprovalTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApprovalTasksResponse) ProtoMessage() {}

func (x *DeleteApprovalTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApprovalTasksResponse.ProtoReflect.Descriptor instead.
func (*DeleteApprovalTasksResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{12}
}

// List approvals (artifacts) for a policy/snapshot.
// If snapshot_date is unset, server defaults to policy.snapshot_date.
type ListApprovalsRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	DocumentId   int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	TaskId       *int64                 `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3,oneof" json:"task_id,omitempty"`
	SnapshotDate *timestamp.Timestamp   `protobuf:"bytes,3,opt,name=snapshot_date,json=snapshotDate,proto3,oneof" json:"snapshot_date,omitempty"`
	// Optional filters
	Status *documents.ApprovalStatus `protobuf:"varint,4,opt,name=status,proto3,enum=resources.documents.ApprovalStatus,oneof" json:"status,omitempty"`
	// Filter by signer
	UserId        *int32 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalsRequest) Reset() {
	*x = ListApprovalsRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalsRequest) ProtoMessage() {}

func (x *ListApprovalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalsRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalsRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{13}
}

func (x *ListApprovalsRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ListApprovalsRequest) GetTaskId() int64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *ListApprovalsRequest) GetSnapshotDate() *timestamp.Timestamp {
	if x != nil {
		return x.SnapshotDate
	}
	return nil
}

func (x *ListApprovalsRequest) GetStatus() documents.ApprovalStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return documents.ApprovalStatus(0)
}

func (x *ListApprovalsRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type ListApprovalsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Approvals     []*documents.Approval  `protobuf:"bytes,3,rep,name=approvals,proto3" json:"approvals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalsResponse) Reset() {
	*x = ListApprovalsResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalsResponse) ProtoMessage() {}

func (x *ListApprovalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalsResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalsResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{14}
}

func (x *ListApprovalsResponse) GetApprovals() []*documents.Approval {
	if x != nil {
		return x.Approvals
	}
	return nil
}

type RevokeApprovalRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ApprovalId    int64                  `protobuf:"varint,1,opt,name=approval_id,json=approvalId,proto3" json:"approval_id,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeApprovalRequest) Reset() {
	*x = RevokeApprovalRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeApprovalRequest) ProtoMessage() {}

func (x *RevokeApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeApprovalRequest.ProtoReflect.Descriptor instead.
func (*RevokeApprovalRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{15}
}

func (x *RevokeApprovalRequest) GetApprovalId() int64 {
	if x != nil {
		return x.ApprovalId
	}
	return 0
}

func (x *RevokeApprovalRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type RevokeApprovalResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Approval      *documents.Approval    `protobuf:"bytes,1,opt,name=approval,proto3" json:"approval,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RevokeApprovalResponse) Reset() {
	*x = RevokeApprovalResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RevokeApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevokeApprovalResponse) ProtoMessage() {}

func (x *RevokeApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevokeApprovalResponse.ProtoReflect.Descriptor instead.
func (*RevokeApprovalResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{16}
}

func (x *RevokeApprovalResponse) GetApproval() *documents.Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

type DecideApprovalRequest struct {
	state      protoimpl.MessageState       `protogen:"open.v1"`
	DocumentId int64                        `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	TaskId     *int64                       `protobuf:"varint,2,opt,name=task_id,json=taskId,proto3,oneof" json:"task_id,omitempty"`
	NewStatus  documents.ApprovalTaskStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=resources.documents.ApprovalTaskStatus" json:"new_status,omitempty"` // APPROVED or DECLINED
	Comment    string                       `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	PayloadSvg *string                      `protobuf:"bytes,5,opt,name=payload_svg,json=payloadSvg,proto3,oneof" json:"payload_svg,omitempty"`
	// When type=STAMP
	StampId       *int64 `protobuf:"varint,6,opt,name=stamp_id,json=stampId,proto3,oneof" json:"stamp_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecideApprovalRequest) Reset() {
	*x = DecideApprovalRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecideApprovalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideApprovalRequest) ProtoMessage() {}

func (x *DecideApprovalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideApprovalRequest.ProtoReflect.Descriptor instead.
func (*DecideApprovalRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{17}
}

func (x *DecideApprovalRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *DecideApprovalRequest) GetTaskId() int64 {
	if x != nil && x.TaskId != nil {
		return *x.TaskId
	}
	return 0
}

func (x *DecideApprovalRequest) GetNewStatus() documents.ApprovalTaskStatus {
	if x != nil {
		return x.NewStatus
	}
	return documents.ApprovalTaskStatus(0)
}

func (x *DecideApprovalRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DecideApprovalRequest) GetPayloadSvg() string {
	if x != nil && x.PayloadSvg != nil {
		return *x.PayloadSvg
	}
	return ""
}

func (x *DecideApprovalRequest) GetStampId() int64 {
	if x != nil && x.StampId != nil {
		return *x.StampId
	}
	return 0
}

type DecideApprovalResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Approval      *documents.Approval       `protobuf:"bytes,1,opt,name=approval,proto3" json:"approval,omitempty"`
	Task          *documents.ApprovalTask   `protobuf:"bytes,2,opt,name=task,proto3" json:"task,omitempty"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,3,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecideApprovalResponse) Reset() {
	*x = DecideApprovalResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecideApprovalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideApprovalResponse) ProtoMessage() {}

func (x *DecideApprovalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideApprovalResponse.ProtoReflect.Descriptor instead.
func (*DecideApprovalResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{18}
}

func (x *DecideApprovalResponse) GetApproval() *documents.Approval {
	if x != nil {
		return x.Approval
	}
	return nil
}

func (x *DecideApprovalResponse) GetTask() *documents.ApprovalTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *DecideApprovalResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ReopenApprovalTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int64                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Comment       string                 `protobuf:"bytes,2,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReopenApprovalTaskRequest) Reset() {
	*x = ReopenApprovalTaskRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReopenApprovalTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenApprovalTaskRequest) ProtoMessage() {}

func (x *ReopenApprovalTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenApprovalTaskRequest.ProtoReflect.Descriptor instead.
func (*ReopenApprovalTaskRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{19}
}

func (x *ReopenApprovalTaskRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReopenApprovalTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type ReopenApprovalTaskResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Task          *documents.ApprovalTask   `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReopenApprovalTaskResponse) Reset() {
	*x = ReopenApprovalTaskResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReopenApprovalTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenApprovalTaskResponse) ProtoMessage() {}

func (x *ReopenApprovalTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenApprovalTaskResponse.ProtoReflect.Descriptor instead.
func (*ReopenApprovalTaskResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{20}
}

func (x *ReopenApprovalTaskResponse) GetTask() *documents.ApprovalTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ReopenApprovalTaskResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type RecomputeApprovalPolicyCountersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecomputeApprovalPolicyCountersRequest) Reset() {
	*x = RecomputeApprovalPolicyCountersRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecomputeApprovalPolicyCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputeApprovalPolicyCountersRequest) ProtoMessage() {}

func (x *RecomputeApprovalPolicyCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputeApprovalPolicyCountersRequest.ProtoReflect.Descriptor instead.
func (*RecomputeApprovalPolicyCountersRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{21}
}

func (x *RecomputeApprovalPolicyCountersRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

type RecomputeApprovalPolicyCountersResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecomputeApprovalPolicyCountersResponse) Reset() {
	*x = RecomputeApprovalPolicyCountersResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecomputeApprovalPolicyCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputeApprovalPolicyCountersResponse) ProtoMessage() {}

func (x *RecomputeApprovalPolicyCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputeApprovalPolicyCountersResponse.ProtoReflect.Descriptor instead.
func (*RecomputeApprovalPolicyCountersResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{22}
}

func (x *RecomputeApprovalPolicyCountersResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

var File_services_documents_approval_proto protoreflect.FileDescriptor

const file_services_documents_approval_proto_rawDesc = "" +
	"\n" +
	"!services/documents/approval.proto\x12\x12services.documents\x1a\x1fcodegen/itemslen/itemslen.proto\x1a\x19codegen/perms/perms.proto\x1a!codegen/sanitizer/sanitizer.proto\x1a(resources/common/database/database.proto\x1a\"resources/documents/approval.proto\x1a#resources/timestamp/timestamp.proto\"\xfa\x01\n" +
	"\x1dListApprovalTasksInboxRequest\x12T\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2,.resources.common.database.PaginationRequestB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"pagination\x12M\n" +
	"\bstatuses\x18\x02 \x03(\x0e2'.resources.documents.ApprovalTaskStatusB\b\xbaH\x05\x92\x01\x02\x10\x04R\bstatuses\x12$\n" +
	"\vonly_drafts\x18\x03 \x01(\bH\x00R\n" +
	"onlyDrafts\x88\x01\x01B\x0e\n" +
	"\f_only_drafts\"\xb6\x01\n" +
	"\x1eListApprovalTasksInboxResponse\x12U\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2-.resources.common.database.PaginationResponseB\x06\xbaH\x03\xc8\x01\x01R\n" +
	"pagination\x12=\n" +
	"\x05tasks\x18\x02 \x03(\v2!.resources.documents.ApprovalTaskB\x04\xc8\xf3\x18\x01R\x05tasks\"G\n" +
	"\x1bListApprovalPoliciesRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\"[\n" +
	"\x1cListApprovalPoliciesResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"b\n" +
	"\x1bUpsertApprovalPolicyRequest\x12C\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyB\x06\xbaH\x03\xc8\x01\x01R\x06policy\"[\n" +
	"\x1cUpsertApprovalPolicyResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"\x93\x01\n" +
	"\x18ListApprovalTasksRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\x12M\n" +
	"\bstatuses\x18\x02 \x03(\x0e2'.resources.documents.ApprovalTaskStatusB\b\xbaH\x05\x92\x01\x02\x10\x04R\bstatuses\"Z\n" +
	"\x19ListApprovalTasksResponse\x12=\n" +
	"\x05tasks\x18\x01 \x03(\v2!.resources.documents.ApprovalTaskB\x04\xc8\xf3\x18\x01R\x05tasks\"\xe3\x02\n" +
	"\x10ApprovalTaskSeed\x12\x17\n" +
	"\auser_id\x18\x01 \x01(\x05R\x06userId\x12\x10\n" +
	"\x03job\x18\x02 \x01(\tR\x03job\x12#\n" +
	"\rminimum_grade\x18\x03 \x01(\x05R\fminimumGrade\x123\n" +
	"\x05label\x18\x04 \x01(\tB\x18\xda\xf3\x18\r\b\x01\x12\tStripTags\xbaH\x04r\x02\x18xH\x00R\x05label\x88\x01\x01\x12-\n" +
	"\x12signature_required\x18\x05 \x01(\bR\x11signatureRequired\x12\x1f\n" +
	"\x05slots\x18\x06 \x01(\x05B\t\xbaH\x06\x1a\x04\x18\x05(\x01R\x05slots\x12:\n" +
	"\x06due_at\x18\a \x01(\v2\x1e.resources.timestamp.TimestampH\x01R\x05dueAt\x88\x01\x01\x12\x1d\n" +
	"\acomment\x18\b \x01(\tH\x02R\acomment\x88\x01\x01B\b\n" +
	"\x06_labelB\t\n" +
	"\a_due_atB\n" +
	"\n" +
	"\b_comment\"\xde\x01\n" +
	"\x1aUpsertApprovalTasksRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\x12H\n" +
	"\rsnapshot_date\x18\x02 \x01(\v2\x1e.resources.timestamp.TimestampH\x00R\fsnapshotDate\x88\x01\x01\x12:\n" +
	"\x05seeds\x18\x03 \x03(\v2$.services.documents.ApprovalTaskSeedR\x05seedsB\x10\n" +
	"\x0e_snapshot_date\"\xa4\x01\n" +
	"\x1bUpsertApprovalTasksResponse\x12#\n" +
	"\rtasks_created\x18\x01 \x01(\x05R\ftasksCreated\x12#\n" +
	"\rtasks_ensured\x18\x02 \x01(\x05R\ftasksEnsured\x12;\n" +
	"\x06policy\x18\x03 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"\x99\x01\n" +
	"\x1aDeleteApprovalTasksRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\x12#\n" +
	"\btask_ids\x18\x02 \x03(\x03B\b\xbaH\x05\x92\x01\x02\b\x01R\ataskIds\x12,\n" +
	"\x12delete_all_pending\x18\x03 \x01(\bR\x10deleteAllPending\"\x1d\n" +
	"\x1bDeleteApprovalTasksResponse\"\xc6\x02\n" +
	"\x14ListApprovalsRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\x12%\n" +
	"\atask_id\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02 \x00H\x00R\x06taskId\x88\x01\x01\x12H\n" +
	"\rsnapshot_date\x18\x03 \x01(\v2\x1e.resources.timestamp.TimestampH\x01R\fsnapshotDate\x88\x01\x01\x12@\n" +
	"\x06status\x18\x04 \x01(\x0e2#.resources.documents.ApprovalStatusH\x02R\x06status\x88\x01\x01\x12\x1c\n" +
	"\auser_id\x18\x05 \x01(\x05H\x03R\x06userId\x88\x01\x01B\n" +
	"\n" +
	"\b_task_idB\x10\n" +
	"\x0e_snapshot_dateB\t\n" +
	"\a_statusB\n" +
	"\n" +
	"\b_user_id\"T\n" +
	"\x15ListApprovalsResponse\x12;\n" +
	"\tapprovals\x18\x03 \x03(\v2\x1d.resources.documents.ApprovalR\tapprovals\"e\n" +
	"\x15RevokeApprovalRequest\x12(\n" +
	"\vapproval_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"approvalId\x12\"\n" +
	"\acomment\x18\x02 \x01(\tB\b\xbaH\x05r\x03\x18\xff\x01R\acomment\"S\n" +
	"\x16RevokeApprovalResponse\x129\n" +
	"\bapproval\x18\x01 \x01(\v2\x1d.resources.documents.ApprovalR\bapproval\"\xe2\x02\n" +
	"\x15DecideApprovalRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\x12%\n" +
	"\atask_id\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02 \x00H\x00R\x06taskId\x88\x01\x01\x12P\n" +
	"\n" +
	"new_status\x18\x03 \x01(\x0e2'.resources.documents.ApprovalTaskStatusB\b\xbaH\x05\x82\x01\x02\x10\x01R\tnewStatus\x12\"\n" +
	"\acomment\x18\x04 \x01(\tB\b\xbaH\x05r\x03\x18\xf4\x03R\acomment\x129\n" +
	"\vpayload_svg\x18\x05 \x01(\tB\x13\xda\xf3\x18\x0f\b\x01\x12\vSanitizeSVGH\x01R\n" +
	"payloadSvg\x88\x01\x01\x12\x1e\n" +
	"\bstamp_id\x18\x06 \x01(\x03H\x02R\astampId\x88\x01\x01B\n" +
	"\n" +
	"\b_task_idB\x0e\n" +
	"\f_payload_svgB\v\n" +
	"\t_stamp_id\"\xc7\x01\n" +
	"\x16DecideApprovalResponse\x129\n" +
	"\bapproval\x18\x01 \x01(\v2\x1d.resources.documents.ApprovalR\bapproval\x125\n" +
	"\x04task\x18\x02 \x01(\v2!.resources.documents.ApprovalTaskR\x04task\x12;\n" +
	"\x06policy\x18\x03 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"a\n" +
	"\x19ReopenApprovalTaskRequest\x12 \n" +
	"\atask_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\x06taskId\x12\"\n" +
	"\acomment\x18\x02 \x01(\tB\b\xbaH\x05r\x03\x18\xff\x01R\acomment\"\x90\x01\n" +
	"\x1aReopenApprovalTaskResponse\x125\n" +
	"\x04task\x18\x01 \x01(\v2!.resources.documents.ApprovalTaskR\x04task\x12;\n" +
	"\x06policy\x18\x02 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"R\n" +
	"&RecomputeApprovalPolicyCountersRequest\x12(\n" +
	"\vdocument_id\x18\x01 \x01(\x03B\a\xbaH\x04\"\x02 \x00R\n" +
	"documentId\"f\n" +
	"'RecomputeApprovalPolicyCountersResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy2\xa2\r\n" +
	"\x0fApprovalService\x12\xb2\x01\n" +
	"\x16ListApprovalTasksInbox\x121.services.documents.ListApprovalTasksInboxRequest\x1a2.services.documents.ListApprovalTasksInboxResponse\"1\xd2\xf3\x18-\b\x01\x12\x1adocuments.DocumentsService\x1a\rListDocuments\x12\xac\x01\n" +
	"\x14ListApprovalPolicies\x12/.services.documents.ListApprovalPoliciesRequest\x1a0.services.documents.ListApprovalPoliciesResponse\"1\xd2\xf3\x18-\b\x01\x12\x1adocuments.DocumentsService\x1a\rListDocuments\x12\x81\x01\n" +
	"\x14UpsertApprovalPolicy\x12/.services.documents.UpsertApprovalPolicyRequest\x1a0.services.documents.UpsertApprovalPolicyResponse\"\x06\xd2\xf3\x18\x02\b\x01\x12\xa3\x01\n" +
	"\x11ListApprovalTasks\x12,.services.documents.ListApprovalTasksRequest\x1a-.services.documents.ListApprovalTasksResponse\"1\xd2\xf3\x18-\b\x01\x12\x1adocuments.DocumentsService\x1a\rListDocuments\x12~\n" +
	"\x13UpsertApprovalTasks\x12..services.documents.UpsertApprovalTasksRequest\x1a/.services.documents.UpsertApprovalTasksResponse\"\x06\xd2\xf3\x18\x02\b\x01\x12~\n" +
	"\x13DeleteApprovalTasks\x12..services.documents.DeleteApprovalTasksRequest\x1a/.services.documents.DeleteApprovalTasksResponse\"\x06\xd2\xf3\x18\x02\b\x01\x12\x97\x01\n" +
	"\rListApprovals\x12(.services.documents.ListApprovalsRequest\x1a).services.documents.ListApprovalsResponse\"1\xd2\xf3\x18-\b\x01\x12\x1adocuments.DocumentsService\x1a\rListDocuments\x12o\n" +
	"\x0eRevokeApproval\x12).services.documents.RevokeApprovalRequest\x1a*.services.documents.RevokeApprovalResponse\"\x06\xd2\xf3\x18\x02\b\x01\x12\x9a\x01\n" +
	"\x0eDecideApproval\x12).services.documents.DecideApprovalRequest\x1a*.services.documents.DecideApprovalResponse\"1\xd2\xf3\x18-\b\x01\x12\x1adocuments.DocumentsService\x1a\rListDocuments\x12\x8b\x01\n" +
	"\x12ReopenApprovalTask\x12-.services.documents.ReopenApprovalTaskRequest\x1a..services.documents.ReopenApprovalTaskResponse\"\x16\xd2\xf3\x18\x12\b\x01\x1a\x0eRevokeApproval\x12\xb2\x01\n" +
	"\x1fRecomputeApprovalPolicyCounters\x12:.services.documents.RecomputeApprovalPolicyCountersRequest\x1a;.services.documents.RecomputeApprovalPolicyCountersResponse\"\x16\xd2\xf3\x18\x12\b\x01\x1a\x0eRevokeApproval\x1a\x16\xea\xf3\x18\x12\b4\x12\x0ei-mdi-approvalBPZNgithub.com/fivenet-app/fivenet/v2025/gen/go/proto/services/documents;documentsb\x06proto3"

var (
	file_services_documents_approval_proto_rawDescOnce sync.Once
	file_services_documents_approval_proto_rawDescData []byte
)

func file_services_documents_approval_proto_rawDescGZIP() []byte {
	file_services_documents_approval_proto_rawDescOnce.Do(func() {
		file_services_documents_approval_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_documents_approval_proto_rawDesc), len(file_services_documents_approval_proto_rawDesc)))
	})
	return file_services_documents_approval_proto_rawDescData
}

var file_services_documents_approval_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_services_documents_approval_proto_goTypes = []any{
	(*ListApprovalTasksInboxRequest)(nil),           // 0: services.documents.ListApprovalTasksInboxRequest
	(*ListApprovalTasksInboxResponse)(nil),          // 1: services.documents.ListApprovalTasksInboxResponse
	(*ListApprovalPoliciesRequest)(nil),             // 2: services.documents.ListApprovalPoliciesRequest
	(*ListApprovalPoliciesResponse)(nil),            // 3: services.documents.ListApprovalPoliciesResponse
	(*UpsertApprovalPolicyRequest)(nil),             // 4: services.documents.UpsertApprovalPolicyRequest
	(*UpsertApprovalPolicyResponse)(nil),            // 5: services.documents.UpsertApprovalPolicyResponse
	(*ListApprovalTasksRequest)(nil),                // 6: services.documents.ListApprovalTasksRequest
	(*ListApprovalTasksResponse)(nil),               // 7: services.documents.ListApprovalTasksResponse
	(*ApprovalTaskSeed)(nil),                        // 8: services.documents.ApprovalTaskSeed
	(*UpsertApprovalTasksRequest)(nil),              // 9: services.documents.UpsertApprovalTasksRequest
	(*UpsertApprovalTasksResponse)(nil),             // 10: services.documents.UpsertApprovalTasksResponse
	(*DeleteApprovalTasksRequest)(nil),              // 11: services.documents.DeleteApprovalTasksRequest
	(*DeleteApprovalTasksResponse)(nil),             // 12: services.documents.DeleteApprovalTasksResponse
	(*ListApprovalsRequest)(nil),                    // 13: services.documents.ListApprovalsRequest
	(*ListApprovalsResponse)(nil),                   // 14: services.documents.ListApprovalsResponse
	(*RevokeApprovalRequest)(nil),                   // 15: services.documents.RevokeApprovalRequest
	(*RevokeApprovalResponse)(nil),                  // 16: services.documents.RevokeApprovalResponse
	(*DecideApprovalRequest)(nil),                   // 17: services.documents.DecideApprovalRequest
	(*DecideApprovalResponse)(nil),                  // 18: services.documents.DecideApprovalResponse
	(*ReopenApprovalTaskRequest)(nil),               // 19: services.documents.ReopenApprovalTaskRequest
	(*ReopenApprovalTaskResponse)(nil),              // 20: services.documents.ReopenApprovalTaskResponse
	(*RecomputeApprovalPolicyCountersRequest)(nil),  // 21: services.documents.RecomputeApprovalPolicyCountersRequest
	(*RecomputeApprovalPolicyCountersResponse)(nil), // 22: services.documents.RecomputeApprovalPolicyCountersResponse
	(*database.PaginationRequest)(nil),              // 23: resources.common.database.PaginationRequest
	(documents.ApprovalTaskStatus)(0),               // 24: resources.documents.ApprovalTaskStatus
	(*database.PaginationResponse)(nil),             // 25: resources.common.database.PaginationResponse
	(*documents.ApprovalTask)(nil),                  // 26: resources.documents.ApprovalTask
	(*documents.ApprovalPolicy)(nil),                // 27: resources.documents.ApprovalPolicy
	(*timestamp.Timestamp)(nil),                     // 28: resources.timestamp.Timestamp
	(documents.ApprovalStatus)(0),                   // 29: resources.documents.ApprovalStatus
	(*documents.Approval)(nil),                      // 30: resources.documents.Approval
}
var file_services_documents_approval_proto_depIdxs = []int32{
	23, // 0: services.documents.ListApprovalTasksInboxRequest.pagination:type_name -> resources.common.database.PaginationRequest
	24, // 1: services.documents.ListApprovalTasksInboxRequest.statuses:type_name -> resources.documents.ApprovalTaskStatus
	25, // 2: services.documents.ListApprovalTasksInboxResponse.pagination:type_name -> resources.common.database.PaginationResponse
	26, // 3: services.documents.ListApprovalTasksInboxResponse.tasks:type_name -> resources.documents.ApprovalTask
	27, // 4: services.documents.ListApprovalPoliciesResponse.policy:type_name -> resources.documents.ApprovalPolicy
	27, // 5: services.documents.UpsertApprovalPolicyRequest.policy:type_name -> resources.documents.ApprovalPolicy
	27, // 6: services.documents.UpsertApprovalPolicyResponse.policy:type_name -> resources.documents.ApprovalPolicy
	24, // 7: services.documents.ListApprovalTasksRequest.statuses:type_name -> resources.documents.ApprovalTaskStatus
	26, // 8: services.documents.ListApprovalTasksResponse.tasks:type_name -> resources.documents.ApprovalTask
	28, // 9: services.documents.ApprovalTaskSeed.due_at:type_name -> resources.timestamp.Timestamp
	28, // 10: services.documents.UpsertApprovalTasksRequest.snapshot_date:type_name -> resources.timestamp.Timestamp
	8,  // 11: services.documents.UpsertApprovalTasksRequest.seeds:type_name -> services.documents.ApprovalTaskSeed
	27, // 12: services.documents.UpsertApprovalTasksResponse.policy:type_name -> resources.documents.ApprovalPolicy
	28, // 13: services.documents.ListApprovalsRequest.snapshot_date:type_name -> resources.timestamp.Timestamp
	29, // 14: services.documents.ListApprovalsRequest.status:type_name -> resources.documents.ApprovalStatus
	30, // 15: services.documents.ListApprovalsResponse.approvals:type_name -> resources.documents.Approval
	30, // 16: services.documents.RevokeApprovalResponse.approval:type_name -> resources.documents.Approval
	24, // 17: services.documents.DecideApprovalRequest.new_status:type_name -> resources.documents.ApprovalTaskStatus
	30, // 18: services.documents.DecideApprovalResponse.approval:type_name -> resources.documents.Approval
	26, // 19: services.documents.DecideApprovalResponse.task:type_name -> resources.documents.ApprovalTask
	27, // 20: services.documents.DecideApprovalResponse.policy:type_name -> resources.documents.ApprovalPolicy
	26, // 21: services.documents.ReopenApprovalTaskResponse.task:type_name -> resources.documents.ApprovalTask
	27, // 22: services.documents.ReopenApprovalTaskResponse.policy:type_name -> resources.documents.ApprovalPolicy
	27, // 23: services.documents.RecomputeApprovalPolicyCountersResponse.policy:type_name -> resources.documents.ApprovalPolicy
	0,  // 24: services.documents.ApprovalService.ListApprovalTasksInbox:input_type -> services.documents.ListApprovalTasksInboxRequest
	2,  // 25: services.documents.ApprovalService.ListApprovalPolicies:input_type -> services.documents.ListApprovalPoliciesRequest
	4,  // 26: services.documents.ApprovalService.UpsertApprovalPolicy:input_type -> services.documents.UpsertApprovalPolicyRequest
	6,  // 27: services.documents.ApprovalService.ListApprovalTasks:input_type -> services.documents.ListApprovalTasksRequest
	9,  // 28: services.documents.ApprovalService.UpsertApprovalTasks:input_type -> services.documents.UpsertApprovalTasksRequest
	11, // 29: services.documents.ApprovalService.DeleteApprovalTasks:input_type -> services.documents.DeleteApprovalTasksRequest
	13, // 30: services.documents.ApprovalService.ListApprovals:input_type -> services.documents.ListApprovalsRequest
	15, // 31: services.documents.ApprovalService.RevokeApproval:input_type -> services.documents.RevokeApprovalRequest
	17, // 32: services.documents.ApprovalService.DecideApproval:input_type -> services.documents.DecideApprovalRequest
	19, // 33: services.documents.ApprovalService.ReopenApprovalTask:input_type -> services.documents.ReopenApprovalTaskRequest
	21, // 34: services.documents.ApprovalService.RecomputeApprovalPolicyCounters:input_type -> services.documents.RecomputeApprovalPolicyCountersRequest
	1,  // 35: services.documents.ApprovalService.ListApprovalTasksInbox:output_type -> services.documents.ListApprovalTasksInboxResponse
	3,  // 36: services.documents.ApprovalService.ListApprovalPolicies:output_type -> services.documents.ListApprovalPoliciesResponse
	5,  // 37: services.documents.ApprovalService.UpsertApprovalPolicy:output_type -> services.documents.UpsertApprovalPolicyResponse
	7,  // 38: services.documents.ApprovalService.ListApprovalTasks:output_type -> services.documents.ListApprovalTasksResponse
	10, // 39: services.documents.ApprovalService.UpsertApprovalTasks:output_type -> services.documents.UpsertApprovalTasksResponse
	12, // 40: services.documents.ApprovalService.DeleteApprovalTasks:output_type -> services.documents.DeleteApprovalTasksResponse
	14, // 41: services.documents.ApprovalService.ListApprovals:output_type -> services.documents.ListApprovalsResponse
	16, // 42: services.documents.ApprovalService.RevokeApproval:output_type -> services.documents.RevokeApprovalResponse
	18, // 43: services.documents.ApprovalService.DecideApproval:output_type -> services.documents.DecideApprovalResponse
	20, // 44: services.documents.ApprovalService.ReopenApprovalTask:output_type -> services.documents.ReopenApprovalTaskResponse
	22, // 45: services.documents.ApprovalService.RecomputeApprovalPolicyCounters:output_type -> services.documents.RecomputeApprovalPolicyCountersResponse
	35, // [35:46] is the sub-list for method output_type
	24, // [24:35] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_services_documents_approval_proto_init() }
func file_services_documents_approval_proto_init() {
	if File_services_documents_approval_proto != nil {
		return
	}
	file_services_documents_approval_proto_msgTypes[0].OneofWrappers = []any{}
	file_services_documents_approval_proto_msgTypes[8].OneofWrappers = []any{}
	file_services_documents_approval_proto_msgTypes[9].OneofWrappers = []any{}
	file_services_documents_approval_proto_msgTypes[13].OneofWrappers = []any{}
	file_services_documents_approval_proto_msgTypes[17].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_documents_approval_proto_rawDesc), len(file_services_documents_approval_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_documents_approval_proto_goTypes,
		DependencyIndexes: file_services_documents_approval_proto_depIdxs,
		MessageInfos:      file_services_documents_approval_proto_msgTypes,
	}.Build()
	File_services_documents_approval_proto = out.File
	file_services_documents_approval_proto_goTypes = nil
	file_services_documents_approval_proto_depIdxs = nil
}
