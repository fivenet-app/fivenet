// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: services/documents/approval.proto

package documents

import (
	_ "github.com/fivenet-app/fivenet/v2025/gen/go/proto/codegen/itemslen"
	_ "github.com/fivenet-app/fivenet/v2025/gen/go/proto/codegen/perms"
	database "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/common/database"
	documents "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/documents"
	timestamp "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetPolicyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{0}
}

func (x *GetPolicyRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

type GetPolicyResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyResponse) Reset() {
	*x = GetPolicyResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyResponse) ProtoMessage() {}

func (x *GetPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyResponse.ProtoReflect.Descriptor instead.
func (*GetPolicyResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{1}
}

func (x *GetPolicyResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type UpsertPolicyRequest struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	DocumentId     int64                      `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	RuleKind       documents.ApprovalRuleKind `protobuf:"varint,2,opt,name=rule_kind,json=ruleKind,proto3,enum=resources.documents.ApprovalRuleKind" json:"rule_kind,omitempty"`
	RequiredCount  int32                      `protobuf:"varint,3,opt,name=required_count,json=requiredCount,proto3" json:"required_count,omitempty"` // used if QUORUM_ANY
	OnEditBehavior documents.OnEditBehavior   `protobuf:"varint,4,opt,name=on_edit_behavior,json=onEditBehavior,proto3,enum=resources.documents.OnEditBehavior" json:"on_edit_behavior,omitempty"`
	DueAt          *timestamp.Timestamp       `protobuf:"bytes,5,opt,name=due_at,json=dueAt,proto3" json:"due_at,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UpsertPolicyRequest) Reset() {
	*x = UpsertPolicyRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPolicyRequest) ProtoMessage() {}

func (x *UpsertPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPolicyRequest.ProtoReflect.Descriptor instead.
func (*UpsertPolicyRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{2}
}

func (x *UpsertPolicyRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *UpsertPolicyRequest) GetRuleKind() documents.ApprovalRuleKind {
	if x != nil {
		return x.RuleKind
	}
	return documents.ApprovalRuleKind(0)
}

func (x *UpsertPolicyRequest) GetRequiredCount() int32 {
	if x != nil {
		return x.RequiredCount
	}
	return 0
}

func (x *UpsertPolicyRequest) GetOnEditBehavior() documents.OnEditBehavior {
	if x != nil {
		return x.OnEditBehavior
	}
	return documents.OnEditBehavior(0)
}

func (x *UpsertPolicyRequest) GetDueAt() *timestamp.Timestamp {
	if x != nil {
		return x.DueAt
	}
	return nil
}

type UpsertPolicyResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertPolicyResponse) Reset() {
	*x = UpsertPolicyResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPolicyResponse) ProtoMessage() {}

func (x *UpsertPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPolicyResponse.ProtoReflect.Descriptor instead.
func (*UpsertPolicyResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{3}
}

func (x *UpsertPolicyResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type StartApprovalRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	SnapshotDate  *timestamp.Timestamp   `protobuf:"bytes,2,opt,name=snapshot_date,json=snapshotDate,proto3" json:"snapshot_date,omitempty"` // if omitted, server uses now
	RegenTasks    bool                   `protobuf:"varint,3,opt,name=regen_tasks,json=regenTasks,proto3" json:"regen_tasks,omitempty"`      // re-materialize tasks from ACL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartApprovalRoundRequest) Reset() {
	*x = StartApprovalRoundRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartApprovalRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartApprovalRoundRequest) ProtoMessage() {}

func (x *StartApprovalRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartApprovalRoundRequest.ProtoReflect.Descriptor instead.
func (*StartApprovalRoundRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{4}
}

func (x *StartApprovalRoundRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *StartApprovalRoundRequest) GetSnapshotDate() *timestamp.Timestamp {
	if x != nil {
		return x.SnapshotDate
	}
	return nil
}

func (x *StartApprovalRoundRequest) GetRegenTasks() bool {
	if x != nil {
		return x.RegenTasks
	}
	return false
}

type StartApprovalRoundResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Tasks         []*documents.ApprovalTask `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartApprovalRoundResponse) Reset() {
	*x = StartApprovalRoundResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartApprovalRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartApprovalRoundResponse) ProtoMessage() {}

func (x *StartApprovalRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartApprovalRoundResponse.ProtoReflect.Descriptor instead.
func (*StartApprovalRoundResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{5}
}

func (x *StartApprovalRoundResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *StartApprovalRoundResponse) GetTasks() []*documents.ApprovalTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type CompleteApprovalRoundRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteApprovalRoundRequest) Reset() {
	*x = CompleteApprovalRoundRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteApprovalRoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteApprovalRoundRequest) ProtoMessage() {}

func (x *CompleteApprovalRoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteApprovalRoundRequest.ProtoReflect.Descriptor instead.
func (*CompleteApprovalRoundRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{6}
}

func (x *CompleteApprovalRoundRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

type CompleteApprovalRoundResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteApprovalRoundResponse) Reset() {
	*x = CompleteApprovalRoundResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteApprovalRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteApprovalRoundResponse) ProtoMessage() {}

func (x *CompleteApprovalRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteApprovalRoundResponse.ProtoReflect.Descriptor instead.
func (*CompleteApprovalRoundResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{7}
}

func (x *CompleteApprovalRoundResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type RecomputePolicyCountersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DocumentId    int64                  `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecomputePolicyCountersRequest) Reset() {
	*x = RecomputePolicyCountersRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecomputePolicyCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputePolicyCountersRequest) ProtoMessage() {}

func (x *RecomputePolicyCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputePolicyCountersRequest.ProtoReflect.Descriptor instead.
func (*RecomputePolicyCountersRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{8}
}

func (x *RecomputePolicyCountersRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

type RecomputePolicyCountersResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecomputePolicyCountersResponse) Reset() {
	*x = RecomputePolicyCountersResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecomputePolicyCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecomputePolicyCountersResponse) ProtoMessage() {}

func (x *RecomputePolicyCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecomputePolicyCountersResponse.ProtoReflect.Descriptor instead.
func (*RecomputePolicyCountersResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{9}
}

func (x *RecomputePolicyCountersResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ListApprovalAccessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PolicyId      int64                  `protobuf:"varint,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalAccessRequest) Reset() {
	*x = ListApprovalAccessRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalAccessRequest) ProtoMessage() {}

func (x *ListApprovalAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalAccessRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalAccessRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{10}
}

func (x *ListApprovalAccessRequest) GetPolicyId() int64 {
	if x != nil {
		return x.PolicyId
	}
	return 0
}

type ListApprovalAccessResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Access        *documents.ApprovalAccess `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalAccessResponse) Reset() {
	*x = ListApprovalAccessResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalAccessResponse) ProtoMessage() {}

func (x *ListApprovalAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalAccessResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalAccessResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{11}
}

func (x *ListApprovalAccessResponse) GetAccess() *documents.ApprovalAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type UpsertApprovalAccessRequest struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	DocumentId    int64                     `protobuf:"varint,1,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Access        *documents.ApprovalAccess `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertApprovalAccessRequest) Reset() {
	*x = UpsertApprovalAccessRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertApprovalAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApprovalAccessRequest) ProtoMessage() {}

func (x *UpsertApprovalAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApprovalAccessRequest.ProtoReflect.Descriptor instead.
func (*UpsertApprovalAccessRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{12}
}

func (x *UpsertApprovalAccessRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *UpsertApprovalAccessRequest) GetAccess() *documents.ApprovalAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type UpsertApprovalAccessResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Access        *documents.ApprovalAccess `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpsertApprovalAccessResponse) Reset() {
	*x = UpsertApprovalAccessResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpsertApprovalAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertApprovalAccessResponse) ProtoMessage() {}

func (x *UpsertApprovalAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertApprovalAccessResponse.ProtoReflect.Descriptor instead.
func (*UpsertApprovalAccessResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{13}
}

func (x *UpsertApprovalAccessResponse) GetAccess() *documents.ApprovalAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type DeleteApprovalAccessRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApprovalAccessRequest) Reset() {
	*x = DeleteApprovalAccessRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApprovalAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApprovalAccessRequest) ProtoMessage() {}

func (x *DeleteApprovalAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApprovalAccessRequest.ProtoReflect.Descriptor instead.
func (*DeleteApprovalAccessRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteApprovalAccessRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteApprovalAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteApprovalAccessResponse) Reset() {
	*x = DeleteApprovalAccessResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteApprovalAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteApprovalAccessResponse) ProtoMessage() {}

func (x *DeleteApprovalAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteApprovalAccessResponse.ProtoReflect.Descriptor instead.
func (*DeleteApprovalAccessResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{15}
}

type ListApprovalTasksRequest struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Pagination *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	// Search
	DocumentId    int64                          `protobuf:"varint,2,opt,name=document_id,json=documentId,proto3" json:"document_id,omitempty"`
	Statuses      []documents.ApprovalTaskStatus `protobuf:"varint,3,rep,packed,name=statuses,proto3,enum=resources.documents.ApprovalTaskStatus" json:"statuses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalTasksRequest) Reset() {
	*x = ListApprovalTasksRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalTasksRequest) ProtoMessage() {}

func (x *ListApprovalTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalTasksRequest.ProtoReflect.Descriptor instead.
func (*ListApprovalTasksRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{16}
}

func (x *ListApprovalTasksRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListApprovalTasksRequest) GetDocumentId() int64 {
	if x != nil {
		return x.DocumentId
	}
	return 0
}

func (x *ListApprovalTasksRequest) GetStatuses() []documents.ApprovalTaskStatus {
	if x != nil {
		return x.Statuses
	}
	return nil
}

type ListApprovalTasksResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Tasks         []*documents.ApprovalTask    `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListApprovalTasksResponse) Reset() {
	*x = ListApprovalTasksResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListApprovalTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListApprovalTasksResponse) ProtoMessage() {}

func (x *ListApprovalTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListApprovalTasksResponse.ProtoReflect.Descriptor instead.
func (*ListApprovalTasksResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{17}
}

func (x *ListApprovalTasksResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListApprovalTasksResponse) GetTasks() []*documents.ApprovalTask {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type DecideTaskRequest struct {
	state          protoimpl.MessageState       `protogen:"open.v1"`
	TaskId         int64                        `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	NewStatus      documents.ApprovalTaskStatus `protobuf:"varint,2,opt,name=new_status,json=newStatus,proto3,enum=resources.documents.ApprovalTaskStatus" json:"new_status,omitempty"` // APPROVED or DECLINED
	Comment        string                       `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	IdempotencyKey string                       `protobuf:"bytes,10,opt,name=idempotency_key,json=idempotencyKey,proto3" json:"idempotency_key,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DecideTaskRequest) Reset() {
	*x = DecideTaskRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecideTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideTaskRequest) ProtoMessage() {}

func (x *DecideTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideTaskRequest.ProtoReflect.Descriptor instead.
func (*DecideTaskRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{18}
}

func (x *DecideTaskRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *DecideTaskRequest) GetNewStatus() documents.ApprovalTaskStatus {
	if x != nil {
		return x.NewStatus
	}
	return documents.ApprovalTaskStatus(0)
}

func (x *DecideTaskRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *DecideTaskRequest) GetIdempotencyKey() string {
	if x != nil {
		return x.IdempotencyKey
	}
	return ""
}

type DecideTaskResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Task          *documents.ApprovalTask   `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"` // counters updated
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecideTaskResponse) Reset() {
	*x = DecideTaskResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecideTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecideTaskResponse) ProtoMessage() {}

func (x *DecideTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecideTaskResponse.ProtoReflect.Descriptor instead.
func (*DecideTaskResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{19}
}

func (x *DecideTaskResponse) GetTask() *documents.ApprovalTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *DecideTaskResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type ReopenTaskRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TaskId        int64                  `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReopenTaskRequest) Reset() {
	*x = ReopenTaskRequest{}
	mi := &file_services_documents_approval_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReopenTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenTaskRequest) ProtoMessage() {}

func (x *ReopenTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenTaskRequest.ProtoReflect.Descriptor instead.
func (*ReopenTaskRequest) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{20}
}

func (x *ReopenTaskRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ReopenTaskRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type ReopenTaskResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Task          *documents.ApprovalTask   `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Policy        *documents.ApprovalPolicy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReopenTaskResponse) Reset() {
	*x = ReopenTaskResponse{}
	mi := &file_services_documents_approval_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReopenTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReopenTaskResponse) ProtoMessage() {}

func (x *ReopenTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_documents_approval_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReopenTaskResponse.ProtoReflect.Descriptor instead.
func (*ReopenTaskResponse) Descriptor() ([]byte, []int) {
	return file_services_documents_approval_proto_rawDescGZIP(), []int{21}
}

func (x *ReopenTaskResponse) GetTask() *documents.ApprovalTask {
	if x != nil {
		return x.Task
	}
	return nil
}

func (x *ReopenTaskResponse) GetPolicy() *documents.ApprovalPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

var File_services_documents_approval_proto protoreflect.FileDescriptor

const file_services_documents_approval_proto_rawDesc = "" +
	"\n" +
	"!services/documents/approval.proto\x12\x12services.documents\x1a\x1fcodegen/itemslen/itemslen.proto\x1a\x19codegen/perms/perms.proto\x1a(resources/common/database/database.proto\x1a\"resources/documents/approval.proto\x1a#resources/timestamp/timestamp.proto\"3\n" +
	"\x10GetPolicyRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\"P\n" +
	"\x11GetPolicyResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"\xa7\x02\n" +
	"\x13UpsertPolicyRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\x12B\n" +
	"\trule_kind\x18\x02 \x01(\x0e2%.resources.documents.ApprovalRuleKindR\bruleKind\x12%\n" +
	"\x0erequired_count\x18\x03 \x01(\x05R\rrequiredCount\x12M\n" +
	"\x10on_edit_behavior\x18\x04 \x01(\x0e2#.resources.documents.OnEditBehaviorR\x0eonEditBehavior\x125\n" +
	"\x06due_at\x18\x05 \x01(\v2\x1e.resources.timestamp.TimestampR\x05dueAt\"S\n" +
	"\x14UpsertPolicyResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"\xa2\x01\n" +
	"\x19StartApprovalRoundRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\x12C\n" +
	"\rsnapshot_date\x18\x02 \x01(\v2\x1e.resources.timestamp.TimestampR\fsnapshotDate\x12\x1f\n" +
	"\vregen_tasks\x18\x03 \x01(\bR\n" +
	"regenTasks\"\x98\x01\n" +
	"\x1aStartApprovalRoundResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\x12=\n" +
	"\x05tasks\x18\x02 \x03(\v2!.resources.documents.ApprovalTaskB\x04\xc8\xf3\x18\x01R\x05tasks\"?\n" +
	"\x1cCompleteApprovalRoundRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\"\\\n" +
	"\x1dCompleteApprovalRoundResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"A\n" +
	"\x1eRecomputePolicyCountersRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\"^\n" +
	"\x1fRecomputePolicyCountersResponse\x12;\n" +
	"\x06policy\x18\x01 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"8\n" +
	"\x19ListApprovalAccessRequest\x12\x1b\n" +
	"\tpolicy_id\x18\x01 \x01(\x03R\bpolicyId\"Y\n" +
	"\x1aListApprovalAccessResponse\x12;\n" +
	"\x06access\x18\x01 \x01(\v2#.resources.documents.ApprovalAccessR\x06access\"{\n" +
	"\x1bUpsertApprovalAccessRequest\x12\x1f\n" +
	"\vdocument_id\x18\x01 \x01(\x03R\n" +
	"documentId\x12;\n" +
	"\x06access\x18\x02 \x01(\v2#.resources.documents.ApprovalAccessR\x06access\"[\n" +
	"\x1cUpsertApprovalAccessResponse\x12;\n" +
	"\x06access\x18\x01 \x01(\v2#.resources.documents.ApprovalAccessR\x06access\"-\n" +
	"\x1bDeleteApprovalAccessRequest\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x03R\x02id\"\x1e\n" +
	"\x1cDeleteApprovalAccessResponse\"\xce\x01\n" +
	"\x18ListApprovalTasksRequest\x12L\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2,.resources.common.database.PaginationRequestR\n" +
	"pagination\x12\x1f\n" +
	"\vdocument_id\x18\x02 \x01(\x03R\n" +
	"documentId\x12C\n" +
	"\bstatuses\x18\x03 \x03(\x0e2'.resources.documents.ApprovalTaskStatusR\bstatuses\"\xa9\x01\n" +
	"\x19ListApprovalTasksResponse\x12M\n" +
	"\n" +
	"pagination\x18\x01 \x01(\v2-.resources.common.database.PaginationResponseR\n" +
	"pagination\x12=\n" +
	"\x05tasks\x18\x02 \x03(\v2!.resources.documents.ApprovalTaskB\x04\xc8\xf3\x18\x01R\x05tasks\"\xb7\x01\n" +
	"\x11DecideTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x03R\x06taskId\x12F\n" +
	"\n" +
	"new_status\x18\x02 \x01(\x0e2'.resources.documents.ApprovalTaskStatusR\tnewStatus\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12'\n" +
	"\x0fidempotency_key\x18\n" +
	" \x01(\tR\x0eidempotencyKey\"\x88\x01\n" +
	"\x12DecideTaskResponse\x125\n" +
	"\x04task\x18\x01 \x01(\v2!.resources.documents.ApprovalTaskR\x04task\x12;\n" +
	"\x06policy\x18\x02 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy\"D\n" +
	"\x11ReopenTaskRequest\x12\x17\n" +
	"\atask_id\x18\x01 \x01(\x03R\x06taskId\x12\x16\n" +
	"\x06reason\x18\x02 \x01(\tR\x06reason\"\x88\x01\n" +
	"\x12ReopenTaskResponse\x125\n" +
	"\x04task\x18\x01 \x01(\v2!.resources.documents.ApprovalTaskR\x04task\x12;\n" +
	"\x06policy\x18\x02 \x01(\v2#.resources.documents.ApprovalPolicyR\x06policy2\xd2\f\n" +
	"\x0fApprovalService\x12\x81\x01\n" +
	"\tGetPolicy\x12$.services.documents.GetPolicyRequest\x1a%.services.documents.GetPolicyResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12i\n" +
	"\fUpsertPolicy\x12'.services.documents.UpsertPolicyRequest\x1a(.services.documents.UpsertPolicyResponse\"\x06\xd2\xf3\x18\x02\b\x01\x12\x9c\x01\n" +
	"\x12StartApprovalRound\x12-.services.documents.StartApprovalRoundRequest\x1a..services.documents.StartApprovalRoundResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12\xa5\x01\n" +
	"\x15CompleteApprovalRound\x120.services.documents.CompleteApprovalRoundRequest\x1a1.services.documents.CompleteApprovalRoundResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12\xa0\x01\n" +
	"\x17RecomputePolicyCounters\x122.services.documents.RecomputePolicyCountersRequest\x1a3.services.documents.RecomputePolicyCountersResponse\"\x1c\xd2\xf3\x18\x18\b\x01\x1a\x14DeleteApprovalAccess\x12\x9c\x01\n" +
	"\x12ListApprovalAccess\x12-.services.documents.ListApprovalAccessRequest\x1a..services.documents.ListApprovalAccessResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12\xa2\x01\n" +
	"\x14UpsertApprovalAccess\x12/.services.documents.UpsertApprovalAccessRequest\x1a0.services.documents.UpsertApprovalAccessResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12\x81\x01\n" +
	"\x14DeleteApprovalAccess\x12/.services.documents.DeleteApprovalAccessRequest\x1a0.services.documents.DeleteApprovalAccessResponse\"\x06\xd2\xf3\x18\x02\b\x01\x12\x99\x01\n" +
	"\x11ListApprovalTasks\x12,.services.documents.ListApprovalTasksRequest\x1a-.services.documents.ListApprovalTasksResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12\x84\x01\n" +
	"\n" +
	"DecideTask\x12%.services.documents.DecideTaskRequest\x1a&.services.documents.DecideTaskResponse\"'\xd2\xf3\x18#\b\x01\x12\x10DocumentsService\x1a\rListDocuments\x12c\n" +
	"\n" +
	"ReopenTask\x12%.services.documents.ReopenTaskRequest\x1a&.services.documents.ReopenTaskResponse\"\x06\xd2\xf3\x18\x02\b\x01\x1a\x16\xea\xf3\x18\x12\b4\x12\x0ei-mdi-approvalBPZNgithub.com/fivenet-app/fivenet/v2025/gen/go/proto/services/documents;documentsb\x06proto3"

var (
	file_services_documents_approval_proto_rawDescOnce sync.Once
	file_services_documents_approval_proto_rawDescData []byte
)

func file_services_documents_approval_proto_rawDescGZIP() []byte {
	file_services_documents_approval_proto_rawDescOnce.Do(func() {
		file_services_documents_approval_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_documents_approval_proto_rawDesc), len(file_services_documents_approval_proto_rawDesc)))
	})
	return file_services_documents_approval_proto_rawDescData
}

var file_services_documents_approval_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_services_documents_approval_proto_goTypes = []any{
	(*GetPolicyRequest)(nil),                // 0: services.documents.GetPolicyRequest
	(*GetPolicyResponse)(nil),               // 1: services.documents.GetPolicyResponse
	(*UpsertPolicyRequest)(nil),             // 2: services.documents.UpsertPolicyRequest
	(*UpsertPolicyResponse)(nil),            // 3: services.documents.UpsertPolicyResponse
	(*StartApprovalRoundRequest)(nil),       // 4: services.documents.StartApprovalRoundRequest
	(*StartApprovalRoundResponse)(nil),      // 5: services.documents.StartApprovalRoundResponse
	(*CompleteApprovalRoundRequest)(nil),    // 6: services.documents.CompleteApprovalRoundRequest
	(*CompleteApprovalRoundResponse)(nil),   // 7: services.documents.CompleteApprovalRoundResponse
	(*RecomputePolicyCountersRequest)(nil),  // 8: services.documents.RecomputePolicyCountersRequest
	(*RecomputePolicyCountersResponse)(nil), // 9: services.documents.RecomputePolicyCountersResponse
	(*ListApprovalAccessRequest)(nil),       // 10: services.documents.ListApprovalAccessRequest
	(*ListApprovalAccessResponse)(nil),      // 11: services.documents.ListApprovalAccessResponse
	(*UpsertApprovalAccessRequest)(nil),     // 12: services.documents.UpsertApprovalAccessRequest
	(*UpsertApprovalAccessResponse)(nil),    // 13: services.documents.UpsertApprovalAccessResponse
	(*DeleteApprovalAccessRequest)(nil),     // 14: services.documents.DeleteApprovalAccessRequest
	(*DeleteApprovalAccessResponse)(nil),    // 15: services.documents.DeleteApprovalAccessResponse
	(*ListApprovalTasksRequest)(nil),        // 16: services.documents.ListApprovalTasksRequest
	(*ListApprovalTasksResponse)(nil),       // 17: services.documents.ListApprovalTasksResponse
	(*DecideTaskRequest)(nil),               // 18: services.documents.DecideTaskRequest
	(*DecideTaskResponse)(nil),              // 19: services.documents.DecideTaskResponse
	(*ReopenTaskRequest)(nil),               // 20: services.documents.ReopenTaskRequest
	(*ReopenTaskResponse)(nil),              // 21: services.documents.ReopenTaskResponse
	(*documents.ApprovalPolicy)(nil),        // 22: resources.documents.ApprovalPolicy
	(documents.ApprovalRuleKind)(0),         // 23: resources.documents.ApprovalRuleKind
	(documents.OnEditBehavior)(0),           // 24: resources.documents.OnEditBehavior
	(*timestamp.Timestamp)(nil),             // 25: resources.timestamp.Timestamp
	(*documents.ApprovalTask)(nil),          // 26: resources.documents.ApprovalTask
	(*documents.ApprovalAccess)(nil),        // 27: resources.documents.ApprovalAccess
	(*database.PaginationRequest)(nil),      // 28: resources.common.database.PaginationRequest
	(documents.ApprovalTaskStatus)(0),       // 29: resources.documents.ApprovalTaskStatus
	(*database.PaginationResponse)(nil),     // 30: resources.common.database.PaginationResponse
}
var file_services_documents_approval_proto_depIdxs = []int32{
	22, // 0: services.documents.GetPolicyResponse.policy:type_name -> resources.documents.ApprovalPolicy
	23, // 1: services.documents.UpsertPolicyRequest.rule_kind:type_name -> resources.documents.ApprovalRuleKind
	24, // 2: services.documents.UpsertPolicyRequest.on_edit_behavior:type_name -> resources.documents.OnEditBehavior
	25, // 3: services.documents.UpsertPolicyRequest.due_at:type_name -> resources.timestamp.Timestamp
	22, // 4: services.documents.UpsertPolicyResponse.policy:type_name -> resources.documents.ApprovalPolicy
	25, // 5: services.documents.StartApprovalRoundRequest.snapshot_date:type_name -> resources.timestamp.Timestamp
	22, // 6: services.documents.StartApprovalRoundResponse.policy:type_name -> resources.documents.ApprovalPolicy
	26, // 7: services.documents.StartApprovalRoundResponse.tasks:type_name -> resources.documents.ApprovalTask
	22, // 8: services.documents.CompleteApprovalRoundResponse.policy:type_name -> resources.documents.ApprovalPolicy
	22, // 9: services.documents.RecomputePolicyCountersResponse.policy:type_name -> resources.documents.ApprovalPolicy
	27, // 10: services.documents.ListApprovalAccessResponse.access:type_name -> resources.documents.ApprovalAccess
	27, // 11: services.documents.UpsertApprovalAccessRequest.access:type_name -> resources.documents.ApprovalAccess
	27, // 12: services.documents.UpsertApprovalAccessResponse.access:type_name -> resources.documents.ApprovalAccess
	28, // 13: services.documents.ListApprovalTasksRequest.pagination:type_name -> resources.common.database.PaginationRequest
	29, // 14: services.documents.ListApprovalTasksRequest.statuses:type_name -> resources.documents.ApprovalTaskStatus
	30, // 15: services.documents.ListApprovalTasksResponse.pagination:type_name -> resources.common.database.PaginationResponse
	26, // 16: services.documents.ListApprovalTasksResponse.tasks:type_name -> resources.documents.ApprovalTask
	29, // 17: services.documents.DecideTaskRequest.new_status:type_name -> resources.documents.ApprovalTaskStatus
	26, // 18: services.documents.DecideTaskResponse.task:type_name -> resources.documents.ApprovalTask
	22, // 19: services.documents.DecideTaskResponse.policy:type_name -> resources.documents.ApprovalPolicy
	26, // 20: services.documents.ReopenTaskResponse.task:type_name -> resources.documents.ApprovalTask
	22, // 21: services.documents.ReopenTaskResponse.policy:type_name -> resources.documents.ApprovalPolicy
	0,  // 22: services.documents.ApprovalService.GetPolicy:input_type -> services.documents.GetPolicyRequest
	2,  // 23: services.documents.ApprovalService.UpsertPolicy:input_type -> services.documents.UpsertPolicyRequest
	4,  // 24: services.documents.ApprovalService.StartApprovalRound:input_type -> services.documents.StartApprovalRoundRequest
	6,  // 25: services.documents.ApprovalService.CompleteApprovalRound:input_type -> services.documents.CompleteApprovalRoundRequest
	8,  // 26: services.documents.ApprovalService.RecomputePolicyCounters:input_type -> services.documents.RecomputePolicyCountersRequest
	10, // 27: services.documents.ApprovalService.ListApprovalAccess:input_type -> services.documents.ListApprovalAccessRequest
	12, // 28: services.documents.ApprovalService.UpsertApprovalAccess:input_type -> services.documents.UpsertApprovalAccessRequest
	14, // 29: services.documents.ApprovalService.DeleteApprovalAccess:input_type -> services.documents.DeleteApprovalAccessRequest
	16, // 30: services.documents.ApprovalService.ListApprovalTasks:input_type -> services.documents.ListApprovalTasksRequest
	18, // 31: services.documents.ApprovalService.DecideTask:input_type -> services.documents.DecideTaskRequest
	20, // 32: services.documents.ApprovalService.ReopenTask:input_type -> services.documents.ReopenTaskRequest
	1,  // 33: services.documents.ApprovalService.GetPolicy:output_type -> services.documents.GetPolicyResponse
	3,  // 34: services.documents.ApprovalService.UpsertPolicy:output_type -> services.documents.UpsertPolicyResponse
	5,  // 35: services.documents.ApprovalService.StartApprovalRound:output_type -> services.documents.StartApprovalRoundResponse
	7,  // 36: services.documents.ApprovalService.CompleteApprovalRound:output_type -> services.documents.CompleteApprovalRoundResponse
	9,  // 37: services.documents.ApprovalService.RecomputePolicyCounters:output_type -> services.documents.RecomputePolicyCountersResponse
	11, // 38: services.documents.ApprovalService.ListApprovalAccess:output_type -> services.documents.ListApprovalAccessResponse
	13, // 39: services.documents.ApprovalService.UpsertApprovalAccess:output_type -> services.documents.UpsertApprovalAccessResponse
	15, // 40: services.documents.ApprovalService.DeleteApprovalAccess:output_type -> services.documents.DeleteApprovalAccessResponse
	17, // 41: services.documents.ApprovalService.ListApprovalTasks:output_type -> services.documents.ListApprovalTasksResponse
	19, // 42: services.documents.ApprovalService.DecideTask:output_type -> services.documents.DecideTaskResponse
	21, // 43: services.documents.ApprovalService.ReopenTask:output_type -> services.documents.ReopenTaskResponse
	33, // [33:44] is the sub-list for method output_type
	22, // [22:33] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_services_documents_approval_proto_init() }
func file_services_documents_approval_proto_init() {
	if File_services_documents_approval_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_documents_approval_proto_rawDesc), len(file_services_documents_approval_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_documents_approval_proto_goTypes,
		DependencyIndexes: file_services_documents_approval_proto_depIdxs,
		MessageInfos:      file_services_documents_approval_proto_msgTypes,
	}.Build()
	File_services_documents_approval_proto = out.File
	file_services_documents_approval_proto_goTypes = nil
	file_services_documents_approval_proto_depIdxs = nil
}
