// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/documents/collab.proto

package documents

import (
	context "context"
	collab "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/collab"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CollabService_JoinRoom_FullMethodName = "/services.documents.CollabService/JoinRoom"
)

// CollabServiceClient is the client API for CollabService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CollabServiceClient interface {
	// @perm: Name=documents.DocumentsService/ListDocuments
	JoinRoom(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[collab.ClientPacket, collab.ServerPacket], error)
}

type collabServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCollabServiceClient(cc grpc.ClientConnInterface) CollabServiceClient {
	return &collabServiceClient{cc}
}

func (c *collabServiceClient) JoinRoom(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[collab.ClientPacket, collab.ServerPacket], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CollabService_ServiceDesc.Streams[0], CollabService_JoinRoom_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[collab.ClientPacket, collab.ServerPacket]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollabService_JoinRoomClient = grpc.BidiStreamingClient[collab.ClientPacket, collab.ServerPacket]

// CollabServiceServer is the server API for CollabService service.
// All implementations must embed UnimplementedCollabServiceServer
// for forward compatibility.
type CollabServiceServer interface {
	// @perm: Name=documents.DocumentsService/ListDocuments
	JoinRoom(grpc.BidiStreamingServer[collab.ClientPacket, collab.ServerPacket]) error
	mustEmbedUnimplementedCollabServiceServer()
}

// UnimplementedCollabServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCollabServiceServer struct{}

func (UnimplementedCollabServiceServer) JoinRoom(grpc.BidiStreamingServer[collab.ClientPacket, collab.ServerPacket]) error {
	return status.Errorf(codes.Unimplemented, "method JoinRoom not implemented")
}
func (UnimplementedCollabServiceServer) mustEmbedUnimplementedCollabServiceServer() {}
func (UnimplementedCollabServiceServer) testEmbeddedByValue()                       {}

// UnsafeCollabServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CollabServiceServer will
// result in compilation errors.
type UnsafeCollabServiceServer interface {
	mustEmbedUnimplementedCollabServiceServer()
}

func RegisterCollabServiceServer(s grpc.ServiceRegistrar, srv CollabServiceServer) {
	// If the following call pancis, it indicates UnimplementedCollabServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CollabService_ServiceDesc, srv)
}

func _CollabService_JoinRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CollabServiceServer).JoinRoom(&grpc.GenericServerStream[collab.ClientPacket, collab.ServerPacket]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CollabService_JoinRoomServer = grpc.BidiStreamingServer[collab.ClientPacket, collab.ServerPacket]

// CollabService_ServiceDesc is the grpc.ServiceDesc for CollabService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CollabService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.CollabService",
	HandlerType: (*CollabServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinRoom",
			Handler:       _CollabService_JoinRoom_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "services/documents/collab.proto",
}
