// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/stamps.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StampsService_ListUsableStamps_FullMethodName = "/services.documents.StampsService/ListUsableStamps"
	StampsService_UpsertStamp_FullMethodName      = "/services.documents.StampsService/UpsertStamp"
	StampsService_DeleteStamp_FullMethodName      = "/services.documents.StampsService/DeleteStamp"
)

// StampsServiceClient is the client API for StampsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StampsServiceClient interface {
	ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error)
	UpsertStamp(ctx context.Context, in *UpsertStampRequest, opts ...grpc.CallOption) (*UpsertStampResponse, error)
	DeleteStamp(ctx context.Context, in *DeleteStampRequest, opts ...grpc.CallOption) (*DeleteStampResponse, error)
}

type stampsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStampsServiceClient(cc grpc.ClientConnInterface) StampsServiceClient {
	return &stampsServiceClient{cc}
}

func (c *stampsServiceClient) ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsableStampsResponse)
	err := c.cc.Invoke(ctx, StampsService_ListUsableStamps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stampsServiceClient) UpsertStamp(ctx context.Context, in *UpsertStampRequest, opts ...grpc.CallOption) (*UpsertStampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertStampResponse)
	err := c.cc.Invoke(ctx, StampsService_UpsertStamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stampsServiceClient) DeleteStamp(ctx context.Context, in *DeleteStampRequest, opts ...grpc.CallOption) (*DeleteStampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStampResponse)
	err := c.cc.Invoke(ctx, StampsService_DeleteStamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StampsServiceServer is the server API for StampsService service.
// All implementations must embed UnimplementedStampsServiceServer
// for forward compatibility.
type StampsServiceServer interface {
	ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error)
	UpsertStamp(context.Context, *UpsertStampRequest) (*UpsertStampResponse, error)
	DeleteStamp(context.Context, *DeleteStampRequest) (*DeleteStampResponse, error)
	mustEmbedUnimplementedStampsServiceServer()
}

// UnimplementedStampsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStampsServiceServer struct{}

func (UnimplementedStampsServiceServer) ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsableStamps not implemented")
}
func (UnimplementedStampsServiceServer) UpsertStamp(context.Context, *UpsertStampRequest) (*UpsertStampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStamp not implemented")
}
func (UnimplementedStampsServiceServer) DeleteStamp(context.Context, *DeleteStampRequest) (*DeleteStampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStamp not implemented")
}
func (UnimplementedStampsServiceServer) mustEmbedUnimplementedStampsServiceServer() {}
func (UnimplementedStampsServiceServer) testEmbeddedByValue()                       {}

// UnsafeStampsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StampsServiceServer will
// result in compilation errors.
type UnsafeStampsServiceServer interface {
	mustEmbedUnimplementedStampsServiceServer()
}

func RegisterStampsServiceServer(s grpc.ServiceRegistrar, srv StampsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStampsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StampsService_ServiceDesc, srv)
}

func _StampsService_ListUsableStamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsableStampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StampsServiceServer).ListUsableStamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StampsService_ListUsableStamps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StampsServiceServer).ListUsableStamps(ctx, req.(*ListUsableStampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StampsService_UpsertStamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StampsServiceServer).UpsertStamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StampsService_UpsertStamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StampsServiceServer).UpsertStamp(ctx, req.(*UpsertStampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StampsService_DeleteStamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StampsServiceServer).DeleteStamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StampsService_DeleteStamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StampsServiceServer).DeleteStamp(ctx, req.(*DeleteStampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StampsService_ServiceDesc is the grpc.ServiceDesc for StampsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StampsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.StampsService",
	HandlerType: (*StampsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUsableStamps",
			Handler:    _StampsService_ListUsableStamps_Handler,
		},
		{
			MethodName: "UpsertStamp",
			Handler:    _StampsService_UpsertStamp_Handler,
		},
		{
			MethodName: "DeleteStamp",
			Handler:    _StampsService_DeleteStamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/stamps.proto",
}
