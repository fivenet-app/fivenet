// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/documents/documents.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentsService_ListTemplates_FullMethodName           = "/services.documents.DocumentsService/ListTemplates"
	DocumentsService_GetTemplate_FullMethodName             = "/services.documents.DocumentsService/GetTemplate"
	DocumentsService_CreateTemplate_FullMethodName          = "/services.documents.DocumentsService/CreateTemplate"
	DocumentsService_UpdateTemplate_FullMethodName          = "/services.documents.DocumentsService/UpdateTemplate"
	DocumentsService_DeleteTemplate_FullMethodName          = "/services.documents.DocumentsService/DeleteTemplate"
	DocumentsService_ListDocuments_FullMethodName           = "/services.documents.DocumentsService/ListDocuments"
	DocumentsService_GetDocument_FullMethodName             = "/services.documents.DocumentsService/GetDocument"
	DocumentsService_CreateDocument_FullMethodName          = "/services.documents.DocumentsService/CreateDocument"
	DocumentsService_UpdateDocument_FullMethodName          = "/services.documents.DocumentsService/UpdateDocument"
	DocumentsService_DeleteDocument_FullMethodName          = "/services.documents.DocumentsService/DeleteDocument"
	DocumentsService_ToggleDocument_FullMethodName          = "/services.documents.DocumentsService/ToggleDocument"
	DocumentsService_ChangeDocumentOwner_FullMethodName     = "/services.documents.DocumentsService/ChangeDocumentOwner"
	DocumentsService_GetDocumentReferences_FullMethodName   = "/services.documents.DocumentsService/GetDocumentReferences"
	DocumentsService_GetDocumentRelations_FullMethodName    = "/services.documents.DocumentsService/GetDocumentRelations"
	DocumentsService_AddDocumentReference_FullMethodName    = "/services.documents.DocumentsService/AddDocumentReference"
	DocumentsService_RemoveDocumentReference_FullMethodName = "/services.documents.DocumentsService/RemoveDocumentReference"
	DocumentsService_AddDocumentRelation_FullMethodName     = "/services.documents.DocumentsService/AddDocumentRelation"
	DocumentsService_RemoveDocumentRelation_FullMethodName  = "/services.documents.DocumentsService/RemoveDocumentRelation"
	DocumentsService_GetComments_FullMethodName             = "/services.documents.DocumentsService/GetComments"
	DocumentsService_PostComment_FullMethodName             = "/services.documents.DocumentsService/PostComment"
	DocumentsService_EditComment_FullMethodName             = "/services.documents.DocumentsService/EditComment"
	DocumentsService_DeleteComment_FullMethodName           = "/services.documents.DocumentsService/DeleteComment"
	DocumentsService_GetDocumentAccess_FullMethodName       = "/services.documents.DocumentsService/GetDocumentAccess"
	DocumentsService_SetDocumentAccess_FullMethodName       = "/services.documents.DocumentsService/SetDocumentAccess"
	DocumentsService_ListDocumentActivity_FullMethodName    = "/services.documents.DocumentsService/ListDocumentActivity"
	DocumentsService_ListDocumentReqs_FullMethodName        = "/services.documents.DocumentsService/ListDocumentReqs"
	DocumentsService_CreateDocumentReq_FullMethodName       = "/services.documents.DocumentsService/CreateDocumentReq"
	DocumentsService_UpdateDocumentReq_FullMethodName       = "/services.documents.DocumentsService/UpdateDocumentReq"
	DocumentsService_DeleteDocumentReq_FullMethodName       = "/services.documents.DocumentsService/DeleteDocumentReq"
	DocumentsService_ListUserDocuments_FullMethodName       = "/services.documents.DocumentsService/ListUserDocuments"
	DocumentsService_ListCategories_FullMethodName          = "/services.documents.DocumentsService/ListCategories"
	DocumentsService_CreateOrUpdateCategory_FullMethodName  = "/services.documents.DocumentsService/CreateOrUpdateCategory"
	DocumentsService_DeleteCategory_FullMethodName          = "/services.documents.DocumentsService/DeleteCategory"
	DocumentsService_ListDocumentPins_FullMethodName        = "/services.documents.DocumentsService/ListDocumentPins"
	DocumentsService_ToggleDocumentPin_FullMethodName       = "/services.documents.DocumentsService/ToggleDocumentPin"
	DocumentsService_SetDocumentReminder_FullMethodName     = "/services.documents.DocumentsService/SetDocumentReminder"
)

// DocumentsServiceClient is the client API for DocumentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentsServiceClient interface {
	// @perm
	ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error)
	// @perm: Name=ListTemplates
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	// @perm
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error)
	// @perm: Name=CreateTemplate
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error)
	// @perm
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
	// @perm
	ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error)
	// @perm: Name=ListDocuments
	GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error)
	// @perm
	CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	ToggleDocument(ctx context.Context, in *ToggleDocumentRequest, opts ...grpc.CallOption) (*ToggleDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	ChangeDocumentOwner(ctx context.Context, in *ChangeDocumentOwnerRequest, opts ...grpc.CallOption) (*ChangeDocumentOwnerResponse, error)
	// @perm: Name=ListDocuments
	GetDocumentReferences(ctx context.Context, in *GetDocumentReferencesRequest, opts ...grpc.CallOption) (*GetDocumentReferencesResponse, error)
	// @perm: Name=ListDocuments
	GetDocumentRelations(ctx context.Context, in *GetDocumentRelationsRequest, opts ...grpc.CallOption) (*GetDocumentRelationsResponse, error)
	// @perm
	AddDocumentReference(ctx context.Context, in *AddDocumentReferenceRequest, opts ...grpc.CallOption) (*AddDocumentReferenceResponse, error)
	// @perm: Name=AddDocumentReference
	RemoveDocumentReference(ctx context.Context, in *RemoveDocumentReferenceRequest, opts ...grpc.CallOption) (*RemoveDocumentReferenceResponse, error)
	// @perm
	AddDocumentRelation(ctx context.Context, in *AddDocumentRelationRequest, opts ...grpc.CallOption) (*AddDocumentRelationResponse, error)
	// @perm: Name=AddDocumentRelation
	RemoveDocumentRelation(ctx context.Context, in *RemoveDocumentRelationRequest, opts ...grpc.CallOption) (*RemoveDocumentRelationResponse, error)
	// @perm: Name=ListDocuments
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	// @perm: Name=ListDocuments
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
	// @perm: Name=ListDocuments
	EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
	// @perm: Name=ListDocuments
	GetDocumentAccess(ctx context.Context, in *GetDocumentAccessRequest, opts ...grpc.CallOption) (*GetDocumentAccessResponse, error)
	// @perm: Name=CreateDocument
	SetDocumentAccess(ctx context.Context, in *SetDocumentAccessRequest, opts ...grpc.CallOption) (*SetDocumentAccessResponse, error)
	// @perm
	ListDocumentActivity(ctx context.Context, in *ListDocumentActivityRequest, opts ...grpc.CallOption) (*ListDocumentActivityResponse, error)
	// @perm
	ListDocumentReqs(ctx context.Context, in *ListDocumentReqsRequest, opts ...grpc.CallOption) (*ListDocumentReqsResponse, error)
	// @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
	CreateDocumentReq(ctx context.Context, in *CreateDocumentReqRequest, opts ...grpc.CallOption) (*CreateDocumentReqResponse, error)
	// @perm: Name=CreateDocumentReq
	UpdateDocumentReq(ctx context.Context, in *UpdateDocumentReqRequest, opts ...grpc.CallOption) (*UpdateDocumentReqResponse, error)
	// @perm
	DeleteDocumentReq(ctx context.Context, in *DeleteDocumentReqRequest, opts ...grpc.CallOption) (*DeleteDocumentReqResponse, error)
	// @perm
	ListUserDocuments(ctx context.Context, in *ListUserDocumentsRequest, opts ...grpc.CallOption) (*ListUserDocumentsResponse, error)
	// @perm
	ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error)
	// @perm
	CreateOrUpdateCategory(ctx context.Context, in *CreateOrUpdateCategoryRequest, opts ...grpc.CallOption) (*CreateOrUpdateCategoryResponse, error)
	// @perm
	DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error)
	// @perm: Name=ListDocuments
	ListDocumentPins(ctx context.Context, in *ListDocumentPinsRequest, opts ...grpc.CallOption) (*ListDocumentPinsResponse, error)
	// @perm
	ToggleDocumentPin(ctx context.Context, in *ToggleDocumentPinRequest, opts ...grpc.CallOption) (*ToggleDocumentPinResponse, error)
	// @perm
	SetDocumentReminder(ctx context.Context, in *SetDocumentReminderRequest, opts ...grpc.CallOption) (*SetDocumentReminderResponse, error)
}

type documentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentsServiceClient(cc grpc.ClientConnInterface) DocumentsServiceClient {
	return &documentsServiceClient{cc}
}

func (c *documentsServiceClient) ListTemplates(ctx context.Context, in *ListTemplatesRequest, opts ...grpc.CallOption) (*ListTemplatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTemplatesResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTemplateResponse)
	err := c.cc.Invoke(ctx, DocumentsService_CreateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTemplateResponse)
	err := c.cc.Invoke(ctx, DocumentsService_UpdateTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, DocumentsService_DeleteTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListDocuments(ctx context.Context, in *ListDocumentsRequest, opts ...grpc.CallOption) (*ListDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentsResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetDocument(ctx context.Context, in *GetDocumentRequest, opts ...grpc.CallOption) (*GetDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) CreateDocument(ctx context.Context, in *CreateDocumentRequest, opts ...grpc.CallOption) (*CreateDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_CreateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) UpdateDocument(ctx context.Context, in *UpdateDocumentRequest, opts ...grpc.CallOption) (*UpdateDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_UpdateDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) DeleteDocument(ctx context.Context, in *DeleteDocumentRequest, opts ...grpc.CallOption) (*DeleteDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_DeleteDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ToggleDocument(ctx context.Context, in *ToggleDocumentRequest, opts ...grpc.CallOption) (*ToggleDocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleDocumentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ToggleDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ChangeDocumentOwner(ctx context.Context, in *ChangeDocumentOwnerRequest, opts ...grpc.CallOption) (*ChangeDocumentOwnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeDocumentOwnerResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ChangeDocumentOwner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetDocumentReferences(ctx context.Context, in *GetDocumentReferencesRequest, opts ...grpc.CallOption) (*GetDocumentReferencesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentReferencesResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetDocumentReferences_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetDocumentRelations(ctx context.Context, in *GetDocumentRelationsRequest, opts ...grpc.CallOption) (*GetDocumentRelationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentRelationsResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetDocumentRelations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) AddDocumentReference(ctx context.Context, in *AddDocumentReferenceRequest, opts ...grpc.CallOption) (*AddDocumentReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDocumentReferenceResponse)
	err := c.cc.Invoke(ctx, DocumentsService_AddDocumentReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) RemoveDocumentReference(ctx context.Context, in *RemoveDocumentReferenceRequest, opts ...grpc.CallOption) (*RemoveDocumentReferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDocumentReferenceResponse)
	err := c.cc.Invoke(ctx, DocumentsService_RemoveDocumentReference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) AddDocumentRelation(ctx context.Context, in *AddDocumentRelationRequest, opts ...grpc.CallOption) (*AddDocumentRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDocumentRelationResponse)
	err := c.cc.Invoke(ctx, DocumentsService_AddDocumentRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) RemoveDocumentRelation(ctx context.Context, in *RemoveDocumentRelationRequest, opts ...grpc.CallOption) (*RemoveDocumentRelationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveDocumentRelationResponse)
	err := c.cc.Invoke(ctx, DocumentsService_RemoveDocumentRelation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCommentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_PostComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*EditCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditCommentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_EditComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, DocumentsService_DeleteComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) GetDocumentAccess(ctx context.Context, in *GetDocumentAccessRequest, opts ...grpc.CallOption) (*GetDocumentAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDocumentAccessResponse)
	err := c.cc.Invoke(ctx, DocumentsService_GetDocumentAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) SetDocumentAccess(ctx context.Context, in *SetDocumentAccessRequest, opts ...grpc.CallOption) (*SetDocumentAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDocumentAccessResponse)
	err := c.cc.Invoke(ctx, DocumentsService_SetDocumentAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListDocumentActivity(ctx context.Context, in *ListDocumentActivityRequest, opts ...grpc.CallOption) (*ListDocumentActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentActivityResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListDocumentActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListDocumentReqs(ctx context.Context, in *ListDocumentReqsRequest, opts ...grpc.CallOption) (*ListDocumentReqsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentReqsResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListDocumentReqs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) CreateDocumentReq(ctx context.Context, in *CreateDocumentReqRequest, opts ...grpc.CallOption) (*CreateDocumentReqResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDocumentReqResponse)
	err := c.cc.Invoke(ctx, DocumentsService_CreateDocumentReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) UpdateDocumentReq(ctx context.Context, in *UpdateDocumentReqRequest, opts ...grpc.CallOption) (*UpdateDocumentReqResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDocumentReqResponse)
	err := c.cc.Invoke(ctx, DocumentsService_UpdateDocumentReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) DeleteDocumentReq(ctx context.Context, in *DeleteDocumentReqRequest, opts ...grpc.CallOption) (*DeleteDocumentReqResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDocumentReqResponse)
	err := c.cc.Invoke(ctx, DocumentsService_DeleteDocumentReq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListUserDocuments(ctx context.Context, in *ListUserDocumentsRequest, opts ...grpc.CallOption) (*ListUserDocumentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserDocumentsResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListUserDocuments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListCategories(ctx context.Context, in *ListCategoriesRequest, opts ...grpc.CallOption) (*ListCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCategoriesResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) CreateOrUpdateCategory(ctx context.Context, in *CreateOrUpdateCategoryRequest, opts ...grpc.CallOption) (*CreateOrUpdateCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOrUpdateCategoryResponse)
	err := c.cc.Invoke(ctx, DocumentsService_CreateOrUpdateCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) DeleteCategory(ctx context.Context, in *DeleteCategoryRequest, opts ...grpc.CallOption) (*DeleteCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCategoryResponse)
	err := c.cc.Invoke(ctx, DocumentsService_DeleteCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ListDocumentPins(ctx context.Context, in *ListDocumentPinsRequest, opts ...grpc.CallOption) (*ListDocumentPinsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDocumentPinsResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ListDocumentPins_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) ToggleDocumentPin(ctx context.Context, in *ToggleDocumentPinRequest, opts ...grpc.CallOption) (*ToggleDocumentPinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleDocumentPinResponse)
	err := c.cc.Invoke(ctx, DocumentsService_ToggleDocumentPin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentsServiceClient) SetDocumentReminder(ctx context.Context, in *SetDocumentReminderRequest, opts ...grpc.CallOption) (*SetDocumentReminderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDocumentReminderResponse)
	err := c.cc.Invoke(ctx, DocumentsService_SetDocumentReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentsServiceServer is the server API for DocumentsService service.
// All implementations must embed UnimplementedDocumentsServiceServer
// for forward compatibility.
type DocumentsServiceServer interface {
	// @perm
	ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error)
	// @perm: Name=ListTemplates
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	// @perm
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error)
	// @perm: Name=CreateTemplate
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error)
	// @perm
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	// @perm
	ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error)
	// @perm: Name=ListDocuments
	GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error)
	// @perm
	CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	ToggleDocument(context.Context, *ToggleDocumentRequest) (*ToggleDocumentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	ChangeDocumentOwner(context.Context, *ChangeDocumentOwnerRequest) (*ChangeDocumentOwnerResponse, error)
	// @perm: Name=ListDocuments
	GetDocumentReferences(context.Context, *GetDocumentReferencesRequest) (*GetDocumentReferencesResponse, error)
	// @perm: Name=ListDocuments
	GetDocumentRelations(context.Context, *GetDocumentRelationsRequest) (*GetDocumentRelationsResponse, error)
	// @perm
	AddDocumentReference(context.Context, *AddDocumentReferenceRequest) (*AddDocumentReferenceResponse, error)
	// @perm: Name=AddDocumentReference
	RemoveDocumentReference(context.Context, *RemoveDocumentReferenceRequest) (*RemoveDocumentReferenceResponse, error)
	// @perm
	AddDocumentRelation(context.Context, *AddDocumentRelationRequest) (*AddDocumentRelationResponse, error)
	// @perm: Name=AddDocumentRelation
	RemoveDocumentRelation(context.Context, *RemoveDocumentRelationRequest) (*RemoveDocumentRelationResponse, error)
	// @perm: Name=ListDocuments
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	// @perm: Name=ListDocuments
	PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error)
	// @perm: Name=ListDocuments
	EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	// @perm: Name=ListDocuments
	GetDocumentAccess(context.Context, *GetDocumentAccessRequest) (*GetDocumentAccessResponse, error)
	// @perm: Name=CreateDocument
	SetDocumentAccess(context.Context, *SetDocumentAccessRequest) (*SetDocumentAccessResponse, error)
	// @perm
	ListDocumentActivity(context.Context, *ListDocumentActivityRequest) (*ListDocumentActivityResponse, error)
	// @perm
	ListDocumentReqs(context.Context, *ListDocumentReqsRequest) (*ListDocumentReqsResponse, error)
	// @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
	CreateDocumentReq(context.Context, *CreateDocumentReqRequest) (*CreateDocumentReqResponse, error)
	// @perm: Name=CreateDocumentReq
	UpdateDocumentReq(context.Context, *UpdateDocumentReqRequest) (*UpdateDocumentReqResponse, error)
	// @perm
	DeleteDocumentReq(context.Context, *DeleteDocumentReqRequest) (*DeleteDocumentReqResponse, error)
	// @perm
	ListUserDocuments(context.Context, *ListUserDocumentsRequest) (*ListUserDocumentsResponse, error)
	// @perm
	ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error)
	// @perm
	CreateOrUpdateCategory(context.Context, *CreateOrUpdateCategoryRequest) (*CreateOrUpdateCategoryResponse, error)
	// @perm
	DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error)
	// @perm: Name=ListDocuments
	ListDocumentPins(context.Context, *ListDocumentPinsRequest) (*ListDocumentPinsResponse, error)
	// @perm
	ToggleDocumentPin(context.Context, *ToggleDocumentPinRequest) (*ToggleDocumentPinResponse, error)
	// @perm
	SetDocumentReminder(context.Context, *SetDocumentReminderRequest) (*SetDocumentReminderResponse, error)
	mustEmbedUnimplementedDocumentsServiceServer()
}

// UnimplementedDocumentsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentsServiceServer struct{}

func (UnimplementedDocumentsServiceServer) ListTemplates(context.Context, *ListTemplatesRequest) (*ListTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplates not implemented")
}
func (UnimplementedDocumentsServiceServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedDocumentsServiceServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedDocumentsServiceServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedDocumentsServiceServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedDocumentsServiceServer) ListDocuments(context.Context, *ListDocumentsRequest) (*ListDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocuments not implemented")
}
func (UnimplementedDocumentsServiceServer) GetDocument(context.Context, *GetDocumentRequest) (*GetDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocument not implemented")
}
func (UnimplementedDocumentsServiceServer) CreateDocument(context.Context, *CreateDocumentRequest) (*CreateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocument not implemented")
}
func (UnimplementedDocumentsServiceServer) UpdateDocument(context.Context, *UpdateDocumentRequest) (*UpdateDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocument not implemented")
}
func (UnimplementedDocumentsServiceServer) DeleteDocument(context.Context, *DeleteDocumentRequest) (*DeleteDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocument not implemented")
}
func (UnimplementedDocumentsServiceServer) ToggleDocument(context.Context, *ToggleDocumentRequest) (*ToggleDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleDocument not implemented")
}
func (UnimplementedDocumentsServiceServer) ChangeDocumentOwner(context.Context, *ChangeDocumentOwnerRequest) (*ChangeDocumentOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeDocumentOwner not implemented")
}
func (UnimplementedDocumentsServiceServer) GetDocumentReferences(context.Context, *GetDocumentReferencesRequest) (*GetDocumentReferencesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentReferences not implemented")
}
func (UnimplementedDocumentsServiceServer) GetDocumentRelations(context.Context, *GetDocumentRelationsRequest) (*GetDocumentRelationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentRelations not implemented")
}
func (UnimplementedDocumentsServiceServer) AddDocumentReference(context.Context, *AddDocumentReferenceRequest) (*AddDocumentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocumentReference not implemented")
}
func (UnimplementedDocumentsServiceServer) RemoveDocumentReference(context.Context, *RemoveDocumentReferenceRequest) (*RemoveDocumentReferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocumentReference not implemented")
}
func (UnimplementedDocumentsServiceServer) AddDocumentRelation(context.Context, *AddDocumentRelationRequest) (*AddDocumentRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDocumentRelation not implemented")
}
func (UnimplementedDocumentsServiceServer) RemoveDocumentRelation(context.Context, *RemoveDocumentRelationRequest) (*RemoveDocumentRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDocumentRelation not implemented")
}
func (UnimplementedDocumentsServiceServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedDocumentsServiceServer) PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedDocumentsServiceServer) EditComment(context.Context, *EditCommentRequest) (*EditCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditComment not implemented")
}
func (UnimplementedDocumentsServiceServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedDocumentsServiceServer) GetDocumentAccess(context.Context, *GetDocumentAccessRequest) (*GetDocumentAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentAccess not implemented")
}
func (UnimplementedDocumentsServiceServer) SetDocumentAccess(context.Context, *SetDocumentAccessRequest) (*SetDocumentAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDocumentAccess not implemented")
}
func (UnimplementedDocumentsServiceServer) ListDocumentActivity(context.Context, *ListDocumentActivityRequest) (*ListDocumentActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentActivity not implemented")
}
func (UnimplementedDocumentsServiceServer) ListDocumentReqs(context.Context, *ListDocumentReqsRequest) (*ListDocumentReqsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentReqs not implemented")
}
func (UnimplementedDocumentsServiceServer) CreateDocumentReq(context.Context, *CreateDocumentReqRequest) (*CreateDocumentReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDocumentReq not implemented")
}
func (UnimplementedDocumentsServiceServer) UpdateDocumentReq(context.Context, *UpdateDocumentReqRequest) (*UpdateDocumentReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDocumentReq not implemented")
}
func (UnimplementedDocumentsServiceServer) DeleteDocumentReq(context.Context, *DeleteDocumentReqRequest) (*DeleteDocumentReqResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDocumentReq not implemented")
}
func (UnimplementedDocumentsServiceServer) ListUserDocuments(context.Context, *ListUserDocumentsRequest) (*ListUserDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserDocuments not implemented")
}
func (UnimplementedDocumentsServiceServer) ListCategories(context.Context, *ListCategoriesRequest) (*ListCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCategories not implemented")
}
func (UnimplementedDocumentsServiceServer) CreateOrUpdateCategory(context.Context, *CreateOrUpdateCategoryRequest) (*CreateOrUpdateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateCategory not implemented")
}
func (UnimplementedDocumentsServiceServer) DeleteCategory(context.Context, *DeleteCategoryRequest) (*DeleteCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategory not implemented")
}
func (UnimplementedDocumentsServiceServer) ListDocumentPins(context.Context, *ListDocumentPinsRequest) (*ListDocumentPinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDocumentPins not implemented")
}
func (UnimplementedDocumentsServiceServer) ToggleDocumentPin(context.Context, *ToggleDocumentPinRequest) (*ToggleDocumentPinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleDocumentPin not implemented")
}
func (UnimplementedDocumentsServiceServer) SetDocumentReminder(context.Context, *SetDocumentReminderRequest) (*SetDocumentReminderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDocumentReminder not implemented")
}
func (UnimplementedDocumentsServiceServer) mustEmbedUnimplementedDocumentsServiceServer() {}
func (UnimplementedDocumentsServiceServer) testEmbeddedByValue()                          {}

// UnsafeDocumentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentsServiceServer will
// result in compilation errors.
type UnsafeDocumentsServiceServer interface {
	mustEmbedUnimplementedDocumentsServiceServer()
}

func RegisterDocumentsServiceServer(s grpc.ServiceRegistrar, srv DocumentsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentsService_ServiceDesc, srv)
}

func _DocumentsService_ListTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListTemplates(ctx, req.(*ListTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListDocuments(ctx, req.(*ListDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetDocument(ctx, req.(*GetDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_CreateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).CreateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_CreateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).CreateDocument(ctx, req.(*CreateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_UpdateDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).UpdateDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_UpdateDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).UpdateDocument(ctx, req.(*UpdateDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_DeleteDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).DeleteDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_DeleteDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).DeleteDocument(ctx, req.(*DeleteDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ToggleDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ToggleDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ToggleDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ToggleDocument(ctx, req.(*ToggleDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ChangeDocumentOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeDocumentOwnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ChangeDocumentOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ChangeDocumentOwner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ChangeDocumentOwner(ctx, req.(*ChangeDocumentOwnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetDocumentReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentReferencesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetDocumentReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetDocumentReferences_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetDocumentReferences(ctx, req.(*GetDocumentReferencesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetDocumentRelations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentRelationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetDocumentRelations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetDocumentRelations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetDocumentRelations(ctx, req.(*GetDocumentRelationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_AddDocumentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).AddDocumentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_AddDocumentReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).AddDocumentReference(ctx, req.(*AddDocumentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_RemoveDocumentReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentReferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).RemoveDocumentReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_RemoveDocumentReference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).RemoveDocumentReference(ctx, req.(*RemoveDocumentReferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_AddDocumentRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDocumentRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).AddDocumentRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_AddDocumentRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).AddDocumentRelation(ctx, req.(*AddDocumentRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_RemoveDocumentRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDocumentRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).RemoveDocumentRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_RemoveDocumentRelation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).RemoveDocumentRelation(ctx, req.(*RemoveDocumentRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_PostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_EditComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).EditComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_EditComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).EditComment(ctx, req.(*EditCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_GetDocumentAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDocumentAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).GetDocumentAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_GetDocumentAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).GetDocumentAccess(ctx, req.(*GetDocumentAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_SetDocumentAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDocumentAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).SetDocumentAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_SetDocumentAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).SetDocumentAccess(ctx, req.(*SetDocumentAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListDocumentActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListDocumentActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListDocumentActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListDocumentActivity(ctx, req.(*ListDocumentActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListDocumentReqs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentReqsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListDocumentReqs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListDocumentReqs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListDocumentReqs(ctx, req.(*ListDocumentReqsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_CreateDocumentReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDocumentReqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).CreateDocumentReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_CreateDocumentReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).CreateDocumentReq(ctx, req.(*CreateDocumentReqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_UpdateDocumentReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDocumentReqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).UpdateDocumentReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_UpdateDocumentReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).UpdateDocumentReq(ctx, req.(*UpdateDocumentReqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_DeleteDocumentReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDocumentReqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).DeleteDocumentReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_DeleteDocumentReq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).DeleteDocumentReq(ctx, req.(*DeleteDocumentReqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListUserDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListUserDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListUserDocuments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListUserDocuments(ctx, req.(*ListUserDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListCategories(ctx, req.(*ListCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_CreateOrUpdateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).CreateOrUpdateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_CreateOrUpdateCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).CreateOrUpdateCategory(ctx, req.(*CreateOrUpdateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_DeleteCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).DeleteCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_DeleteCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).DeleteCategory(ctx, req.(*DeleteCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ListDocumentPins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDocumentPinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ListDocumentPins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ListDocumentPins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ListDocumentPins(ctx, req.(*ListDocumentPinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_ToggleDocumentPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleDocumentPinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).ToggleDocumentPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_ToggleDocumentPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).ToggleDocumentPin(ctx, req.(*ToggleDocumentPinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentsService_SetDocumentReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDocumentReminderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentsServiceServer).SetDocumentReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentsService_SetDocumentReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentsServiceServer).SetDocumentReminder(ctx, req.(*SetDocumentReminderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentsService_ServiceDesc is the grpc.ServiceDesc for DocumentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.DocumentsService",
	HandlerType: (*DocumentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplates",
			Handler:    _DocumentsService_ListTemplates_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _DocumentsService_GetTemplate_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _DocumentsService_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _DocumentsService_UpdateTemplate_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _DocumentsService_DeleteTemplate_Handler,
		},
		{
			MethodName: "ListDocuments",
			Handler:    _DocumentsService_ListDocuments_Handler,
		},
		{
			MethodName: "GetDocument",
			Handler:    _DocumentsService_GetDocument_Handler,
		},
		{
			MethodName: "CreateDocument",
			Handler:    _DocumentsService_CreateDocument_Handler,
		},
		{
			MethodName: "UpdateDocument",
			Handler:    _DocumentsService_UpdateDocument_Handler,
		},
		{
			MethodName: "DeleteDocument",
			Handler:    _DocumentsService_DeleteDocument_Handler,
		},
		{
			MethodName: "ToggleDocument",
			Handler:    _DocumentsService_ToggleDocument_Handler,
		},
		{
			MethodName: "ChangeDocumentOwner",
			Handler:    _DocumentsService_ChangeDocumentOwner_Handler,
		},
		{
			MethodName: "GetDocumentReferences",
			Handler:    _DocumentsService_GetDocumentReferences_Handler,
		},
		{
			MethodName: "GetDocumentRelations",
			Handler:    _DocumentsService_GetDocumentRelations_Handler,
		},
		{
			MethodName: "AddDocumentReference",
			Handler:    _DocumentsService_AddDocumentReference_Handler,
		},
		{
			MethodName: "RemoveDocumentReference",
			Handler:    _DocumentsService_RemoveDocumentReference_Handler,
		},
		{
			MethodName: "AddDocumentRelation",
			Handler:    _DocumentsService_AddDocumentRelation_Handler,
		},
		{
			MethodName: "RemoveDocumentRelation",
			Handler:    _DocumentsService_RemoveDocumentRelation_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _DocumentsService_GetComments_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _DocumentsService_PostComment_Handler,
		},
		{
			MethodName: "EditComment",
			Handler:    _DocumentsService_EditComment_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _DocumentsService_DeleteComment_Handler,
		},
		{
			MethodName: "GetDocumentAccess",
			Handler:    _DocumentsService_GetDocumentAccess_Handler,
		},
		{
			MethodName: "SetDocumentAccess",
			Handler:    _DocumentsService_SetDocumentAccess_Handler,
		},
		{
			MethodName: "ListDocumentActivity",
			Handler:    _DocumentsService_ListDocumentActivity_Handler,
		},
		{
			MethodName: "ListDocumentReqs",
			Handler:    _DocumentsService_ListDocumentReqs_Handler,
		},
		{
			MethodName: "CreateDocumentReq",
			Handler:    _DocumentsService_CreateDocumentReq_Handler,
		},
		{
			MethodName: "UpdateDocumentReq",
			Handler:    _DocumentsService_UpdateDocumentReq_Handler,
		},
		{
			MethodName: "DeleteDocumentReq",
			Handler:    _DocumentsService_DeleteDocumentReq_Handler,
		},
		{
			MethodName: "ListUserDocuments",
			Handler:    _DocumentsService_ListUserDocuments_Handler,
		},
		{
			MethodName: "ListCategories",
			Handler:    _DocumentsService_ListCategories_Handler,
		},
		{
			MethodName: "CreateOrUpdateCategory",
			Handler:    _DocumentsService_CreateOrUpdateCategory_Handler,
		},
		{
			MethodName: "DeleteCategory",
			Handler:    _DocumentsService_DeleteCategory_Handler,
		},
		{
			MethodName: "ListDocumentPins",
			Handler:    _DocumentsService_ListDocumentPins_Handler,
		},
		{
			MethodName: "ToggleDocumentPin",
			Handler:    _DocumentsService_ToggleDocumentPin_Handler,
		},
		{
			MethodName: "SetDocumentReminder",
			Handler:    _DocumentsService_SetDocumentReminder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/documents.proto",
}
