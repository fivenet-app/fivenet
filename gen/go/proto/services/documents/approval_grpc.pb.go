// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/approval.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApprovalService_GetPolicy_FullMethodName               = "/services.documents.ApprovalService/GetPolicy"
	ApprovalService_UpsertPolicy_FullMethodName            = "/services.documents.ApprovalService/UpsertPolicy"
	ApprovalService_StartApprovalRound_FullMethodName      = "/services.documents.ApprovalService/StartApprovalRound"
	ApprovalService_CompleteApprovalRound_FullMethodName   = "/services.documents.ApprovalService/CompleteApprovalRound"
	ApprovalService_RecomputePolicyCounters_FullMethodName = "/services.documents.ApprovalService/RecomputePolicyCounters"
	ApprovalService_ListApprovalAccess_FullMethodName      = "/services.documents.ApprovalService/ListApprovalAccess"
	ApprovalService_UpsertApprovalAccess_FullMethodName    = "/services.documents.ApprovalService/UpsertApprovalAccess"
	ApprovalService_DeleteApprovalAccess_FullMethodName    = "/services.documents.ApprovalService/DeleteApprovalAccess"
	ApprovalService_ListApprovalTasks_FullMethodName       = "/services.documents.ApprovalService/ListApprovalTasks"
	ApprovalService_DecideTask_FullMethodName              = "/services.documents.ApprovalService/DecideTask"
	ApprovalService_ReopenTask_FullMethodName              = "/services.documents.ApprovalService/ReopenTask"
)

// ApprovalServiceClient is the client API for ApprovalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalServiceClient interface {
	// Policy
	GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error)
	UpsertPolicy(ctx context.Context, in *UpsertPolicyRequest, opts ...grpc.CallOption) (*UpsertPolicyResponse, error)
	StartApprovalRound(ctx context.Context, in *StartApprovalRoundRequest, opts ...grpc.CallOption) (*StartApprovalRoundResponse, error)
	CompleteApprovalRound(ctx context.Context, in *CompleteApprovalRoundRequest, opts ...grpc.CallOption) (*CompleteApprovalRoundResponse, error)
	// Helpers
	RecomputePolicyCounters(ctx context.Context, in *RecomputePolicyCountersRequest, opts ...grpc.CallOption) (*RecomputePolicyCountersResponse, error)
	// Access (policy-scoped)
	ListApprovalAccess(ctx context.Context, in *ListApprovalAccessRequest, opts ...grpc.CallOption) (*ListApprovalAccessResponse, error)
	UpsertApprovalAccess(ctx context.Context, in *UpsertApprovalAccessRequest, opts ...grpc.CallOption) (*UpsertApprovalAccessResponse, error)
	DeleteApprovalAccess(ctx context.Context, in *DeleteApprovalAccessRequest, opts ...grpc.CallOption) (*DeleteApprovalAccessResponse, error)
	// Tasks
	ListApprovalTasks(ctx context.Context, in *ListApprovalTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error)
	DecideTask(ctx context.Context, in *DecideTaskRequest, opts ...grpc.CallOption) (*DecideTaskResponse, error)
	ReopenTask(ctx context.Context, in *ReopenTaskRequest, opts ...grpc.CallOption) (*ReopenTaskResponse, error)
}

type approvalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalServiceClient(cc grpc.ClientConnInterface) ApprovalServiceClient {
	return &approvalServiceClient{cc}
}

func (c *approvalServiceClient) GetPolicy(ctx context.Context, in *GetPolicyRequest, opts ...grpc.CallOption) (*GetPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPolicyResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) UpsertPolicy(ctx context.Context, in *UpsertPolicyRequest, opts ...grpc.CallOption) (*UpsertPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertPolicyResponse)
	err := c.cc.Invoke(ctx, ApprovalService_UpsertPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) StartApprovalRound(ctx context.Context, in *StartApprovalRoundRequest, opts ...grpc.CallOption) (*StartApprovalRoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartApprovalRoundResponse)
	err := c.cc.Invoke(ctx, ApprovalService_StartApprovalRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CompleteApprovalRound(ctx context.Context, in *CompleteApprovalRoundRequest, opts ...grpc.CallOption) (*CompleteApprovalRoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteApprovalRoundResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CompleteApprovalRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) RecomputePolicyCounters(ctx context.Context, in *RecomputePolicyCountersRequest, opts ...grpc.CallOption) (*RecomputePolicyCountersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputePolicyCountersResponse)
	err := c.cc.Invoke(ctx, ApprovalService_RecomputePolicyCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovalAccess(ctx context.Context, in *ListApprovalAccessRequest, opts ...grpc.CallOption) (*ListApprovalAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalAccessResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovalAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) UpsertApprovalAccess(ctx context.Context, in *UpsertApprovalAccessRequest, opts ...grpc.CallOption) (*UpsertApprovalAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertApprovalAccessResponse)
	err := c.cc.Invoke(ctx, ApprovalService_UpsertApprovalAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) DeleteApprovalAccess(ctx context.Context, in *DeleteApprovalAccessRequest, opts ...grpc.CallOption) (*DeleteApprovalAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApprovalAccessResponse)
	err := c.cc.Invoke(ctx, ApprovalService_DeleteApprovalAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovalTasks(ctx context.Context, in *ListApprovalTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovalTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) DecideTask(ctx context.Context, in *DecideTaskRequest, opts ...grpc.CallOption) (*DecideTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecideTaskResponse)
	err := c.cc.Invoke(ctx, ApprovalService_DecideTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ReopenTask(ctx context.Context, in *ReopenTaskRequest, opts ...grpc.CallOption) (*ReopenTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReopenTaskResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ReopenTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalServiceServer is the server API for ApprovalService service.
// All implementations must embed UnimplementedApprovalServiceServer
// for forward compatibility.
type ApprovalServiceServer interface {
	// Policy
	GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error)
	UpsertPolicy(context.Context, *UpsertPolicyRequest) (*UpsertPolicyResponse, error)
	StartApprovalRound(context.Context, *StartApprovalRoundRequest) (*StartApprovalRoundResponse, error)
	CompleteApprovalRound(context.Context, *CompleteApprovalRoundRequest) (*CompleteApprovalRoundResponse, error)
	// Helpers
	RecomputePolicyCounters(context.Context, *RecomputePolicyCountersRequest) (*RecomputePolicyCountersResponse, error)
	// Access (policy-scoped)
	ListApprovalAccess(context.Context, *ListApprovalAccessRequest) (*ListApprovalAccessResponse, error)
	UpsertApprovalAccess(context.Context, *UpsertApprovalAccessRequest) (*UpsertApprovalAccessResponse, error)
	DeleteApprovalAccess(context.Context, *DeleteApprovalAccessRequest) (*DeleteApprovalAccessResponse, error)
	// Tasks
	ListApprovalTasks(context.Context, *ListApprovalTasksRequest) (*ListApprovalTasksResponse, error)
	DecideTask(context.Context, *DecideTaskRequest) (*DecideTaskResponse, error)
	ReopenTask(context.Context, *ReopenTaskRequest) (*ReopenTaskResponse, error)
	mustEmbedUnimplementedApprovalServiceServer()
}

// UnimplementedApprovalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApprovalServiceServer struct{}

func (UnimplementedApprovalServiceServer) GetPolicy(context.Context, *GetPolicyRequest) (*GetPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPolicy not implemented")
}
func (UnimplementedApprovalServiceServer) UpsertPolicy(context.Context, *UpsertPolicyRequest) (*UpsertPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertPolicy not implemented")
}
func (UnimplementedApprovalServiceServer) StartApprovalRound(context.Context, *StartApprovalRoundRequest) (*StartApprovalRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartApprovalRound not implemented")
}
func (UnimplementedApprovalServiceServer) CompleteApprovalRound(context.Context, *CompleteApprovalRoundRequest) (*CompleteApprovalRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteApprovalRound not implemented")
}
func (UnimplementedApprovalServiceServer) RecomputePolicyCounters(context.Context, *RecomputePolicyCountersRequest) (*RecomputePolicyCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputePolicyCounters not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovalAccess(context.Context, *ListApprovalAccessRequest) (*ListApprovalAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalAccess not implemented")
}
func (UnimplementedApprovalServiceServer) UpsertApprovalAccess(context.Context, *UpsertApprovalAccessRequest) (*UpsertApprovalAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertApprovalAccess not implemented")
}
func (UnimplementedApprovalServiceServer) DeleteApprovalAccess(context.Context, *DeleteApprovalAccessRequest) (*DeleteApprovalAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApprovalAccess not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovalTasks(context.Context, *ListApprovalTasksRequest) (*ListApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalTasks not implemented")
}
func (UnimplementedApprovalServiceServer) DecideTask(context.Context, *DecideTaskRequest) (*DecideTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideTask not implemented")
}
func (UnimplementedApprovalServiceServer) ReopenTask(context.Context, *ReopenTaskRequest) (*ReopenTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReopenTask not implemented")
}
func (UnimplementedApprovalServiceServer) mustEmbedUnimplementedApprovalServiceServer() {}
func (UnimplementedApprovalServiceServer) testEmbeddedByValue()                         {}

// UnsafeApprovalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalServiceServer will
// result in compilation errors.
type UnsafeApprovalServiceServer interface {
	mustEmbedUnimplementedApprovalServiceServer()
}

func RegisterApprovalServiceServer(s grpc.ServiceRegistrar, srv ApprovalServiceServer) {
	// If the following call pancis, it indicates UnimplementedApprovalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApprovalService_ServiceDesc, srv)
}

func _ApprovalService_GetPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetPolicy(ctx, req.(*GetPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_UpsertPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).UpsertPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_UpsertPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).UpsertPolicy(ctx, req.(*UpsertPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_StartApprovalRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartApprovalRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).StartApprovalRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_StartApprovalRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).StartApprovalRound(ctx, req.(*StartApprovalRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CompleteApprovalRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteApprovalRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CompleteApprovalRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CompleteApprovalRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CompleteApprovalRound(ctx, req.(*CompleteApprovalRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_RecomputePolicyCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputePolicyCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).RecomputePolicyCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_RecomputePolicyCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).RecomputePolicyCounters(ctx, req.(*RecomputePolicyCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovalAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovalAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovalAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovalAccess(ctx, req.(*ListApprovalAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_UpsertApprovalAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApprovalAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).UpsertApprovalAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_UpsertApprovalAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).UpsertApprovalAccess(ctx, req.(*UpsertApprovalAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_DeleteApprovalAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApprovalAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).DeleteApprovalAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_DeleteApprovalAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).DeleteApprovalAccess(ctx, req.(*DeleteApprovalAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovalTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovalTasks(ctx, req.(*ListApprovalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_DecideTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).DecideTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_DecideTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).DecideTask(ctx, req.(*DecideTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ReopenTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReopenTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ReopenTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ReopenTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ReopenTask(ctx, req.(*ReopenTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalService_ServiceDesc is the grpc.ServiceDesc for ApprovalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.ApprovalService",
	HandlerType: (*ApprovalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPolicy",
			Handler:    _ApprovalService_GetPolicy_Handler,
		},
		{
			MethodName: "UpsertPolicy",
			Handler:    _ApprovalService_UpsertPolicy_Handler,
		},
		{
			MethodName: "StartApprovalRound",
			Handler:    _ApprovalService_StartApprovalRound_Handler,
		},
		{
			MethodName: "CompleteApprovalRound",
			Handler:    _ApprovalService_CompleteApprovalRound_Handler,
		},
		{
			MethodName: "RecomputePolicyCounters",
			Handler:    _ApprovalService_RecomputePolicyCounters_Handler,
		},
		{
			MethodName: "ListApprovalAccess",
			Handler:    _ApprovalService_ListApprovalAccess_Handler,
		},
		{
			MethodName: "UpsertApprovalAccess",
			Handler:    _ApprovalService_UpsertApprovalAccess_Handler,
		},
		{
			MethodName: "DeleteApprovalAccess",
			Handler:    _ApprovalService_DeleteApprovalAccess_Handler,
		},
		{
			MethodName: "ListApprovalTasks",
			Handler:    _ApprovalService_ListApprovalTasks_Handler,
		},
		{
			MethodName: "DecideTask",
			Handler:    _ApprovalService_DecideTask_Handler,
		},
		{
			MethodName: "ReopenTask",
			Handler:    _ApprovalService_ReopenTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/approval.proto",
}
