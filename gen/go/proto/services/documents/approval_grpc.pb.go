// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/approval.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApprovalService_GetApprovalPolicy_FullMethodName               = "/services.documents.ApprovalService/GetApprovalPolicy"
	ApprovalService_UpsertApprovalPolicy_FullMethodName            = "/services.documents.ApprovalService/UpsertApprovalPolicy"
	ApprovalService_StartApprovalRound_FullMethodName              = "/services.documents.ApprovalService/StartApprovalRound"
	ApprovalService_CompleteApprovalRound_FullMethodName           = "/services.documents.ApprovalService/CompleteApprovalRound"
	ApprovalService_ListApprovalTasks_FullMethodName               = "/services.documents.ApprovalService/ListApprovalTasks"
	ApprovalService_DecideApprovalTask_FullMethodName              = "/services.documents.ApprovalService/DecideApprovalTask"
	ApprovalService_ReopenApprovalTask_FullMethodName              = "/services.documents.ApprovalService/ReopenApprovalTask"
	ApprovalService_RecomputeApprovalPolicyCounters_FullMethodName = "/services.documents.ApprovalService/RecomputeApprovalPolicyCounters"
)

// ApprovalServiceClient is the client API for ApprovalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalServiceClient interface {
	// Policy
	GetApprovalPolicy(ctx context.Context, in *GetApprovalPolicyRequest, opts ...grpc.CallOption) (*GetApprovalPolicyResponse, error)
	UpsertApprovalPolicy(ctx context.Context, in *UpsertApprovalPolicyRequest, opts ...grpc.CallOption) (*UpsertApprovalPolicyResponse, error)
	StartApprovalRound(ctx context.Context, in *StartApprovalRoundRequest, opts ...grpc.CallOption) (*StartApprovalRoundResponse, error)
	CompleteApprovalRound(ctx context.Context, in *CompleteApprovalRoundRequest, opts ...grpc.CallOption) (*CompleteApprovalRoundResponse, error)
	// Tasks
	ListApprovalTasks(ctx context.Context, in *ListApprovalTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error)
	DecideApprovalTask(ctx context.Context, in *DecideApprovalTaskRequest, opts ...grpc.CallOption) (*DecideApprovalTaskResponse, error)
	ReopenApprovalTask(ctx context.Context, in *ReopenApprovalTaskRequest, opts ...grpc.CallOption) (*ReopenApprovalTaskResponse, error)
	// Helpers
	RecomputeApprovalPolicyCounters(ctx context.Context, in *RecomputeApprovalPolicyCountersRequest, opts ...grpc.CallOption) (*RecomputeApprovalPolicyCountersResponse, error)
}

type approvalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalServiceClient(cc grpc.ClientConnInterface) ApprovalServiceClient {
	return &approvalServiceClient{cc}
}

func (c *approvalServiceClient) GetApprovalPolicy(ctx context.Context, in *GetApprovalPolicyRequest, opts ...grpc.CallOption) (*GetApprovalPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApprovalPolicyResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetApprovalPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) UpsertApprovalPolicy(ctx context.Context, in *UpsertApprovalPolicyRequest, opts ...grpc.CallOption) (*UpsertApprovalPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertApprovalPolicyResponse)
	err := c.cc.Invoke(ctx, ApprovalService_UpsertApprovalPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) StartApprovalRound(ctx context.Context, in *StartApprovalRoundRequest, opts ...grpc.CallOption) (*StartApprovalRoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartApprovalRoundResponse)
	err := c.cc.Invoke(ctx, ApprovalService_StartApprovalRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CompleteApprovalRound(ctx context.Context, in *CompleteApprovalRoundRequest, opts ...grpc.CallOption) (*CompleteApprovalRoundResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteApprovalRoundResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CompleteApprovalRound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovalTasks(ctx context.Context, in *ListApprovalTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovalTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) DecideApprovalTask(ctx context.Context, in *DecideApprovalTaskRequest, opts ...grpc.CallOption) (*DecideApprovalTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecideApprovalTaskResponse)
	err := c.cc.Invoke(ctx, ApprovalService_DecideApprovalTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ReopenApprovalTask(ctx context.Context, in *ReopenApprovalTaskRequest, opts ...grpc.CallOption) (*ReopenApprovalTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReopenApprovalTaskResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ReopenApprovalTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) RecomputeApprovalPolicyCounters(ctx context.Context, in *RecomputeApprovalPolicyCountersRequest, opts ...grpc.CallOption) (*RecomputeApprovalPolicyCountersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputeApprovalPolicyCountersResponse)
	err := c.cc.Invoke(ctx, ApprovalService_RecomputeApprovalPolicyCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalServiceServer is the server API for ApprovalService service.
// All implementations must embed UnimplementedApprovalServiceServer
// for forward compatibility.
type ApprovalServiceServer interface {
	// Policy
	GetApprovalPolicy(context.Context, *GetApprovalPolicyRequest) (*GetApprovalPolicyResponse, error)
	UpsertApprovalPolicy(context.Context, *UpsertApprovalPolicyRequest) (*UpsertApprovalPolicyResponse, error)
	StartApprovalRound(context.Context, *StartApprovalRoundRequest) (*StartApprovalRoundResponse, error)
	CompleteApprovalRound(context.Context, *CompleteApprovalRoundRequest) (*CompleteApprovalRoundResponse, error)
	// Tasks
	ListApprovalTasks(context.Context, *ListApprovalTasksRequest) (*ListApprovalTasksResponse, error)
	DecideApprovalTask(context.Context, *DecideApprovalTaskRequest) (*DecideApprovalTaskResponse, error)
	ReopenApprovalTask(context.Context, *ReopenApprovalTaskRequest) (*ReopenApprovalTaskResponse, error)
	// Helpers
	RecomputeApprovalPolicyCounters(context.Context, *RecomputeApprovalPolicyCountersRequest) (*RecomputeApprovalPolicyCountersResponse, error)
	mustEmbedUnimplementedApprovalServiceServer()
}

// UnimplementedApprovalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApprovalServiceServer struct{}

func (UnimplementedApprovalServiceServer) GetApprovalPolicy(context.Context, *GetApprovalPolicyRequest) (*GetApprovalPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovalPolicy not implemented")
}
func (UnimplementedApprovalServiceServer) UpsertApprovalPolicy(context.Context, *UpsertApprovalPolicyRequest) (*UpsertApprovalPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertApprovalPolicy not implemented")
}
func (UnimplementedApprovalServiceServer) StartApprovalRound(context.Context, *StartApprovalRoundRequest) (*StartApprovalRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartApprovalRound not implemented")
}
func (UnimplementedApprovalServiceServer) CompleteApprovalRound(context.Context, *CompleteApprovalRoundRequest) (*CompleteApprovalRoundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteApprovalRound not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovalTasks(context.Context, *ListApprovalTasksRequest) (*ListApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalTasks not implemented")
}
func (UnimplementedApprovalServiceServer) DecideApprovalTask(context.Context, *DecideApprovalTaskRequest) (*DecideApprovalTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideApprovalTask not implemented")
}
func (UnimplementedApprovalServiceServer) ReopenApprovalTask(context.Context, *ReopenApprovalTaskRequest) (*ReopenApprovalTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReopenApprovalTask not implemented")
}
func (UnimplementedApprovalServiceServer) RecomputeApprovalPolicyCounters(context.Context, *RecomputeApprovalPolicyCountersRequest) (*RecomputeApprovalPolicyCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputeApprovalPolicyCounters not implemented")
}
func (UnimplementedApprovalServiceServer) mustEmbedUnimplementedApprovalServiceServer() {}
func (UnimplementedApprovalServiceServer) testEmbeddedByValue()                         {}

// UnsafeApprovalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalServiceServer will
// result in compilation errors.
type UnsafeApprovalServiceServer interface {
	mustEmbedUnimplementedApprovalServiceServer()
}

func RegisterApprovalServiceServer(s grpc.ServiceRegistrar, srv ApprovalServiceServer) {
	// If the following call pancis, it indicates UnimplementedApprovalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApprovalService_ServiceDesc, srv)
}

func _ApprovalService_GetApprovalPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovalPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetApprovalPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetApprovalPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetApprovalPolicy(ctx, req.(*GetApprovalPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_UpsertApprovalPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApprovalPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).UpsertApprovalPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_UpsertApprovalPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).UpsertApprovalPolicy(ctx, req.(*UpsertApprovalPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_StartApprovalRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartApprovalRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).StartApprovalRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_StartApprovalRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).StartApprovalRound(ctx, req.(*StartApprovalRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CompleteApprovalRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteApprovalRoundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CompleteApprovalRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CompleteApprovalRound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CompleteApprovalRound(ctx, req.(*CompleteApprovalRoundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovalTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovalTasks(ctx, req.(*ListApprovalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_DecideApprovalTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideApprovalTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).DecideApprovalTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_DecideApprovalTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).DecideApprovalTask(ctx, req.(*DecideApprovalTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ReopenApprovalTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReopenApprovalTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ReopenApprovalTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ReopenApprovalTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ReopenApprovalTask(ctx, req.(*ReopenApprovalTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_RecomputeApprovalPolicyCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputeApprovalPolicyCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).RecomputeApprovalPolicyCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_RecomputeApprovalPolicyCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).RecomputeApprovalPolicyCounters(ctx, req.(*RecomputeApprovalPolicyCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalService_ServiceDesc is the grpc.ServiceDesc for ApprovalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.ApprovalService",
	HandlerType: (*ApprovalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApprovalPolicy",
			Handler:    _ApprovalService_GetApprovalPolicy_Handler,
		},
		{
			MethodName: "UpsertApprovalPolicy",
			Handler:    _ApprovalService_UpsertApprovalPolicy_Handler,
		},
		{
			MethodName: "StartApprovalRound",
			Handler:    _ApprovalService_StartApprovalRound_Handler,
		},
		{
			MethodName: "CompleteApprovalRound",
			Handler:    _ApprovalService_CompleteApprovalRound_Handler,
		},
		{
			MethodName: "ListApprovalTasks",
			Handler:    _ApprovalService_ListApprovalTasks_Handler,
		},
		{
			MethodName: "DecideApprovalTask",
			Handler:    _ApprovalService_DecideApprovalTask_Handler,
		},
		{
			MethodName: "ReopenApprovalTask",
			Handler:    _ApprovalService_ReopenApprovalTask_Handler,
		},
		{
			MethodName: "RecomputeApprovalPolicyCounters",
			Handler:    _ApprovalService_RecomputeApprovalPolicyCounters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/approval.proto",
}
