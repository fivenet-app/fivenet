// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/approval.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApprovalService_StartReview_FullMethodName         = "/services.documents.ApprovalService/StartReview"
	ApprovalService_GetApprovalPanel_FullMethodName    = "/services.documents.ApprovalService/GetApprovalPanel"
	ApprovalService_ListMyApprovalTasks_FullMethodName = "/services.documents.ApprovalService/ListMyApprovalTasks"
	ApprovalService_DecideApprovalTask_FullMethodName  = "/services.documents.ApprovalService/DecideApprovalTask"
	ApprovalService_AddReviewers_FullMethodName        = "/services.documents.ApprovalService/AddReviewers"
	ApprovalService_CancelReviewTasks_FullMethodName   = "/services.documents.ApprovalService/CancelReviewTasks"
)

// ApprovalServiceClient is the client API for ApprovalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalServiceClient interface {
	StartReview(ctx context.Context, in *StartReviewRequest, opts ...grpc.CallOption) (*StartReviewResponse, error)
	GetApprovalPanel(ctx context.Context, in *GetApprovalPanelRequest, opts ...grpc.CallOption) (*GetApprovalPanelResponse, error)
	ListMyApprovalTasks(ctx context.Context, in *ListMyApprovalTasksRequest, opts ...grpc.CallOption) (*ListMyApprovalTasksResponse, error)
	DecideApprovalTask(ctx context.Context, in *DecideApprovalTaskRequest, opts ...grpc.CallOption) (*DecideApprovalTaskResponse, error)
	// Light-weight mutations leaders will need:
	AddReviewers(ctx context.Context, in *AddReviewersRequest, opts ...grpc.CallOption) (*AddReviewersResponse, error)
	CancelReviewTasks(ctx context.Context, in *CancelReviewTasksRequest, opts ...grpc.CallOption) (*CancelReviewTasksResponse, error)
}

type approvalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalServiceClient(cc grpc.ClientConnInterface) ApprovalServiceClient {
	return &approvalServiceClient{cc}
}

func (c *approvalServiceClient) StartReview(ctx context.Context, in *StartReviewRequest, opts ...grpc.CallOption) (*StartReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartReviewResponse)
	err := c.cc.Invoke(ctx, ApprovalService_StartReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) GetApprovalPanel(ctx context.Context, in *GetApprovalPanelRequest, opts ...grpc.CallOption) (*GetApprovalPanelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetApprovalPanelResponse)
	err := c.cc.Invoke(ctx, ApprovalService_GetApprovalPanel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListMyApprovalTasks(ctx context.Context, in *ListMyApprovalTasksRequest, opts ...grpc.CallOption) (*ListMyApprovalTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMyApprovalTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListMyApprovalTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) DecideApprovalTask(ctx context.Context, in *DecideApprovalTaskRequest, opts ...grpc.CallOption) (*DecideApprovalTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecideApprovalTaskResponse)
	err := c.cc.Invoke(ctx, ApprovalService_DecideApprovalTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) AddReviewers(ctx context.Context, in *AddReviewersRequest, opts ...grpc.CallOption) (*AddReviewersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddReviewersResponse)
	err := c.cc.Invoke(ctx, ApprovalService_AddReviewers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) CancelReviewTasks(ctx context.Context, in *CancelReviewTasksRequest, opts ...grpc.CallOption) (*CancelReviewTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelReviewTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_CancelReviewTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalServiceServer is the server API for ApprovalService service.
// All implementations must embed UnimplementedApprovalServiceServer
// for forward compatibility.
type ApprovalServiceServer interface {
	StartReview(context.Context, *StartReviewRequest) (*StartReviewResponse, error)
	GetApprovalPanel(context.Context, *GetApprovalPanelRequest) (*GetApprovalPanelResponse, error)
	ListMyApprovalTasks(context.Context, *ListMyApprovalTasksRequest) (*ListMyApprovalTasksResponse, error)
	DecideApprovalTask(context.Context, *DecideApprovalTaskRequest) (*DecideApprovalTaskResponse, error)
	// Light-weight mutations leaders will need:
	AddReviewers(context.Context, *AddReviewersRequest) (*AddReviewersResponse, error)
	CancelReviewTasks(context.Context, *CancelReviewTasksRequest) (*CancelReviewTasksResponse, error)
	mustEmbedUnimplementedApprovalServiceServer()
}

// UnimplementedApprovalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApprovalServiceServer struct{}

func (UnimplementedApprovalServiceServer) StartReview(context.Context, *StartReviewRequest) (*StartReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartReview not implemented")
}
func (UnimplementedApprovalServiceServer) GetApprovalPanel(context.Context, *GetApprovalPanelRequest) (*GetApprovalPanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApprovalPanel not implemented")
}
func (UnimplementedApprovalServiceServer) ListMyApprovalTasks(context.Context, *ListMyApprovalTasksRequest) (*ListMyApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyApprovalTasks not implemented")
}
func (UnimplementedApprovalServiceServer) DecideApprovalTask(context.Context, *DecideApprovalTaskRequest) (*DecideApprovalTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideApprovalTask not implemented")
}
func (UnimplementedApprovalServiceServer) AddReviewers(context.Context, *AddReviewersRequest) (*AddReviewersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddReviewers not implemented")
}
func (UnimplementedApprovalServiceServer) CancelReviewTasks(context.Context, *CancelReviewTasksRequest) (*CancelReviewTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReviewTasks not implemented")
}
func (UnimplementedApprovalServiceServer) mustEmbedUnimplementedApprovalServiceServer() {}
func (UnimplementedApprovalServiceServer) testEmbeddedByValue()                         {}

// UnsafeApprovalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalServiceServer will
// result in compilation errors.
type UnsafeApprovalServiceServer interface {
	mustEmbedUnimplementedApprovalServiceServer()
}

func RegisterApprovalServiceServer(s grpc.ServiceRegistrar, srv ApprovalServiceServer) {
	// If the following call pancis, it indicates UnimplementedApprovalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApprovalService_ServiceDesc, srv)
}

func _ApprovalService_StartReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).StartReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_StartReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).StartReview(ctx, req.(*StartReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_GetApprovalPanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApprovalPanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).GetApprovalPanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_GetApprovalPanel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).GetApprovalPanel(ctx, req.(*GetApprovalPanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListMyApprovalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMyApprovalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListMyApprovalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListMyApprovalTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListMyApprovalTasks(ctx, req.(*ListMyApprovalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_DecideApprovalTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideApprovalTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).DecideApprovalTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_DecideApprovalTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).DecideApprovalTask(ctx, req.(*DecideApprovalTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_AddReviewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddReviewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).AddReviewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_AddReviewers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).AddReviewers(ctx, req.(*AddReviewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_CancelReviewTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReviewTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).CancelReviewTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_CancelReviewTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).CancelReviewTasks(ctx, req.(*CancelReviewTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalService_ServiceDesc is the grpc.ServiceDesc for ApprovalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.ApprovalService",
	HandlerType: (*ApprovalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartReview",
			Handler:    _ApprovalService_StartReview_Handler,
		},
		{
			MethodName: "GetApprovalPanel",
			Handler:    _ApprovalService_GetApprovalPanel_Handler,
		},
		{
			MethodName: "ListMyApprovalTasks",
			Handler:    _ApprovalService_ListMyApprovalTasks_Handler,
		},
		{
			MethodName: "DecideApprovalTask",
			Handler:    _ApprovalService_DecideApprovalTask_Handler,
		},
		{
			MethodName: "AddReviewers",
			Handler:    _ApprovalService_AddReviewers_Handler,
		},
		{
			MethodName: "CancelReviewTasks",
			Handler:    _ApprovalService_CancelReviewTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/approval.proto",
}
