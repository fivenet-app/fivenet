// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/approval.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApprovalService_ListApprovalTasksInbox_FullMethodName          = "/services.documents.ApprovalService/ListApprovalTasksInbox"
	ApprovalService_ListApprovalPolicies_FullMethodName            = "/services.documents.ApprovalService/ListApprovalPolicies"
	ApprovalService_UpsertApprovalPolicy_FullMethodName            = "/services.documents.ApprovalService/UpsertApprovalPolicy"
	ApprovalService_ListApprovalTasks_FullMethodName               = "/services.documents.ApprovalService/ListApprovalTasks"
	ApprovalService_UpsertApprovalTasks_FullMethodName             = "/services.documents.ApprovalService/UpsertApprovalTasks"
	ApprovalService_DeleteApprovalTasks_FullMethodName             = "/services.documents.ApprovalService/DeleteApprovalTasks"
	ApprovalService_ListApprovals_FullMethodName                   = "/services.documents.ApprovalService/ListApprovals"
	ApprovalService_RevokeApproval_FullMethodName                  = "/services.documents.ApprovalService/RevokeApproval"
	ApprovalService_DecideApproval_FullMethodName                  = "/services.documents.ApprovalService/DecideApproval"
	ApprovalService_ReopenApprovalTask_FullMethodName              = "/services.documents.ApprovalService/ReopenApprovalTask"
	ApprovalService_RecomputeApprovalPolicyCounters_FullMethodName = "/services.documents.ApprovalService/RecomputeApprovalPolicyCounters"
)

// ApprovalServiceClient is the client API for ApprovalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApprovalServiceClient interface {
	// Inbox (for tasks assigned to user)
	ListApprovalTasksInbox(ctx context.Context, in *ListApprovalTasksInboxRequest, opts ...grpc.CallOption) (*ListApprovalTasksInboxResponse, error)
	// Policies
	ListApprovalPolicies(ctx context.Context, in *ListApprovalPoliciesRequest, opts ...grpc.CallOption) (*ListApprovalPoliciesResponse, error)
	UpsertApprovalPolicy(ctx context.Context, in *UpsertApprovalPolicyRequest, opts ...grpc.CallOption) (*UpsertApprovalPolicyResponse, error)
	// Tasks
	ListApprovalTasks(ctx context.Context, in *ListApprovalTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error)
	UpsertApprovalTasks(ctx context.Context, in *UpsertApprovalTasksRequest, opts ...grpc.CallOption) (*UpsertApprovalTasksResponse, error)
	DeleteApprovalTasks(ctx context.Context, in *DeleteApprovalTasksRequest, opts ...grpc.CallOption) (*DeleteApprovalTasksResponse, error)
	// Approval
	ListApprovals(ctx context.Context, in *ListApprovalsRequest, opts ...grpc.CallOption) (*ListApprovalsResponse, error)
	RevokeApproval(ctx context.Context, in *RevokeApprovalRequest, opts ...grpc.CallOption) (*RevokeApprovalResponse, error)
	DecideApproval(ctx context.Context, in *DecideApprovalRequest, opts ...grpc.CallOption) (*DecideApprovalResponse, error)
	ReopenApprovalTask(ctx context.Context, in *ReopenApprovalTaskRequest, opts ...grpc.CallOption) (*ReopenApprovalTaskResponse, error)
	// Helpers
	RecomputeApprovalPolicyCounters(ctx context.Context, in *RecomputeApprovalPolicyCountersRequest, opts ...grpc.CallOption) (*RecomputeApprovalPolicyCountersResponse, error)
}

type approvalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApprovalServiceClient(cc grpc.ClientConnInterface) ApprovalServiceClient {
	return &approvalServiceClient{cc}
}

func (c *approvalServiceClient) ListApprovalTasksInbox(ctx context.Context, in *ListApprovalTasksInboxRequest, opts ...grpc.CallOption) (*ListApprovalTasksInboxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalTasksInboxResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovalTasksInbox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovalPolicies(ctx context.Context, in *ListApprovalPoliciesRequest, opts ...grpc.CallOption) (*ListApprovalPoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalPoliciesResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovalPolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) UpsertApprovalPolicy(ctx context.Context, in *UpsertApprovalPolicyRequest, opts ...grpc.CallOption) (*UpsertApprovalPolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertApprovalPolicyResponse)
	err := c.cc.Invoke(ctx, ApprovalService_UpsertApprovalPolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovalTasks(ctx context.Context, in *ListApprovalTasksRequest, opts ...grpc.CallOption) (*ListApprovalTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovalTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) UpsertApprovalTasks(ctx context.Context, in *UpsertApprovalTasksRequest, opts ...grpc.CallOption) (*UpsertApprovalTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertApprovalTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_UpsertApprovalTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) DeleteApprovalTasks(ctx context.Context, in *DeleteApprovalTasksRequest, opts ...grpc.CallOption) (*DeleteApprovalTasksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteApprovalTasksResponse)
	err := c.cc.Invoke(ctx, ApprovalService_DeleteApprovalTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ListApprovals(ctx context.Context, in *ListApprovalsRequest, opts ...grpc.CallOption) (*ListApprovalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListApprovalsResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ListApprovals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) RevokeApproval(ctx context.Context, in *RevokeApprovalRequest, opts ...grpc.CallOption) (*RevokeApprovalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeApprovalResponse)
	err := c.cc.Invoke(ctx, ApprovalService_RevokeApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) DecideApproval(ctx context.Context, in *DecideApprovalRequest, opts ...grpc.CallOption) (*DecideApprovalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecideApprovalResponse)
	err := c.cc.Invoke(ctx, ApprovalService_DecideApproval_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) ReopenApprovalTask(ctx context.Context, in *ReopenApprovalTaskRequest, opts ...grpc.CallOption) (*ReopenApprovalTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReopenApprovalTaskResponse)
	err := c.cc.Invoke(ctx, ApprovalService_ReopenApprovalTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approvalServiceClient) RecomputeApprovalPolicyCounters(ctx context.Context, in *RecomputeApprovalPolicyCountersRequest, opts ...grpc.CallOption) (*RecomputeApprovalPolicyCountersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputeApprovalPolicyCountersResponse)
	err := c.cc.Invoke(ctx, ApprovalService_RecomputeApprovalPolicyCounters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApprovalServiceServer is the server API for ApprovalService service.
// All implementations must embed UnimplementedApprovalServiceServer
// for forward compatibility.
type ApprovalServiceServer interface {
	// Inbox (for tasks assigned to user)
	ListApprovalTasksInbox(context.Context, *ListApprovalTasksInboxRequest) (*ListApprovalTasksInboxResponse, error)
	// Policies
	ListApprovalPolicies(context.Context, *ListApprovalPoliciesRequest) (*ListApprovalPoliciesResponse, error)
	UpsertApprovalPolicy(context.Context, *UpsertApprovalPolicyRequest) (*UpsertApprovalPolicyResponse, error)
	// Tasks
	ListApprovalTasks(context.Context, *ListApprovalTasksRequest) (*ListApprovalTasksResponse, error)
	UpsertApprovalTasks(context.Context, *UpsertApprovalTasksRequest) (*UpsertApprovalTasksResponse, error)
	DeleteApprovalTasks(context.Context, *DeleteApprovalTasksRequest) (*DeleteApprovalTasksResponse, error)
	// Approval
	ListApprovals(context.Context, *ListApprovalsRequest) (*ListApprovalsResponse, error)
	RevokeApproval(context.Context, *RevokeApprovalRequest) (*RevokeApprovalResponse, error)
	DecideApproval(context.Context, *DecideApprovalRequest) (*DecideApprovalResponse, error)
	ReopenApprovalTask(context.Context, *ReopenApprovalTaskRequest) (*ReopenApprovalTaskResponse, error)
	// Helpers
	RecomputeApprovalPolicyCounters(context.Context, *RecomputeApprovalPolicyCountersRequest) (*RecomputeApprovalPolicyCountersResponse, error)
	mustEmbedUnimplementedApprovalServiceServer()
}

// UnimplementedApprovalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApprovalServiceServer struct{}

func (UnimplementedApprovalServiceServer) ListApprovalTasksInbox(context.Context, *ListApprovalTasksInboxRequest) (*ListApprovalTasksInboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalTasksInbox not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovalPolicies(context.Context, *ListApprovalPoliciesRequest) (*ListApprovalPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalPolicies not implemented")
}
func (UnimplementedApprovalServiceServer) UpsertApprovalPolicy(context.Context, *UpsertApprovalPolicyRequest) (*UpsertApprovalPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertApprovalPolicy not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovalTasks(context.Context, *ListApprovalTasksRequest) (*ListApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovalTasks not implemented")
}
func (UnimplementedApprovalServiceServer) UpsertApprovalTasks(context.Context, *UpsertApprovalTasksRequest) (*UpsertApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertApprovalTasks not implemented")
}
func (UnimplementedApprovalServiceServer) DeleteApprovalTasks(context.Context, *DeleteApprovalTasksRequest) (*DeleteApprovalTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApprovalTasks not implemented")
}
func (UnimplementedApprovalServiceServer) ListApprovals(context.Context, *ListApprovalsRequest) (*ListApprovalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListApprovals not implemented")
}
func (UnimplementedApprovalServiceServer) RevokeApproval(context.Context, *RevokeApprovalRequest) (*RevokeApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeApproval not implemented")
}
func (UnimplementedApprovalServiceServer) DecideApproval(context.Context, *DecideApprovalRequest) (*DecideApprovalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecideApproval not implemented")
}
func (UnimplementedApprovalServiceServer) ReopenApprovalTask(context.Context, *ReopenApprovalTaskRequest) (*ReopenApprovalTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReopenApprovalTask not implemented")
}
func (UnimplementedApprovalServiceServer) RecomputeApprovalPolicyCounters(context.Context, *RecomputeApprovalPolicyCountersRequest) (*RecomputeApprovalPolicyCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputeApprovalPolicyCounters not implemented")
}
func (UnimplementedApprovalServiceServer) mustEmbedUnimplementedApprovalServiceServer() {}
func (UnimplementedApprovalServiceServer) testEmbeddedByValue()                         {}

// UnsafeApprovalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApprovalServiceServer will
// result in compilation errors.
type UnsafeApprovalServiceServer interface {
	mustEmbedUnimplementedApprovalServiceServer()
}

func RegisterApprovalServiceServer(s grpc.ServiceRegistrar, srv ApprovalServiceServer) {
	// If the following call pancis, it indicates UnimplementedApprovalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApprovalService_ServiceDesc, srv)
}

func _ApprovalService_ListApprovalTasksInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalTasksInboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovalTasksInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovalTasksInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovalTasksInbox(ctx, req.(*ListApprovalTasksInboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovalPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalPoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovalPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovalPolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovalPolicies(ctx, req.(*ListApprovalPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_UpsertApprovalPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApprovalPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).UpsertApprovalPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_UpsertApprovalPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).UpsertApprovalPolicy(ctx, req.(*UpsertApprovalPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovalTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovalTasks(ctx, req.(*ListApprovalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_UpsertApprovalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertApprovalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).UpsertApprovalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_UpsertApprovalTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).UpsertApprovalTasks(ctx, req.(*UpsertApprovalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_DeleteApprovalTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApprovalTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).DeleteApprovalTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_DeleteApprovalTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).DeleteApprovalTasks(ctx, req.(*DeleteApprovalTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ListApprovals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApprovalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ListApprovals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ListApprovals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ListApprovals(ctx, req.(*ListApprovalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_RevokeApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).RevokeApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_RevokeApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).RevokeApproval(ctx, req.(*RevokeApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_DecideApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecideApprovalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).DecideApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_DecideApproval_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).DecideApproval(ctx, req.(*DecideApprovalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_ReopenApprovalTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReopenApprovalTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).ReopenApprovalTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_ReopenApprovalTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).ReopenApprovalTask(ctx, req.(*ReopenApprovalTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApprovalService_RecomputeApprovalPolicyCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputeApprovalPolicyCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApprovalServiceServer).RecomputeApprovalPolicyCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApprovalService_RecomputeApprovalPolicyCounters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApprovalServiceServer).RecomputeApprovalPolicyCounters(ctx, req.(*RecomputeApprovalPolicyCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApprovalService_ServiceDesc is the grpc.ServiceDesc for ApprovalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApprovalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.ApprovalService",
	HandlerType: (*ApprovalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListApprovalTasksInbox",
			Handler:    _ApprovalService_ListApprovalTasksInbox_Handler,
		},
		{
			MethodName: "ListApprovalPolicies",
			Handler:    _ApprovalService_ListApprovalPolicies_Handler,
		},
		{
			MethodName: "UpsertApprovalPolicy",
			Handler:    _ApprovalService_UpsertApprovalPolicy_Handler,
		},
		{
			MethodName: "ListApprovalTasks",
			Handler:    _ApprovalService_ListApprovalTasks_Handler,
		},
		{
			MethodName: "UpsertApprovalTasks",
			Handler:    _ApprovalService_UpsertApprovalTasks_Handler,
		},
		{
			MethodName: "DeleteApprovalTasks",
			Handler:    _ApprovalService_DeleteApprovalTasks_Handler,
		},
		{
			MethodName: "ListApprovals",
			Handler:    _ApprovalService_ListApprovals_Handler,
		},
		{
			MethodName: "RevokeApproval",
			Handler:    _ApprovalService_RevokeApproval_Handler,
		},
		{
			MethodName: "DecideApproval",
			Handler:    _ApprovalService_DecideApproval_Handler,
		},
		{
			MethodName: "ReopenApprovalTask",
			Handler:    _ApprovalService_ReopenApprovalTask_Handler,
		},
		{
			MethodName: "RecomputeApprovalPolicyCounters",
			Handler:    _ApprovalService_RecomputeApprovalPolicyCounters_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/approval.proto",
}
