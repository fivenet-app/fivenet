// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/signing.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SigningService_PrepareSignatureRequirements_FullMethodName = "/services.documents.SigningService/PrepareSignatureRequirements"
	SigningService_GetSignaturePanel_FullMethodName            = "/services.documents.SigningService/GetSignaturePanel"
	SigningService_ApplySignature_FullMethodName               = "/services.documents.SigningService/ApplySignature"
	SigningService_RevokeSignature_FullMethodName              = "/services.documents.SigningService/RevokeSignature"
	SigningService_RequestSignatures_FullMethodName            = "/services.documents.SigningService/RequestSignatures"
	SigningService_ListUsableStamps_FullMethodName             = "/services.documents.SigningService/ListUsableStamps"
)

// SigningServiceClient is the client API for SigningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigningServiceClient interface {
	PrepareSignatureRequirements(ctx context.Context, in *PrepareSignatureRequirementsRequest, opts ...grpc.CallOption) (*PrepareSignatureRequirementsResponse, error)
	GetSignaturePanel(ctx context.Context, in *GetSignaturePanelRequest, opts ...grpc.CallOption) (*GetSignaturePanelResponse, error)
	ApplySignature(ctx context.Context, in *ApplySignatureRequest, opts ...grpc.CallOption) (*ApplySignatureResponse, error)
	RevokeSignature(ctx context.Context, in *RevokeSignatureRequest, opts ...grpc.CallOption) (*RevokeSignatureResponse, error)
	// Convenience for “request signatures” UX
	RequestSignatures(ctx context.Context, in *RequestSignaturesRequest, opts ...grpc.CallOption) (*RequestSignaturesResponse, error)
	// List stamps the caller can use on this doc/version
	ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error)
}

type signingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigningServiceClient(cc grpc.ClientConnInterface) SigningServiceClient {
	return &signingServiceClient{cc}
}

func (c *signingServiceClient) PrepareSignatureRequirements(ctx context.Context, in *PrepareSignatureRequirementsRequest, opts ...grpc.CallOption) (*PrepareSignatureRequirementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareSignatureRequirementsResponse)
	err := c.cc.Invoke(ctx, SigningService_PrepareSignatureRequirements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) GetSignaturePanel(ctx context.Context, in *GetSignaturePanelRequest, opts ...grpc.CallOption) (*GetSignaturePanelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSignaturePanelResponse)
	err := c.cc.Invoke(ctx, SigningService_GetSignaturePanel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ApplySignature(ctx context.Context, in *ApplySignatureRequest, opts ...grpc.CallOption) (*ApplySignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplySignatureResponse)
	err := c.cc.Invoke(ctx, SigningService_ApplySignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) RevokeSignature(ctx context.Context, in *RevokeSignatureRequest, opts ...grpc.CallOption) (*RevokeSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSignatureResponse)
	err := c.cc.Invoke(ctx, SigningService_RevokeSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) RequestSignatures(ctx context.Context, in *RequestSignaturesRequest, opts ...grpc.CallOption) (*RequestSignaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestSignaturesResponse)
	err := c.cc.Invoke(ctx, SigningService_RequestSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsableStampsResponse)
	err := c.cc.Invoke(ctx, SigningService_ListUsableStamps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigningServiceServer is the server API for SigningService service.
// All implementations must embed UnimplementedSigningServiceServer
// for forward compatibility.
type SigningServiceServer interface {
	PrepareSignatureRequirements(context.Context, *PrepareSignatureRequirementsRequest) (*PrepareSignatureRequirementsResponse, error)
	GetSignaturePanel(context.Context, *GetSignaturePanelRequest) (*GetSignaturePanelResponse, error)
	ApplySignature(context.Context, *ApplySignatureRequest) (*ApplySignatureResponse, error)
	RevokeSignature(context.Context, *RevokeSignatureRequest) (*RevokeSignatureResponse, error)
	// Convenience for “request signatures” UX
	RequestSignatures(context.Context, *RequestSignaturesRequest) (*RequestSignaturesResponse, error)
	// List stamps the caller can use on this doc/version
	ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error)
	mustEmbedUnimplementedSigningServiceServer()
}

// UnimplementedSigningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSigningServiceServer struct{}

func (UnimplementedSigningServiceServer) PrepareSignatureRequirements(context.Context, *PrepareSignatureRequirementsRequest) (*PrepareSignatureRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareSignatureRequirements not implemented")
}
func (UnimplementedSigningServiceServer) GetSignaturePanel(context.Context, *GetSignaturePanelRequest) (*GetSignaturePanelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignaturePanel not implemented")
}
func (UnimplementedSigningServiceServer) ApplySignature(context.Context, *ApplySignatureRequest) (*ApplySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySignature not implemented")
}
func (UnimplementedSigningServiceServer) RevokeSignature(context.Context, *RevokeSignatureRequest) (*RevokeSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSignature not implemented")
}
func (UnimplementedSigningServiceServer) RequestSignatures(context.Context, *RequestSignaturesRequest) (*RequestSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestSignatures not implemented")
}
func (UnimplementedSigningServiceServer) ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsableStamps not implemented")
}
func (UnimplementedSigningServiceServer) mustEmbedUnimplementedSigningServiceServer() {}
func (UnimplementedSigningServiceServer) testEmbeddedByValue()                        {}

// UnsafeSigningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigningServiceServer will
// result in compilation errors.
type UnsafeSigningServiceServer interface {
	mustEmbedUnimplementedSigningServiceServer()
}

func RegisterSigningServiceServer(s grpc.ServiceRegistrar, srv SigningServiceServer) {
	// If the following call pancis, it indicates UnimplementedSigningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SigningService_ServiceDesc, srv)
}

func _SigningService_PrepareSignatureRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareSignatureRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).PrepareSignatureRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_PrepareSignatureRequirements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).PrepareSignatureRequirements(ctx, req.(*PrepareSignatureRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_GetSignaturePanel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignaturePanelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).GetSignaturePanel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_GetSignaturePanel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).GetSignaturePanel(ctx, req.(*GetSignaturePanelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ApplySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ApplySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ApplySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ApplySignature(ctx, req.(*ApplySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_RevokeSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).RevokeSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_RevokeSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).RevokeSignature(ctx, req.(*RevokeSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_RequestSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).RequestSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_RequestSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).RequestSignatures(ctx, req.(*RequestSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListUsableStamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsableStampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListUsableStamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListUsableStamps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListUsableStamps(ctx, req.(*ListUsableStampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SigningService_ServiceDesc is the grpc.ServiceDesc for SigningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.SigningService",
	HandlerType: (*SigningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareSignatureRequirements",
			Handler:    _SigningService_PrepareSignatureRequirements_Handler,
		},
		{
			MethodName: "GetSignaturePanel",
			Handler:    _SigningService_GetSignaturePanel_Handler,
		},
		{
			MethodName: "ApplySignature",
			Handler:    _SigningService_ApplySignature_Handler,
		},
		{
			MethodName: "RevokeSignature",
			Handler:    _SigningService_RevokeSignature_Handler,
		},
		{
			MethodName: "RequestSignatures",
			Handler:    _SigningService_RequestSignatures_Handler,
		},
		{
			MethodName: "ListUsableStamps",
			Handler:    _SigningService_ListUsableStamps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/signing.proto",
}
