// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/signing.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SigningService_ListSignaturePolicies_FullMethodName       = "/services.documents.SigningService/ListSignaturePolicies"
	SigningService_UpsertSignaturePolicy_FullMethodName       = "/services.documents.SigningService/UpsertSignaturePolicy"
	SigningService_DeleteSignaturePolicy_FullMethodName       = "/services.documents.SigningService/DeleteSignaturePolicy"
	SigningService_ListSignaturePolicyAccess_FullMethodName   = "/services.documents.SigningService/ListSignaturePolicyAccess"
	SigningService_UpsertSignaturePolicyAccess_FullMethodName = "/services.documents.SigningService/UpsertSignaturePolicyAccess"
	SigningService_DeleteSignaturePolicyAccess_FullMethodName = "/services.documents.SigningService/DeleteSignaturePolicyAccess"
	SigningService_ListSignatures_FullMethodName              = "/services.documents.SigningService/ListSignatures"
	SigningService_ApplySignature_FullMethodName              = "/services.documents.SigningService/ApplySignature"
	SigningService_RevokeSignature_FullMethodName             = "/services.documents.SigningService/RevokeSignature"
	SigningService_RecomputeSignatureStatus_FullMethodName    = "/services.documents.SigningService/RecomputeSignatureStatus"
	SigningService_ListUsableStamps_FullMethodName            = "/services.documents.SigningService/ListUsableStamps"
	SigningService_UpsertStamp_FullMethodName                 = "/services.documents.SigningService/UpsertStamp"
	SigningService_DeleteStamp_FullMethodName                 = "/services.documents.SigningService/DeleteStamp"
)

// SigningServiceClient is the client API for SigningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigningServiceClient interface {
	// Requirements
	ListSignaturePolicies(ctx context.Context, in *ListSignaturePoliciesRequest, opts ...grpc.CallOption) (*ListSignaturePoliciesResponse, error)
	UpsertSignaturePolicy(ctx context.Context, in *UpsertSignaturePolicyRequest, opts ...grpc.CallOption) (*UpsertSignaturePolicyResponse, error)
	DeleteSignaturePolicy(ctx context.Context, in *DeleteSignaturePolicyRequest, opts ...grpc.CallOption) (*DeleteSignaturePolicyResponse, error)
	// Requirement ACL
	ListSignaturePolicyAccess(ctx context.Context, in *ListSignaturePolicyAccessRequest, opts ...grpc.CallOption) (*ListSignaturePolicyAccessResponse, error)
	UpsertSignaturePolicyAccess(ctx context.Context, in *UpsertSignaturePolicyAccessRequest, opts ...grpc.CallOption) (*UpsertSignaturePolicyAccessResponse, error)
	DeleteSignaturePolicyAccess(ctx context.Context, in *DeleteSignaturePolicyAccessRequest, opts ...grpc.CallOption) (*DeleteSignaturePolicyAccessResponse, error)
	// Signatures
	ListSignatures(ctx context.Context, in *ListSignaturesRequest, opts ...grpc.CallOption) (*ListSignaturesResponse, error)
	ApplySignature(ctx context.Context, in *ApplySignatureRequest, opts ...grpc.CallOption) (*ApplySignatureResponse, error)
	RevokeSignature(ctx context.Context, in *RevokeSignatureRequest, opts ...grpc.CallOption) (*RevokeSignatureResponse, error)
	// Helpers
	RecomputeSignatureStatus(ctx context.Context, in *RecomputeSignatureStatusRequest, opts ...grpc.CallOption) (*RecomputeSignatureStatusResponse, error)
	// Stamps
	ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error)
	UpsertStamp(ctx context.Context, in *UpsertStampRequest, opts ...grpc.CallOption) (*UpsertStampResponse, error)
	DeleteStamp(ctx context.Context, in *DeleteStampRequest, opts ...grpc.CallOption) (*DeleteStampResponse, error)
}

type signingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigningServiceClient(cc grpc.ClientConnInterface) SigningServiceClient {
	return &signingServiceClient{cc}
}

func (c *signingServiceClient) ListSignaturePolicies(ctx context.Context, in *ListSignaturePoliciesRequest, opts ...grpc.CallOption) (*ListSignaturePoliciesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSignaturePoliciesResponse)
	err := c.cc.Invoke(ctx, SigningService_ListSignaturePolicies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) UpsertSignaturePolicy(ctx context.Context, in *UpsertSignaturePolicyRequest, opts ...grpc.CallOption) (*UpsertSignaturePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertSignaturePolicyResponse)
	err := c.cc.Invoke(ctx, SigningService_UpsertSignaturePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) DeleteSignaturePolicy(ctx context.Context, in *DeleteSignaturePolicyRequest, opts ...grpc.CallOption) (*DeleteSignaturePolicyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSignaturePolicyResponse)
	err := c.cc.Invoke(ctx, SigningService_DeleteSignaturePolicy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListSignaturePolicyAccess(ctx context.Context, in *ListSignaturePolicyAccessRequest, opts ...grpc.CallOption) (*ListSignaturePolicyAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSignaturePolicyAccessResponse)
	err := c.cc.Invoke(ctx, SigningService_ListSignaturePolicyAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) UpsertSignaturePolicyAccess(ctx context.Context, in *UpsertSignaturePolicyAccessRequest, opts ...grpc.CallOption) (*UpsertSignaturePolicyAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertSignaturePolicyAccessResponse)
	err := c.cc.Invoke(ctx, SigningService_UpsertSignaturePolicyAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) DeleteSignaturePolicyAccess(ctx context.Context, in *DeleteSignaturePolicyAccessRequest, opts ...grpc.CallOption) (*DeleteSignaturePolicyAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSignaturePolicyAccessResponse)
	err := c.cc.Invoke(ctx, SigningService_DeleteSignaturePolicyAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListSignatures(ctx context.Context, in *ListSignaturesRequest, opts ...grpc.CallOption) (*ListSignaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSignaturesResponse)
	err := c.cc.Invoke(ctx, SigningService_ListSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ApplySignature(ctx context.Context, in *ApplySignatureRequest, opts ...grpc.CallOption) (*ApplySignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplySignatureResponse)
	err := c.cc.Invoke(ctx, SigningService_ApplySignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) RevokeSignature(ctx context.Context, in *RevokeSignatureRequest, opts ...grpc.CallOption) (*RevokeSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSignatureResponse)
	err := c.cc.Invoke(ctx, SigningService_RevokeSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) RecomputeSignatureStatus(ctx context.Context, in *RecomputeSignatureStatusRequest, opts ...grpc.CallOption) (*RecomputeSignatureStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputeSignatureStatusResponse)
	err := c.cc.Invoke(ctx, SigningService_RecomputeSignatureStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsableStampsResponse)
	err := c.cc.Invoke(ctx, SigningService_ListUsableStamps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) UpsertStamp(ctx context.Context, in *UpsertStampRequest, opts ...grpc.CallOption) (*UpsertStampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertStampResponse)
	err := c.cc.Invoke(ctx, SigningService_UpsertStamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) DeleteStamp(ctx context.Context, in *DeleteStampRequest, opts ...grpc.CallOption) (*DeleteStampResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStampResponse)
	err := c.cc.Invoke(ctx, SigningService_DeleteStamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigningServiceServer is the server API for SigningService service.
// All implementations must embed UnimplementedSigningServiceServer
// for forward compatibility.
type SigningServiceServer interface {
	// Requirements
	ListSignaturePolicies(context.Context, *ListSignaturePoliciesRequest) (*ListSignaturePoliciesResponse, error)
	UpsertSignaturePolicy(context.Context, *UpsertSignaturePolicyRequest) (*UpsertSignaturePolicyResponse, error)
	DeleteSignaturePolicy(context.Context, *DeleteSignaturePolicyRequest) (*DeleteSignaturePolicyResponse, error)
	// Requirement ACL
	ListSignaturePolicyAccess(context.Context, *ListSignaturePolicyAccessRequest) (*ListSignaturePolicyAccessResponse, error)
	UpsertSignaturePolicyAccess(context.Context, *UpsertSignaturePolicyAccessRequest) (*UpsertSignaturePolicyAccessResponse, error)
	DeleteSignaturePolicyAccess(context.Context, *DeleteSignaturePolicyAccessRequest) (*DeleteSignaturePolicyAccessResponse, error)
	// Signatures
	ListSignatures(context.Context, *ListSignaturesRequest) (*ListSignaturesResponse, error)
	ApplySignature(context.Context, *ApplySignatureRequest) (*ApplySignatureResponse, error)
	RevokeSignature(context.Context, *RevokeSignatureRequest) (*RevokeSignatureResponse, error)
	// Helpers
	RecomputeSignatureStatus(context.Context, *RecomputeSignatureStatusRequest) (*RecomputeSignatureStatusResponse, error)
	// Stamps
	ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error)
	UpsertStamp(context.Context, *UpsertStampRequest) (*UpsertStampResponse, error)
	DeleteStamp(context.Context, *DeleteStampRequest) (*DeleteStampResponse, error)
	mustEmbedUnimplementedSigningServiceServer()
}

// UnimplementedSigningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSigningServiceServer struct{}

func (UnimplementedSigningServiceServer) ListSignaturePolicies(context.Context, *ListSignaturePoliciesRequest) (*ListSignaturePoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignaturePolicies not implemented")
}
func (UnimplementedSigningServiceServer) UpsertSignaturePolicy(context.Context, *UpsertSignaturePolicyRequest) (*UpsertSignaturePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSignaturePolicy not implemented")
}
func (UnimplementedSigningServiceServer) DeleteSignaturePolicy(context.Context, *DeleteSignaturePolicyRequest) (*DeleteSignaturePolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignaturePolicy not implemented")
}
func (UnimplementedSigningServiceServer) ListSignaturePolicyAccess(context.Context, *ListSignaturePolicyAccessRequest) (*ListSignaturePolicyAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignaturePolicyAccess not implemented")
}
func (UnimplementedSigningServiceServer) UpsertSignaturePolicyAccess(context.Context, *UpsertSignaturePolicyAccessRequest) (*UpsertSignaturePolicyAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSignaturePolicyAccess not implemented")
}
func (UnimplementedSigningServiceServer) DeleteSignaturePolicyAccess(context.Context, *DeleteSignaturePolicyAccessRequest) (*DeleteSignaturePolicyAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSignaturePolicyAccess not implemented")
}
func (UnimplementedSigningServiceServer) ListSignatures(context.Context, *ListSignaturesRequest) (*ListSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignatures not implemented")
}
func (UnimplementedSigningServiceServer) ApplySignature(context.Context, *ApplySignatureRequest) (*ApplySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySignature not implemented")
}
func (UnimplementedSigningServiceServer) RevokeSignature(context.Context, *RevokeSignatureRequest) (*RevokeSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSignature not implemented")
}
func (UnimplementedSigningServiceServer) RecomputeSignatureStatus(context.Context, *RecomputeSignatureStatusRequest) (*RecomputeSignatureStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputeSignatureStatus not implemented")
}
func (UnimplementedSigningServiceServer) ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsableStamps not implemented")
}
func (UnimplementedSigningServiceServer) UpsertStamp(context.Context, *UpsertStampRequest) (*UpsertStampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertStamp not implemented")
}
func (UnimplementedSigningServiceServer) DeleteStamp(context.Context, *DeleteStampRequest) (*DeleteStampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStamp not implemented")
}
func (UnimplementedSigningServiceServer) mustEmbedUnimplementedSigningServiceServer() {}
func (UnimplementedSigningServiceServer) testEmbeddedByValue()                        {}

// UnsafeSigningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigningServiceServer will
// result in compilation errors.
type UnsafeSigningServiceServer interface {
	mustEmbedUnimplementedSigningServiceServer()
}

func RegisterSigningServiceServer(s grpc.ServiceRegistrar, srv SigningServiceServer) {
	// If the following call pancis, it indicates UnimplementedSigningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SigningService_ServiceDesc, srv)
}

func _SigningService_ListSignaturePolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignaturePoliciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListSignaturePolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListSignaturePolicies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListSignaturePolicies(ctx, req.(*ListSignaturePoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_UpsertSignaturePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSignaturePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).UpsertSignaturePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_UpsertSignaturePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).UpsertSignaturePolicy(ctx, req.(*UpsertSignaturePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_DeleteSignaturePolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSignaturePolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).DeleteSignaturePolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_DeleteSignaturePolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).DeleteSignaturePolicy(ctx, req.(*DeleteSignaturePolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListSignaturePolicyAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignaturePolicyAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListSignaturePolicyAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListSignaturePolicyAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListSignaturePolicyAccess(ctx, req.(*ListSignaturePolicyAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_UpsertSignaturePolicyAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertSignaturePolicyAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).UpsertSignaturePolicyAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_UpsertSignaturePolicyAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).UpsertSignaturePolicyAccess(ctx, req.(*UpsertSignaturePolicyAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_DeleteSignaturePolicyAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSignaturePolicyAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).DeleteSignaturePolicyAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_DeleteSignaturePolicyAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).DeleteSignaturePolicyAccess(ctx, req.(*DeleteSignaturePolicyAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListSignatures(ctx, req.(*ListSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ApplySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ApplySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ApplySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ApplySignature(ctx, req.(*ApplySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_RevokeSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).RevokeSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_RevokeSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).RevokeSignature(ctx, req.(*RevokeSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_RecomputeSignatureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputeSignatureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).RecomputeSignatureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_RecomputeSignatureStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).RecomputeSignatureStatus(ctx, req.(*RecomputeSignatureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListUsableStamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsableStampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListUsableStamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListUsableStamps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListUsableStamps(ctx, req.(*ListUsableStampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_UpsertStamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertStampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).UpsertStamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_UpsertStamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).UpsertStamp(ctx, req.(*UpsertStampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_DeleteStamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).DeleteStamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_DeleteStamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).DeleteStamp(ctx, req.(*DeleteStampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SigningService_ServiceDesc is the grpc.ServiceDesc for SigningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.SigningService",
	HandlerType: (*SigningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSignaturePolicies",
			Handler:    _SigningService_ListSignaturePolicies_Handler,
		},
		{
			MethodName: "UpsertSignaturePolicy",
			Handler:    _SigningService_UpsertSignaturePolicy_Handler,
		},
		{
			MethodName: "DeleteSignaturePolicy",
			Handler:    _SigningService_DeleteSignaturePolicy_Handler,
		},
		{
			MethodName: "ListSignaturePolicyAccess",
			Handler:    _SigningService_ListSignaturePolicyAccess_Handler,
		},
		{
			MethodName: "UpsertSignaturePolicyAccess",
			Handler:    _SigningService_UpsertSignaturePolicyAccess_Handler,
		},
		{
			MethodName: "DeleteSignaturePolicyAccess",
			Handler:    _SigningService_DeleteSignaturePolicyAccess_Handler,
		},
		{
			MethodName: "ListSignatures",
			Handler:    _SigningService_ListSignatures_Handler,
		},
		{
			MethodName: "ApplySignature",
			Handler:    _SigningService_ApplySignature_Handler,
		},
		{
			MethodName: "RevokeSignature",
			Handler:    _SigningService_RevokeSignature_Handler,
		},
		{
			MethodName: "RecomputeSignatureStatus",
			Handler:    _SigningService_RecomputeSignatureStatus_Handler,
		},
		{
			MethodName: "ListUsableStamps",
			Handler:    _SigningService_ListUsableStamps_Handler,
		},
		{
			MethodName: "UpsertStamp",
			Handler:    _SigningService_UpsertStamp_Handler,
		},
		{
			MethodName: "DeleteStamp",
			Handler:    _SigningService_DeleteStamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/signing.proto",
}
