// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/documents/signing.proto

package documents

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SigningService_ListRequirements_FullMethodName         = "/services.documents.SigningService/ListRequirements"
	SigningService_UpsertRequirement_FullMethodName        = "/services.documents.SigningService/UpsertRequirement"
	SigningService_DeleteRequirement_FullMethodName        = "/services.documents.SigningService/DeleteRequirement"
	SigningService_ListRequirementAccess_FullMethodName    = "/services.documents.SigningService/ListRequirementAccess"
	SigningService_UpsertRequirementAccess_FullMethodName  = "/services.documents.SigningService/UpsertRequirementAccess"
	SigningService_DeleteRequirementAccess_FullMethodName  = "/services.documents.SigningService/DeleteRequirementAccess"
	SigningService_ListSignatures_FullMethodName           = "/services.documents.SigningService/ListSignatures"
	SigningService_ApplySignature_FullMethodName           = "/services.documents.SigningService/ApplySignature"
	SigningService_RevokeSignature_FullMethodName          = "/services.documents.SigningService/RevokeSignature"
	SigningService_RecomputeSignatureStatus_FullMethodName = "/services.documents.SigningService/RecomputeSignatureStatus"
	SigningService_ListUsableStamps_FullMethodName         = "/services.documents.SigningService/ListUsableStamps"
)

// SigningServiceClient is the client API for SigningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SigningServiceClient interface {
	// Requirements
	ListRequirements(ctx context.Context, in *ListRequirementsRequest, opts ...grpc.CallOption) (*ListRequirementsResponse, error)
	UpsertRequirement(ctx context.Context, in *UpsertRequirementRequest, opts ...grpc.CallOption) (*UpsertRequirementResponse, error)
	DeleteRequirement(ctx context.Context, in *DeleteRequirementRequest, opts ...grpc.CallOption) (*DeleteRequirementResponse, error)
	// Requirement ACL
	ListRequirementAccess(ctx context.Context, in *ListRequirementAccessRequest, opts ...grpc.CallOption) (*ListRequirementAccessResponse, error)
	UpsertRequirementAccess(ctx context.Context, in *UpsertRequirementAccessRequest, opts ...grpc.CallOption) (*UpsertRequirementAccessResponse, error)
	DeleteRequirementAccess(ctx context.Context, in *DeleteRequirementAccessRequest, opts ...grpc.CallOption) (*DeleteRequirementAccessResponse, error)
	// Signatures
	ListSignatures(ctx context.Context, in *ListSignaturesRequest, opts ...grpc.CallOption) (*ListSignaturesResponse, error)
	ApplySignature(ctx context.Context, in *ApplySignatureRequest, opts ...grpc.CallOption) (*ApplySignatureResponse, error)
	RevokeSignature(ctx context.Context, in *RevokeSignatureRequest, opts ...grpc.CallOption) (*RevokeSignatureResponse, error)
	// Helpers
	RecomputeSignatureStatus(ctx context.Context, in *RecomputeSignatureStatusRequest, opts ...grpc.CallOption) (*RecomputeSignatureStatusResponse, error)
	// Stamps
	ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error)
}

type signingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSigningServiceClient(cc grpc.ClientConnInterface) SigningServiceClient {
	return &signingServiceClient{cc}
}

func (c *signingServiceClient) ListRequirements(ctx context.Context, in *ListRequirementsRequest, opts ...grpc.CallOption) (*ListRequirementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRequirementsResponse)
	err := c.cc.Invoke(ctx, SigningService_ListRequirements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) UpsertRequirement(ctx context.Context, in *UpsertRequirementRequest, opts ...grpc.CallOption) (*UpsertRequirementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertRequirementResponse)
	err := c.cc.Invoke(ctx, SigningService_UpsertRequirement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) DeleteRequirement(ctx context.Context, in *DeleteRequirementRequest, opts ...grpc.CallOption) (*DeleteRequirementResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRequirementResponse)
	err := c.cc.Invoke(ctx, SigningService_DeleteRequirement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListRequirementAccess(ctx context.Context, in *ListRequirementAccessRequest, opts ...grpc.CallOption) (*ListRequirementAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRequirementAccessResponse)
	err := c.cc.Invoke(ctx, SigningService_ListRequirementAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) UpsertRequirementAccess(ctx context.Context, in *UpsertRequirementAccessRequest, opts ...grpc.CallOption) (*UpsertRequirementAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpsertRequirementAccessResponse)
	err := c.cc.Invoke(ctx, SigningService_UpsertRequirementAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) DeleteRequirementAccess(ctx context.Context, in *DeleteRequirementAccessRequest, opts ...grpc.CallOption) (*DeleteRequirementAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRequirementAccessResponse)
	err := c.cc.Invoke(ctx, SigningService_DeleteRequirementAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListSignatures(ctx context.Context, in *ListSignaturesRequest, opts ...grpc.CallOption) (*ListSignaturesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSignaturesResponse)
	err := c.cc.Invoke(ctx, SigningService_ListSignatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ApplySignature(ctx context.Context, in *ApplySignatureRequest, opts ...grpc.CallOption) (*ApplySignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApplySignatureResponse)
	err := c.cc.Invoke(ctx, SigningService_ApplySignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) RevokeSignature(ctx context.Context, in *RevokeSignatureRequest, opts ...grpc.CallOption) (*RevokeSignatureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevokeSignatureResponse)
	err := c.cc.Invoke(ctx, SigningService_RevokeSignature_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) RecomputeSignatureStatus(ctx context.Context, in *RecomputeSignatureStatusRequest, opts ...grpc.CallOption) (*RecomputeSignatureStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecomputeSignatureStatusResponse)
	err := c.cc.Invoke(ctx, SigningService_RecomputeSignatureStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signingServiceClient) ListUsableStamps(ctx context.Context, in *ListUsableStampsRequest, opts ...grpc.CallOption) (*ListUsableStampsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUsableStampsResponse)
	err := c.cc.Invoke(ctx, SigningService_ListUsableStamps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SigningServiceServer is the server API for SigningService service.
// All implementations must embed UnimplementedSigningServiceServer
// for forward compatibility.
type SigningServiceServer interface {
	// Requirements
	ListRequirements(context.Context, *ListRequirementsRequest) (*ListRequirementsResponse, error)
	UpsertRequirement(context.Context, *UpsertRequirementRequest) (*UpsertRequirementResponse, error)
	DeleteRequirement(context.Context, *DeleteRequirementRequest) (*DeleteRequirementResponse, error)
	// Requirement ACL
	ListRequirementAccess(context.Context, *ListRequirementAccessRequest) (*ListRequirementAccessResponse, error)
	UpsertRequirementAccess(context.Context, *UpsertRequirementAccessRequest) (*UpsertRequirementAccessResponse, error)
	DeleteRequirementAccess(context.Context, *DeleteRequirementAccessRequest) (*DeleteRequirementAccessResponse, error)
	// Signatures
	ListSignatures(context.Context, *ListSignaturesRequest) (*ListSignaturesResponse, error)
	ApplySignature(context.Context, *ApplySignatureRequest) (*ApplySignatureResponse, error)
	RevokeSignature(context.Context, *RevokeSignatureRequest) (*RevokeSignatureResponse, error)
	// Helpers
	RecomputeSignatureStatus(context.Context, *RecomputeSignatureStatusRequest) (*RecomputeSignatureStatusResponse, error)
	// Stamps
	ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error)
	mustEmbedUnimplementedSigningServiceServer()
}

// UnimplementedSigningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSigningServiceServer struct{}

func (UnimplementedSigningServiceServer) ListRequirements(context.Context, *ListRequirementsRequest) (*ListRequirementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequirements not implemented")
}
func (UnimplementedSigningServiceServer) UpsertRequirement(context.Context, *UpsertRequirementRequest) (*UpsertRequirementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRequirement not implemented")
}
func (UnimplementedSigningServiceServer) DeleteRequirement(context.Context, *DeleteRequirementRequest) (*DeleteRequirementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequirement not implemented")
}
func (UnimplementedSigningServiceServer) ListRequirementAccess(context.Context, *ListRequirementAccessRequest) (*ListRequirementAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRequirementAccess not implemented")
}
func (UnimplementedSigningServiceServer) UpsertRequirementAccess(context.Context, *UpsertRequirementAccessRequest) (*UpsertRequirementAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertRequirementAccess not implemented")
}
func (UnimplementedSigningServiceServer) DeleteRequirementAccess(context.Context, *DeleteRequirementAccessRequest) (*DeleteRequirementAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRequirementAccess not implemented")
}
func (UnimplementedSigningServiceServer) ListSignatures(context.Context, *ListSignaturesRequest) (*ListSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSignatures not implemented")
}
func (UnimplementedSigningServiceServer) ApplySignature(context.Context, *ApplySignatureRequest) (*ApplySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplySignature not implemented")
}
func (UnimplementedSigningServiceServer) RevokeSignature(context.Context, *RevokeSignatureRequest) (*RevokeSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeSignature not implemented")
}
func (UnimplementedSigningServiceServer) RecomputeSignatureStatus(context.Context, *RecomputeSignatureStatusRequest) (*RecomputeSignatureStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecomputeSignatureStatus not implemented")
}
func (UnimplementedSigningServiceServer) ListUsableStamps(context.Context, *ListUsableStampsRequest) (*ListUsableStampsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUsableStamps not implemented")
}
func (UnimplementedSigningServiceServer) mustEmbedUnimplementedSigningServiceServer() {}
func (UnimplementedSigningServiceServer) testEmbeddedByValue()                        {}

// UnsafeSigningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SigningServiceServer will
// result in compilation errors.
type UnsafeSigningServiceServer interface {
	mustEmbedUnimplementedSigningServiceServer()
}

func RegisterSigningServiceServer(s grpc.ServiceRegistrar, srv SigningServiceServer) {
	// If the following call pancis, it indicates UnimplementedSigningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SigningService_ServiceDesc, srv)
}

func _SigningService_ListRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequirementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListRequirements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListRequirements(ctx, req.(*ListRequirementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_UpsertRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequirementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).UpsertRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_UpsertRequirement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).UpsertRequirement(ctx, req.(*UpsertRequirementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_DeleteRequirement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequirementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).DeleteRequirement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_DeleteRequirement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).DeleteRequirement(ctx, req.(*DeleteRequirementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListRequirementAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequirementAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListRequirementAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListRequirementAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListRequirementAccess(ctx, req.(*ListRequirementAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_UpsertRequirementAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequirementAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).UpsertRequirementAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_UpsertRequirementAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).UpsertRequirementAccess(ctx, req.(*UpsertRequirementAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_DeleteRequirementAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequirementAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).DeleteRequirementAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_DeleteRequirementAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).DeleteRequirementAccess(ctx, req.(*DeleteRequirementAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListSignatures(ctx, req.(*ListSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ApplySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ApplySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ApplySignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ApplySignature(ctx, req.(*ApplySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_RevokeSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).RevokeSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_RevokeSignature_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).RevokeSignature(ctx, req.(*RevokeSignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_RecomputeSignatureStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecomputeSignatureStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).RecomputeSignatureStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_RecomputeSignatureStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).RecomputeSignatureStatus(ctx, req.(*RecomputeSignatureStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SigningService_ListUsableStamps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUsableStampsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SigningServiceServer).ListUsableStamps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SigningService_ListUsableStamps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SigningServiceServer).ListUsableStamps(ctx, req.(*ListUsableStampsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SigningService_ServiceDesc is the grpc.ServiceDesc for SigningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SigningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.documents.SigningService",
	HandlerType: (*SigningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRequirements",
			Handler:    _SigningService_ListRequirements_Handler,
		},
		{
			MethodName: "UpsertRequirement",
			Handler:    _SigningService_UpsertRequirement_Handler,
		},
		{
			MethodName: "DeleteRequirement",
			Handler:    _SigningService_DeleteRequirement_Handler,
		},
		{
			MethodName: "ListRequirementAccess",
			Handler:    _SigningService_ListRequirementAccess_Handler,
		},
		{
			MethodName: "UpsertRequirementAccess",
			Handler:    _SigningService_UpsertRequirementAccess_Handler,
		},
		{
			MethodName: "DeleteRequirementAccess",
			Handler:    _SigningService_DeleteRequirementAccess_Handler,
		},
		{
			MethodName: "ListSignatures",
			Handler:    _SigningService_ListSignatures_Handler,
		},
		{
			MethodName: "ApplySignature",
			Handler:    _SigningService_ApplySignature_Handler,
		},
		{
			MethodName: "RevokeSignature",
			Handler:    _SigningService_RevokeSignature_Handler,
		},
		{
			MethodName: "RecomputeSignatureStatus",
			Handler:    _SigningService_RecomputeSignatureStatus_Handler,
		},
		{
			MethodName: "ListUsableStamps",
			Handler:    _SigningService_ListUsableStamps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/documents/signing.proto",
}
