// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: services/documents/signing.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApplySignatureRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: PayloadJson
	m.PayloadJson = htmlsanitizer.Sanitize(m.PayloadJson)

	// Field: SnapshotHash
	m.SnapshotHash = htmlsanitizer.Sanitize(m.SnapshotHash)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApplySignatureResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Signature
	if m.Signature != nil {
		if v, ok := any(m.GetSignature()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetSignaturePanelRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetSignaturePanelResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListUsableStampsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListUsableStampsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Stamps
	for idx, item := range m.Stamps {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PrepareSignatureRequirementsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PrepareSignatureRequirementsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Requirements
	for idx, item := range m.Requirements {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RequestSignaturesRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AllowedTypes
	for idx, item := range m.AllowedTypes {
		_, _ = idx, item

	}

	// Field: Selector
	if m.Selector != nil {
		if v, ok := any(m.GetSelector()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RequestSignaturesResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Requirements
	for idx, item := range m.Requirements {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RevokeSignatureRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RevokeSignatureResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Signature
	if m.Signature != nil {
		if v, ok := any(m.GetSignature()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SignaturePanelSnapshot) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Collected
	for idx, item := range m.Collected {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Requirements
	for idx, item := range m.Requirements {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
