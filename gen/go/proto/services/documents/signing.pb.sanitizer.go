// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: services/documents/signing.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecideSignatureRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	m.Comment = htmlsanitizer.Sanitize(m.Comment)

	// Field: PayloadSvg
	if m.PayloadSvg != nil {
		*m.PayloadSvg = htmlsanitizer.Sanitize(*m.PayloadSvg)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecideSignatureResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Signature
	if m.Signature != nil {
		if v, ok := any(m.GetSignature()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Task
	if m.Task != nil {
		if v, ok := any(m.GetTask()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteSignaturePolicyRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteSignaturePolicyResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteSignatureTasksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteSignatureTasksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteStampRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteStampResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignaturePoliciesRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: SnapshotDate
	if m.SnapshotDate != nil {
		if v, ok := any(m.GetSnapshotDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignaturePoliciesResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignatureTasksInboxRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Statuses
	for idx, item := range m.Statuses {
		_, _ = idx, item

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignatureTasksInboxResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Tasks
	for idx, item := range m.Tasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignatureTasksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Statuses
	for idx, item := range m.Statuses {
		_, _ = idx, item

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignatureTasksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Tasks
	for idx, item := range m.Tasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignaturesRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: SnapshotDate
	if m.SnapshotDate != nil {
		if v, ok := any(m.GetSnapshotDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListSignaturesResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Signatures
	for idx, item := range m.Signatures {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListUsableStampsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListUsableStampsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Stamps
	for idx, item := range m.Stamps {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RecomputeSignatureStatusRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RecomputeSignatureStatusResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ReopenSignatureTaskRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	m.Comment = htmlsanitizer.Sanitize(m.Comment)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ReopenSignatureTaskResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Task
	if m.Task != nil {
		if v, ok := any(m.GetTask()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RevokeSignatureRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	m.Comment = htmlsanitizer.Sanitize(m.Comment)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RevokeSignatureResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Signature
	if m.Signature != nil {
		if v, ok := any(m.GetSignature()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SignatureTaskSeed) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	if m.Comment != nil {
		*m.Comment = htmlsanitizer.Sanitize(*m.Comment)
	}

	// Field: DueAt
	if m.DueAt != nil {
		if v, ok := any(m.GetDueAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	// Field: Label
	if m.Label != nil {
		*m.Label = htmlsanitizer.Sanitize(*m.Label)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertSignaturePolicyRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertSignaturePolicyResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertSignatureTasksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Seeds
	for idx, item := range m.Seeds {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: SnapshotDate
	if m.SnapshotDate != nil {
		if v, ok := any(m.GetSnapshotDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertSignatureTasksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertStampRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Stamp
	if m.Stamp != nil {
		if v, ok := any(m.GetStamp()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertStampResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Stamp
	if m.Stamp != nil {
		if v, ok := any(m.GetStamp()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
