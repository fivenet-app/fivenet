// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/documents/documents.proto

package documents

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	content "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/common/content"

	documents "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/documents"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = content.ContentType(0)

	_ = documents.DocActivityType(0)
)

// Validate checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesRequestMultiError, or nil if none found.
func (m *ListTemplatesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListTemplatesRequestMultiError(errors)
	}

	return nil
}

// ListTemplatesRequestMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesRequestMultiError) AllErrors() []error { return m }

// ListTemplatesRequestValidationError is the validation error returned by
// ListTemplatesRequest.Validate if the designated constraints aren't met.
type ListTemplatesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesRequestValidationError) ErrorName() string {
	return "ListTemplatesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesRequestValidationError{}

// Validate checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTemplatesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTemplatesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTemplatesResponseMultiError, or nil if none found.
func (m *ListTemplatesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTemplatesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTemplates() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTemplatesResponseValidationError{
						field:  fmt.Sprintf("Templates[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTemplatesResponseValidationError{
					field:  fmt.Sprintf("Templates[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTemplatesResponseMultiError(errors)
	}

	return nil
}

// ListTemplatesResponseMultiError is an error wrapping multiple validation
// errors returned by ListTemplatesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTemplatesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTemplatesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTemplatesResponseMultiError) AllErrors() []error { return m }

// ListTemplatesResponseValidationError is the validation error returned by
// ListTemplatesResponse.Validate if the designated constraints aren't met.
type ListTemplatesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTemplatesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTemplatesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTemplatesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTemplatesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTemplatesResponseValidationError) ErrorName() string {
	return "ListTemplatesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTemplatesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTemplatesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTemplatesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTemplatesResponseValidationError{}

// Validate checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateRequestMultiError, or nil if none found.
func (m *GetTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TemplateId

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTemplateRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTemplateRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTemplateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Render != nil {
		// no validation rules for Render
	}

	if len(errors) > 0 {
		return GetTemplateRequestMultiError(errors)
	}

	return nil
}

// GetTemplateRequestMultiError is an error wrapping multiple validation errors
// returned by GetTemplateRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateRequestMultiError) AllErrors() []error { return m }

// GetTemplateRequestValidationError is the validation error returned by
// GetTemplateRequest.Validate if the designated constraints aren't met.
type GetTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateRequestValidationError) ErrorName() string {
	return "GetTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateRequestValidationError{}

// Validate checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTemplateResponseMultiError, or nil if none found.
func (m *GetTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Rendered

	if len(errors) > 0 {
		return GetTemplateResponseMultiError(errors)
	}

	return nil
}

// GetTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by GetTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTemplateResponseMultiError) AllErrors() []error { return m }

// GetTemplateResponseValidationError is the validation error returned by
// GetTemplateResponse.Validate if the designated constraints aren't met.
type GetTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTemplateResponseValidationError) ErrorName() string {
	return "GetTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTemplateResponseValidationError{}

// Validate checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateRequestMultiError, or nil if none found.
func (m *CreateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := CreateTemplateRequestValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateTemplateRequestMultiError(errors)
	}

	return nil
}

// CreateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateRequestMultiError) AllErrors() []error { return m }

// CreateTemplateRequestValidationError is the validation error returned by
// CreateTemplateRequest.Validate if the designated constraints aren't met.
type CreateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateRequestValidationError) ErrorName() string {
	return "CreateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateRequestValidationError{}

// Validate checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTemplateResponseMultiError, or nil if none found.
func (m *CreateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateTemplateResponseMultiError(errors)
	}

	return nil
}

// CreateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTemplateResponseMultiError) AllErrors() []error { return m }

// CreateTemplateResponseValidationError is the validation error returned by
// CreateTemplateResponse.Validate if the designated constraints aren't met.
type CreateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTemplateResponseValidationError) ErrorName() string {
	return "CreateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTemplateResponseValidationError{}

// Validate checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateRequestMultiError, or nil if none found.
func (m *UpdateTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTemplate() == nil {
		err := UpdateTemplateRequestValidationError{
			field:  "Template",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTemplateRequestValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTemplateRequestValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTemplateRequestMultiError(errors)
	}

	return nil
}

// UpdateTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateRequestMultiError) AllErrors() []error { return m }

// UpdateTemplateRequestValidationError is the validation error returned by
// UpdateTemplateRequest.Validate if the designated constraints aren't met.
type UpdateTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateRequestValidationError) ErrorName() string {
	return "UpdateTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateRequestValidationError{}

// Validate checks the field values on UpdateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateTemplateResponseMultiError, or nil if none found.
func (m *UpdateTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTemplate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateTemplateResponseValidationError{
					field:  "Template",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTemplate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateTemplateResponseValidationError{
				field:  "Template",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateTemplateResponseMultiError(errors)
	}

	return nil
}

// UpdateTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateTemplateResponseMultiError) AllErrors() []error { return m }

// UpdateTemplateResponseValidationError is the validation error returned by
// UpdateTemplateResponse.Validate if the designated constraints aren't met.
type UpdateTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTemplateResponseValidationError) ErrorName() string {
	return "UpdateTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTemplateResponseValidationError{}

// Validate checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateRequestMultiError, or nil if none found.
func (m *DeleteTemplateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteTemplateRequestMultiError(errors)
	}

	return nil
}

// DeleteTemplateRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateRequestMultiError) AllErrors() []error { return m }

// DeleteTemplateRequestValidationError is the validation error returned by
// DeleteTemplateRequest.Validate if the designated constraints aren't met.
type DeleteTemplateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateRequestValidationError) ErrorName() string {
	return "DeleteTemplateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateRequestValidationError{}

// Validate checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTemplateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTemplateResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTemplateResponseMultiError, or nil if none found.
func (m *DeleteTemplateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTemplateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteTemplateResponseMultiError(errors)
	}

	return nil
}

// DeleteTemplateResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteTemplateResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteTemplateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTemplateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTemplateResponseMultiError) AllErrors() []error { return m }

// DeleteTemplateResponseValidationError is the validation error returned by
// DeleteTemplateResponse.Validate if the designated constraints aren't met.
type DeleteTemplateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTemplateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTemplateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTemplateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTemplateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTemplateResponseValidationError) ErrorName() string {
	return "DeleteTemplateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTemplateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTemplateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTemplateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTemplateResponseValidationError{}

// Validate checks the field values on ListDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentsRequestMultiError, or nil if none found.
func (m *ListDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetCategoryIds()) > 5 {
		err := ListDocumentsRequestValidationError{
			field:  "CategoryIds",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCreatorIds()) > 5 {
		err := ListDocumentsRequestValidationError{
			field:  "CreatorIds",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetDocumentIds()) > 5 {
		err := ListDocumentsRequestValidationError{
			field:  "DocumentIds",
			reason: "value must contain no more than 5 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 64 {
			err := ListDocumentsRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.From != nil {

		if all {
			switch v := interface{}(m.GetFrom()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "From",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFrom()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsRequestValidationError{
					field:  "From",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.To != nil {

		if all {
			switch v := interface{}(m.GetTo()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsRequestValidationError{
						field:  "To",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTo()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsRequestValidationError{
					field:  "To",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Closed != nil {
		// no validation rules for Closed
	}

	if m.OnlyDrafts != nil {
		// no validation rules for OnlyDrafts
	}

	if len(errors) > 0 {
		return ListDocumentsRequestMultiError(errors)
	}

	return nil
}

// ListDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentsRequestMultiError) AllErrors() []error { return m }

// ListDocumentsRequestValidationError is the validation error returned by
// ListDocumentsRequest.Validate if the designated constraints aren't met.
type ListDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentsRequestValidationError) ErrorName() string {
	return "ListDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentsRequestValidationError{}

// Validate checks the field values on ListDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentsResponseMultiError, or nil if none found.
func (m *ListDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentsResponseValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentsResponseMultiError(errors)
	}

	return nil
}

// ListDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDocumentsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentsResponseMultiError) AllErrors() []error { return m }

// ListDocumentsResponseValidationError is the validation error returned by
// ListDocumentsResponse.Validate if the designated constraints aren't met.
type ListDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentsResponseValidationError) ErrorName() string {
	return "ListDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentsResponseValidationError{}

// Validate checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRequestMultiError, or nil if none found.
func (m *GetDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if m.InfoOnly != nil {
		// no validation rules for InfoOnly
	}

	if len(errors) > 0 {
		return GetDocumentRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRequestMultiError is an error wrapping multiple validation errors
// returned by GetDocumentRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRequestMultiError) AllErrors() []error { return m }

// GetDocumentRequestValidationError is the validation error returned by
// GetDocumentRequest.Validate if the designated constraints aren't met.
type GetDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRequestValidationError) ErrorName() string {
	return "GetDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRequestValidationError{}

// Validate checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentResponseMultiError, or nil if none found.
func (m *GetDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentResponseValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentResponseMultiError(errors)
	}

	return nil
}

// GetDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentResponseMultiError) AllErrors() []error { return m }

// GetDocumentResponseValidationError is the validation error returned by
// GetDocumentResponse.Validate if the designated constraints aren't met.
type GetDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentResponseValidationError) ErrorName() string {
	return "GetDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentResponseValidationError{}

// Validate checks the field values on GetDocumentReferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReferencesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReferencesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentReferencesRequestMultiError, or nil if none found.
func (m *GetDocumentReferencesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReferencesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentReferencesRequestMultiError(errors)
	}

	return nil
}

// GetDocumentReferencesRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentReferencesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentReferencesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReferencesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReferencesRequestMultiError) AllErrors() []error { return m }

// GetDocumentReferencesRequestValidationError is the validation error returned
// by GetDocumentReferencesRequest.Validate if the designated constraints
// aren't met.
type GetDocumentReferencesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReferencesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReferencesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReferencesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReferencesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReferencesRequestValidationError) ErrorName() string {
	return "GetDocumentReferencesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentReferencesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReferencesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReferencesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReferencesRequestValidationError{}

// Validate checks the field values on GetDocumentReferencesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentReferencesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentReferencesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDocumentReferencesResponseMultiError, or nil if none found.
func (m *GetDocumentReferencesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentReferencesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetReferences() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentReferencesResponseValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentReferencesResponseValidationError{
						field:  fmt.Sprintf("References[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentReferencesResponseValidationError{
					field:  fmt.Sprintf("References[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentReferencesResponseMultiError(errors)
	}

	return nil
}

// GetDocumentReferencesResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentReferencesResponse.ValidateAll()
// if the designated constraints aren't met.
type GetDocumentReferencesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentReferencesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentReferencesResponseMultiError) AllErrors() []error { return m }

// GetDocumentReferencesResponseValidationError is the validation error
// returned by GetDocumentReferencesResponse.Validate if the designated
// constraints aren't met.
type GetDocumentReferencesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentReferencesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentReferencesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentReferencesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentReferencesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentReferencesResponseValidationError) ErrorName() string {
	return "GetDocumentReferencesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentReferencesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentReferencesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentReferencesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentReferencesResponseValidationError{}

// Validate checks the field values on GetDocumentRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRelationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRelationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRelationsRequestMultiError, or nil if none found.
func (m *GetDocumentRelationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRelationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentRelationsRequestMultiError(errors)
	}

	return nil
}

// GetDocumentRelationsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDocumentRelationsRequest.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentRelationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRelationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRelationsRequestMultiError) AllErrors() []error { return m }

// GetDocumentRelationsRequestValidationError is the validation error returned
// by GetDocumentRelationsRequest.Validate if the designated constraints
// aren't met.
type GetDocumentRelationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRelationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRelationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRelationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRelationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRelationsRequestValidationError) ErrorName() string {
	return "GetDocumentRelationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRelationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRelationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRelationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRelationsRequestValidationError{}

// Validate checks the field values on GetDocumentRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentRelationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentRelationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentRelationsResponseMultiError, or nil if none found.
func (m *GetDocumentRelationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentRelationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetDocumentRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetDocumentRelationsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetDocumentRelationsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetDocumentRelationsResponseMultiError(errors)
	}

	return nil
}

// GetDocumentRelationsResponseMultiError is an error wrapping multiple
// validation errors returned by GetDocumentRelationsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetDocumentRelationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentRelationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentRelationsResponseMultiError) AllErrors() []error { return m }

// GetDocumentRelationsResponseValidationError is the validation error returned
// by GetDocumentRelationsResponse.Validate if the designated constraints
// aren't met.
type GetDocumentRelationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentRelationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentRelationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentRelationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentRelationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentRelationsResponseValidationError) ErrorName() string {
	return "GetDocumentRelationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentRelationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentRelationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentRelationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentRelationsResponseValidationError{}

// Validate checks the field values on AddDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentReferenceRequestMultiError, or nil if none found.
func (m *AddDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetReference() == nil {
		err := AddDocumentReferenceRequestValidationError{
			field:  "Reference",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetReference()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDocumentReferenceRequestValidationError{
					field:  "Reference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDocumentReferenceRequestValidationError{
					field:  "Reference",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReference()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDocumentReferenceRequestValidationError{
				field:  "Reference",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// AddDocumentReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by AddDocumentReferenceRequest.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// AddDocumentReferenceRequestValidationError is the validation error returned
// by AddDocumentReferenceRequest.Validate if the designated constraints
// aren't met.
type AddDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentReferenceRequestValidationError) ErrorName() string {
	return "AddDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentReferenceRequestValidationError{}

// Validate checks the field values on AddDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentReferenceResponseMultiError, or nil if none found.
func (m *AddDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// AddDocumentReferenceResponseMultiError is an error wrapping multiple
// validation errors returned by AddDocumentReferenceResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// AddDocumentReferenceResponseValidationError is the validation error returned
// by AddDocumentReferenceResponse.Validate if the designated constraints
// aren't met.
type AddDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentReferenceResponseValidationError) ErrorName() string {
	return "AddDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentReferenceResponseValidationError{}

// Validate checks the field values on RemoveDocumentReferenceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentReferenceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentReferenceRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentReferenceRequestMultiError, or nil if none found.
func (m *RemoveDocumentReferenceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentReferenceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveDocumentReferenceRequestMultiError(errors)
	}

	return nil
}

// RemoveDocumentReferenceRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentReferenceRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentReferenceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentReferenceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentReferenceRequestMultiError) AllErrors() []error { return m }

// RemoveDocumentReferenceRequestValidationError is the validation error
// returned by RemoveDocumentReferenceRequest.Validate if the designated
// constraints aren't met.
type RemoveDocumentReferenceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentReferenceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentReferenceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentReferenceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentReferenceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentReferenceRequestValidationError) ErrorName() string {
	return "RemoveDocumentReferenceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentReferenceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentReferenceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentReferenceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentReferenceRequestValidationError{}

// Validate checks the field values on RemoveDocumentReferenceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentReferenceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentReferenceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentReferenceResponseMultiError, or nil if none found.
func (m *RemoveDocumentReferenceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentReferenceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDocumentReferenceResponseMultiError(errors)
	}

	return nil
}

// RemoveDocumentReferenceResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentReferenceResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentReferenceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentReferenceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentReferenceResponseMultiError) AllErrors() []error { return m }

// RemoveDocumentReferenceResponseValidationError is the validation error
// returned by RemoveDocumentReferenceResponse.Validate if the designated
// constraints aren't met.
type RemoveDocumentReferenceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentReferenceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentReferenceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentReferenceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentReferenceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentReferenceResponseValidationError) ErrorName() string {
	return "RemoveDocumentReferenceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentReferenceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentReferenceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentReferenceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentReferenceResponseValidationError{}

// Validate checks the field values on AddDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentRelationRequestMultiError, or nil if none found.
func (m *AddDocumentRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRelation() == nil {
		err := AddDocumentRelationRequestValidationError{
			field:  "Relation",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRelation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddDocumentRelationRequestValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddDocumentRelationRequestValidationError{
					field:  "Relation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRelation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDocumentRelationRequestValidationError{
				field:  "Relation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddDocumentRelationRequestMultiError(errors)
	}

	return nil
}

// AddDocumentRelationRequestMultiError is an error wrapping multiple
// validation errors returned by AddDocumentRelationRequest.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentRelationRequestMultiError) AllErrors() []error { return m }

// AddDocumentRelationRequestValidationError is the validation error returned
// by AddDocumentRelationRequest.Validate if the designated constraints aren't met.
type AddDocumentRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentRelationRequestValidationError) ErrorName() string {
	return "AddDocumentRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentRelationRequestValidationError{}

// Validate checks the field values on AddDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddDocumentRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddDocumentRelationResponseMultiError, or nil if none found.
func (m *AddDocumentRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddDocumentRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AddDocumentRelationResponseMultiError(errors)
	}

	return nil
}

// AddDocumentRelationResponseMultiError is an error wrapping multiple
// validation errors returned by AddDocumentRelationResponse.ValidateAll() if
// the designated constraints aren't met.
type AddDocumentRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddDocumentRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddDocumentRelationResponseMultiError) AllErrors() []error { return m }

// AddDocumentRelationResponseValidationError is the validation error returned
// by AddDocumentRelationResponse.Validate if the designated constraints
// aren't met.
type AddDocumentRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDocumentRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDocumentRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDocumentRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDocumentRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDocumentRelationResponseValidationError) ErrorName() string {
	return "AddDocumentRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDocumentRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDocumentRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDocumentRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDocumentRelationResponseValidationError{}

// Validate checks the field values on RemoveDocumentRelationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentRelationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentRelationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentRelationRequestMultiError, or nil if none found.
func (m *RemoveDocumentRelationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentRelationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return RemoveDocumentRelationRequestMultiError(errors)
	}

	return nil
}

// RemoveDocumentRelationRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentRelationRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentRelationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentRelationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentRelationRequestMultiError) AllErrors() []error { return m }

// RemoveDocumentRelationRequestValidationError is the validation error
// returned by RemoveDocumentRelationRequest.Validate if the designated
// constraints aren't met.
type RemoveDocumentRelationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentRelationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentRelationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentRelationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentRelationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentRelationRequestValidationError) ErrorName() string {
	return "RemoveDocumentRelationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentRelationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentRelationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentRelationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentRelationRequestValidationError{}

// Validate checks the field values on RemoveDocumentRelationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveDocumentRelationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveDocumentRelationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveDocumentRelationResponseMultiError, or nil if none found.
func (m *RemoveDocumentRelationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveDocumentRelationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveDocumentRelationResponseMultiError(errors)
	}

	return nil
}

// RemoveDocumentRelationResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveDocumentRelationResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveDocumentRelationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveDocumentRelationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveDocumentRelationResponseMultiError) AllErrors() []error { return m }

// RemoveDocumentRelationResponseValidationError is the validation error
// returned by RemoveDocumentRelationResponse.Validate if the designated
// constraints aren't met.
type RemoveDocumentRelationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDocumentRelationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDocumentRelationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDocumentRelationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDocumentRelationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDocumentRelationResponseValidationError) ErrorName() string {
	return "RemoveDocumentRelationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDocumentRelationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDocumentRelationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDocumentRelationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDocumentRelationResponseValidationError{}

// Validate checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsRequestMultiError, or nil if none found.
func (m *GetCommentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := GetCommentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetCommentsRequestMultiError(errors)
	}

	return nil
}

// GetCommentsRequestMultiError is an error wrapping multiple validation errors
// returned by GetCommentsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCommentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsRequestMultiError) AllErrors() []error { return m }

// GetCommentsRequestValidationError is the validation error returned by
// GetCommentsRequest.Validate if the designated constraints aren't met.
type GetCommentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsRequestValidationError) ErrorName() string {
	return "GetCommentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsRequestValidationError{}

// Validate checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCommentsResponseMultiError, or nil if none found.
func (m *GetCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCommentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCommentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetComments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCommentsResponseValidationError{
						field:  fmt.Sprintf("Comments[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCommentsResponseValidationError{
					field:  fmt.Sprintf("Comments[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCommentsResponseMultiError(errors)
	}

	return nil
}

// GetCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetCommentsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCommentsResponseMultiError) AllErrors() []error { return m }

// GetCommentsResponseValidationError is the validation error returned by
// GetCommentsResponse.Validate if the designated constraints aren't met.
type GetCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCommentsResponseValidationError) ErrorName() string {
	return "GetCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCommentsResponseValidationError{}

// Validate checks the field values on PostCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostCommentRequestMultiError, or nil if none found.
func (m *PostCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PostCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := PostCommentRequestValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostCommentRequestMultiError(errors)
	}

	return nil
}

// PostCommentRequestMultiError is an error wrapping multiple validation errors
// returned by PostCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type PostCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostCommentRequestMultiError) AllErrors() []error { return m }

// PostCommentRequestValidationError is the validation error returned by
// PostCommentRequest.Validate if the designated constraints aren't met.
type PostCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostCommentRequestValidationError) ErrorName() string {
	return "PostCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PostCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostCommentRequestValidationError{}

// Validate checks the field values on PostCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PostCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PostCommentResponseMultiError, or nil if none found.
func (m *PostCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PostCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PostCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PostCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PostCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PostCommentResponseMultiError(errors)
	}

	return nil
}

// PostCommentResponseMultiError is an error wrapping multiple validation
// errors returned by PostCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type PostCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostCommentResponseMultiError) AllErrors() []error { return m }

// PostCommentResponseValidationError is the validation error returned by
// PostCommentResponse.Validate if the designated constraints aren't met.
type PostCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostCommentResponseValidationError) ErrorName() string {
	return "PostCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PostCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostCommentResponseValidationError{}

// Validate checks the field values on EditCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCommentRequestMultiError, or nil if none found.
func (m *EditCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetComment() == nil {
		err := EditCommentRequestValidationError{
			field:  "Comment",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditCommentRequestMultiError(errors)
	}

	return nil
}

// EditCommentRequestMultiError is an error wrapping multiple validation errors
// returned by EditCommentRequest.ValidateAll() if the designated constraints
// aren't met.
type EditCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCommentRequestMultiError) AllErrors() []error { return m }

// EditCommentRequestValidationError is the validation error returned by
// EditCommentRequest.Validate if the designated constraints aren't met.
type EditCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCommentRequestValidationError) ErrorName() string {
	return "EditCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EditCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCommentRequestValidationError{}

// Validate checks the field values on EditCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditCommentResponseMultiError, or nil if none found.
func (m *EditCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditCommentResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditCommentResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditCommentResponseMultiError(errors)
	}

	return nil
}

// EditCommentResponseMultiError is an error wrapping multiple validation
// errors returned by EditCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type EditCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditCommentResponseMultiError) AllErrors() []error { return m }

// EditCommentResponseValidationError is the validation error returned by
// EditCommentResponse.Validate if the designated constraints aren't met.
type EditCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditCommentResponseValidationError) ErrorName() string {
	return "EditCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditCommentResponseValidationError{}

// Validate checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentRequestMultiError, or nil if none found.
func (m *DeleteCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return DeleteCommentRequestMultiError(errors)
	}

	return nil
}

// DeleteCommentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentRequestMultiError) AllErrors() []error { return m }

// DeleteCommentRequestValidationError is the validation error returned by
// DeleteCommentRequest.Validate if the designated constraints aren't met.
type DeleteCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentRequestValidationError) ErrorName() string {
	return "DeleteCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentRequestValidationError{}

// Validate checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCommentResponseMultiError, or nil if none found.
func (m *DeleteCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCommentResponseMultiError(errors)
	}

	return nil
}

// DeleteCommentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCommentResponseMultiError) AllErrors() []error { return m }

// DeleteCommentResponseValidationError is the validation error returned by
// DeleteCommentResponse.Validate if the designated constraints aren't met.
type DeleteCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCommentResponseValidationError) ErrorName() string {
	return "DeleteCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCommentResponseValidationError{}

// Validate checks the field values on UpdateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentResponseMultiError, or nil if none found.
func (m *UpdateDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDocument()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDocumentResponseValidationError{
					field:  "Document",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocument()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDocumentResponseValidationError{
				field:  "Document",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDocumentResponseMultiError(errors)
	}

	return nil
}

// UpdateDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentResponseMultiError) AllErrors() []error { return m }

// UpdateDocumentResponseValidationError is the validation error returned by
// UpdateDocumentResponse.Validate if the designated constraints aren't met.
type UpdateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentResponseValidationError) ErrorName() string {
	return "UpdateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentResponseValidationError{}

// Validate checks the field values on DeleteDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentRequestMultiError, or nil if none found.
func (m *DeleteDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if m.Reason != nil {

		if utf8.RuneCountInString(m.GetReason()) > 255 {
			err := DeleteDocumentRequestValidationError{
				field:  "Reason",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return DeleteDocumentRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentRequestValidationError is the validation error returned by
// DeleteDocumentRequest.Validate if the designated constraints aren't met.
type DeleteDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentRequestValidationError) ErrorName() string {
	return "DeleteDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentRequestValidationError{}

// Validate checks the field values on DeleteDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentResponseMultiError, or nil if none found.
func (m *DeleteDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentResponseMultiError(errors)
	}

	return nil
}

// DeleteDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentResponseMultiError) AllErrors() []error { return m }

// DeleteDocumentResponseValidationError is the validation error returned by
// DeleteDocumentResponse.Validate if the designated constraints aren't met.
type DeleteDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentResponseValidationError) ErrorName() string {
	return "DeleteDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentResponseValidationError{}

// Validate checks the field values on ToggleDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleDocumentRequestMultiError, or nil if none found.
func (m *ToggleDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for Closed

	if len(errors) > 0 {
		return ToggleDocumentRequestMultiError(errors)
	}

	return nil
}

// ToggleDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type ToggleDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleDocumentRequestMultiError) AllErrors() []error { return m }

// ToggleDocumentRequestValidationError is the validation error returned by
// ToggleDocumentRequest.Validate if the designated constraints aren't met.
type ToggleDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleDocumentRequestValidationError) ErrorName() string {
	return "ToggleDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleDocumentRequestValidationError{}

// Validate checks the field values on ToggleDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleDocumentResponseMultiError, or nil if none found.
func (m *ToggleDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ToggleDocumentResponseMultiError(errors)
	}

	return nil
}

// ToggleDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by ToggleDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type ToggleDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleDocumentResponseMultiError) AllErrors() []error { return m }

// ToggleDocumentResponseValidationError is the validation error returned by
// ToggleDocumentResponse.Validate if the designated constraints aren't met.
type ToggleDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleDocumentResponseValidationError) ErrorName() string {
	return "ToggleDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleDocumentResponseValidationError{}

// Validate checks the field values on ChangeDocumentOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDocumentOwnerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDocumentOwnerRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDocumentOwnerRequestMultiError, or nil if none found.
func (m *ChangeDocumentOwnerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDocumentOwnerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if m.NewUserId != nil {
		// no validation rules for NewUserId
	}

	if len(errors) > 0 {
		return ChangeDocumentOwnerRequestMultiError(errors)
	}

	return nil
}

// ChangeDocumentOwnerRequestMultiError is an error wrapping multiple
// validation errors returned by ChangeDocumentOwnerRequest.ValidateAll() if
// the designated constraints aren't met.
type ChangeDocumentOwnerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDocumentOwnerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDocumentOwnerRequestMultiError) AllErrors() []error { return m }

// ChangeDocumentOwnerRequestValidationError is the validation error returned
// by ChangeDocumentOwnerRequest.Validate if the designated constraints aren't met.
type ChangeDocumentOwnerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDocumentOwnerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDocumentOwnerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDocumentOwnerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDocumentOwnerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDocumentOwnerRequestValidationError) ErrorName() string {
	return "ChangeDocumentOwnerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDocumentOwnerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDocumentOwnerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDocumentOwnerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDocumentOwnerRequestValidationError{}

// Validate checks the field values on ChangeDocumentOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeDocumentOwnerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeDocumentOwnerResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeDocumentOwnerResponseMultiError, or nil if none found.
func (m *ChangeDocumentOwnerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeDocumentOwnerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeDocumentOwnerResponseMultiError(errors)
	}

	return nil
}

// ChangeDocumentOwnerResponseMultiError is an error wrapping multiple
// validation errors returned by ChangeDocumentOwnerResponse.ValidateAll() if
// the designated constraints aren't met.
type ChangeDocumentOwnerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeDocumentOwnerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeDocumentOwnerResponseMultiError) AllErrors() []error { return m }

// ChangeDocumentOwnerResponseValidationError is the validation error returned
// by ChangeDocumentOwnerResponse.Validate if the designated constraints
// aren't met.
type ChangeDocumentOwnerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeDocumentOwnerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeDocumentOwnerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeDocumentOwnerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeDocumentOwnerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeDocumentOwnerResponseValidationError) ErrorName() string {
	return "ChangeDocumentOwnerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeDocumentOwnerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeDocumentOwnerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeDocumentOwnerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeDocumentOwnerResponseValidationError{}

// Validate checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentRequestMultiError, or nil if none found.
func (m *CreateDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := content.ContentType_name[int32(m.GetContentType())]; !ok {
		err := CreateDocumentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.TemplateId != nil {
		// no validation rules for TemplateId
	}

	if m.TemplateData != nil {

		if all {
			switch v := interface{}(m.GetTemplateData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDocumentRequestValidationError{
						field:  "TemplateData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDocumentRequestValidationError{
						field:  "TemplateData",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTemplateData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDocumentRequestValidationError{
					field:  "TemplateData",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDocumentRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentRequestMultiError) AllErrors() []error { return m }

// CreateDocumentRequestValidationError is the validation error returned by
// CreateDocumentRequest.Validate if the designated constraints aren't met.
type CreateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentRequestValidationError) ErrorName() string {
	return "CreateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentRequestValidationError{}

// Validate checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentResponseMultiError, or nil if none found.
func (m *CreateDocumentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDocumentResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentResponseMultiError) AllErrors() []error { return m }

// CreateDocumentResponseValidationError is the validation error returned by
// CreateDocumentResponse.Validate if the designated constraints aren't met.
type CreateDocumentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentResponseValidationError) ErrorName() string {
	return "CreateDocumentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentResponseValidationError{}

// Validate checks the field values on UpdateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentRequestMultiError, or nil if none found.
func (m *UpdateDocumentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 255 {
		err := UpdateDocumentRequestValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDocumentRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDocumentRequestValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDocumentRequestValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := content.ContentType_name[int32(m.GetContentType())]; !ok {
		err := UpdateDocumentRequestValidationError{
			field:  "ContentType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetState()) > 32 {
		err := UpdateDocumentRequestValidationError{
			field:  "State",
			reason: "value length must be at most 32 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Closed

	// no validation rules for Draft

	// no validation rules for Public

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  fmt.Sprintf("Files[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDocumentRequestValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.CategoryId != nil {
		// no validation rules for CategoryId
	}

	if m.Data != nil {

		if len(m.GetData()) > 1000000 {
			err := UpdateDocumentRequestValidationError{
				field:  "Data",
				reason: "value length must be at most 1000000 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Access != nil {

		if all {
			switch v := interface{}(m.GetAccess()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDocumentRequestValidationError{
						field:  "Access",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDocumentRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDocumentRequestMultiError(errors)
	}

	return nil
}

// UpdateDocumentRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentRequestMultiError) AllErrors() []error { return m }

// UpdateDocumentRequestValidationError is the validation error returned by
// UpdateDocumentRequest.Validate if the designated constraints aren't met.
type UpdateDocumentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentRequestValidationError) ErrorName() string {
	return "UpdateDocumentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentRequestValidationError{}

// Validate checks the field values on ListDocumentActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentActivityRequestMultiError, or nil if none found.
func (m *ListDocumentActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentActivityRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentActivityRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(m.GetActivityTypes()) > 10 {
		err := ListDocumentActivityRequestValidationError{
			field:  "ActivityTypes",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetActivityTypes() {
		_, _ = idx, item

		if _, ok := _ListDocumentActivityRequest_ActivityTypes_InLookup[item]; !ok {
			err := ListDocumentActivityRequestValidationError{
				field:  fmt.Sprintf("ActivityTypes[%v]", idx),
				reason: "value must be in list [13 14 15 16 17 18]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListDocumentActivityRequestMultiError(errors)
	}

	return nil
}

// ListDocumentActivityRequestMultiError is an error wrapping multiple
// validation errors returned by ListDocumentActivityRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDocumentActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentActivityRequestMultiError) AllErrors() []error { return m }

// ListDocumentActivityRequestValidationError is the validation error returned
// by ListDocumentActivityRequest.Validate if the designated constraints
// aren't met.
type ListDocumentActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentActivityRequestValidationError) ErrorName() string {
	return "ListDocumentActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentActivityRequestValidationError{}

var _ListDocumentActivityRequest_ActivityTypes_InLookup = map[documents.DocActivityType]struct{}{
	13: {},
	14: {},
	15: {},
	16: {},
	17: {},
	18: {},
}

// Validate checks the field values on ListDocumentActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentActivityResponseMultiError, or nil if none found.
func (m *ListDocumentActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentActivityResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentActivityResponseValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentActivityResponseMultiError(errors)
	}

	return nil
}

// ListDocumentActivityResponseMultiError is an error wrapping multiple
// validation errors returned by ListDocumentActivityResponse.ValidateAll() if
// the designated constraints aren't met.
type ListDocumentActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentActivityResponseMultiError) AllErrors() []error { return m }

// ListDocumentActivityResponseValidationError is the validation error returned
// by ListDocumentActivityResponse.Validate if the designated constraints
// aren't met.
type ListDocumentActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentActivityResponseValidationError) ErrorName() string {
	return "ListDocumentActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentActivityResponseValidationError{}

// Validate checks the field values on ListDocumentReqsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentReqsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentReqsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentReqsRequestMultiError, or nil if none found.
func (m *ListDocumentReqsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentReqsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentReqsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentReqsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentReqsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentReqsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return ListDocumentReqsRequestMultiError(errors)
	}

	return nil
}

// ListDocumentReqsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDocumentReqsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentReqsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentReqsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentReqsRequestMultiError) AllErrors() []error { return m }

// ListDocumentReqsRequestValidationError is the validation error returned by
// ListDocumentReqsRequest.Validate if the designated constraints aren't met.
type ListDocumentReqsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentReqsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentReqsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentReqsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentReqsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentReqsRequestValidationError) ErrorName() string {
	return "ListDocumentReqsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentReqsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentReqsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentReqsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentReqsRequestValidationError{}

// Validate checks the field values on ListDocumentReqsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentReqsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentReqsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentReqsResponseMultiError, or nil if none found.
func (m *ListDocumentReqsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentReqsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentReqsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentReqsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentReqsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRequests() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentReqsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentReqsResponseValidationError{
						field:  fmt.Sprintf("Requests[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentReqsResponseValidationError{
					field:  fmt.Sprintf("Requests[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentReqsResponseMultiError(errors)
	}

	return nil
}

// ListDocumentReqsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDocumentReqsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentReqsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentReqsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentReqsResponseMultiError) AllErrors() []error { return m }

// ListDocumentReqsResponseValidationError is the validation error returned by
// ListDocumentReqsResponse.Validate if the designated constraints aren't met.
type ListDocumentReqsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentReqsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentReqsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentReqsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentReqsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentReqsResponseValidationError) ErrorName() string {
	return "ListDocumentReqsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentReqsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentReqsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentReqsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentReqsResponseValidationError{}

// Validate checks the field values on CreateDocumentReqRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentReqRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentReqRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentReqRequestMultiError, or nil if none found.
func (m *CreateDocumentReqRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentReqRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if _, ok := _CreateDocumentReqRequest_RequestType_InLookup[m.GetRequestType()]; !ok {
		err := CreateDocumentReqRequestValidationError{
			field:  "RequestType",
			reason: "value must be in list [DOC_ACTIVITY_TYPE_REQUESTED_ACCESS DOC_ACTIVITY_TYPE_REQUESTED_CLOSURE DOC_ACTIVITY_TYPE_REQUESTED_OPENING DOC_ACTIVITY_TYPE_REQUESTED_UPDATE DOC_ACTIVITY_TYPE_REQUESTED_OWNER_CHANGE DOC_ACTIVITY_TYPE_REQUESTED_DELETION]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Reason != nil {

		if utf8.RuneCountInString(m.GetReason()) > 255 {
			err := CreateDocumentReqRequestValidationError{
				field:  "Reason",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateDocumentReqRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateDocumentReqRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateDocumentReqRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateDocumentReqRequestMultiError(errors)
	}

	return nil
}

// CreateDocumentReqRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentReqRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDocumentReqRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentReqRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentReqRequestMultiError) AllErrors() []error { return m }

// CreateDocumentReqRequestValidationError is the validation error returned by
// CreateDocumentReqRequest.Validate if the designated constraints aren't met.
type CreateDocumentReqRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentReqRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentReqRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentReqRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentReqRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentReqRequestValidationError) ErrorName() string {
	return "CreateDocumentReqRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentReqRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentReqRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentReqRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentReqRequestValidationError{}

var _CreateDocumentReqRequest_RequestType_InLookup = map[documents.DocActivityType]struct{}{
	13: {},
	14: {},
	15: {},
	16: {},
	17: {},
	18: {},
}

// Validate checks the field values on CreateDocumentReqResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDocumentReqResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDocumentReqResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDocumentReqResponseMultiError, or nil if none found.
func (m *CreateDocumentReqResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDocumentReqResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDocumentReqResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDocumentReqResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDocumentReqResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDocumentReqResponseMultiError(errors)
	}

	return nil
}

// CreateDocumentReqResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDocumentReqResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateDocumentReqResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDocumentReqResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDocumentReqResponseMultiError) AllErrors() []error { return m }

// CreateDocumentReqResponseValidationError is the validation error returned by
// CreateDocumentReqResponse.Validate if the designated constraints aren't met.
type CreateDocumentReqResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDocumentReqResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDocumentReqResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDocumentReqResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDocumentReqResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDocumentReqResponseValidationError) ErrorName() string {
	return "CreateDocumentReqResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDocumentReqResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDocumentReqResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDocumentReqResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDocumentReqResponseValidationError{}

// Validate checks the field values on UpdateDocumentReqRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentReqRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentReqRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentReqRequestMultiError, or nil if none found.
func (m *UpdateDocumentReqRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentReqRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for RequestId

	// no validation rules for Accepted

	if m.Reason != nil {

		if utf8.RuneCountInString(m.GetReason()) > 255 {
			err := UpdateDocumentReqRequestValidationError{
				field:  "Reason",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateDocumentReqRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateDocumentReqRequestValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateDocumentReqRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateDocumentReqRequestMultiError(errors)
	}

	return nil
}

// UpdateDocumentReqRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentReqRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDocumentReqRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentReqRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentReqRequestMultiError) AllErrors() []error { return m }

// UpdateDocumentReqRequestValidationError is the validation error returned by
// UpdateDocumentReqRequest.Validate if the designated constraints aren't met.
type UpdateDocumentReqRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentReqRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentReqRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentReqRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentReqRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentReqRequestValidationError) ErrorName() string {
	return "UpdateDocumentReqRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentReqRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentReqRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentReqRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentReqRequestValidationError{}

// Validate checks the field values on UpdateDocumentReqResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDocumentReqResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDocumentReqResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDocumentReqResponseMultiError, or nil if none found.
func (m *UpdateDocumentReqResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDocumentReqResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDocumentReqResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDocumentReqResponseValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDocumentReqResponseValidationError{
				field:  "Request",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDocumentReqResponseMultiError(errors)
	}

	return nil
}

// UpdateDocumentReqResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDocumentReqResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateDocumentReqResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDocumentReqResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDocumentReqResponseMultiError) AllErrors() []error { return m }

// UpdateDocumentReqResponseValidationError is the validation error returned by
// UpdateDocumentReqResponse.Validate if the designated constraints aren't met.
type UpdateDocumentReqResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDocumentReqResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDocumentReqResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDocumentReqResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDocumentReqResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDocumentReqResponseValidationError) ErrorName() string {
	return "UpdateDocumentReqResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDocumentReqResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDocumentReqResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDocumentReqResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDocumentReqResponseValidationError{}

// Validate checks the field values on DeleteDocumentReqRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentReqRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentReqRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentReqRequestMultiError, or nil if none found.
func (m *DeleteDocumentReqRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentReqRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RequestId

	if len(errors) > 0 {
		return DeleteDocumentReqRequestMultiError(errors)
	}

	return nil
}

// DeleteDocumentReqRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentReqRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDocumentReqRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentReqRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentReqRequestMultiError) AllErrors() []error { return m }

// DeleteDocumentReqRequestValidationError is the validation error returned by
// DeleteDocumentReqRequest.Validate if the designated constraints aren't met.
type DeleteDocumentReqRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentReqRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentReqRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentReqRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentReqRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentReqRequestValidationError) ErrorName() string {
	return "DeleteDocumentReqRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentReqRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentReqRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentReqRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentReqRequestValidationError{}

// Validate checks the field values on DeleteDocumentReqResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDocumentReqResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDocumentReqResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDocumentReqResponseMultiError, or nil if none found.
func (m *DeleteDocumentReqResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDocumentReqResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDocumentReqResponseMultiError(errors)
	}

	return nil
}

// DeleteDocumentReqResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDocumentReqResponse.ValidateAll() if the
// designated constraints aren't met.
type DeleteDocumentReqResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDocumentReqResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDocumentReqResponseMultiError) AllErrors() []error { return m }

// DeleteDocumentReqResponseValidationError is the validation error returned by
// DeleteDocumentReqResponse.Validate if the designated constraints aren't met.
type DeleteDocumentReqResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDocumentReqResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDocumentReqResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDocumentReqResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDocumentReqResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDocumentReqResponseValidationError) ErrorName() string {
	return "DeleteDocumentReqResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDocumentReqResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDocumentReqResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDocumentReqResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDocumentReqResponseValidationError{}

// Validate checks the field values on GetDocumentAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentAccessRequestMultiError, or nil if none found.
func (m *GetDocumentAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if len(errors) > 0 {
		return GetDocumentAccessRequestMultiError(errors)
	}

	return nil
}

// GetDocumentAccessRequestMultiError is an error wrapping multiple validation
// errors returned by GetDocumentAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type GetDocumentAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentAccessRequestMultiError) AllErrors() []error { return m }

// GetDocumentAccessRequestValidationError is the validation error returned by
// GetDocumentAccessRequest.Validate if the designated constraints aren't met.
type GetDocumentAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentAccessRequestValidationError) ErrorName() string {
	return "GetDocumentAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentAccessRequestValidationError{}

// Validate checks the field values on GetDocumentAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDocumentAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDocumentAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDocumentAccessResponseMultiError, or nil if none found.
func (m *GetDocumentAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDocumentAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetAccess() == nil {
		err := GetDocumentAccessResponseValidationError{
			field:  "Access",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDocumentAccessResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDocumentAccessResponseValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDocumentAccessResponseValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDocumentAccessResponseMultiError(errors)
	}

	return nil
}

// GetDocumentAccessResponseMultiError is an error wrapping multiple validation
// errors returned by GetDocumentAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type GetDocumentAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDocumentAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDocumentAccessResponseMultiError) AllErrors() []error { return m }

// GetDocumentAccessResponseValidationError is the validation error returned by
// GetDocumentAccessResponse.Validate if the designated constraints aren't met.
type GetDocumentAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDocumentAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDocumentAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDocumentAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDocumentAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDocumentAccessResponseValidationError) ErrorName() string {
	return "GetDocumentAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDocumentAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDocumentAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDocumentAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDocumentAccessResponseValidationError{}

// Validate checks the field values on SetDocumentAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentAccessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentAccessRequestMultiError, or nil if none found.
func (m *SetDocumentAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if m.GetAccess() == nil {
		err := SetDocumentAccessRequestValidationError{
			field:  "Access",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetDocumentAccessRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetDocumentAccessRequestValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDocumentAccessRequestValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetDocumentAccessRequestMultiError(errors)
	}

	return nil
}

// SetDocumentAccessRequestMultiError is an error wrapping multiple validation
// errors returned by SetDocumentAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type SetDocumentAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentAccessRequestMultiError) AllErrors() []error { return m }

// SetDocumentAccessRequestValidationError is the validation error returned by
// SetDocumentAccessRequest.Validate if the designated constraints aren't met.
type SetDocumentAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentAccessRequestValidationError) ErrorName() string {
	return "SetDocumentAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentAccessRequestValidationError{}

// Validate checks the field values on SetDocumentAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentAccessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentAccessResponseMultiError, or nil if none found.
func (m *SetDocumentAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDocumentAccessResponseMultiError(errors)
	}

	return nil
}

// SetDocumentAccessResponseMultiError is an error wrapping multiple validation
// errors returned by SetDocumentAccessResponse.ValidateAll() if the
// designated constraints aren't met.
type SetDocumentAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentAccessResponseMultiError) AllErrors() []error { return m }

// SetDocumentAccessResponseValidationError is the validation error returned by
// SetDocumentAccessResponse.Validate if the designated constraints aren't met.
type SetDocumentAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentAccessResponseValidationError) ErrorName() string {
	return "SetDocumentAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentAccessResponseValidationError{}

// Validate checks the field values on ListUserDocumentsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDocumentsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDocumentsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDocumentsRequestMultiError, or nil if none found.
func (m *ListUserDocumentsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDocumentsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListUserDocumentsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserDocumentsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserDocumentsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := ListUserDocumentsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRelations()) > 3 {
		err := ListUserDocumentsRequestValidationError{
			field:  "Relations",
			reason: "value must contain no more than 3 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserDocumentsRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserDocumentsRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserDocumentsRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Closed != nil {
		// no validation rules for Closed
	}

	if len(errors) > 0 {
		return ListUserDocumentsRequestMultiError(errors)
	}

	return nil
}

// ListUserDocumentsRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserDocumentsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserDocumentsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDocumentsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDocumentsRequestMultiError) AllErrors() []error { return m }

// ListUserDocumentsRequestValidationError is the validation error returned by
// ListUserDocumentsRequest.Validate if the designated constraints aren't met.
type ListUserDocumentsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDocumentsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDocumentsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDocumentsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDocumentsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDocumentsRequestValidationError) ErrorName() string {
	return "ListUserDocumentsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDocumentsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDocumentsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDocumentsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDocumentsRequestValidationError{}

// Validate checks the field values on ListUserDocumentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserDocumentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserDocumentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserDocumentsResponseMultiError, or nil if none found.
func (m *ListUserDocumentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserDocumentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserDocumentsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserDocumentsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRelations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserDocumentsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserDocumentsResponseValidationError{
						field:  fmt.Sprintf("Relations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserDocumentsResponseValidationError{
					field:  fmt.Sprintf("Relations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserDocumentsResponseMultiError(errors)
	}

	return nil
}

// ListUserDocumentsResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserDocumentsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListUserDocumentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserDocumentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserDocumentsResponseMultiError) AllErrors() []error { return m }

// ListUserDocumentsResponseValidationError is the validation error returned by
// ListUserDocumentsResponse.Validate if the designated constraints aren't met.
type ListUserDocumentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserDocumentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserDocumentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserDocumentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserDocumentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserDocumentsResponseValidationError) ErrorName() string {
	return "ListUserDocumentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserDocumentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserDocumentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserDocumentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserDocumentsResponseValidationError{}

// Validate checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesRequestMultiError, or nil if none found.
func (m *ListCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListCategoriesRequestMultiError(errors)
	}

	return nil
}

// ListCategoriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesRequestMultiError) AllErrors() []error { return m }

// ListCategoriesRequestValidationError is the validation error returned by
// ListCategoriesRequest.Validate if the designated constraints aren't met.
type ListCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesRequestValidationError) ErrorName() string {
	return "ListCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesRequestValidationError{}

// Validate checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCategoriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCategoriesResponseMultiError, or nil if none found.
func (m *ListCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCategoriesResponseMultiError(errors)
	}

	return nil
}

// ListCategoriesResponseMultiError is an error wrapping multiple validation
// errors returned by ListCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCategoriesResponseMultiError) AllErrors() []error { return m }

// ListCategoriesResponseValidationError is the validation error returned by
// ListCategoriesResponse.Validate if the designated constraints aren't met.
type ListCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCategoriesResponseValidationError) ErrorName() string {
	return "ListCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCategoriesResponseValidationError{}

// Validate checks the field values on CreateOrUpdateCategoryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCategoryRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCategoryRequestMultiError, or nil if none found.
func (m *CreateOrUpdateCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := CreateOrUpdateCategoryRequestValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCategoryRequestValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCategoryRequestValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCategoryRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCategoryRequestMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateCategoryRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCategoryRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateCategoryRequestValidationError is the validation error
// returned by CreateOrUpdateCategoryRequest.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCategoryRequestValidationError) ErrorName() string {
	return "CreateOrUpdateCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCategoryRequestValidationError{}

// Validate checks the field values on CreateOrUpdateCategoryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateCategoryResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateOrUpdateCategoryResponseMultiError, or nil if none found.
func (m *CreateOrUpdateCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCategory() == nil {
		err := CreateOrUpdateCategoryResponseValidationError{
			field:  "Category",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCategory()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateCategoryResponseValidationError{
					field:  "Category",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategory()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateCategoryResponseValidationError{
				field:  "Category",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateCategoryResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateCategoryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateCategoryResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateOrUpdateCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateCategoryResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateCategoryResponseValidationError is the validation error
// returned by CreateOrUpdateCategoryResponse.Validate if the designated
// constraints aren't met.
type CreateOrUpdateCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateCategoryResponseValidationError) ErrorName() string {
	return "CreateOrUpdateCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateCategoryResponseValidationError{}

// Validate checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryRequestMultiError, or nil if none found.
func (m *DeleteCategoryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteCategoryRequestMultiError(errors)
	}

	return nil
}

// DeleteCategoryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryRequestMultiError) AllErrors() []error { return m }

// DeleteCategoryRequestValidationError is the validation error returned by
// DeleteCategoryRequest.Validate if the designated constraints aren't met.
type DeleteCategoryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryRequestValidationError) ErrorName() string {
	return "DeleteCategoryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryRequestValidationError{}

// Validate checks the field values on DeleteCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCategoryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCategoryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCategoryResponseMultiError, or nil if none found.
func (m *DeleteCategoryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCategoryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteCategoryResponseMultiError(errors)
	}

	return nil
}

// DeleteCategoryResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCategoryResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCategoryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCategoryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCategoryResponseMultiError) AllErrors() []error { return m }

// DeleteCategoryResponseValidationError is the validation error returned by
// DeleteCategoryResponse.Validate if the designated constraints aren't met.
type DeleteCategoryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCategoryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCategoryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCategoryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCategoryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCategoryResponseValidationError) ErrorName() string {
	return "DeleteCategoryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCategoryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCategoryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCategoryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCategoryResponseValidationError{}

// Validate checks the field values on ListDocumentPinsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentPinsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentPinsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentPinsRequestMultiError, or nil if none found.
func (m *ListDocumentPinsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentPinsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDocumentPinsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentPinsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentPinsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentPinsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Personal != nil {
		// no validation rules for Personal
	}

	if len(errors) > 0 {
		return ListDocumentPinsRequestMultiError(errors)
	}

	return nil
}

// ListDocumentPinsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDocumentPinsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentPinsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentPinsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentPinsRequestMultiError) AllErrors() []error { return m }

// ListDocumentPinsRequestValidationError is the validation error returned by
// ListDocumentPinsRequest.Validate if the designated constraints aren't met.
type ListDocumentPinsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentPinsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentPinsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentPinsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentPinsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentPinsRequestValidationError) ErrorName() string {
	return "ListDocumentPinsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentPinsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentPinsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentPinsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentPinsRequestValidationError{}

// Validate checks the field values on ListDocumentPinsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDocumentPinsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDocumentPinsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDocumentPinsResponseMultiError, or nil if none found.
func (m *ListDocumentPinsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDocumentPinsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDocumentPinsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDocumentPinsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDocumentPinsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDocuments() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDocumentPinsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDocumentPinsResponseValidationError{
						field:  fmt.Sprintf("Documents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDocumentPinsResponseValidationError{
					field:  fmt.Sprintf("Documents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDocumentPinsResponseMultiError(errors)
	}

	return nil
}

// ListDocumentPinsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDocumentPinsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDocumentPinsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDocumentPinsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDocumentPinsResponseMultiError) AllErrors() []error { return m }

// ListDocumentPinsResponseValidationError is the validation error returned by
// ListDocumentPinsResponse.Validate if the designated constraints aren't met.
type ListDocumentPinsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDocumentPinsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDocumentPinsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDocumentPinsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDocumentPinsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDocumentPinsResponseValidationError) ErrorName() string {
	return "ListDocumentPinsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDocumentPinsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDocumentPinsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDocumentPinsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDocumentPinsResponseValidationError{}

// Validate checks the field values on ToggleDocumentPinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleDocumentPinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleDocumentPinRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleDocumentPinRequestMultiError, or nil if none found.
func (m *ToggleDocumentPinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleDocumentPinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	// no validation rules for State

	if m.Personal != nil {
		// no validation rules for Personal
	}

	if len(errors) > 0 {
		return ToggleDocumentPinRequestMultiError(errors)
	}

	return nil
}

// ToggleDocumentPinRequestMultiError is an error wrapping multiple validation
// errors returned by ToggleDocumentPinRequest.ValidateAll() if the designated
// constraints aren't met.
type ToggleDocumentPinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleDocumentPinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleDocumentPinRequestMultiError) AllErrors() []error { return m }

// ToggleDocumentPinRequestValidationError is the validation error returned by
// ToggleDocumentPinRequest.Validate if the designated constraints aren't met.
type ToggleDocumentPinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleDocumentPinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleDocumentPinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleDocumentPinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleDocumentPinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleDocumentPinRequestValidationError) ErrorName() string {
	return "ToggleDocumentPinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleDocumentPinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleDocumentPinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleDocumentPinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleDocumentPinRequestValidationError{}

// Validate checks the field values on ToggleDocumentPinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ToggleDocumentPinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ToggleDocumentPinResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ToggleDocumentPinResponseMultiError, or nil if none found.
func (m *ToggleDocumentPinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ToggleDocumentPinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Pin != nil {

		if all {
			switch v := interface{}(m.GetPin()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ToggleDocumentPinResponseValidationError{
						field:  "Pin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ToggleDocumentPinResponseValidationError{
						field:  "Pin",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPin()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ToggleDocumentPinResponseValidationError{
					field:  "Pin",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ToggleDocumentPinResponseMultiError(errors)
	}

	return nil
}

// ToggleDocumentPinResponseMultiError is an error wrapping multiple validation
// errors returned by ToggleDocumentPinResponse.ValidateAll() if the
// designated constraints aren't met.
type ToggleDocumentPinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ToggleDocumentPinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ToggleDocumentPinResponseMultiError) AllErrors() []error { return m }

// ToggleDocumentPinResponseValidationError is the validation error returned by
// ToggleDocumentPinResponse.Validate if the designated constraints aren't met.
type ToggleDocumentPinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ToggleDocumentPinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ToggleDocumentPinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ToggleDocumentPinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ToggleDocumentPinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ToggleDocumentPinResponseValidationError) ErrorName() string {
	return "ToggleDocumentPinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ToggleDocumentPinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sToggleDocumentPinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ToggleDocumentPinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ToggleDocumentPinResponseValidationError{}

// Validate checks the field values on SetDocumentReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentReminderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentReminderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentReminderRequestMultiError, or nil if none found.
func (m *SetDocumentReminderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentReminderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DocumentId

	if m.ReminderTime != nil {

		if all {
			switch v := interface{}(m.GetReminderTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetDocumentReminderRequestValidationError{
						field:  "ReminderTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetDocumentReminderRequestValidationError{
						field:  "ReminderTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetReminderTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetDocumentReminderRequestValidationError{
					field:  "ReminderTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Message != nil {

		if len(m.GetMessage()) > 1024 {
			err := SetDocumentReminderRequestValidationError{
				field:  "Message",
				reason: "value length must be at most 1024 bytes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SetDocumentReminderRequestMultiError(errors)
	}

	return nil
}

// SetDocumentReminderRequestMultiError is an error wrapping multiple
// validation errors returned by SetDocumentReminderRequest.ValidateAll() if
// the designated constraints aren't met.
type SetDocumentReminderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentReminderRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentReminderRequestMultiError) AllErrors() []error { return m }

// SetDocumentReminderRequestValidationError is the validation error returned
// by SetDocumentReminderRequest.Validate if the designated constraints aren't met.
type SetDocumentReminderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentReminderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentReminderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentReminderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentReminderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentReminderRequestValidationError) ErrorName() string {
	return "SetDocumentReminderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentReminderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentReminderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentReminderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentReminderRequestValidationError{}

// Validate checks the field values on SetDocumentReminderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetDocumentReminderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetDocumentReminderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetDocumentReminderResponseMultiError, or nil if none found.
func (m *SetDocumentReminderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetDocumentReminderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetDocumentReminderResponseMultiError(errors)
	}

	return nil
}

// SetDocumentReminderResponseMultiError is an error wrapping multiple
// validation errors returned by SetDocumentReminderResponse.ValidateAll() if
// the designated constraints aren't met.
type SetDocumentReminderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetDocumentReminderResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetDocumentReminderResponseMultiError) AllErrors() []error { return m }

// SetDocumentReminderResponseValidationError is the validation error returned
// by SetDocumentReminderResponse.Validate if the designated constraints
// aren't met.
type SetDocumentReminderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDocumentReminderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDocumentReminderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDocumentReminderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDocumentReminderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDocumentReminderResponseValidationError) ErrorName() string {
	return "SetDocumentReminderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDocumentReminderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDocumentReminderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDocumentReminderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDocumentReminderResponseValidationError{}
