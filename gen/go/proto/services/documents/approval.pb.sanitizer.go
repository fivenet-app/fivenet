// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: services/documents/approval.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *AddReviewersRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Selector
	if m.Selector != nil {
		if v, ok := any(m.GetSelector()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *AddReviewersResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedTasks
	for idx, item := range m.CreatedTasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApprovalPanelSnapshot) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: PendingTasks
	for idx, item := range m.PendingTasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Stages
	for idx, item := range m.Stages {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CancelReviewTasksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	// Field: TaskIds
	for idx, item := range m.TaskIds {
		_, _ = idx, item

		m.TaskIds[idx] = htmlsanitizer.Sanitize(m.TaskIds[idx])

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CancelReviewTasksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Cancelled
	for idx, item := range m.Cancelled {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecideApprovalTaskRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Approve
	switch v := m.Decision.(type) {

	case *DecideApprovalTaskRequest_Approve:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Decline
	case *DecideApprovalTaskRequest_Decline:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: TaskId
	m.TaskId = htmlsanitizer.Sanitize(m.TaskId)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecideApprovalTaskResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Updated
	if m.Updated != nil {
		if v, ok := any(m.GetUpdated()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecisionApprove) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	m.Comment = htmlsanitizer.Sanitize(m.Comment)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecisionDecline) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetApprovalPanelRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DocumentId
	m.DocumentId = htmlsanitizer.Sanitize(m.DocumentId)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetApprovalPanelResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListMyApprovalTasksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Status
	for idx, item := range m.Status {
		_, _ = idx, item

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListMyApprovalTasksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Tasks
	for idx, item := range m.Tasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *StartReviewRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DocumentId
	m.DocumentId = htmlsanitizer.Sanitize(m.DocumentId)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *StartReviewResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Panel
	if m.Panel != nil {
		if v, ok := any(m.GetPanel()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: PolicyId
	m.PolicyId = htmlsanitizer.Sanitize(m.PolicyId)

	return nil
}
