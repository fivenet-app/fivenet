// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: services/documents/approval.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteApprovalRoundRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteApprovalRoundResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecideApprovalTaskRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	m.Comment = htmlsanitizer.Sanitize(m.Comment)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DecideApprovalTaskResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Task
	if m.Task != nil {
		if v, ok := any(m.GetTask()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetApprovalPolicyRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetApprovalPolicyResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListApprovalTasksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Statuses
	for idx, item := range m.Statuses {
		_, _ = idx, item

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListApprovalTasksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Tasks
	for idx, item := range m.Tasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RecomputeApprovalPolicyCountersRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *RecomputeApprovalPolicyCountersResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ReopenApprovalTaskRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ReopenApprovalTaskResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Task
	if m.Task != nil {
		if v, ok := any(m.GetTask()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *StartApprovalRoundRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: SnapshotDate
	if m.SnapshotDate != nil {
		if v, ok := any(m.GetSnapshotDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *StartApprovalRoundResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Tasks
	for idx, item := range m.Tasks {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertApprovalPolicyRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DueAt
	if m.DueAt != nil {
		if v, ok := any(m.GetDueAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UpsertApprovalPolicyResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Policy
	if m.Policy != nil {
		if v, ok := any(m.GetPolicy()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
