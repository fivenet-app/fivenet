// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/jobs/conduct.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConductService_ListConductEntries_FullMethodName = "/services.jobs.ConductService/ListConductEntries"
	ConductService_CreateConductEntry_FullMethodName = "/services.jobs.ConductService/CreateConductEntry"
	ConductService_UpdateConductEntry_FullMethodName = "/services.jobs.ConductService/UpdateConductEntry"
	ConductService_DeleteConductEntry_FullMethodName = "/services.jobs.ConductService/DeleteConductEntry"
)

// ConductServiceClient is the client API for ConductService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConductServiceClient interface {
	// @perm: Attrs=Access/StringList:[]string{"Own", "All"}
	ListConductEntries(ctx context.Context, in *ListConductEntriesRequest, opts ...grpc.CallOption) (*ListConductEntriesResponse, error)
	// @perm
	CreateConductEntry(ctx context.Context, in *CreateConductEntryRequest, opts ...grpc.CallOption) (*CreateConductEntryResponse, error)
	// @perm
	UpdateConductEntry(ctx context.Context, in *UpdateConductEntryRequest, opts ...grpc.CallOption) (*UpdateConductEntryResponse, error)
	// @perm
	DeleteConductEntry(ctx context.Context, in *DeleteConductEntryRequest, opts ...grpc.CallOption) (*DeleteConductEntryResponse, error)
}

type conductServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConductServiceClient(cc grpc.ClientConnInterface) ConductServiceClient {
	return &conductServiceClient{cc}
}

func (c *conductServiceClient) ListConductEntries(ctx context.Context, in *ListConductEntriesRequest, opts ...grpc.CallOption) (*ListConductEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListConductEntriesResponse)
	err := c.cc.Invoke(ctx, ConductService_ListConductEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conductServiceClient) CreateConductEntry(ctx context.Context, in *CreateConductEntryRequest, opts ...grpc.CallOption) (*CreateConductEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConductEntryResponse)
	err := c.cc.Invoke(ctx, ConductService_CreateConductEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conductServiceClient) UpdateConductEntry(ctx context.Context, in *UpdateConductEntryRequest, opts ...grpc.CallOption) (*UpdateConductEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConductEntryResponse)
	err := c.cc.Invoke(ctx, ConductService_UpdateConductEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conductServiceClient) DeleteConductEntry(ctx context.Context, in *DeleteConductEntryRequest, opts ...grpc.CallOption) (*DeleteConductEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConductEntryResponse)
	err := c.cc.Invoke(ctx, ConductService_DeleteConductEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConductServiceServer is the server API for ConductService service.
// All implementations must embed UnimplementedConductServiceServer
// for forward compatibility.
type ConductServiceServer interface {
	// @perm: Attrs=Access/StringList:[]string{"Own", "All"}
	ListConductEntries(context.Context, *ListConductEntriesRequest) (*ListConductEntriesResponse, error)
	// @perm
	CreateConductEntry(context.Context, *CreateConductEntryRequest) (*CreateConductEntryResponse, error)
	// @perm
	UpdateConductEntry(context.Context, *UpdateConductEntryRequest) (*UpdateConductEntryResponse, error)
	// @perm
	DeleteConductEntry(context.Context, *DeleteConductEntryRequest) (*DeleteConductEntryResponse, error)
	mustEmbedUnimplementedConductServiceServer()
}

// UnimplementedConductServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConductServiceServer struct{}

func (UnimplementedConductServiceServer) ListConductEntries(context.Context, *ListConductEntriesRequest) (*ListConductEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConductEntries not implemented")
}
func (UnimplementedConductServiceServer) CreateConductEntry(context.Context, *CreateConductEntryRequest) (*CreateConductEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConductEntry not implemented")
}
func (UnimplementedConductServiceServer) UpdateConductEntry(context.Context, *UpdateConductEntryRequest) (*UpdateConductEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConductEntry not implemented")
}
func (UnimplementedConductServiceServer) DeleteConductEntry(context.Context, *DeleteConductEntryRequest) (*DeleteConductEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConductEntry not implemented")
}
func (UnimplementedConductServiceServer) mustEmbedUnimplementedConductServiceServer() {}
func (UnimplementedConductServiceServer) testEmbeddedByValue()                        {}

// UnsafeConductServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConductServiceServer will
// result in compilation errors.
type UnsafeConductServiceServer interface {
	mustEmbedUnimplementedConductServiceServer()
}

func RegisterConductServiceServer(s grpc.ServiceRegistrar, srv ConductServiceServer) {
	// If the following call pancis, it indicates UnimplementedConductServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConductService_ServiceDesc, srv)
}

func _ConductService_ListConductEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConductEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductServiceServer).ListConductEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConductService_ListConductEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductServiceServer).ListConductEntries(ctx, req.(*ListConductEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConductService_CreateConductEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConductEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductServiceServer).CreateConductEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConductService_CreateConductEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductServiceServer).CreateConductEntry(ctx, req.(*CreateConductEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConductService_UpdateConductEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConductEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductServiceServer).UpdateConductEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConductService_UpdateConductEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductServiceServer).UpdateConductEntry(ctx, req.(*UpdateConductEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConductService_DeleteConductEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConductEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConductServiceServer).DeleteConductEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConductService_DeleteConductEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConductServiceServer).DeleteConductEntry(ctx, req.(*DeleteConductEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConductService_ServiceDesc is the grpc.ServiceDesc for ConductService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConductService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.jobs.ConductService",
	HandlerType: (*ConductServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListConductEntries",
			Handler:    _ConductService_ListConductEntries_Handler,
		},
		{
			MethodName: "CreateConductEntry",
			Handler:    _ConductService_CreateConductEntry_Handler,
		},
		{
			MethodName: "UpdateConductEntry",
			Handler:    _ConductService_UpdateConductEntry_Handler,
		},
		{
			MethodName: "DeleteConductEntry",
			Handler:    _ConductService_DeleteConductEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/jobs/conduct.proto",
}
