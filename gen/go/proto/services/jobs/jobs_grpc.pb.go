// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/jobs/jobs.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobsService_ListColleagues_FullMethodName          = "/services.jobs.JobsService/ListColleagues"
	JobsService_GetSelf_FullMethodName                 = "/services.jobs.JobsService/GetSelf"
	JobsService_GetColleague_FullMethodName            = "/services.jobs.JobsService/GetColleague"
	JobsService_ListColleagueActivity_FullMethodName   = "/services.jobs.JobsService/ListColleagueActivity"
	JobsService_SetJobsUserProps_FullMethodName        = "/services.jobs.JobsService/SetJobsUserProps"
	JobsService_GetColleagueLabels_FullMethodName      = "/services.jobs.JobsService/GetColleagueLabels"
	JobsService_ManageColleagueLabels_FullMethodName   = "/services.jobs.JobsService/ManageColleagueLabels"
	JobsService_GetColleagueLabelsStats_FullMethodName = "/services.jobs.JobsService/GetColleagueLabelsStats"
	JobsService_GetMOTD_FullMethodName                 = "/services.jobs.JobsService/GetMOTD"
	JobsService_SetMOTD_FullMethodName                 = "/services.jobs.JobsService/SetMOTD"
)

// JobsServiceClient is the client API for JobsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsServiceClient interface {
	// @perm
	ListColleagues(ctx context.Context, in *ListColleaguesRequest, opts ...grpc.CallOption) (*ListColleaguesResponse, error)
	// @perm: Name=ListColleagues
	GetSelf(ctx context.Context, in *GetSelfRequest, opts ...grpc.CallOption) (*GetSelfResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}|Types/StringList:[]string{"Note", "Labels"}
	GetColleague(ctx context.Context, in *GetColleagueRequest, opts ...grpc.CallOption) (*GetColleagueResponse, error)
	// @perm: Attrs=Types/StringList:[]string{"HIRED", "FIRED", "PROMOTED", "DEMOTED", "ABSENCE_DATE", "NOTE", "LABELS", "NAME"}
	ListColleagueActivity(ctx context.Context, in *ListColleagueActivityRequest, opts ...grpc.CallOption) (*ListColleagueActivityResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}|Types/StringList:[]string{"AbsenceDate", "Note", "Labels", "Name"}
	SetJobsUserProps(ctx context.Context, in *SetJobsUserPropsRequest, opts ...grpc.CallOption) (*SetJobsUserPropsResponse, error)
	// @perm: Name=GetColleague
	GetColleagueLabels(ctx context.Context, in *GetColleagueLabelsRequest, opts ...grpc.CallOption) (*GetColleagueLabelsResponse, error)
	// @perm
	ManageColleagueLabels(ctx context.Context, in *ManageColleagueLabelsRequest, opts ...grpc.CallOption) (*ManageColleagueLabelsResponse, error)
	// @perm: Name=GetColleague
	GetColleagueLabelsStats(ctx context.Context, in *GetColleagueLabelsStatsRequest, opts ...grpc.CallOption) (*GetColleagueLabelsStatsResponse, error)
	// @perm: Name=Any
	GetMOTD(ctx context.Context, in *GetMOTDRequest, opts ...grpc.CallOption) (*GetMOTDResponse, error)
	// @perm
	SetMOTD(ctx context.Context, in *SetMOTDRequest, opts ...grpc.CallOption) (*SetMOTDResponse, error)
}

type jobsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsServiceClient(cc grpc.ClientConnInterface) JobsServiceClient {
	return &jobsServiceClient{cc}
}

func (c *jobsServiceClient) ListColleagues(ctx context.Context, in *ListColleaguesRequest, opts ...grpc.CallOption) (*ListColleaguesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListColleaguesResponse)
	err := c.cc.Invoke(ctx, JobsService_ListColleagues_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetSelf(ctx context.Context, in *GetSelfRequest, opts ...grpc.CallOption) (*GetSelfResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSelfResponse)
	err := c.cc.Invoke(ctx, JobsService_GetSelf_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetColleague(ctx context.Context, in *GetColleagueRequest, opts ...grpc.CallOption) (*GetColleagueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetColleagueResponse)
	err := c.cc.Invoke(ctx, JobsService_GetColleague_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) ListColleagueActivity(ctx context.Context, in *ListColleagueActivityRequest, opts ...grpc.CallOption) (*ListColleagueActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListColleagueActivityResponse)
	err := c.cc.Invoke(ctx, JobsService_ListColleagueActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) SetJobsUserProps(ctx context.Context, in *SetJobsUserPropsRequest, opts ...grpc.CallOption) (*SetJobsUserPropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetJobsUserPropsResponse)
	err := c.cc.Invoke(ctx, JobsService_SetJobsUserProps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetColleagueLabels(ctx context.Context, in *GetColleagueLabelsRequest, opts ...grpc.CallOption) (*GetColleagueLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetColleagueLabelsResponse)
	err := c.cc.Invoke(ctx, JobsService_GetColleagueLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) ManageColleagueLabels(ctx context.Context, in *ManageColleagueLabelsRequest, opts ...grpc.CallOption) (*ManageColleagueLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageColleagueLabelsResponse)
	err := c.cc.Invoke(ctx, JobsService_ManageColleagueLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetColleagueLabelsStats(ctx context.Context, in *GetColleagueLabelsStatsRequest, opts ...grpc.CallOption) (*GetColleagueLabelsStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetColleagueLabelsStatsResponse)
	err := c.cc.Invoke(ctx, JobsService_GetColleagueLabelsStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) GetMOTD(ctx context.Context, in *GetMOTDRequest, opts ...grpc.CallOption) (*GetMOTDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMOTDResponse)
	err := c.cc.Invoke(ctx, JobsService_GetMOTD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsServiceClient) SetMOTD(ctx context.Context, in *SetMOTDRequest, opts ...grpc.CallOption) (*SetMOTDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetMOTDResponse)
	err := c.cc.Invoke(ctx, JobsService_SetMOTD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsServiceServer is the server API for JobsService service.
// All implementations must embed UnimplementedJobsServiceServer
// for forward compatibility.
type JobsServiceServer interface {
	// @perm
	ListColleagues(context.Context, *ListColleaguesRequest) (*ListColleaguesResponse, error)
	// @perm: Name=ListColleagues
	GetSelf(context.Context, *GetSelfRequest) (*GetSelfResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}|Types/StringList:[]string{"Note", "Labels"}
	GetColleague(context.Context, *GetColleagueRequest) (*GetColleagueResponse, error)
	// @perm: Attrs=Types/StringList:[]string{"HIRED", "FIRED", "PROMOTED", "DEMOTED", "ABSENCE_DATE", "NOTE", "LABELS", "NAME"}
	ListColleagueActivity(context.Context, *ListColleagueActivityRequest) (*ListColleagueActivityResponse, error)
	// @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}|Types/StringList:[]string{"AbsenceDate", "Note", "Labels", "Name"}
	SetJobsUserProps(context.Context, *SetJobsUserPropsRequest) (*SetJobsUserPropsResponse, error)
	// @perm: Name=GetColleague
	GetColleagueLabels(context.Context, *GetColleagueLabelsRequest) (*GetColleagueLabelsResponse, error)
	// @perm
	ManageColleagueLabels(context.Context, *ManageColleagueLabelsRequest) (*ManageColleagueLabelsResponse, error)
	// @perm: Name=GetColleague
	GetColleagueLabelsStats(context.Context, *GetColleagueLabelsStatsRequest) (*GetColleagueLabelsStatsResponse, error)
	// @perm: Name=Any
	GetMOTD(context.Context, *GetMOTDRequest) (*GetMOTDResponse, error)
	// @perm
	SetMOTD(context.Context, *SetMOTDRequest) (*SetMOTDResponse, error)
	mustEmbedUnimplementedJobsServiceServer()
}

// UnimplementedJobsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobsServiceServer struct{}

func (UnimplementedJobsServiceServer) ListColleagues(context.Context, *ListColleaguesRequest) (*ListColleaguesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListColleagues not implemented")
}
func (UnimplementedJobsServiceServer) GetSelf(context.Context, *GetSelfRequest) (*GetSelfResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelf not implemented")
}
func (UnimplementedJobsServiceServer) GetColleague(context.Context, *GetColleagueRequest) (*GetColleagueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColleague not implemented")
}
func (UnimplementedJobsServiceServer) ListColleagueActivity(context.Context, *ListColleagueActivityRequest) (*ListColleagueActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListColleagueActivity not implemented")
}
func (UnimplementedJobsServiceServer) SetJobsUserProps(context.Context, *SetJobsUserPropsRequest) (*SetJobsUserPropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetJobsUserProps not implemented")
}
func (UnimplementedJobsServiceServer) GetColleagueLabels(context.Context, *GetColleagueLabelsRequest) (*GetColleagueLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColleagueLabels not implemented")
}
func (UnimplementedJobsServiceServer) ManageColleagueLabels(context.Context, *ManageColleagueLabelsRequest) (*ManageColleagueLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageColleagueLabels not implemented")
}
func (UnimplementedJobsServiceServer) GetColleagueLabelsStats(context.Context, *GetColleagueLabelsStatsRequest) (*GetColleagueLabelsStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColleagueLabelsStats not implemented")
}
func (UnimplementedJobsServiceServer) GetMOTD(context.Context, *GetMOTDRequest) (*GetMOTDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMOTD not implemented")
}
func (UnimplementedJobsServiceServer) SetMOTD(context.Context, *SetMOTDRequest) (*SetMOTDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMOTD not implemented")
}
func (UnimplementedJobsServiceServer) mustEmbedUnimplementedJobsServiceServer() {}
func (UnimplementedJobsServiceServer) testEmbeddedByValue()                     {}

// UnsafeJobsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsServiceServer will
// result in compilation errors.
type UnsafeJobsServiceServer interface {
	mustEmbedUnimplementedJobsServiceServer()
}

func RegisterJobsServiceServer(s grpc.ServiceRegistrar, srv JobsServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobsService_ServiceDesc, srv)
}

func _JobsService_ListColleagues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColleaguesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).ListColleagues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_ListColleagues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).ListColleagues(ctx, req.(*ListColleaguesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetSelf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSelfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetSelf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_GetSelf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetSelf(ctx, req.(*GetSelfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetColleague_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColleagueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetColleague(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_GetColleague_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetColleague(ctx, req.(*GetColleagueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_ListColleagueActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColleagueActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).ListColleagueActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_ListColleagueActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).ListColleagueActivity(ctx, req.(*ListColleagueActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_SetJobsUserProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetJobsUserPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).SetJobsUserProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_SetJobsUserProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).SetJobsUserProps(ctx, req.(*SetJobsUserPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetColleagueLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColleagueLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetColleagueLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_GetColleagueLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetColleagueLabels(ctx, req.(*GetColleagueLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_ManageColleagueLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageColleagueLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).ManageColleagueLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_ManageColleagueLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).ManageColleagueLabels(ctx, req.(*ManageColleagueLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetColleagueLabelsStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColleagueLabelsStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetColleagueLabelsStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_GetColleagueLabelsStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetColleagueLabelsStats(ctx, req.(*GetColleagueLabelsStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_GetMOTD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMOTDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).GetMOTD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_GetMOTD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).GetMOTD(ctx, req.(*GetMOTDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsService_SetMOTD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMOTDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsServiceServer).SetMOTD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsService_SetMOTD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsServiceServer).SetMOTD(ctx, req.(*SetMOTDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobsService_ServiceDesc is the grpc.ServiceDesc for JobsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.jobs.JobsService",
	HandlerType: (*JobsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListColleagues",
			Handler:    _JobsService_ListColleagues_Handler,
		},
		{
			MethodName: "GetSelf",
			Handler:    _JobsService_GetSelf_Handler,
		},
		{
			MethodName: "GetColleague",
			Handler:    _JobsService_GetColleague_Handler,
		},
		{
			MethodName: "ListColleagueActivity",
			Handler:    _JobsService_ListColleagueActivity_Handler,
		},
		{
			MethodName: "SetJobsUserProps",
			Handler:    _JobsService_SetJobsUserProps_Handler,
		},
		{
			MethodName: "GetColleagueLabels",
			Handler:    _JobsService_GetColleagueLabels_Handler,
		},
		{
			MethodName: "ManageColleagueLabels",
			Handler:    _JobsService_ManageColleagueLabels_Handler,
		},
		{
			MethodName: "GetColleagueLabelsStats",
			Handler:    _JobsService_GetColleagueLabelsStats_Handler,
		},
		{
			MethodName: "GetMOTD",
			Handler:    _JobsService_GetMOTD_Handler,
		},
		{
			MethodName: "SetMOTD",
			Handler:    _JobsService_SetMOTD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/jobs/jobs.proto",
}
