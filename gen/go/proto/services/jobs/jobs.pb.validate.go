// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/jobs/jobs.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	jobs "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/jobs"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = jobs.JobsUserActivityType(0)
)

// Validate checks the field values on ListColleaguesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListColleaguesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListColleaguesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListColleaguesRequestMultiError, or nil if none found.
func (m *ListColleaguesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListColleaguesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListColleaguesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListColleaguesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListColleaguesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListColleaguesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSearch()) > 64 {
		err := ListColleaguesRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListColleaguesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListColleaguesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListColleaguesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UserId != nil {

		if m.GetUserId() < 0 {
			err := ListColleaguesRequestValidationError{
				field:  "UserId",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Absent != nil {
		// no validation rules for Absent
	}

	if m.NamePrefix != nil {

		if utf8.RuneCountInString(m.GetNamePrefix()) > 12 {
			err := ListColleaguesRequestValidationError{
				field:  "NamePrefix",
				reason: "value length must be at most 12 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.NameSuffix != nil {

		if utf8.RuneCountInString(m.GetNameSuffix()) > 12 {
			err := ListColleaguesRequestValidationError{
				field:  "NameSuffix",
				reason: "value length must be at most 12 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListColleaguesRequestMultiError(errors)
	}

	return nil
}

// ListColleaguesRequestMultiError is an error wrapping multiple validation
// errors returned by ListColleaguesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListColleaguesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListColleaguesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListColleaguesRequestMultiError) AllErrors() []error { return m }

// ListColleaguesRequestValidationError is the validation error returned by
// ListColleaguesRequest.Validate if the designated constraints aren't met.
type ListColleaguesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColleaguesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColleaguesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColleaguesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColleaguesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColleaguesRequestValidationError) ErrorName() string {
	return "ListColleaguesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListColleaguesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColleaguesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColleaguesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColleaguesRequestValidationError{}

// Validate checks the field values on ListColleaguesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListColleaguesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListColleaguesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListColleaguesResponseMultiError, or nil if none found.
func (m *ListColleaguesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListColleaguesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListColleaguesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListColleaguesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListColleaguesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetColleagues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListColleaguesResponseValidationError{
						field:  fmt.Sprintf("Colleagues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListColleaguesResponseValidationError{
						field:  fmt.Sprintf("Colleagues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListColleaguesResponseValidationError{
					field:  fmt.Sprintf("Colleagues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListColleaguesResponseMultiError(errors)
	}

	return nil
}

// ListColleaguesResponseMultiError is an error wrapping multiple validation
// errors returned by ListColleaguesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListColleaguesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListColleaguesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListColleaguesResponseMultiError) AllErrors() []error { return m }

// ListColleaguesResponseValidationError is the validation error returned by
// ListColleaguesResponse.Validate if the designated constraints aren't met.
type ListColleaguesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColleaguesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColleaguesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColleaguesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColleaguesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColleaguesResponseValidationError) ErrorName() string {
	return "ListColleaguesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListColleaguesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColleaguesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColleaguesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColleaguesResponseValidationError{}

// Validate checks the field values on GetSelfRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSelfRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelfRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSelfRequestMultiError,
// or nil if none found.
func (m *GetSelfRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelfRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSelfRequestMultiError(errors)
	}

	return nil
}

// GetSelfRequestMultiError is an error wrapping multiple validation errors
// returned by GetSelfRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSelfRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelfRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelfRequestMultiError) AllErrors() []error { return m }

// GetSelfRequestValidationError is the validation error returned by
// GetSelfRequest.Validate if the designated constraints aren't met.
type GetSelfRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfRequestValidationError) ErrorName() string { return "GetSelfRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSelfRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfRequestValidationError{}

// Validate checks the field values on GetSelfResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSelfResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSelfResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSelfResponseMultiError, or nil if none found.
func (m *GetSelfResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSelfResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetColleague()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSelfResponseValidationError{
					field:  "Colleague",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSelfResponseValidationError{
					field:  "Colleague",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColleague()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSelfResponseValidationError{
				field:  "Colleague",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSelfResponseMultiError(errors)
	}

	return nil
}

// GetSelfResponseMultiError is an error wrapping multiple validation errors
// returned by GetSelfResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSelfResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSelfResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSelfResponseMultiError) AllErrors() []error { return m }

// GetSelfResponseValidationError is the validation error returned by
// GetSelfResponse.Validate if the designated constraints aren't met.
type GetSelfResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSelfResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSelfResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSelfResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSelfResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSelfResponseValidationError) ErrorName() string { return "GetSelfResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetSelfResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSelfResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSelfResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSelfResponseValidationError{}

// Validate checks the field values on GetColleagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColleagueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColleagueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColleagueRequestMultiError, or nil if none found.
func (m *GetColleagueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColleagueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 0 {
		err := GetColleagueRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.InfoOnly != nil {
		// no validation rules for InfoOnly
	}

	if len(errors) > 0 {
		return GetColleagueRequestMultiError(errors)
	}

	return nil
}

// GetColleagueRequestMultiError is an error wrapping multiple validation
// errors returned by GetColleagueRequest.ValidateAll() if the designated
// constraints aren't met.
type GetColleagueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColleagueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColleagueRequestMultiError) AllErrors() []error { return m }

// GetColleagueRequestValidationError is the validation error returned by
// GetColleagueRequest.Validate if the designated constraints aren't met.
type GetColleagueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColleagueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColleagueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColleagueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColleagueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColleagueRequestValidationError) ErrorName() string {
	return "GetColleagueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetColleagueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColleagueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColleagueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColleagueRequestValidationError{}

// Validate checks the field values on GetColleagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColleagueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColleagueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColleagueResponseMultiError, or nil if none found.
func (m *GetColleagueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColleagueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetColleague()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetColleagueResponseValidationError{
					field:  "Colleague",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetColleagueResponseValidationError{
					field:  "Colleague",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetColleague()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetColleagueResponseValidationError{
				field:  "Colleague",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetColleagueResponseMultiError(errors)
	}

	return nil
}

// GetColleagueResponseMultiError is an error wrapping multiple validation
// errors returned by GetColleagueResponse.ValidateAll() if the designated
// constraints aren't met.
type GetColleagueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColleagueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColleagueResponseMultiError) AllErrors() []error { return m }

// GetColleagueResponseValidationError is the validation error returned by
// GetColleagueResponse.Validate if the designated constraints aren't met.
type GetColleagueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColleagueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColleagueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColleagueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColleagueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColleagueResponseValidationError) ErrorName() string {
	return "GetColleagueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetColleagueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColleagueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColleagueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColleagueResponseValidationError{}

// Validate checks the field values on ListColleagueActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListColleagueActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListColleagueActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListColleagueActivityRequestMultiError, or nil if none found.
func (m *ListColleagueActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListColleagueActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListColleagueActivityRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListColleagueActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListColleagueActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListColleagueActivityRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetActivityTypes()) > 10 {
		err := ListColleagueActivityRequestValidationError{
			field:  "ActivityTypes",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListColleagueActivityRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListColleagueActivityRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListColleagueActivityRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListColleagueActivityRequestMultiError(errors)
	}

	return nil
}

// ListColleagueActivityRequestMultiError is an error wrapping multiple
// validation errors returned by ListColleagueActivityRequest.ValidateAll() if
// the designated constraints aren't met.
type ListColleagueActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListColleagueActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListColleagueActivityRequestMultiError) AllErrors() []error { return m }

// ListColleagueActivityRequestValidationError is the validation error returned
// by ListColleagueActivityRequest.Validate if the designated constraints
// aren't met.
type ListColleagueActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColleagueActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColleagueActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColleagueActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColleagueActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColleagueActivityRequestValidationError) ErrorName() string {
	return "ListColleagueActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListColleagueActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColleagueActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColleagueActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColleagueActivityRequestValidationError{}

// Validate checks the field values on ListColleagueActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListColleagueActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListColleagueActivityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListColleagueActivityResponseMultiError, or nil if none found.
func (m *ListColleagueActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListColleagueActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListColleagueActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListColleagueActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListColleagueActivityResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListColleagueActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListColleagueActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListColleagueActivityResponseValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListColleagueActivityResponseMultiError(errors)
	}

	return nil
}

// ListColleagueActivityResponseMultiError is an error wrapping multiple
// validation errors returned by ListColleagueActivityResponse.ValidateAll()
// if the designated constraints aren't met.
type ListColleagueActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListColleagueActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListColleagueActivityResponseMultiError) AllErrors() []error { return m }

// ListColleagueActivityResponseValidationError is the validation error
// returned by ListColleagueActivityResponse.Validate if the designated
// constraints aren't met.
type ListColleagueActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColleagueActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColleagueActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColleagueActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColleagueActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColleagueActivityResponseValidationError) ErrorName() string {
	return "ListColleagueActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListColleagueActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColleagueActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColleagueActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColleagueActivityResponseValidationError{}

// Validate checks the field values on SetJobsUserPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobsUserPropsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobsUserPropsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobsUserPropsRequestMultiError, or nil if none found.
func (m *SetJobsUserPropsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobsUserPropsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobsUserPropsRequestValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobsUserPropsRequestValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobsUserPropsRequestValidationError{
				field:  "Props",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetReason() != "" {

		if l := utf8.RuneCountInString(m.GetReason()); l < 3 || l > 255 {
			err := SetJobsUserPropsRequestValidationError{
				field:  "Reason",
				reason: "value length must be between 3 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SetJobsUserPropsRequestMultiError(errors)
	}

	return nil
}

// SetJobsUserPropsRequestMultiError is an error wrapping multiple validation
// errors returned by SetJobsUserPropsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetJobsUserPropsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobsUserPropsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobsUserPropsRequestMultiError) AllErrors() []error { return m }

// SetJobsUserPropsRequestValidationError is the validation error returned by
// SetJobsUserPropsRequest.Validate if the designated constraints aren't met.
type SetJobsUserPropsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobsUserPropsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobsUserPropsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobsUserPropsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobsUserPropsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobsUserPropsRequestValidationError) ErrorName() string {
	return "SetJobsUserPropsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobsUserPropsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobsUserPropsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobsUserPropsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobsUserPropsRequestValidationError{}

// Validate checks the field values on SetJobsUserPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetJobsUserPropsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetJobsUserPropsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetJobsUserPropsResponseMultiError, or nil if none found.
func (m *SetJobsUserPropsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetJobsUserPropsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetJobsUserPropsResponseValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetJobsUserPropsResponseValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetJobsUserPropsResponseValidationError{
				field:  "Props",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetJobsUserPropsResponseMultiError(errors)
	}

	return nil
}

// SetJobsUserPropsResponseMultiError is an error wrapping multiple validation
// errors returned by SetJobsUserPropsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetJobsUserPropsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetJobsUserPropsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetJobsUserPropsResponseMultiError) AllErrors() []error { return m }

// SetJobsUserPropsResponseValidationError is the validation error returned by
// SetJobsUserPropsResponse.Validate if the designated constraints aren't met.
type SetJobsUserPropsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetJobsUserPropsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetJobsUserPropsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetJobsUserPropsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetJobsUserPropsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetJobsUserPropsResponseValidationError) ErrorName() string {
	return "SetJobsUserPropsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetJobsUserPropsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetJobsUserPropsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetJobsUserPropsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetJobsUserPropsResponseValidationError{}

// Validate checks the field values on GetColleagueLabelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColleagueLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColleagueLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColleagueLabelsRequestMultiError, or nil if none found.
func (m *GetColleagueLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColleagueLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 32 {
			err := GetColleagueLabelsRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 32 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetColleagueLabelsRequestMultiError(errors)
	}

	return nil
}

// GetColleagueLabelsRequestMultiError is an error wrapping multiple validation
// errors returned by GetColleagueLabelsRequest.ValidateAll() if the
// designated constraints aren't met.
type GetColleagueLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColleagueLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColleagueLabelsRequestMultiError) AllErrors() []error { return m }

// GetColleagueLabelsRequestValidationError is the validation error returned by
// GetColleagueLabelsRequest.Validate if the designated constraints aren't met.
type GetColleagueLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColleagueLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColleagueLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColleagueLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColleagueLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColleagueLabelsRequestValidationError) ErrorName() string {
	return "GetColleagueLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetColleagueLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColleagueLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColleagueLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColleagueLabelsRequestValidationError{}

// Validate checks the field values on GetColleagueLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColleagueLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColleagueLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetColleagueLabelsResponseMultiError, or nil if none found.
func (m *GetColleagueLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColleagueLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColleagueLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColleagueLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColleagueLabelsResponseValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColleagueLabelsResponseMultiError(errors)
	}

	return nil
}

// GetColleagueLabelsResponseMultiError is an error wrapping multiple
// validation errors returned by GetColleagueLabelsResponse.ValidateAll() if
// the designated constraints aren't met.
type GetColleagueLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColleagueLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColleagueLabelsResponseMultiError) AllErrors() []error { return m }

// GetColleagueLabelsResponseValidationError is the validation error returned
// by GetColleagueLabelsResponse.Validate if the designated constraints aren't met.
type GetColleagueLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColleagueLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColleagueLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColleagueLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColleagueLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColleagueLabelsResponseValidationError) ErrorName() string {
	return "GetColleagueLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetColleagueLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColleagueLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColleagueLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColleagueLabelsResponseValidationError{}

// Validate checks the field values on ManageColleagueLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageColleagueLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageColleagueLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManageColleagueLabelsRequestMultiError, or nil if none found.
func (m *ManageColleagueLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageColleagueLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManageColleagueLabelsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManageColleagueLabelsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManageColleagueLabelsRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManageColleagueLabelsRequestMultiError(errors)
	}

	return nil
}

// ManageColleagueLabelsRequestMultiError is an error wrapping multiple
// validation errors returned by ManageColleagueLabelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ManageColleagueLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageColleagueLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageColleagueLabelsRequestMultiError) AllErrors() []error { return m }

// ManageColleagueLabelsRequestValidationError is the validation error returned
// by ManageColleagueLabelsRequest.Validate if the designated constraints
// aren't met.
type ManageColleagueLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageColleagueLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageColleagueLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageColleagueLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageColleagueLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageColleagueLabelsRequestValidationError) ErrorName() string {
	return "ManageColleagueLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManageColleagueLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageColleagueLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageColleagueLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageColleagueLabelsRequestValidationError{}

// Validate checks the field values on ManageColleagueLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageColleagueLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageColleagueLabelsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ManageColleagueLabelsResponseMultiError, or nil if none found.
func (m *ManageColleagueLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageColleagueLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManageColleagueLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManageColleagueLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManageColleagueLabelsResponseValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManageColleagueLabelsResponseMultiError(errors)
	}

	return nil
}

// ManageColleagueLabelsResponseMultiError is an error wrapping multiple
// validation errors returned by ManageColleagueLabelsResponse.ValidateAll()
// if the designated constraints aren't met.
type ManageColleagueLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageColleagueLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageColleagueLabelsResponseMultiError) AllErrors() []error { return m }

// ManageColleagueLabelsResponseValidationError is the validation error
// returned by ManageColleagueLabelsResponse.Validate if the designated
// constraints aren't met.
type ManageColleagueLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageColleagueLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageColleagueLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageColleagueLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageColleagueLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageColleagueLabelsResponseValidationError) ErrorName() string {
	return "ManageColleagueLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ManageColleagueLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageColleagueLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageColleagueLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageColleagueLabelsResponseValidationError{}

// Validate checks the field values on GetColleagueLabelsStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColleagueLabelsStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColleagueLabelsStatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetColleagueLabelsStatsRequestMultiError, or nil if none found.
func (m *GetColleagueLabelsStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColleagueLabelsStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetColleagueLabelsStatsRequestMultiError(errors)
	}

	return nil
}

// GetColleagueLabelsStatsRequestMultiError is an error wrapping multiple
// validation errors returned by GetColleagueLabelsStatsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetColleagueLabelsStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColleagueLabelsStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColleagueLabelsStatsRequestMultiError) AllErrors() []error { return m }

// GetColleagueLabelsStatsRequestValidationError is the validation error
// returned by GetColleagueLabelsStatsRequest.Validate if the designated
// constraints aren't met.
type GetColleagueLabelsStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColleagueLabelsStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColleagueLabelsStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColleagueLabelsStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColleagueLabelsStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColleagueLabelsStatsRequestValidationError) ErrorName() string {
	return "GetColleagueLabelsStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetColleagueLabelsStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColleagueLabelsStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColleagueLabelsStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColleagueLabelsStatsRequestValidationError{}

// Validate checks the field values on GetColleagueLabelsStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetColleagueLabelsStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetColleagueLabelsStatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetColleagueLabelsStatsResponseMultiError, or nil if none found.
func (m *GetColleagueLabelsStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetColleagueLabelsStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCount() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetColleagueLabelsStatsResponseValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetColleagueLabelsStatsResponseValidationError{
						field:  fmt.Sprintf("Count[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetColleagueLabelsStatsResponseValidationError{
					field:  fmt.Sprintf("Count[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetColleagueLabelsStatsResponseMultiError(errors)
	}

	return nil
}

// GetColleagueLabelsStatsResponseMultiError is an error wrapping multiple
// validation errors returned by GetColleagueLabelsStatsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetColleagueLabelsStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetColleagueLabelsStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetColleagueLabelsStatsResponseMultiError) AllErrors() []error { return m }

// GetColleagueLabelsStatsResponseValidationError is the validation error
// returned by GetColleagueLabelsStatsResponse.Validate if the designated
// constraints aren't met.
type GetColleagueLabelsStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetColleagueLabelsStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetColleagueLabelsStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetColleagueLabelsStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetColleagueLabelsStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetColleagueLabelsStatsResponseValidationError) ErrorName() string {
	return "GetColleagueLabelsStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetColleagueLabelsStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetColleagueLabelsStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetColleagueLabelsStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetColleagueLabelsStatsResponseValidationError{}

// Validate checks the field values on GetMOTDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetMOTDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMOTDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetMOTDRequestMultiError,
// or nil if none found.
func (m *GetMOTDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMOTDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetMOTDRequestMultiError(errors)
	}

	return nil
}

// GetMOTDRequestMultiError is an error wrapping multiple validation errors
// returned by GetMOTDRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMOTDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMOTDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMOTDRequestMultiError) AllErrors() []error { return m }

// GetMOTDRequestValidationError is the validation error returned by
// GetMOTDRequest.Validate if the designated constraints aren't met.
type GetMOTDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMOTDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMOTDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMOTDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMOTDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMOTDRequestValidationError) ErrorName() string { return "GetMOTDRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMOTDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMOTDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMOTDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMOTDRequestValidationError{}

// Validate checks the field values on GetMOTDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMOTDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMOTDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMOTDResponseMultiError, or nil if none found.
func (m *GetMOTDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMOTDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Motd

	if len(errors) > 0 {
		return GetMOTDResponseMultiError(errors)
	}

	return nil
}

// GetMOTDResponseMultiError is an error wrapping multiple validation errors
// returned by GetMOTDResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMOTDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMOTDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMOTDResponseMultiError) AllErrors() []error { return m }

// GetMOTDResponseValidationError is the validation error returned by
// GetMOTDResponse.Validate if the designated constraints aren't met.
type GetMOTDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMOTDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMOTDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMOTDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMOTDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMOTDResponseValidationError) ErrorName() string { return "GetMOTDResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMOTDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMOTDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMOTDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMOTDResponseValidationError{}

// Validate checks the field values on SetMOTDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetMOTDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMOTDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetMOTDRequestMultiError,
// or nil if none found.
func (m *SetMOTDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMOTDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMotd()) > 1024 {
		err := SetMOTDRequestValidationError{
			field:  "Motd",
			reason: "value length must be at most 1024 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetMOTDRequestMultiError(errors)
	}

	return nil
}

// SetMOTDRequestMultiError is an error wrapping multiple validation errors
// returned by SetMOTDRequest.ValidateAll() if the designated constraints
// aren't met.
type SetMOTDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMOTDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMOTDRequestMultiError) AllErrors() []error { return m }

// SetMOTDRequestValidationError is the validation error returned by
// SetMOTDRequest.Validate if the designated constraints aren't met.
type SetMOTDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMOTDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMOTDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMOTDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMOTDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMOTDRequestValidationError) ErrorName() string { return "SetMOTDRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetMOTDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMOTDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMOTDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMOTDRequestValidationError{}

// Validate checks the field values on SetMOTDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SetMOTDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetMOTDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetMOTDResponseMultiError, or nil if none found.
func (m *SetMOTDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetMOTDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Motd

	if len(errors) > 0 {
		return SetMOTDResponseMultiError(errors)
	}

	return nil
}

// SetMOTDResponseMultiError is an error wrapping multiple validation errors
// returned by SetMOTDResponse.ValidateAll() if the designated constraints
// aren't met.
type SetMOTDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetMOTDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetMOTDResponseMultiError) AllErrors() []error { return m }

// SetMOTDResponseValidationError is the validation error returned by
// SetMOTDResponse.Validate if the designated constraints aren't met.
type SetMOTDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMOTDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMOTDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMOTDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMOTDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMOTDResponseValidationError) ErrorName() string { return "SetMOTDResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetMOTDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMOTDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMOTDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMOTDResponseValidationError{}
