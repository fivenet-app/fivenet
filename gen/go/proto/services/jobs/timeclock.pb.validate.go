// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/jobs/timeclock.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	jobs "github.com/fivenet-app/fivenet/gen/go/proto/resources/jobs"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = jobs.TimeclockUserMode(0)
)

// Validate checks the field values on ListTimeclockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTimeclockRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTimeclockRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTimeclockRequestMultiError, or nil if none found.
func (m *ListTimeclockRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTimeclockRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListTimeclockRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTimeclockRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTimeclockRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTimeclockRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserMode

	// no validation rules for Mode

	// no validation rules for PerDay

	if len(m.GetUserIds()) > 15 {
		err := ListTimeclockRequestValidationError{
			field:  "UserIds",
			reason: "value must contain no more than 15 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Date != nil {

		if all {
			switch v := interface{}(m.GetDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "Date",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockRequestValidationError{
						field:  "Date",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockRequestValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTimeclockRequestMultiError(errors)
	}

	return nil
}

// ListTimeclockRequestMultiError is an error wrapping multiple validation
// errors returned by ListTimeclockRequest.ValidateAll() if the designated
// constraints aren't met.
type ListTimeclockRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTimeclockRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTimeclockRequestMultiError) AllErrors() []error { return m }

// ListTimeclockRequestValidationError is the validation error returned by
// ListTimeclockRequest.Validate if the designated constraints aren't met.
type ListTimeclockRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTimeclockRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTimeclockRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTimeclockRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTimeclockRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTimeclockRequestValidationError) ErrorName() string {
	return "ListTimeclockRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListTimeclockRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTimeclockRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTimeclockRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTimeclockRequestValidationError{}

// Validate checks the field values on ListTimeclockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListTimeclockResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTimeclockResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTimeclockResponseMultiError, or nil if none found.
func (m *ListTimeclockResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTimeclockResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTimeclockResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListTimeclockResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListTimeclockResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStatsWeekly() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  fmt.Sprintf("StatsWeekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  fmt.Sprintf("StatsWeekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockResponseValidationError{
					field:  fmt.Sprintf("StatsWeekly[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	oneofEntriesPresent := false
	switch v := m.Entries.(type) {
	case *ListTimeclockResponse_Daily:
		if v == nil {
			err := ListTimeclockResponseValidationError{
				field:  "Entries",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntriesPresent = true

		if all {
			switch v := interface{}(m.GetDaily()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  "Daily",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  "Daily",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDaily()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockResponseValidationError{
					field:  "Daily",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListTimeclockResponse_Weekly:
		if v == nil {
			err := ListTimeclockResponseValidationError{
				field:  "Entries",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntriesPresent = true

		if all {
			switch v := interface{}(m.GetWeekly()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  "Weekly",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  "Weekly",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWeekly()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockResponseValidationError{
					field:  "Weekly",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ListTimeclockResponse_Range:
		if v == nil {
			err := ListTimeclockResponseValidationError{
				field:  "Entries",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofEntriesPresent = true

		if all {
			switch v := interface{}(m.GetRange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  "Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTimeclockResponseValidationError{
						field:  "Range",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTimeclockResponseValidationError{
					field:  "Range",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofEntriesPresent {
		err := ListTimeclockResponseValidationError{
			field:  "Entries",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListTimeclockResponseMultiError(errors)
	}

	return nil
}

// ListTimeclockResponseMultiError is an error wrapping multiple validation
// errors returned by ListTimeclockResponse.ValidateAll() if the designated
// constraints aren't met.
type ListTimeclockResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTimeclockResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTimeclockResponseMultiError) AllErrors() []error { return m }

// ListTimeclockResponseValidationError is the validation error returned by
// ListTimeclockResponse.Validate if the designated constraints aren't met.
type ListTimeclockResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTimeclockResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTimeclockResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTimeclockResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTimeclockResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTimeclockResponseValidationError) ErrorName() string {
	return "ListTimeclockResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTimeclockResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTimeclockResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTimeclockResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTimeclockResponseValidationError{}

// Validate checks the field values on TimeclockDay with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeclockDay) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockDay with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeclockDayMultiError, or
// nil if none found.
func (m *TimeclockDay) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockDay) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockDayValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockDayValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockDayValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockDayValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockDayValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockDayValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Sum

	if len(errors) > 0 {
		return TimeclockDayMultiError(errors)
	}

	return nil
}

// TimeclockDayMultiError is an error wrapping multiple validation errors
// returned by TimeclockDay.ValidateAll() if the designated constraints aren't met.
type TimeclockDayMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockDayMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockDayMultiError) AllErrors() []error { return m }

// TimeclockDayValidationError is the validation error returned by
// TimeclockDay.Validate if the designated constraints aren't met.
type TimeclockDayValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockDayValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockDayValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockDayValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockDayValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockDayValidationError) ErrorName() string { return "TimeclockDayValidationError" }

// Error satisfies the builtin error interface
func (e TimeclockDayValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockDay.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockDayValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockDayValidationError{}

// Validate checks the field values on TimeclockWeekly with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimeclockWeekly) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockWeekly with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeclockWeeklyMultiError, or nil if none found.
func (m *TimeclockWeekly) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockWeekly) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockWeeklyValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockWeeklyValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockWeeklyValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockWeeklyValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockWeeklyValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockWeeklyValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Sum

	if len(errors) > 0 {
		return TimeclockWeeklyMultiError(errors)
	}

	return nil
}

// TimeclockWeeklyMultiError is an error wrapping multiple validation errors
// returned by TimeclockWeekly.ValidateAll() if the designated constraints
// aren't met.
type TimeclockWeeklyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockWeeklyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockWeeklyMultiError) AllErrors() []error { return m }

// TimeclockWeeklyValidationError is the validation error returned by
// TimeclockWeekly.Validate if the designated constraints aren't met.
type TimeclockWeeklyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockWeeklyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockWeeklyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockWeeklyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockWeeklyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockWeeklyValidationError) ErrorName() string { return "TimeclockWeeklyValidationError" }

// Error satisfies the builtin error interface
func (e TimeclockWeeklyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockWeekly.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockWeeklyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockWeeklyValidationError{}

// Validate checks the field values on TimeclockRange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeclockRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockRange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeclockRangeMultiError,
// or nil if none found.
func (m *TimeclockRange) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockRangeValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockRangeValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockRangeValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockRangeValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockRangeValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockRangeValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Sum

	if len(errors) > 0 {
		return TimeclockRangeMultiError(errors)
	}

	return nil
}

// TimeclockRangeMultiError is an error wrapping multiple validation errors
// returned by TimeclockRange.ValidateAll() if the designated constraints
// aren't met.
type TimeclockRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockRangeMultiError) AllErrors() []error { return m }

// TimeclockRangeValidationError is the validation error returned by
// TimeclockRange.Validate if the designated constraints aren't met.
type TimeclockRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockRangeValidationError) ErrorName() string { return "TimeclockRangeValidationError" }

// Error satisfies the builtin error interface
func (e TimeclockRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockRangeValidationError{}

// Validate checks the field values on GetTimeclockStatsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeclockStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeclockStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTimeclockStatsRequestMultiError, or nil if none found.
func (m *GetTimeclockStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeclockStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UserId != nil {

		if m.GetUserId() < 0 {
			err := GetTimeclockStatsRequestValidationError{
				field:  "UserId",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GetTimeclockStatsRequestMultiError(errors)
	}

	return nil
}

// GetTimeclockStatsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTimeclockStatsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTimeclockStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeclockStatsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeclockStatsRequestMultiError) AllErrors() []error { return m }

// GetTimeclockStatsRequestValidationError is the validation error returned by
// GetTimeclockStatsRequest.Validate if the designated constraints aren't met.
type GetTimeclockStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeclockStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeclockStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeclockStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeclockStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeclockStatsRequestValidationError) ErrorName() string {
	return "GetTimeclockStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeclockStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeclockStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeclockStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeclockStatsRequestValidationError{}

// Validate checks the field values on GetTimeclockStatsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeclockStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeclockStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTimeclockStatsResponseMultiError, or nil if none found.
func (m *GetTimeclockStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeclockStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTimeclockStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTimeclockStatsResponseValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTimeclockStatsResponseValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetWeekly() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTimeclockStatsResponseValidationError{
						field:  fmt.Sprintf("Weekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTimeclockStatsResponseValidationError{
						field:  fmt.Sprintf("Weekly[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTimeclockStatsResponseValidationError{
					field:  fmt.Sprintf("Weekly[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTimeclockStatsResponseMultiError(errors)
	}

	return nil
}

// GetTimeclockStatsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTimeclockStatsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetTimeclockStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeclockStatsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeclockStatsResponseMultiError) AllErrors() []error { return m }

// GetTimeclockStatsResponseValidationError is the validation error returned by
// GetTimeclockStatsResponse.Validate if the designated constraints aren't met.
type GetTimeclockStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeclockStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeclockStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeclockStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeclockStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeclockStatsResponseValidationError) ErrorName() string {
	return "GetTimeclockStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeclockStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeclockStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeclockStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeclockStatsResponseValidationError{}

// Validate checks the field values on ListInactiveEmployeesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInactiveEmployeesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInactiveEmployeesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInactiveEmployeesRequestMultiError, or nil if none found.
func (m *ListInactiveEmployeesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInactiveEmployeesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListInactiveEmployeesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInactiveEmployeesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInactiveEmployeesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInactiveEmployeesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetDays() < 1 {
		err := ListInactiveEmployeesRequestValidationError{
			field:  "Days",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInactiveEmployeesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInactiveEmployeesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInactiveEmployeesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInactiveEmployeesRequestMultiError(errors)
	}

	return nil
}

// ListInactiveEmployeesRequestMultiError is an error wrapping multiple
// validation errors returned by ListInactiveEmployeesRequest.ValidateAll() if
// the designated constraints aren't met.
type ListInactiveEmployeesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInactiveEmployeesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInactiveEmployeesRequestMultiError) AllErrors() []error { return m }

// ListInactiveEmployeesRequestValidationError is the validation error returned
// by ListInactiveEmployeesRequest.Validate if the designated constraints
// aren't met.
type ListInactiveEmployeesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInactiveEmployeesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInactiveEmployeesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInactiveEmployeesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInactiveEmployeesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInactiveEmployeesRequestValidationError) ErrorName() string {
	return "ListInactiveEmployeesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInactiveEmployeesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInactiveEmployeesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInactiveEmployeesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInactiveEmployeesRequestValidationError{}

// Validate checks the field values on ListInactiveEmployeesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInactiveEmployeesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInactiveEmployeesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListInactiveEmployeesResponseMultiError, or nil if none found.
func (m *ListInactiveEmployeesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInactiveEmployeesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListInactiveEmployeesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListInactiveEmployeesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInactiveEmployeesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetColleagues() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInactiveEmployeesResponseValidationError{
						field:  fmt.Sprintf("Colleagues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInactiveEmployeesResponseValidationError{
						field:  fmt.Sprintf("Colleagues[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInactiveEmployeesResponseValidationError{
					field:  fmt.Sprintf("Colleagues[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListInactiveEmployeesResponseMultiError(errors)
	}

	return nil
}

// ListInactiveEmployeesResponseMultiError is an error wrapping multiple
// validation errors returned by ListInactiveEmployeesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListInactiveEmployeesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInactiveEmployeesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInactiveEmployeesResponseMultiError) AllErrors() []error { return m }

// ListInactiveEmployeesResponseValidationError is the validation error
// returned by ListInactiveEmployeesResponse.Validate if the designated
// constraints aren't met.
type ListInactiveEmployeesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInactiveEmployeesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInactiveEmployeesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInactiveEmployeesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInactiveEmployeesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInactiveEmployeesResponseValidationError) ErrorName() string {
	return "ListInactiveEmployeesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInactiveEmployeesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInactiveEmployeesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInactiveEmployeesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInactiveEmployeesResponseValidationError{}
