// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.4
// source: services/jobs/timeclock.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	JobsTimeclockService_ListTimeclock_FullMethodName         = "/services.jobs.JobsTimeclockService/ListTimeclock"
	JobsTimeclockService_GetTimeclockStats_FullMethodName     = "/services.jobs.JobsTimeclockService/GetTimeclockStats"
	JobsTimeclockService_ListInactiveEmployees_FullMethodName = "/services.jobs.JobsTimeclockService/ListInactiveEmployees"
)

// JobsTimeclockServiceClient is the client API for JobsTimeclockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobsTimeclockServiceClient interface {
	// @perm: Attrs=Access/StringList:[]string{"All"}
	ListTimeclock(ctx context.Context, in *ListTimeclockRequest, opts ...grpc.CallOption) (*ListTimeclockResponse, error)
	// @perm: Name=ListTimeclock
	GetTimeclockStats(ctx context.Context, in *GetTimeclockStatsRequest, opts ...grpc.CallOption) (*GetTimeclockStatsResponse, error)
	// @perm
	ListInactiveEmployees(ctx context.Context, in *ListInactiveEmployeesRequest, opts ...grpc.CallOption) (*ListInactiveEmployeesResponse, error)
}

type jobsTimeclockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobsTimeclockServiceClient(cc grpc.ClientConnInterface) JobsTimeclockServiceClient {
	return &jobsTimeclockServiceClient{cc}
}

func (c *jobsTimeclockServiceClient) ListTimeclock(ctx context.Context, in *ListTimeclockRequest, opts ...grpc.CallOption) (*ListTimeclockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimeclockResponse)
	err := c.cc.Invoke(ctx, JobsTimeclockService_ListTimeclock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsTimeclockServiceClient) GetTimeclockStats(ctx context.Context, in *GetTimeclockStatsRequest, opts ...grpc.CallOption) (*GetTimeclockStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimeclockStatsResponse)
	err := c.cc.Invoke(ctx, JobsTimeclockService_GetTimeclockStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobsTimeclockServiceClient) ListInactiveEmployees(ctx context.Context, in *ListInactiveEmployeesRequest, opts ...grpc.CallOption) (*ListInactiveEmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInactiveEmployeesResponse)
	err := c.cc.Invoke(ctx, JobsTimeclockService_ListInactiveEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobsTimeclockServiceServer is the server API for JobsTimeclockService service.
// All implementations must embed UnimplementedJobsTimeclockServiceServer
// for forward compatibility.
type JobsTimeclockServiceServer interface {
	// @perm: Attrs=Access/StringList:[]string{"All"}
	ListTimeclock(context.Context, *ListTimeclockRequest) (*ListTimeclockResponse, error)
	// @perm: Name=ListTimeclock
	GetTimeclockStats(context.Context, *GetTimeclockStatsRequest) (*GetTimeclockStatsResponse, error)
	// @perm
	ListInactiveEmployees(context.Context, *ListInactiveEmployeesRequest) (*ListInactiveEmployeesResponse, error)
	mustEmbedUnimplementedJobsTimeclockServiceServer()
}

// UnimplementedJobsTimeclockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedJobsTimeclockServiceServer struct{}

func (UnimplementedJobsTimeclockServiceServer) ListTimeclock(context.Context, *ListTimeclockRequest) (*ListTimeclockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeclock not implemented")
}
func (UnimplementedJobsTimeclockServiceServer) GetTimeclockStats(context.Context, *GetTimeclockStatsRequest) (*GetTimeclockStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeclockStats not implemented")
}
func (UnimplementedJobsTimeclockServiceServer) ListInactiveEmployees(context.Context, *ListInactiveEmployeesRequest) (*ListInactiveEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInactiveEmployees not implemented")
}
func (UnimplementedJobsTimeclockServiceServer) mustEmbedUnimplementedJobsTimeclockServiceServer() {}
func (UnimplementedJobsTimeclockServiceServer) testEmbeddedByValue()                              {}

// UnsafeJobsTimeclockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobsTimeclockServiceServer will
// result in compilation errors.
type UnsafeJobsTimeclockServiceServer interface {
	mustEmbedUnimplementedJobsTimeclockServiceServer()
}

func RegisterJobsTimeclockServiceServer(s grpc.ServiceRegistrar, srv JobsTimeclockServiceServer) {
	// If the following call pancis, it indicates UnimplementedJobsTimeclockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&JobsTimeclockService_ServiceDesc, srv)
}

func _JobsTimeclockService_ListTimeclock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimeclockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsTimeclockServiceServer).ListTimeclock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsTimeclockService_ListTimeclock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsTimeclockServiceServer).ListTimeclock(ctx, req.(*ListTimeclockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsTimeclockService_GetTimeclockStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeclockStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsTimeclockServiceServer).GetTimeclockStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsTimeclockService_GetTimeclockStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsTimeclockServiceServer).GetTimeclockStats(ctx, req.(*GetTimeclockStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobsTimeclockService_ListInactiveEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInactiveEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobsTimeclockServiceServer).ListInactiveEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: JobsTimeclockService_ListInactiveEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobsTimeclockServiceServer).ListInactiveEmployees(ctx, req.(*ListInactiveEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobsTimeclockService_ServiceDesc is the grpc.ServiceDesc for JobsTimeclockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobsTimeclockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.jobs.JobsTimeclockService",
	HandlerType: (*JobsTimeclockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTimeclock",
			Handler:    _JobsTimeclockService_ListTimeclock_Handler,
		},
		{
			MethodName: "GetTimeclockStats",
			Handler:    _JobsTimeclockService_GetTimeclockStats_Handler,
		},
		{
			MethodName: "ListInactiveEmployees",
			Handler:    _JobsTimeclockService_ListInactiveEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/jobs/timeclock.proto",
}
