// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/jobs/timeclock.proto

package jobs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeclockService_ListTimeclock_FullMethodName         = "/services.jobs.TimeclockService/ListTimeclock"
	TimeclockService_GetTimeclockStats_FullMethodName     = "/services.jobs.TimeclockService/GetTimeclockStats"
	TimeclockService_ListInactiveEmployees_FullMethodName = "/services.jobs.TimeclockService/ListInactiveEmployees"
)

// TimeclockServiceClient is the client API for TimeclockService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeclockServiceClient interface {
	// @perm: Attrs=Access/StringList:[]string{"All"}
	ListTimeclock(ctx context.Context, in *ListTimeclockRequest, opts ...grpc.CallOption) (*ListTimeclockResponse, error)
	// @perm: Name=ListTimeclock
	GetTimeclockStats(ctx context.Context, in *GetTimeclockStatsRequest, opts ...grpc.CallOption) (*GetTimeclockStatsResponse, error)
	// @perm
	ListInactiveEmployees(ctx context.Context, in *ListInactiveEmployeesRequest, opts ...grpc.CallOption) (*ListInactiveEmployeesResponse, error)
}

type timeclockServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeclockServiceClient(cc grpc.ClientConnInterface) TimeclockServiceClient {
	return &timeclockServiceClient{cc}
}

func (c *timeclockServiceClient) ListTimeclock(ctx context.Context, in *ListTimeclockRequest, opts ...grpc.CallOption) (*ListTimeclockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTimeclockResponse)
	err := c.cc.Invoke(ctx, TimeclockService_ListTimeclock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeclockServiceClient) GetTimeclockStats(ctx context.Context, in *GetTimeclockStatsRequest, opts ...grpc.CallOption) (*GetTimeclockStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTimeclockStatsResponse)
	err := c.cc.Invoke(ctx, TimeclockService_GetTimeclockStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeclockServiceClient) ListInactiveEmployees(ctx context.Context, in *ListInactiveEmployeesRequest, opts ...grpc.CallOption) (*ListInactiveEmployeesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInactiveEmployeesResponse)
	err := c.cc.Invoke(ctx, TimeclockService_ListInactiveEmployees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeclockServiceServer is the server API for TimeclockService service.
// All implementations must embed UnimplementedTimeclockServiceServer
// for forward compatibility.
type TimeclockServiceServer interface {
	// @perm: Attrs=Access/StringList:[]string{"All"}
	ListTimeclock(context.Context, *ListTimeclockRequest) (*ListTimeclockResponse, error)
	// @perm: Name=ListTimeclock
	GetTimeclockStats(context.Context, *GetTimeclockStatsRequest) (*GetTimeclockStatsResponse, error)
	// @perm
	ListInactiveEmployees(context.Context, *ListInactiveEmployeesRequest) (*ListInactiveEmployeesResponse, error)
	mustEmbedUnimplementedTimeclockServiceServer()
}

// UnimplementedTimeclockServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeclockServiceServer struct{}

func (UnimplementedTimeclockServiceServer) ListTimeclock(context.Context, *ListTimeclockRequest) (*ListTimeclockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTimeclock not implemented")
}
func (UnimplementedTimeclockServiceServer) GetTimeclockStats(context.Context, *GetTimeclockStatsRequest) (*GetTimeclockStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeclockStats not implemented")
}
func (UnimplementedTimeclockServiceServer) ListInactiveEmployees(context.Context, *ListInactiveEmployeesRequest) (*ListInactiveEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInactiveEmployees not implemented")
}
func (UnimplementedTimeclockServiceServer) mustEmbedUnimplementedTimeclockServiceServer() {}
func (UnimplementedTimeclockServiceServer) testEmbeddedByValue()                          {}

// UnsafeTimeclockServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeclockServiceServer will
// result in compilation errors.
type UnsafeTimeclockServiceServer interface {
	mustEmbedUnimplementedTimeclockServiceServer()
}

func RegisterTimeclockServiceServer(s grpc.ServiceRegistrar, srv TimeclockServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeclockServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeclockService_ServiceDesc, srv)
}

func _TimeclockService_ListTimeclock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTimeclockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeclockServiceServer).ListTimeclock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeclockService_ListTimeclock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeclockServiceServer).ListTimeclock(ctx, req.(*ListTimeclockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeclockService_GetTimeclockStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeclockStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeclockServiceServer).GetTimeclockStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeclockService_GetTimeclockStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeclockServiceServer).GetTimeclockStats(ctx, req.(*GetTimeclockStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeclockService_ListInactiveEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInactiveEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeclockServiceServer).ListInactiveEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeclockService_ListInactiveEmployees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeclockServiceServer).ListInactiveEmployees(ctx, req.(*ListInactiveEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeclockService_ServiceDesc is the grpc.ServiceDesc for TimeclockService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeclockService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.jobs.TimeclockService",
	HandlerType: (*TimeclockServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTimeclock",
			Handler:    _TimeclockService_ListTimeclock_Handler,
		},
		{
			MethodName: "GetTimeclockStats",
			Handler:    _TimeclockService_GetTimeclockStats_Handler,
		},
		{
			MethodName: "ListInactiveEmployees",
			Handler:    _TimeclockService_ListInactiveEmployees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/jobs/timeclock.proto",
}
