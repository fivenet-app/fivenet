// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: services/jobs/timeclock.proto

package jobs

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	database "github.com/fivenet-app/fivenet/gen/go/proto/resources/common/database"
	jobs "github.com/fivenet-app/fivenet/gen/go/proto/resources/jobs"
	timestamp "github.com/fivenet-app/fivenet/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTimeclockRequest struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Pagination *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sort       *database.Sort              `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Search params
	UserMode      jobs.TimeclockUserMode `protobuf:"varint,3,opt,name=user_mode,json=userMode,proto3,enum=resources.jobs.TimeclockUserMode" json:"user_mode,omitempty"`
	Mode          jobs.TimeclockMode     `protobuf:"varint,4,opt,name=mode,proto3,enum=resources.jobs.TimeclockMode" json:"mode,omitempty"`
	Date          *database.DateRange    `protobuf:"bytes,5,opt,name=date,proto3,oneof" json:"date,omitempty"`
	PerDay        bool                   `protobuf:"varint,6,opt,name=per_day,json=perDay,proto3" json:"per_day,omitempty"`
	UserIds       []int32                `protobuf:"varint,7,rep,packed,name=user_ids,json=userIds,proto3" json:"user_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTimeclockRequest) Reset() {
	*x = ListTimeclockRequest{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTimeclockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimeclockRequest) ProtoMessage() {}

func (x *ListTimeclockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimeclockRequest.ProtoReflect.Descriptor instead.
func (*ListTimeclockRequest) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{0}
}

func (x *ListTimeclockRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTimeclockRequest) GetSort() *database.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListTimeclockRequest) GetUserMode() jobs.TimeclockUserMode {
	if x != nil {
		return x.UserMode
	}
	return jobs.TimeclockUserMode(0)
}

func (x *ListTimeclockRequest) GetMode() jobs.TimeclockMode {
	if x != nil {
		return x.Mode
	}
	return jobs.TimeclockMode(0)
}

func (x *ListTimeclockRequest) GetDate() *database.DateRange {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *ListTimeclockRequest) GetPerDay() bool {
	if x != nil {
		return x.PerDay
	}
	return false
}

func (x *ListTimeclockRequest) GetUserIds() []int32 {
	if x != nil {
		return x.UserIds
	}
	return nil
}

type ListTimeclockResponse struct {
	state       protoimpl.MessageState       `protogen:"open.v1"`
	Pagination  *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Stats       *jobs.TimeclockStats         `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	StatsWeekly []*jobs.TimeclockWeeklyStats `protobuf:"bytes,3,rep,name=stats_weekly,json=statsWeekly,proto3" json:"stats_weekly,omitempty"`
	// Types that are valid to be assigned to Entries:
	//
	//	*ListTimeclockResponse_Daily
	//	*ListTimeclockResponse_Weekly
	//	*ListTimeclockResponse_Range
	Entries       isListTimeclockResponse_Entries `protobuf_oneof:"entries"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTimeclockResponse) Reset() {
	*x = ListTimeclockResponse{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTimeclockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTimeclockResponse) ProtoMessage() {}

func (x *ListTimeclockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTimeclockResponse.ProtoReflect.Descriptor instead.
func (*ListTimeclockResponse) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{1}
}

func (x *ListTimeclockResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListTimeclockResponse) GetStats() *jobs.TimeclockStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *ListTimeclockResponse) GetStatsWeekly() []*jobs.TimeclockWeeklyStats {
	if x != nil {
		return x.StatsWeekly
	}
	return nil
}

func (x *ListTimeclockResponse) GetEntries() isListTimeclockResponse_Entries {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *ListTimeclockResponse) GetDaily() *TimeclockDay {
	if x != nil {
		if x, ok := x.Entries.(*ListTimeclockResponse_Daily); ok {
			return x.Daily
		}
	}
	return nil
}

func (x *ListTimeclockResponse) GetWeekly() *TimeclockWeekly {
	if x != nil {
		if x, ok := x.Entries.(*ListTimeclockResponse_Weekly); ok {
			return x.Weekly
		}
	}
	return nil
}

func (x *ListTimeclockResponse) GetRange() *TimeclockRange {
	if x != nil {
		if x, ok := x.Entries.(*ListTimeclockResponse_Range); ok {
			return x.Range
		}
	}
	return nil
}

type isListTimeclockResponse_Entries interface {
	isListTimeclockResponse_Entries()
}

type ListTimeclockResponse_Daily struct {
	Daily *TimeclockDay `protobuf:"bytes,4,opt,name=daily,proto3,oneof"`
}

type ListTimeclockResponse_Weekly struct {
	Weekly *TimeclockWeekly `protobuf:"bytes,5,opt,name=weekly,proto3,oneof"`
}

type ListTimeclockResponse_Range struct {
	Range *TimeclockRange `protobuf:"bytes,6,opt,name=range,proto3,oneof"`
}

func (*ListTimeclockResponse_Daily) isListTimeclockResponse_Entries() {}

func (*ListTimeclockResponse_Weekly) isListTimeclockResponse_Entries() {}

func (*ListTimeclockResponse_Range) isListTimeclockResponse_Entries() {}

type TimeclockDay struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Entries       []*jobs.TimeclockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Sum           int64                  `protobuf:"varint,3,opt,name=sum,proto3" json:"sum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeclockDay) Reset() {
	*x = TimeclockDay{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeclockDay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeclockDay) ProtoMessage() {}

func (x *TimeclockDay) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeclockDay.ProtoReflect.Descriptor instead.
func (*TimeclockDay) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{2}
}

func (x *TimeclockDay) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TimeclockDay) GetEntries() []*jobs.TimeclockEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TimeclockDay) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type TimeclockWeekly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty" sql:"primary_key"` // @gotags: sql:"primary_key"
	Entries       []*jobs.TimeclockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Sum           int64                  `protobuf:"varint,3,opt,name=sum,proto3" json:"sum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeclockWeekly) Reset() {
	*x = TimeclockWeekly{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeclockWeekly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeclockWeekly) ProtoMessage() {}

func (x *TimeclockWeekly) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeclockWeekly.ProtoReflect.Descriptor instead.
func (*TimeclockWeekly) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{3}
}

func (x *TimeclockWeekly) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TimeclockWeekly) GetEntries() []*jobs.TimeclockEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TimeclockWeekly) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type TimeclockRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Date          *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty" sql:"primary_key"` // @gotags: sql:"primary_key"
	Entries       []*jobs.TimeclockEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	Sum           int64                  `protobuf:"varint,3,opt,name=sum,proto3" json:"sum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TimeclockRange) Reset() {
	*x = TimeclockRange{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimeclockRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeclockRange) ProtoMessage() {}

func (x *TimeclockRange) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeclockRange.ProtoReflect.Descriptor instead.
func (*TimeclockRange) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{4}
}

func (x *TimeclockRange) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *TimeclockRange) GetEntries() []*jobs.TimeclockEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *TimeclockRange) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

type GetTimeclockStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        *int32                 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeclockStatsRequest) Reset() {
	*x = GetTimeclockStatsRequest{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeclockStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeclockStatsRequest) ProtoMessage() {}

func (x *GetTimeclockStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeclockStatsRequest.ProtoReflect.Descriptor instead.
func (*GetTimeclockStatsRequest) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{5}
}

func (x *GetTimeclockStatsRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type GetTimeclockStatsResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Stats         *jobs.TimeclockStats         `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	Weekly        []*jobs.TimeclockWeeklyStats `protobuf:"bytes,2,rep,name=weekly,proto3" json:"weekly,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTimeclockStatsResponse) Reset() {
	*x = GetTimeclockStatsResponse{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTimeclockStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTimeclockStatsResponse) ProtoMessage() {}

func (x *GetTimeclockStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTimeclockStatsResponse.ProtoReflect.Descriptor instead.
func (*GetTimeclockStatsResponse) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{6}
}

func (x *GetTimeclockStatsResponse) GetStats() *jobs.TimeclockStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *GetTimeclockStatsResponse) GetWeekly() []*jobs.TimeclockWeeklyStats {
	if x != nil {
		return x.Weekly
	}
	return nil
}

type ListInactiveEmployeesRequest struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Pagination *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sort       *database.Sort              `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Search params
	Days          int32 `protobuf:"varint,3,opt,name=days,proto3" json:"days,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInactiveEmployeesRequest) Reset() {
	*x = ListInactiveEmployeesRequest{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInactiveEmployeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInactiveEmployeesRequest) ProtoMessage() {}

func (x *ListInactiveEmployeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInactiveEmployeesRequest.ProtoReflect.Descriptor instead.
func (*ListInactiveEmployeesRequest) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{7}
}

func (x *ListInactiveEmployeesRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListInactiveEmployeesRequest) GetSort() *database.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListInactiveEmployeesRequest) GetDays() int32 {
	if x != nil {
		return x.Days
	}
	return 0
}

type ListInactiveEmployeesResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Colleagues    []*jobs.Colleague            `protobuf:"bytes,2,rep,name=colleagues,proto3" json:"colleagues,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListInactiveEmployeesResponse) Reset() {
	*x = ListInactiveEmployeesResponse{}
	mi := &file_services_jobs_timeclock_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListInactiveEmployeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInactiveEmployeesResponse) ProtoMessage() {}

func (x *ListInactiveEmployeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_jobs_timeclock_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInactiveEmployeesResponse.ProtoReflect.Descriptor instead.
func (*ListInactiveEmployeesResponse) Descriptor() ([]byte, []int) {
	return file_services_jobs_timeclock_proto_rawDescGZIP(), []int{8}
}

func (x *ListInactiveEmployeesResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListInactiveEmployeesResponse) GetColleagues() []*jobs.Colleague {
	if x != nil {
		return x.Colleagues
	}
	return nil
}

var File_services_jobs_timeclock_proto protoreflect.FileDescriptor

var file_services_jobs_timeclock_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x28,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x01, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x70, 0x65, 0x72, 0x44, 0x61, 0x79, 0x12, 0x23, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x10, 0x0f, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x9b, 0x03, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x77, 0x65, 0x65,
	0x6b, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x73, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x05,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x61, 0x79, 0x48, 0x00, 0x52, 0x05, 0x64, 0x61, 0x69, 0x6c,
	0x79, 0x12, 0x38, 0x0a, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x65, 0x65, 0x6b, 0x6c,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x0e, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x03, 0xf8,
	0x42, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x44, 0x61, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x73, 0x75, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x90, 0x01, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73, 0x75, 0x6d, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x06, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x22, 0xd6, 0x01, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x6c,
	0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53,
	0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x04, 0x64, 0x61, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x1a, 0x02, 0x28, 0x01, 0x52, 0x04, 0x64, 0x61, 0x79, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x22, 0xa9, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x61, 0x67,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x61, 0x67, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73,
	0x32, 0xce, 0x02, 0x0a, 0x14, 0x4a, 0x6f, 0x62, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x63, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a,
	0x15, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6d, 0x70,
	0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x66, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x66, 0x69, 0x76, 0x65,
	0x6e, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x3b, 0x6a,
	0x6f, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_services_jobs_timeclock_proto_rawDescOnce sync.Once
	file_services_jobs_timeclock_proto_rawDescData []byte
)

func file_services_jobs_timeclock_proto_rawDescGZIP() []byte {
	file_services_jobs_timeclock_proto_rawDescOnce.Do(func() {
		file_services_jobs_timeclock_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_jobs_timeclock_proto_rawDesc), len(file_services_jobs_timeclock_proto_rawDesc)))
	})
	return file_services_jobs_timeclock_proto_rawDescData
}

var file_services_jobs_timeclock_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_services_jobs_timeclock_proto_goTypes = []any{
	(*ListTimeclockRequest)(nil),          // 0: services.jobs.ListTimeclockRequest
	(*ListTimeclockResponse)(nil),         // 1: services.jobs.ListTimeclockResponse
	(*TimeclockDay)(nil),                  // 2: services.jobs.TimeclockDay
	(*TimeclockWeekly)(nil),               // 3: services.jobs.TimeclockWeekly
	(*TimeclockRange)(nil),                // 4: services.jobs.TimeclockRange
	(*GetTimeclockStatsRequest)(nil),      // 5: services.jobs.GetTimeclockStatsRequest
	(*GetTimeclockStatsResponse)(nil),     // 6: services.jobs.GetTimeclockStatsResponse
	(*ListInactiveEmployeesRequest)(nil),  // 7: services.jobs.ListInactiveEmployeesRequest
	(*ListInactiveEmployeesResponse)(nil), // 8: services.jobs.ListInactiveEmployeesResponse
	(*database.PaginationRequest)(nil),    // 9: resources.common.database.PaginationRequest
	(*database.Sort)(nil),                 // 10: resources.common.database.Sort
	(jobs.TimeclockUserMode)(0),           // 11: resources.jobs.TimeclockUserMode
	(jobs.TimeclockMode)(0),               // 12: resources.jobs.TimeclockMode
	(*database.DateRange)(nil),            // 13: resources.common.database.DateRange
	(*database.PaginationResponse)(nil),   // 14: resources.common.database.PaginationResponse
	(*jobs.TimeclockStats)(nil),           // 15: resources.jobs.TimeclockStats
	(*jobs.TimeclockWeeklyStats)(nil),     // 16: resources.jobs.TimeclockWeeklyStats
	(*timestamp.Timestamp)(nil),           // 17: resources.timestamp.Timestamp
	(*jobs.TimeclockEntry)(nil),           // 18: resources.jobs.TimeclockEntry
	(*jobs.Colleague)(nil),                // 19: resources.jobs.Colleague
}
var file_services_jobs_timeclock_proto_depIdxs = []int32{
	9,  // 0: services.jobs.ListTimeclockRequest.pagination:type_name -> resources.common.database.PaginationRequest
	10, // 1: services.jobs.ListTimeclockRequest.sort:type_name -> resources.common.database.Sort
	11, // 2: services.jobs.ListTimeclockRequest.user_mode:type_name -> resources.jobs.TimeclockUserMode
	12, // 3: services.jobs.ListTimeclockRequest.mode:type_name -> resources.jobs.TimeclockMode
	13, // 4: services.jobs.ListTimeclockRequest.date:type_name -> resources.common.database.DateRange
	14, // 5: services.jobs.ListTimeclockResponse.pagination:type_name -> resources.common.database.PaginationResponse
	15, // 6: services.jobs.ListTimeclockResponse.stats:type_name -> resources.jobs.TimeclockStats
	16, // 7: services.jobs.ListTimeclockResponse.stats_weekly:type_name -> resources.jobs.TimeclockWeeklyStats
	2,  // 8: services.jobs.ListTimeclockResponse.daily:type_name -> services.jobs.TimeclockDay
	3,  // 9: services.jobs.ListTimeclockResponse.weekly:type_name -> services.jobs.TimeclockWeekly
	4,  // 10: services.jobs.ListTimeclockResponse.range:type_name -> services.jobs.TimeclockRange
	17, // 11: services.jobs.TimeclockDay.date:type_name -> resources.timestamp.Timestamp
	18, // 12: services.jobs.TimeclockDay.entries:type_name -> resources.jobs.TimeclockEntry
	17, // 13: services.jobs.TimeclockWeekly.date:type_name -> resources.timestamp.Timestamp
	18, // 14: services.jobs.TimeclockWeekly.entries:type_name -> resources.jobs.TimeclockEntry
	17, // 15: services.jobs.TimeclockRange.date:type_name -> resources.timestamp.Timestamp
	18, // 16: services.jobs.TimeclockRange.entries:type_name -> resources.jobs.TimeclockEntry
	15, // 17: services.jobs.GetTimeclockStatsResponse.stats:type_name -> resources.jobs.TimeclockStats
	16, // 18: services.jobs.GetTimeclockStatsResponse.weekly:type_name -> resources.jobs.TimeclockWeeklyStats
	9,  // 19: services.jobs.ListInactiveEmployeesRequest.pagination:type_name -> resources.common.database.PaginationRequest
	10, // 20: services.jobs.ListInactiveEmployeesRequest.sort:type_name -> resources.common.database.Sort
	14, // 21: services.jobs.ListInactiveEmployeesResponse.pagination:type_name -> resources.common.database.PaginationResponse
	19, // 22: services.jobs.ListInactiveEmployeesResponse.colleagues:type_name -> resources.jobs.Colleague
	0,  // 23: services.jobs.JobsTimeclockService.ListTimeclock:input_type -> services.jobs.ListTimeclockRequest
	5,  // 24: services.jobs.JobsTimeclockService.GetTimeclockStats:input_type -> services.jobs.GetTimeclockStatsRequest
	7,  // 25: services.jobs.JobsTimeclockService.ListInactiveEmployees:input_type -> services.jobs.ListInactiveEmployeesRequest
	1,  // 26: services.jobs.JobsTimeclockService.ListTimeclock:output_type -> services.jobs.ListTimeclockResponse
	6,  // 27: services.jobs.JobsTimeclockService.GetTimeclockStats:output_type -> services.jobs.GetTimeclockStatsResponse
	8,  // 28: services.jobs.JobsTimeclockService.ListInactiveEmployees:output_type -> services.jobs.ListInactiveEmployeesResponse
	26, // [26:29] is the sub-list for method output_type
	23, // [23:26] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_services_jobs_timeclock_proto_init() }
func file_services_jobs_timeclock_proto_init() {
	if File_services_jobs_timeclock_proto != nil {
		return
	}
	file_services_jobs_timeclock_proto_msgTypes[0].OneofWrappers = []any{}
	file_services_jobs_timeclock_proto_msgTypes[1].OneofWrappers = []any{
		(*ListTimeclockResponse_Daily)(nil),
		(*ListTimeclockResponse_Weekly)(nil),
		(*ListTimeclockResponse_Range)(nil),
	}
	file_services_jobs_timeclock_proto_msgTypes[5].OneofWrappers = []any{}
	file_services_jobs_timeclock_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_jobs_timeclock_proto_rawDesc), len(file_services_jobs_timeclock_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_jobs_timeclock_proto_goTypes,
		DependencyIndexes: file_services_jobs_timeclock_proto_depIdxs,
		MessageInfos:      file_services_jobs_timeclock_proto_msgTypes,
	}.Build()
	File_services_jobs_timeclock_proto = out.File
	file_services_jobs_timeclock_proto_goTypes = nil
	file_services_jobs_timeclock_proto_depIdxs = nil
}
