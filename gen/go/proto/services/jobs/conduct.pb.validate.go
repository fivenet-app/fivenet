// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/jobs/conduct.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	jobs "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/jobs"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = jobs.ConductType(0)
)

// Validate checks the field values on ListConductEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConductEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConductEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConductEntriesRequestMultiError, or nil if none found.
func (m *ListConductEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConductEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListConductEntriesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListConductEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListConductEntriesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListConductEntriesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConductEntriesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConductEntriesRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConductEntriesRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ShowExpired != nil {
		// no validation rules for ShowExpired
	}

	if len(errors) > 0 {
		return ListConductEntriesRequestMultiError(errors)
	}

	return nil
}

// ListConductEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListConductEntriesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListConductEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConductEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConductEntriesRequestMultiError) AllErrors() []error { return m }

// ListConductEntriesRequestValidationError is the validation error returned by
// ListConductEntriesRequest.Validate if the designated constraints aren't met.
type ListConductEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConductEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConductEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConductEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConductEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConductEntriesRequestValidationError) ErrorName() string {
	return "ListConductEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConductEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConductEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConductEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConductEntriesRequestValidationError{}

// Validate checks the field values on ListConductEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConductEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConductEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConductEntriesResponseMultiError, or nil if none found.
func (m *ListConductEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConductEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListConductEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListConductEntriesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListConductEntriesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConductEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConductEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConductEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConductEntriesResponseMultiError(errors)
	}

	return nil
}

// ListConductEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListConductEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListConductEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConductEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConductEntriesResponseMultiError) AllErrors() []error { return m }

// ListConductEntriesResponseValidationError is the validation error returned
// by ListConductEntriesResponse.Validate if the designated constraints aren't met.
type ListConductEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConductEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConductEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConductEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConductEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConductEntriesResponseValidationError) ErrorName() string {
	return "ListConductEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConductEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConductEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConductEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConductEntriesResponseValidationError{}

// Validate checks the field values on CreateConductEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConductEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConductEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConductEntryRequestMultiError, or nil if none found.
func (m *CreateConductEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConductEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := CreateConductEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConductEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConductEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConductEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConductEntryRequestMultiError(errors)
	}

	return nil
}

// CreateConductEntryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateConductEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateConductEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConductEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConductEntryRequestMultiError) AllErrors() []error { return m }

// CreateConductEntryRequestValidationError is the validation error returned by
// CreateConductEntryRequest.Validate if the designated constraints aren't met.
type CreateConductEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConductEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConductEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConductEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConductEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConductEntryRequestValidationError) ErrorName() string {
	return "CreateConductEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConductEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConductEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConductEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConductEntryRequestValidationError{}

// Validate checks the field values on CreateConductEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateConductEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateConductEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateConductEntryResponseMultiError, or nil if none found.
func (m *CreateConductEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateConductEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateConductEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateConductEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConductEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateConductEntryResponseMultiError(errors)
	}

	return nil
}

// CreateConductEntryResponseMultiError is an error wrapping multiple
// validation errors returned by CreateConductEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateConductEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateConductEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateConductEntryResponseMultiError) AllErrors() []error { return m }

// CreateConductEntryResponseValidationError is the validation error returned
// by CreateConductEntryResponse.Validate if the designated constraints aren't met.
type CreateConductEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConductEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConductEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConductEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConductEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConductEntryResponseValidationError) ErrorName() string {
	return "CreateConductEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConductEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConductEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConductEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConductEntryResponseValidationError{}

// Validate checks the field values on UpdateConductEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConductEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConductEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConductEntryRequestMultiError, or nil if none found.
func (m *UpdateConductEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConductEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := UpdateConductEntryRequestValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConductEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConductEntryRequestValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConductEntryRequestValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConductEntryRequestMultiError(errors)
	}

	return nil
}

// UpdateConductEntryRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateConductEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateConductEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConductEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConductEntryRequestMultiError) AllErrors() []error { return m }

// UpdateConductEntryRequestValidationError is the validation error returned by
// UpdateConductEntryRequest.Validate if the designated constraints aren't met.
type UpdateConductEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConductEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConductEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConductEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConductEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConductEntryRequestValidationError) ErrorName() string {
	return "UpdateConductEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConductEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConductEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConductEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConductEntryRequestValidationError{}

// Validate checks the field values on UpdateConductEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateConductEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateConductEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateConductEntryResponseMultiError, or nil if none found.
func (m *UpdateConductEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateConductEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetEntry() == nil {
		err := UpdateConductEntryResponseValidationError{
			field:  "Entry",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateConductEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateConductEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateConductEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateConductEntryResponseMultiError(errors)
	}

	return nil
}

// UpdateConductEntryResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateConductEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateConductEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateConductEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateConductEntryResponseMultiError) AllErrors() []error { return m }

// UpdateConductEntryResponseValidationError is the validation error returned
// by UpdateConductEntryResponse.Validate if the designated constraints aren't met.
type UpdateConductEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateConductEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateConductEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateConductEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateConductEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateConductEntryResponseValidationError) ErrorName() string {
	return "UpdateConductEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateConductEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateConductEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateConductEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateConductEntryResponseValidationError{}

// Validate checks the field values on DeleteConductEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConductEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConductEntryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConductEntryRequestMultiError, or nil if none found.
func (m *DeleteConductEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConductEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteConductEntryRequestMultiError(errors)
	}

	return nil
}

// DeleteConductEntryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteConductEntryRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteConductEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConductEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConductEntryRequestMultiError) AllErrors() []error { return m }

// DeleteConductEntryRequestValidationError is the validation error returned by
// DeleteConductEntryRequest.Validate if the designated constraints aren't met.
type DeleteConductEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConductEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConductEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConductEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConductEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConductEntryRequestValidationError) ErrorName() string {
	return "DeleteConductEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConductEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConductEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConductEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConductEntryRequestValidationError{}

// Validate checks the field values on DeleteConductEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteConductEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteConductEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteConductEntryResponseMultiError, or nil if none found.
func (m *DeleteConductEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteConductEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteConductEntryResponseMultiError(errors)
	}

	return nil
}

// DeleteConductEntryResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteConductEntryResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteConductEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteConductEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteConductEntryResponseMultiError) AllErrors() []error { return m }

// DeleteConductEntryResponseValidationError is the validation error returned
// by DeleteConductEntryResponse.Validate if the designated constraints aren't met.
type DeleteConductEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteConductEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteConductEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteConductEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteConductEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteConductEntryResponseValidationError) ErrorName() string {
	return "DeleteConductEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteConductEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteConductEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteConductEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteConductEntryResponseValidationError{}
