// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/citizenstore/citizenstore.proto

package citizenstore

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	users "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/users"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = users.UserActivityType(0)
)

// Validate checks the field values on ListCitizensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCitizensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCitizensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCitizensRequestMultiError, or nil if none found.
func (m *ListCitizensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCitizensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListCitizensRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCitizensRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCitizensRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCitizensRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetSearch()) > 64 {
		err := ListCitizensRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCitizensRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCitizensRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCitizensRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Wanted != nil {
		// no validation rules for Wanted
	}

	if m.PhoneNumber != nil {

		if utf8.RuneCountInString(m.GetPhoneNumber()) > 20 {
			err := ListCitizensRequestValidationError{
				field:  "PhoneNumber",
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.TrafficInfractionPoints != nil {
		// no validation rules for TrafficInfractionPoints
	}

	if m.Dateofbirth != nil {

		if utf8.RuneCountInString(m.GetDateofbirth()) > 10 {
			err := ListCitizensRequestValidationError{
				field:  "Dateofbirth",
				reason: "value length must be at most 10 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.OpenFines != nil {
		// no validation rules for OpenFines
	}

	if len(errors) > 0 {
		return ListCitizensRequestMultiError(errors)
	}

	return nil
}

// ListCitizensRequestMultiError is an error wrapping multiple validation
// errors returned by ListCitizensRequest.ValidateAll() if the designated
// constraints aren't met.
type ListCitizensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCitizensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCitizensRequestMultiError) AllErrors() []error { return m }

// ListCitizensRequestValidationError is the validation error returned by
// ListCitizensRequest.Validate if the designated constraints aren't met.
type ListCitizensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCitizensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCitizensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCitizensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCitizensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCitizensRequestValidationError) ErrorName() string {
	return "ListCitizensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCitizensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCitizensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCitizensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCitizensRequestValidationError{}

// Validate checks the field values on ListCitizensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCitizensResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCitizensResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCitizensResponseMultiError, or nil if none found.
func (m *ListCitizensResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCitizensResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListCitizensResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListCitizensResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListCitizensResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCitizensResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCitizensResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCitizensResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCitizensResponseMultiError(errors)
	}

	return nil
}

// ListCitizensResponseMultiError is an error wrapping multiple validation
// errors returned by ListCitizensResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCitizensResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCitizensResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCitizensResponseMultiError) AllErrors() []error { return m }

// ListCitizensResponseValidationError is the validation error returned by
// ListCitizensResponse.Validate if the designated constraints aren't met.
type ListCitizensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCitizensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCitizensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCitizensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCitizensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCitizensResponseValidationError) ErrorName() string {
	return "ListCitizensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCitizensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCitizensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCitizensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCitizensResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.InfoOnly != nil {
		// no validation rules for InfoOnly
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on ListUserActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserActivityRequestMultiError, or nil if none found.
func (m *ListUserActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListUserActivityRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserActivityRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := ListUserActivityRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetTypes()) > 20 {
		err := ListUserActivityRequestValidationError{
			field:  "Types",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Sort != nil {

		if all {
			switch v := interface{}(m.GetSort()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserActivityRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserActivityRequestValidationError{
						field:  "Sort",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSort()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserActivityRequestValidationError{
					field:  "Sort",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserActivityRequestMultiError(errors)
	}

	return nil
}

// ListUserActivityRequestMultiError is an error wrapping multiple validation
// errors returned by ListUserActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUserActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserActivityRequestMultiError) AllErrors() []error { return m }

// ListUserActivityRequestValidationError is the validation error returned by
// ListUserActivityRequest.Validate if the designated constraints aren't met.
type ListUserActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserActivityRequestValidationError) ErrorName() string {
	return "ListUserActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserActivityRequestValidationError{}

// Validate checks the field values on ListUserActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserActivityResponseMultiError, or nil if none found.
func (m *ListUserActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUserActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUserActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserActivityResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserActivityResponseValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserActivityResponseMultiError(errors)
	}

	return nil
}

// ListUserActivityResponseMultiError is an error wrapping multiple validation
// errors returned by ListUserActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUserActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserActivityResponseMultiError) AllErrors() []error { return m }

// ListUserActivityResponseValidationError is the validation error returned by
// ListUserActivityResponse.Validate if the designated constraints aren't met.
type ListUserActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserActivityResponseValidationError) ErrorName() string {
	return "ListUserActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserActivityResponseValidationError{}

// Validate checks the field values on SetUserPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserPropsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPropsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPropsRequestMultiError, or nil if none found.
func (m *SetUserPropsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPropsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetProps() == nil {
		err := SetUserPropsRequestValidationError{
			field:  "Props",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetUserPropsRequestValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetUserPropsRequestValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUserPropsRequestValidationError{
				field:  "Props",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetReason() != "" {

		if l := utf8.RuneCountInString(m.GetReason()); l < 3 || l > 255 {
			err := SetUserPropsRequestValidationError{
				field:  "Reason",
				reason: "value length must be between 3 and 255 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SetUserPropsRequestMultiError(errors)
	}

	return nil
}

// SetUserPropsRequestMultiError is an error wrapping multiple validation
// errors returned by SetUserPropsRequest.ValidateAll() if the designated
// constraints aren't met.
type SetUserPropsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPropsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPropsRequestMultiError) AllErrors() []error { return m }

// SetUserPropsRequestValidationError is the validation error returned by
// SetUserPropsRequest.Validate if the designated constraints aren't met.
type SetUserPropsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPropsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPropsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPropsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPropsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPropsRequestValidationError) ErrorName() string {
	return "SetUserPropsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserPropsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPropsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPropsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPropsRequestValidationError{}

// Validate checks the field values on SetUserPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetUserPropsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetUserPropsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetUserPropsResponseMultiError, or nil if none found.
func (m *SetUserPropsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetUserPropsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetUserPropsResponseValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetUserPropsResponseValidationError{
					field:  "Props",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUserPropsResponseValidationError{
				field:  "Props",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetUserPropsResponseMultiError(errors)
	}

	return nil
}

// SetUserPropsResponseMultiError is an error wrapping multiple validation
// errors returned by SetUserPropsResponse.ValidateAll() if the designated
// constraints aren't met.
type SetUserPropsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetUserPropsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetUserPropsResponseMultiError) AllErrors() []error { return m }

// SetUserPropsResponseValidationError is the validation error returned by
// SetUserPropsResponse.Validate if the designated constraints aren't met.
type SetUserPropsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserPropsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserPropsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserPropsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserPropsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserPropsResponseValidationError) ErrorName() string {
	return "SetUserPropsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserPropsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserPropsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserPropsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserPropsResponseValidationError{}

// Validate checks the field values on SetProfilePictureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProfilePictureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProfilePictureRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProfilePictureRequestMultiError, or nil if none found.
func (m *SetProfilePictureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProfilePictureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvatar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetProfilePictureRequestValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetProfilePictureRequestValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetProfilePictureRequestValidationError{
				field:  "Avatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetProfilePictureRequestMultiError(errors)
	}

	return nil
}

// SetProfilePictureRequestMultiError is an error wrapping multiple validation
// errors returned by SetProfilePictureRequest.ValidateAll() if the designated
// constraints aren't met.
type SetProfilePictureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProfilePictureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProfilePictureRequestMultiError) AllErrors() []error { return m }

// SetProfilePictureRequestValidationError is the validation error returned by
// SetProfilePictureRequest.Validate if the designated constraints aren't met.
type SetProfilePictureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProfilePictureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProfilePictureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProfilePictureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProfilePictureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProfilePictureRequestValidationError) ErrorName() string {
	return "SetProfilePictureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetProfilePictureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProfilePictureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProfilePictureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProfilePictureRequestValidationError{}

// Validate checks the field values on SetProfilePictureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProfilePictureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProfilePictureResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProfilePictureResponseMultiError, or nil if none found.
func (m *SetProfilePictureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProfilePictureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAvatar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetProfilePictureResponseValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetProfilePictureResponseValidationError{
					field:  "Avatar",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAvatar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetProfilePictureResponseValidationError{
				field:  "Avatar",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SetProfilePictureResponseMultiError(errors)
	}

	return nil
}

// SetProfilePictureResponseMultiError is an error wrapping multiple validation
// errors returned by SetProfilePictureResponse.ValidateAll() if the
// designated constraints aren't met.
type SetProfilePictureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProfilePictureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProfilePictureResponseMultiError) AllErrors() []error { return m }

// SetProfilePictureResponseValidationError is the validation error returned by
// SetProfilePictureResponse.Validate if the designated constraints aren't met.
type SetProfilePictureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProfilePictureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProfilePictureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProfilePictureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProfilePictureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProfilePictureResponseValidationError) ErrorName() string {
	return "SetProfilePictureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetProfilePictureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProfilePictureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProfilePictureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProfilePictureResponseValidationError{}

// Validate checks the field values on ManageCitizenLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageCitizenLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageCitizenLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManageCitizenLabelsRequestMultiError, or nil if none found.
func (m *ManageCitizenLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageCitizenLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManageCitizenLabelsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManageCitizenLabelsRequestValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManageCitizenLabelsRequestValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManageCitizenLabelsRequestMultiError(errors)
	}

	return nil
}

// ManageCitizenLabelsRequestMultiError is an error wrapping multiple
// validation errors returned by ManageCitizenLabelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ManageCitizenLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageCitizenLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageCitizenLabelsRequestMultiError) AllErrors() []error { return m }

// ManageCitizenLabelsRequestValidationError is the validation error returned
// by ManageCitizenLabelsRequest.Validate if the designated constraints aren't met.
type ManageCitizenLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageCitizenLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageCitizenLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageCitizenLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageCitizenLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageCitizenLabelsRequestValidationError) ErrorName() string {
	return "ManageCitizenLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ManageCitizenLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageCitizenLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageCitizenLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageCitizenLabelsRequestValidationError{}

// Validate checks the field values on ManageCitizenLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ManageCitizenLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ManageCitizenLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ManageCitizenLabelsResponseMultiError, or nil if none found.
func (m *ManageCitizenLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ManageCitizenLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ManageCitizenLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ManageCitizenLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ManageCitizenLabelsResponseValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ManageCitizenLabelsResponseMultiError(errors)
	}

	return nil
}

// ManageCitizenLabelsResponseMultiError is an error wrapping multiple
// validation errors returned by ManageCitizenLabelsResponse.ValidateAll() if
// the designated constraints aren't met.
type ManageCitizenLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ManageCitizenLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ManageCitizenLabelsResponseMultiError) AllErrors() []error { return m }

// ManageCitizenLabelsResponseValidationError is the validation error returned
// by ManageCitizenLabelsResponse.Validate if the designated constraints
// aren't met.
type ManageCitizenLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ManageCitizenLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ManageCitizenLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ManageCitizenLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ManageCitizenLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ManageCitizenLabelsResponseValidationError) ErrorName() string {
	return "ManageCitizenLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ManageCitizenLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sManageCitizenLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ManageCitizenLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ManageCitizenLabelsResponseValidationError{}
