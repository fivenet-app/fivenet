// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: services/completor/completor.proto

package completor

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteCitizenLabelsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Search
	m.Search = htmlsanitizer.Sanitize(m.Search)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteCitizenLabelsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Labels
	for idx, item := range m.Labels {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteCitizensRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Search
	m.Search = htmlsanitizer.Sanitize(m.Search)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteCitizensResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Users
	for idx, item := range m.Users {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteDocumentCategoriesRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Search
	m.Search = htmlsanitizer.Sanitize(m.Search)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteDocumentCategoriesResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Categories
	for idx, item := range m.Categories {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteJobsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Search
	if m.Search != nil {
		*m.Search = htmlsanitizer.Sanitize(*m.Search)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CompleteJobsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Jobs
	for idx, item := range m.Jobs {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListLawBooksRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListLawBooksResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Books
	for idx, item := range m.Books {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
