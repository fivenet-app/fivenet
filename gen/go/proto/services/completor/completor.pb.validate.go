// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/completor/completor.proto

package completor

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CompleteCitizensRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteCitizensRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteCitizensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteCitizensRequestMultiError, or nil if none found.
func (m *CompleteCitizensRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteCitizensRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSearch()) > 64 {
		err := CompleteCitizensRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUserIds() {
		_, _ = idx, item

		if item <= 0 {
			err := CompleteCitizensRequestValidationError{
				field:  fmt.Sprintf("UserIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CurrentJob != nil {
		// no validation rules for CurrentJob
	}

	if m.OnDuty != nil {
		// no validation rules for OnDuty
	}

	if m.UserIdsOnly != nil {
		// no validation rules for UserIdsOnly
	}

	if len(errors) > 0 {
		return CompleteCitizensRequestMultiError(errors)
	}

	return nil
}

// CompleteCitizensRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteCitizensRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteCitizensRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteCitizensRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteCitizensRequestMultiError) AllErrors() []error { return m }

// CompleteCitizensRequestValidationError is the validation error returned by
// CompleteCitizensRequest.Validate if the designated constraints aren't met.
type CompleteCitizensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteCitizensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteCitizensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteCitizensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteCitizensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteCitizensRequestValidationError) ErrorName() string {
	return "CompleteCitizensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteCitizensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteCitizensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteCitizensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteCitizensRequestValidationError{}

// Validate checks the field values on CompleteCitizensRespoonse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteCitizensRespoonse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteCitizensRespoonse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteCitizensRespoonseMultiError, or nil if none found.
func (m *CompleteCitizensRespoonse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteCitizensRespoonse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteCitizensRespoonseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteCitizensRespoonseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteCitizensRespoonseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompleteCitizensRespoonseMultiError(errors)
	}

	return nil
}

// CompleteCitizensRespoonseMultiError is an error wrapping multiple validation
// errors returned by CompleteCitizensRespoonse.ValidateAll() if the
// designated constraints aren't met.
type CompleteCitizensRespoonseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteCitizensRespoonseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteCitizensRespoonseMultiError) AllErrors() []error { return m }

// CompleteCitizensRespoonseValidationError is the validation error returned by
// CompleteCitizensRespoonse.Validate if the designated constraints aren't met.
type CompleteCitizensRespoonseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteCitizensRespoonseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteCitizensRespoonseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteCitizensRespoonseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteCitizensRespoonseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteCitizensRespoonseValidationError) ErrorName() string {
	return "CompleteCitizensRespoonseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteCitizensRespoonseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteCitizensRespoonse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteCitizensRespoonseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteCitizensRespoonseValidationError{}

// Validate checks the field values on CompleteJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteJobsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteJobsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteJobsRequestMultiError, or nil if none found.
func (m *CompleteJobsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteJobsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Search != nil {

		if utf8.RuneCountInString(m.GetSearch()) > 64 {
			err := CompleteJobsRequestValidationError{
				field:  "Search",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ExactMatch != nil {
		// no validation rules for ExactMatch
	}

	if m.CurrentJob != nil {
		// no validation rules for CurrentJob
	}

	if len(errors) > 0 {
		return CompleteJobsRequestMultiError(errors)
	}

	return nil
}

// CompleteJobsRequestMultiError is an error wrapping multiple validation
// errors returned by CompleteJobsRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteJobsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteJobsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteJobsRequestMultiError) AllErrors() []error { return m }

// CompleteJobsRequestValidationError is the validation error returned by
// CompleteJobsRequest.Validate if the designated constraints aren't met.
type CompleteJobsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteJobsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteJobsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteJobsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteJobsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteJobsRequestValidationError) ErrorName() string {
	return "CompleteJobsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteJobsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteJobsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteJobsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteJobsRequestValidationError{}

// Validate checks the field values on CompleteJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteJobsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteJobsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteJobsResponseMultiError, or nil if none found.
func (m *CompleteJobsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteJobsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteJobsResponseValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteJobsResponseValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompleteJobsResponseMultiError(errors)
	}

	return nil
}

// CompleteJobsResponseMultiError is an error wrapping multiple validation
// errors returned by CompleteJobsResponse.ValidateAll() if the designated
// constraints aren't met.
type CompleteJobsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteJobsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteJobsResponseMultiError) AllErrors() []error { return m }

// CompleteJobsResponseValidationError is the validation error returned by
// CompleteJobsResponse.Validate if the designated constraints aren't met.
type CompleteJobsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteJobsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteJobsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteJobsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteJobsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteJobsResponseValidationError) ErrorName() string {
	return "CompleteJobsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteJobsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteJobsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteJobsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteJobsResponseValidationError{}

// Validate checks the field values on CompleteDocumentCategoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CompleteDocumentCategoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteDocumentCategoriesRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompleteDocumentCategoriesRequestMultiError, or nil if none found.
func (m *CompleteDocumentCategoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteDocumentCategoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSearch()) > 64 {
		err := CompleteDocumentCategoriesRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompleteDocumentCategoriesRequestMultiError(errors)
	}

	return nil
}

// CompleteDocumentCategoriesRequestMultiError is an error wrapping multiple
// validation errors returned by
// CompleteDocumentCategoriesRequest.ValidateAll() if the designated
// constraints aren't met.
type CompleteDocumentCategoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteDocumentCategoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteDocumentCategoriesRequestMultiError) AllErrors() []error { return m }

// CompleteDocumentCategoriesRequestValidationError is the validation error
// returned by CompleteDocumentCategoriesRequest.Validate if the designated
// constraints aren't met.
type CompleteDocumentCategoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteDocumentCategoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteDocumentCategoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteDocumentCategoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteDocumentCategoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteDocumentCategoriesRequestValidationError) ErrorName() string {
	return "CompleteDocumentCategoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteDocumentCategoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteDocumentCategoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteDocumentCategoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteDocumentCategoriesRequestValidationError{}

// Validate checks the field values on CompleteDocumentCategoriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *CompleteDocumentCategoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteDocumentCategoriesResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// CompleteDocumentCategoriesResponseMultiError, or nil if none found.
func (m *CompleteDocumentCategoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteDocumentCategoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCategories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteDocumentCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteDocumentCategoriesResponseValidationError{
						field:  fmt.Sprintf("Categories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteDocumentCategoriesResponseValidationError{
					field:  fmt.Sprintf("Categories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompleteDocumentCategoriesResponseMultiError(errors)
	}

	return nil
}

// CompleteDocumentCategoriesResponseMultiError is an error wrapping multiple
// validation errors returned by
// CompleteDocumentCategoriesResponse.ValidateAll() if the designated
// constraints aren't met.
type CompleteDocumentCategoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteDocumentCategoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteDocumentCategoriesResponseMultiError) AllErrors() []error { return m }

// CompleteDocumentCategoriesResponseValidationError is the validation error
// returned by CompleteDocumentCategoriesResponse.Validate if the designated
// constraints aren't met.
type CompleteDocumentCategoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteDocumentCategoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteDocumentCategoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteDocumentCategoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteDocumentCategoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteDocumentCategoriesResponseValidationError) ErrorName() string {
	return "CompleteDocumentCategoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteDocumentCategoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteDocumentCategoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteDocumentCategoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteDocumentCategoriesResponseValidationError{}

// Validate checks the field values on ListLawBooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLawBooksRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLawBooksRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLawBooksRequestMultiError, or nil if none found.
func (m *ListLawBooksRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLawBooksRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLawBooksRequestMultiError(errors)
	}

	return nil
}

// ListLawBooksRequestMultiError is an error wrapping multiple validation
// errors returned by ListLawBooksRequest.ValidateAll() if the designated
// constraints aren't met.
type ListLawBooksRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLawBooksRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLawBooksRequestMultiError) AllErrors() []error { return m }

// ListLawBooksRequestValidationError is the validation error returned by
// ListLawBooksRequest.Validate if the designated constraints aren't met.
type ListLawBooksRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLawBooksRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLawBooksRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLawBooksRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLawBooksRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLawBooksRequestValidationError) ErrorName() string {
	return "ListLawBooksRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLawBooksRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLawBooksRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLawBooksRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLawBooksRequestValidationError{}

// Validate checks the field values on ListLawBooksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListLawBooksResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLawBooksResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLawBooksResponseMultiError, or nil if none found.
func (m *ListLawBooksResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLawBooksResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBooks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLawBooksResponseValidationError{
						field:  fmt.Sprintf("Books[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLawBooksResponseValidationError{
						field:  fmt.Sprintf("Books[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLawBooksResponseValidationError{
					field:  fmt.Sprintf("Books[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLawBooksResponseMultiError(errors)
	}

	return nil
}

// ListLawBooksResponseMultiError is an error wrapping multiple validation
// errors returned by ListLawBooksResponse.ValidateAll() if the designated
// constraints aren't met.
type ListLawBooksResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLawBooksResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLawBooksResponseMultiError) AllErrors() []error { return m }

// ListLawBooksResponseValidationError is the validation error returned by
// ListLawBooksResponse.Validate if the designated constraints aren't met.
type ListLawBooksResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLawBooksResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLawBooksResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLawBooksResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLawBooksResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLawBooksResponseValidationError) ErrorName() string {
	return "ListLawBooksResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLawBooksResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLawBooksResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLawBooksResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLawBooksResponseValidationError{}

// Validate checks the field values on CompleteCitizenLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteCitizenLabelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteCitizenLabelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompleteCitizenLabelsRequestMultiError, or nil if none found.
func (m *CompleteCitizenLabelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteCitizenLabelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSearch()) > 64 {
		err := CompleteCitizenLabelsRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompleteCitizenLabelsRequestMultiError(errors)
	}

	return nil
}

// CompleteCitizenLabelsRequestMultiError is an error wrapping multiple
// validation errors returned by CompleteCitizenLabelsRequest.ValidateAll() if
// the designated constraints aren't met.
type CompleteCitizenLabelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteCitizenLabelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteCitizenLabelsRequestMultiError) AllErrors() []error { return m }

// CompleteCitizenLabelsRequestValidationError is the validation error returned
// by CompleteCitizenLabelsRequest.Validate if the designated constraints
// aren't met.
type CompleteCitizenLabelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteCitizenLabelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteCitizenLabelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteCitizenLabelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteCitizenLabelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteCitizenLabelsRequestValidationError) ErrorName() string {
	return "CompleteCitizenLabelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteCitizenLabelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteCitizenLabelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteCitizenLabelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteCitizenLabelsRequestValidationError{}

// Validate checks the field values on CompleteCitizenLabelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompleteCitizenLabelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompleteCitizenLabelsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CompleteCitizenLabelsResponseMultiError, or nil if none found.
func (m *CompleteCitizenLabelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompleteCitizenLabelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLabels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CompleteCitizenLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CompleteCitizenLabelsResponseValidationError{
						field:  fmt.Sprintf("Labels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CompleteCitizenLabelsResponseValidationError{
					field:  fmt.Sprintf("Labels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CompleteCitizenLabelsResponseMultiError(errors)
	}

	return nil
}

// CompleteCitizenLabelsResponseMultiError is an error wrapping multiple
// validation errors returned by CompleteCitizenLabelsResponse.ValidateAll()
// if the designated constraints aren't met.
type CompleteCitizenLabelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompleteCitizenLabelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompleteCitizenLabelsResponseMultiError) AllErrors() []error { return m }

// CompleteCitizenLabelsResponseValidationError is the validation error
// returned by CompleteCitizenLabelsResponse.Validate if the designated
// constraints aren't met.
type CompleteCitizenLabelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompleteCitizenLabelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompleteCitizenLabelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompleteCitizenLabelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompleteCitizenLabelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompleteCitizenLabelsResponseValidationError) ErrorName() string {
	return "CompleteCitizenLabelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompleteCitizenLabelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompleteCitizenLabelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompleteCitizenLabelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompleteCitizenLabelsResponseValidationError{}
