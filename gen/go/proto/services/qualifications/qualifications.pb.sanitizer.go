// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: services/qualifications/qualifications.proto

package qualifications

func (m *CreateOrUpdateQualificationRequestRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Request
	if m.Request != nil {
		if v, ok := any(m.GetRequest()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CreateOrUpdateQualificationRequestResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Request
	if m.Request != nil {
		if v, ok := any(m.GetRequest()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CreateOrUpdateQualificationResultRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Grading
	if m.Grading != nil {
		if v, ok := any(m.GetGrading()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Result
	if m.Result != nil {
		if v, ok := any(m.GetResult()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CreateOrUpdateQualificationResultResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Result
	if m.Result != nil {
		if v, ok := any(m.GetResult()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CreateQualificationRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Qualification
	if m.Qualification != nil {
		if v, ok := any(m.GetQualification()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CreateQualificationResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteQualificationReqRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteQualificationReqResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteQualificationRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteQualificationResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteQualificationResultRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *DeleteQualificationResultResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetExamInfoRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetExamInfoResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ExamUser
	if m.ExamUser != nil {
		if v, ok := any(m.GetExamUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Qualification
	if m.Qualification != nil {
		if v, ok := any(m.GetQualification()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *GetQualificationAccessRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetQualificationAccessResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Access
	if m.Access != nil {
		if v, ok := any(m.GetAccess()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *GetQualificationRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetQualificationResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Qualification
	if m.Qualification != nil {
		if v, ok := any(m.GetQualification()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *GetUserExamRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *GetUserExamResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Exam
	if m.Exam != nil {
		if v, ok := any(m.GetExam()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: ExamUser
	if m.ExamUser != nil {
		if v, ok := any(m.GetExamUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Grading
	if m.Grading != nil {
		if v, ok := any(m.GetGrading()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Responses
	if m.Responses != nil {
		if v, ok := any(m.GetResponses()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *ListQualificationRequestsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Sort
	if m.Sort != nil {
		if v, ok := any(m.GetSort()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Status
	for idx, item := range m.Status {
		_, _ = idx, item

	}

	return nil
}

func (m *ListQualificationRequestsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Requests
	for idx, item := range m.Requests {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ListQualificationsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Sort
	if m.Sort != nil {
		if v, ok := any(m.GetSort()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *ListQualificationsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Qualifications
	for idx, item := range m.Qualifications {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ListQualificationsResultsRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Sort
	if m.Sort != nil {
		if v, ok := any(m.GetSort()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Status
	for idx, item := range m.Status {
		_, _ = idx, item

	}

	return nil
}

func (m *ListQualificationsResultsResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Results
	for idx, item := range m.Results {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *SetQualificationAccessRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Access
	if m.Access != nil {
		if v, ok := any(m.GetAccess()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *SetQualificationAccessResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *SubmitExamRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Responses
	if m.Responses != nil {
		if v, ok := any(m.GetResponses()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *SubmitExamResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Duration
	if m.Duration != nil {
		if v, ok := any(m.GetDuration()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *TakeExamRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *TakeExamResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Exam
	if m.Exam != nil {
		if v, ok := any(m.GetExam()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: ExamUser
	if m.ExamUser != nil {
		if v, ok := any(m.GetExamUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *UpdateQualificationRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Qualification
	if m.Qualification != nil {
		if v, ok := any(m.GetQualification()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *UpdateQualificationResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}
