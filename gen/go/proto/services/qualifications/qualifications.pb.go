// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.20.3
// source: services/qualifications/qualifications.proto

package qualifications

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	database "github.com/fivenet-app/fivenet/gen/go/proto/resources/common/database"
	qualifications "github.com/fivenet-app/fivenet/gen/go/proto/resources/qualifications"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListQualificationsRequest struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Pagination *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sort       *database.Sort              `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Search params
	Search        *string `protobuf:"bytes,3,opt,name=search,proto3,oneof" json:"search,omitempty"`
	Job           *string `protobuf:"bytes,4,opt,name=job,proto3,oneof" json:"job,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQualificationsRequest) Reset() {
	*x = ListQualificationsRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQualificationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQualificationsRequest) ProtoMessage() {}

func (x *ListQualificationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQualificationsRequest.ProtoReflect.Descriptor instead.
func (*ListQualificationsRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{0}
}

func (x *ListQualificationsRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListQualificationsRequest) GetSort() *database.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListQualificationsRequest) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *ListQualificationsRequest) GetJob() string {
	if x != nil && x.Job != nil {
		return *x.Job
	}
	return ""
}

type ListQualificationsResponse struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	Pagination     *database.PaginationResponse    `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Qualifications []*qualifications.Qualification `protobuf:"bytes,2,rep,name=qualifications,proto3" json:"qualifications,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListQualificationsResponse) Reset() {
	*x = ListQualificationsResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQualificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQualificationsResponse) ProtoMessage() {}

func (x *ListQualificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQualificationsResponse.ProtoReflect.Descriptor instead.
func (*ListQualificationsResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{1}
}

func (x *ListQualificationsResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListQualificationsResponse) GetQualifications() []*qualifications.Qualification {
	if x != nil {
		return x.Qualifications
	}
	return nil
}

type GetQualificationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	WithExam        *bool                  `protobuf:"varint,2,opt,name=with_exam,json=withExam,proto3,oneof" json:"with_exam,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetQualificationRequest) Reset() {
	*x = GetQualificationRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQualificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualificationRequest) ProtoMessage() {}

func (x *GetQualificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualificationRequest.ProtoReflect.Descriptor instead.
func (*GetQualificationRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{2}
}

func (x *GetQualificationRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

func (x *GetQualificationRequest) GetWithExam() bool {
	if x != nil && x.WithExam != nil {
		return *x.WithExam
	}
	return false
}

type GetQualificationResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Qualification *qualifications.Qualification `protobuf:"bytes,1,opt,name=qualification,proto3" json:"qualification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQualificationResponse) Reset() {
	*x = GetQualificationResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQualificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualificationResponse) ProtoMessage() {}

func (x *GetQualificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualificationResponse.ProtoReflect.Descriptor instead.
func (*GetQualificationResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{3}
}

func (x *GetQualificationResponse) GetQualification() *qualifications.Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

type CreateQualificationRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Qualification *qualifications.Qualification `protobuf:"bytes,1,opt,name=qualification,proto3" json:"qualification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateQualificationRequest) Reset() {
	*x = CreateQualificationRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQualificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQualificationRequest) ProtoMessage() {}

func (x *CreateQualificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQualificationRequest.ProtoReflect.Descriptor instead.
func (*CreateQualificationRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{4}
}

func (x *CreateQualificationRequest) GetQualification() *qualifications.Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

type CreateQualificationResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CreateQualificationResponse) Reset() {
	*x = CreateQualificationResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateQualificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateQualificationResponse) ProtoMessage() {}

func (x *CreateQualificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateQualificationResponse.ProtoReflect.Descriptor instead.
func (*CreateQualificationResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{5}
}

func (x *CreateQualificationResponse) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

type UpdateQualificationRequest struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Qualification *qualifications.Qualification `protobuf:"bytes,1,opt,name=qualification,proto3" json:"qualification,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateQualificationRequest) Reset() {
	*x = UpdateQualificationRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQualificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQualificationRequest) ProtoMessage() {}

func (x *UpdateQualificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQualificationRequest.ProtoReflect.Descriptor instead.
func (*UpdateQualificationRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateQualificationRequest) GetQualification() *qualifications.Qualification {
	if x != nil {
		return x.Qualification
	}
	return nil
}

type UpdateQualificationResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UpdateQualificationResponse) Reset() {
	*x = UpdateQualificationResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateQualificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQualificationResponse) ProtoMessage() {}

func (x *UpdateQualificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQualificationResponse.ProtoReflect.Descriptor instead.
func (*UpdateQualificationResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateQualificationResponse) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

type DeleteQualificationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteQualificationRequest) Reset() {
	*x = DeleteQualificationRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQualificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQualificationRequest) ProtoMessage() {}

func (x *DeleteQualificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQualificationRequest.ProtoReflect.Descriptor instead.
func (*DeleteQualificationRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteQualificationRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

type DeleteQualificationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQualificationResponse) Reset() {
	*x = DeleteQualificationResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQualificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQualificationResponse) ProtoMessage() {}

func (x *DeleteQualificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQualificationResponse.ProtoReflect.Descriptor instead.
func (*DeleteQualificationResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{9}
}

type GetQualificationAccessRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetQualificationAccessRequest) Reset() {
	*x = GetQualificationAccessRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQualificationAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualificationAccessRequest) ProtoMessage() {}

func (x *GetQualificationAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualificationAccessRequest.ProtoReflect.Descriptor instead.
func (*GetQualificationAccessRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{10}
}

func (x *GetQualificationAccessRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

type GetQualificationAccessResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Access        *qualifications.QualificationAccess `protobuf:"bytes,1,opt,name=access,proto3" json:"access,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetQualificationAccessResponse) Reset() {
	*x = GetQualificationAccessResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetQualificationAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetQualificationAccessResponse) ProtoMessage() {}

func (x *GetQualificationAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetQualificationAccessResponse.ProtoReflect.Descriptor instead.
func (*GetQualificationAccessResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{11}
}

func (x *GetQualificationAccessResponse) GetAccess() *qualifications.QualificationAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type SetQualificationAccessRequest struct {
	state           protoimpl.MessageState              `protogen:"open.v1"`
	QualificationId uint64                              `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	Access          *qualifications.QualificationAccess `protobuf:"bytes,2,opt,name=access,proto3" json:"access,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SetQualificationAccessRequest) Reset() {
	*x = SetQualificationAccessRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetQualificationAccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQualificationAccessRequest) ProtoMessage() {}

func (x *SetQualificationAccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQualificationAccessRequest.ProtoReflect.Descriptor instead.
func (*SetQualificationAccessRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{12}
}

func (x *SetQualificationAccessRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

func (x *SetQualificationAccessRequest) GetAccess() *qualifications.QualificationAccess {
	if x != nil {
		return x.Access
	}
	return nil
}

type SetQualificationAccessResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetQualificationAccessResponse) Reset() {
	*x = SetQualificationAccessResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetQualificationAccessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetQualificationAccessResponse) ProtoMessage() {}

func (x *SetQualificationAccessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetQualificationAccessResponse.ProtoReflect.Descriptor instead.
func (*SetQualificationAccessResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{13}
}

type ListQualificationRequestsRequest struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Pagination *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sort       *database.Sort              `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Search params
	QualificationId *uint64                        `protobuf:"varint,3,opt,name=qualification_id,json=qualificationId,proto3,oneof" json:"qualification_id,omitempty"`
	Status          []qualifications.RequestStatus `protobuf:"varint,4,rep,packed,name=status,proto3,enum=resources.qualifications.RequestStatus" json:"status,omitempty"`
	UserId          *int32                         `protobuf:"varint,5,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListQualificationRequestsRequest) Reset() {
	*x = ListQualificationRequestsRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQualificationRequestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQualificationRequestsRequest) ProtoMessage() {}

func (x *ListQualificationRequestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQualificationRequestsRequest.ProtoReflect.Descriptor instead.
func (*ListQualificationRequestsRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{14}
}

func (x *ListQualificationRequestsRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListQualificationRequestsRequest) GetSort() *database.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListQualificationRequestsRequest) GetQualificationId() uint64 {
	if x != nil && x.QualificationId != nil {
		return *x.QualificationId
	}
	return 0
}

func (x *ListQualificationRequestsRequest) GetStatus() []qualifications.RequestStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListQualificationRequestsRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type ListQualificationRequestsResponse struct {
	state         protoimpl.MessageState                 `protogen:"open.v1"`
	Pagination    *database.PaginationResponse           `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Requests      []*qualifications.QualificationRequest `protobuf:"bytes,2,rep,name=requests,proto3" json:"requests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQualificationRequestsResponse) Reset() {
	*x = ListQualificationRequestsResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQualificationRequestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQualificationRequestsResponse) ProtoMessage() {}

func (x *ListQualificationRequestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQualificationRequestsResponse.ProtoReflect.Descriptor instead.
func (*ListQualificationRequestsResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{15}
}

func (x *ListQualificationRequestsResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListQualificationRequestsResponse) GetRequests() []*qualifications.QualificationRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type CreateOrUpdateQualificationRequestRequest struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Request       *qualifications.QualificationRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateQualificationRequestRequest) Reset() {
	*x = CreateOrUpdateQualificationRequestRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateQualificationRequestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateQualificationRequestRequest) ProtoMessage() {}

func (x *CreateOrUpdateQualificationRequestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateQualificationRequestRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateQualificationRequestRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{16}
}

func (x *CreateOrUpdateQualificationRequestRequest) GetRequest() *qualifications.QualificationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type CreateOrUpdateQualificationRequestResponse struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	Request       *qualifications.QualificationRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateQualificationRequestResponse) Reset() {
	*x = CreateOrUpdateQualificationRequestResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateQualificationRequestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateQualificationRequestResponse) ProtoMessage() {}

func (x *CreateOrUpdateQualificationRequestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateQualificationRequestResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateQualificationRequestResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{17}
}

func (x *CreateOrUpdateQualificationRequestResponse) GetRequest() *qualifications.QualificationRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

type DeleteQualificationReqRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	UserId          int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeleteQualificationReqRequest) Reset() {
	*x = DeleteQualificationReqRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQualificationReqRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQualificationReqRequest) ProtoMessage() {}

func (x *DeleteQualificationReqRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQualificationReqRequest.ProtoReflect.Descriptor instead.
func (*DeleteQualificationReqRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteQualificationReqRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

func (x *DeleteQualificationReqRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type DeleteQualificationReqResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQualificationReqResponse) Reset() {
	*x = DeleteQualificationReqResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQualificationReqResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQualificationReqResponse) ProtoMessage() {}

func (x *DeleteQualificationReqResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQualificationReqResponse.ProtoReflect.Descriptor instead.
func (*DeleteQualificationReqResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{19}
}

type ListQualificationsResultsRequest struct {
	state      protoimpl.MessageState      `protogen:"open.v1"`
	Pagination *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Sort       *database.Sort              `protobuf:"bytes,2,opt,name=sort,proto3,oneof" json:"sort,omitempty"`
	// Search params
	QualificationId *uint64                       `protobuf:"varint,3,opt,name=qualification_id,json=qualificationId,proto3,oneof" json:"qualification_id,omitempty"`
	Status          []qualifications.ResultStatus `protobuf:"varint,4,rep,packed,name=status,proto3,enum=resources.qualifications.ResultStatus" json:"status,omitempty"`
	UserId          *int32                        `protobuf:"varint,5,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListQualificationsResultsRequest) Reset() {
	*x = ListQualificationsResultsRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQualificationsResultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQualificationsResultsRequest) ProtoMessage() {}

func (x *ListQualificationsResultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQualificationsResultsRequest.ProtoReflect.Descriptor instead.
func (*ListQualificationsResultsRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{20}
}

func (x *ListQualificationsResultsRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListQualificationsResultsRequest) GetSort() *database.Sort {
	if x != nil {
		return x.Sort
	}
	return nil
}

func (x *ListQualificationsResultsRequest) GetQualificationId() uint64 {
	if x != nil && x.QualificationId != nil {
		return *x.QualificationId
	}
	return 0
}

func (x *ListQualificationsResultsRequest) GetStatus() []qualifications.ResultStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListQualificationsResultsRequest) GetUserId() int32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type ListQualificationsResultsResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Pagination    *database.PaginationResponse          `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Results       []*qualifications.QualificationResult `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListQualificationsResultsResponse) Reset() {
	*x = ListQualificationsResultsResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListQualificationsResultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListQualificationsResultsResponse) ProtoMessage() {}

func (x *ListQualificationsResultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListQualificationsResultsResponse.ProtoReflect.Descriptor instead.
func (*ListQualificationsResultsResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{21}
}

func (x *ListQualificationsResultsResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListQualificationsResultsResponse) GetResults() []*qualifications.QualificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

type CreateOrUpdateQualificationResultRequest struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Result        *qualifications.QualificationResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateQualificationResultRequest) Reset() {
	*x = CreateOrUpdateQualificationResultRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateQualificationResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateQualificationResultRequest) ProtoMessage() {}

func (x *CreateOrUpdateQualificationResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateQualificationResultRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateQualificationResultRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{22}
}

func (x *CreateOrUpdateQualificationResultRequest) GetResult() *qualifications.QualificationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateOrUpdateQualificationResultResponse struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Result        *qualifications.QualificationResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateQualificationResultResponse) Reset() {
	*x = CreateOrUpdateQualificationResultResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateQualificationResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateQualificationResultResponse) ProtoMessage() {}

func (x *CreateOrUpdateQualificationResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateQualificationResultResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateQualificationResultResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{23}
}

func (x *CreateOrUpdateQualificationResultResponse) GetResult() *qualifications.QualificationResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeleteQualificationResultRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ResultId      uint64                 `protobuf:"varint,1,opt,name=result_id,json=resultId,proto3" json:"result_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQualificationResultRequest) Reset() {
	*x = DeleteQualificationResultRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQualificationResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQualificationResultRequest) ProtoMessage() {}

func (x *DeleteQualificationResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQualificationResultRequest.ProtoReflect.Descriptor instead.
func (*DeleteQualificationResultRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteQualificationResultRequest) GetResultId() uint64 {
	if x != nil {
		return x.ResultId
	}
	return 0
}

type DeleteQualificationResultResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteQualificationResultResponse) Reset() {
	*x = DeleteQualificationResultResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteQualificationResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteQualificationResultResponse) ProtoMessage() {}

func (x *DeleteQualificationResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteQualificationResultResponse.ProtoReflect.Descriptor instead.
func (*DeleteQualificationResultResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{25}
}

type GetExamInfoRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetExamInfoRequest) Reset() {
	*x = GetExamInfoRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamInfoRequest) ProtoMessage() {}

func (x *GetExamInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamInfoRequest.ProtoReflect.Descriptor instead.
func (*GetExamInfoRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{26}
}

func (x *GetExamInfoRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

type GetExamInfoResponse struct {
	state         protoimpl.MessageState             `protogen:"open.v1"`
	Qualification *qualifications.QualificationShort `protobuf:"bytes,1,opt,name=qualification,proto3" json:"qualification,omitempty"`
	QuestionCount int32                              `protobuf:"varint,2,opt,name=question_count,json=questionCount,proto3" json:"question_count,omitempty"`
	ExamUser      *qualifications.ExamUser           `protobuf:"bytes,3,opt,name=exam_user,json=examUser,proto3,oneof" json:"exam_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExamInfoResponse) Reset() {
	*x = GetExamInfoResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExamInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExamInfoResponse) ProtoMessage() {}

func (x *GetExamInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExamInfoResponse.ProtoReflect.Descriptor instead.
func (*GetExamInfoResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{27}
}

func (x *GetExamInfoResponse) GetQualification() *qualifications.QualificationShort {
	if x != nil {
		return x.Qualification
	}
	return nil
}

func (x *GetExamInfoResponse) GetQuestionCount() int32 {
	if x != nil {
		return x.QuestionCount
	}
	return 0
}

func (x *GetExamInfoResponse) GetExamUser() *qualifications.ExamUser {
	if x != nil {
		return x.ExamUser
	}
	return nil
}

type TakeExamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	Cancel          *bool                  `protobuf:"varint,2,opt,name=cancel,proto3,oneof" json:"cancel,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TakeExamRequest) Reset() {
	*x = TakeExamRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeExamRequest) ProtoMessage() {}

func (x *TakeExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeExamRequest.ProtoReflect.Descriptor instead.
func (*TakeExamRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{28}
}

func (x *TakeExamRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

func (x *TakeExamRequest) GetCancel() bool {
	if x != nil && x.Cancel != nil {
		return *x.Cancel
	}
	return false
}

type TakeExamResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Exam          *qualifications.ExamQuestions `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	ExamUser      *qualifications.ExamUser      `protobuf:"bytes,2,opt,name=exam_user,json=examUser,proto3" json:"exam_user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeExamResponse) Reset() {
	*x = TakeExamResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeExamResponse) ProtoMessage() {}

func (x *TakeExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeExamResponse.ProtoReflect.Descriptor instead.
func (*TakeExamResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{29}
}

func (x *TakeExamResponse) GetExam() *qualifications.ExamQuestions {
	if x != nil {
		return x.Exam
	}
	return nil
}

func (x *TakeExamResponse) GetExamUser() *qualifications.ExamUser {
	if x != nil {
		return x.ExamUser
	}
	return nil
}

type SubmitExamRequest struct {
	state           protoimpl.MessageState        `protogen:"open.v1"`
	QualificationId uint64                        `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	Responses       *qualifications.ExamResponses `protobuf:"bytes,2,opt,name=responses,proto3" json:"responses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubmitExamRequest) Reset() {
	*x = SubmitExamRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamRequest) ProtoMessage() {}

func (x *SubmitExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamRequest.ProtoReflect.Descriptor instead.
func (*SubmitExamRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{30}
}

func (x *SubmitExamRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

func (x *SubmitExamRequest) GetResponses() *qualifications.ExamResponses {
	if x != nil {
		return x.Responses
	}
	return nil
}

type SubmitExamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Duration      *durationpb.Duration   `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitExamResponse) Reset() {
	*x = SubmitExamResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExamResponse) ProtoMessage() {}

func (x *SubmitExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExamResponse.ProtoReflect.Descriptor instead.
func (*SubmitExamResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{31}
}

func (x *SubmitExamResponse) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

type GetUserExamRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	QualificationId uint64                 `protobuf:"varint,1,opt,name=qualification_id,json=qualificationId,proto3" json:"qualification_id,omitempty"`
	UserId          int32                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GetUserExamRequest) Reset() {
	*x = GetUserExamRequest{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserExamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExamRequest) ProtoMessage() {}

func (x *GetUserExamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExamRequest.ProtoReflect.Descriptor instead.
func (*GetUserExamRequest) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{32}
}

func (x *GetUserExamRequest) GetQualificationId() uint64 {
	if x != nil {
		return x.QualificationId
	}
	return 0
}

func (x *GetUserExamRequest) GetUserId() int32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetUserExamResponse struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Exam          *qualifications.ExamQuestions `protobuf:"bytes,1,opt,name=exam,proto3" json:"exam,omitempty"`
	ExamUser      *qualifications.ExamUser      `protobuf:"bytes,2,opt,name=exam_user,json=examUser,proto3" json:"exam_user,omitempty"`
	Responses     *qualifications.ExamResponses `protobuf:"bytes,3,opt,name=responses,proto3" json:"responses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserExamResponse) Reset() {
	*x = GetUserExamResponse{}
	mi := &file_services_qualifications_qualifications_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserExamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserExamResponse) ProtoMessage() {}

func (x *GetUserExamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_qualifications_qualifications_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserExamResponse.ProtoReflect.Descriptor instead.
func (*GetUserExamResponse) Descriptor() ([]byte, []int) {
	return file_services_qualifications_qualifications_proto_rawDescGZIP(), []int{33}
}

func (x *GetUserExamResponse) GetExam() *qualifications.ExamQuestions {
	if x != nil {
		return x.Exam
	}
	return nil
}

func (x *GetUserExamResponse) GetExamUser() *qualifications.ExamUser {
	if x != nil {
		return x.ExamUser
	}
	return nil
}

func (x *GetUserExamResponse) GetResponses() *qualifications.ExamResponses {
	if x != nil {
		return x.Responses
	}
	return nil
}

var File_services_qualifications_qualifications_proto protoreflect.FileDescriptor

var file_services_qualifications_qualifications_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x40, 0x48, 0x01,
	0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x03, 0x6a,
	0x6f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x14, 0x48, 0x02, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x73, 0x6f, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x6a, 0x6f, 0x62, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x74, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x08, 0x77, 0x69, 0x74, 0x68, 0x45, 0x78, 0x61, 0x6d, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x78, 0x61, 0x6d, 0x22, 0x69, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x75, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0d, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x48, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x1a, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x71, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x9b, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x4f, 0x0a,
	0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x20,
	0x0a, 0x1e, 0x53, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xf6, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x04,
	0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x01, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x28, 0x00, 0x48, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x21, 0x4c, 0x69,
	0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a,
	0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x29, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x2a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x20, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xf5, 0x02, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x38, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x28, 0x00, 0x48, 0x02, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x21,
	0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x28, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x72, 0x0a, 0x29, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3f, 0x0a, 0x20, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0xe4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x52, 0x0d,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x65,
	0x78, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65,
	0x78, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x22, 0x64, 0x0a, 0x0f, 0x54, 0x61, 0x6b, 0x65,
	0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x22, 0x90,
	0x01, 0x0a, 0x10, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d,
	0x12, 0x3f, 0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4b, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x61, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28,
	0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xda, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3b, 0x0a, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x61, 0x6d, 0x51,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x04, 0x65, 0x78, 0x61, 0x6d, 0x12, 0x3f,
	0x0a, 0x09, 0x65, 0x78, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x61,
	0x6d, 0x55, 0x73, 0x65, 0x72, 0x52, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x32, 0xdc, 0x0f, 0x0a, 0x15, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x7d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x32, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x80,
	0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x36, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0xaa, 0x01, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x39, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x12,
	0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x78,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78,
	0x61, 0x6d, 0x12, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x78, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x2f,
	0x66, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3b, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_services_qualifications_qualifications_proto_rawDescOnce sync.Once
	file_services_qualifications_qualifications_proto_rawDescData = file_services_qualifications_qualifications_proto_rawDesc
)

func file_services_qualifications_qualifications_proto_rawDescGZIP() []byte {
	file_services_qualifications_qualifications_proto_rawDescOnce.Do(func() {
		file_services_qualifications_qualifications_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_qualifications_qualifications_proto_rawDescData)
	})
	return file_services_qualifications_qualifications_proto_rawDescData
}

var file_services_qualifications_qualifications_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_services_qualifications_qualifications_proto_goTypes = []any{
	(*ListQualificationsRequest)(nil),                  // 0: services.qualifications.ListQualificationsRequest
	(*ListQualificationsResponse)(nil),                 // 1: services.qualifications.ListQualificationsResponse
	(*GetQualificationRequest)(nil),                    // 2: services.qualifications.GetQualificationRequest
	(*GetQualificationResponse)(nil),                   // 3: services.qualifications.GetQualificationResponse
	(*CreateQualificationRequest)(nil),                 // 4: services.qualifications.CreateQualificationRequest
	(*CreateQualificationResponse)(nil),                // 5: services.qualifications.CreateQualificationResponse
	(*UpdateQualificationRequest)(nil),                 // 6: services.qualifications.UpdateQualificationRequest
	(*UpdateQualificationResponse)(nil),                // 7: services.qualifications.UpdateQualificationResponse
	(*DeleteQualificationRequest)(nil),                 // 8: services.qualifications.DeleteQualificationRequest
	(*DeleteQualificationResponse)(nil),                // 9: services.qualifications.DeleteQualificationResponse
	(*GetQualificationAccessRequest)(nil),              // 10: services.qualifications.GetQualificationAccessRequest
	(*GetQualificationAccessResponse)(nil),             // 11: services.qualifications.GetQualificationAccessResponse
	(*SetQualificationAccessRequest)(nil),              // 12: services.qualifications.SetQualificationAccessRequest
	(*SetQualificationAccessResponse)(nil),             // 13: services.qualifications.SetQualificationAccessResponse
	(*ListQualificationRequestsRequest)(nil),           // 14: services.qualifications.ListQualificationRequestsRequest
	(*ListQualificationRequestsResponse)(nil),          // 15: services.qualifications.ListQualificationRequestsResponse
	(*CreateOrUpdateQualificationRequestRequest)(nil),  // 16: services.qualifications.CreateOrUpdateQualificationRequestRequest
	(*CreateOrUpdateQualificationRequestResponse)(nil), // 17: services.qualifications.CreateOrUpdateQualificationRequestResponse
	(*DeleteQualificationReqRequest)(nil),              // 18: services.qualifications.DeleteQualificationReqRequest
	(*DeleteQualificationReqResponse)(nil),             // 19: services.qualifications.DeleteQualificationReqResponse
	(*ListQualificationsResultsRequest)(nil),           // 20: services.qualifications.ListQualificationsResultsRequest
	(*ListQualificationsResultsResponse)(nil),          // 21: services.qualifications.ListQualificationsResultsResponse
	(*CreateOrUpdateQualificationResultRequest)(nil),   // 22: services.qualifications.CreateOrUpdateQualificationResultRequest
	(*CreateOrUpdateQualificationResultResponse)(nil),  // 23: services.qualifications.CreateOrUpdateQualificationResultResponse
	(*DeleteQualificationResultRequest)(nil),           // 24: services.qualifications.DeleteQualificationResultRequest
	(*DeleteQualificationResultResponse)(nil),          // 25: services.qualifications.DeleteQualificationResultResponse
	(*GetExamInfoRequest)(nil),                         // 26: services.qualifications.GetExamInfoRequest
	(*GetExamInfoResponse)(nil),                        // 27: services.qualifications.GetExamInfoResponse
	(*TakeExamRequest)(nil),                            // 28: services.qualifications.TakeExamRequest
	(*TakeExamResponse)(nil),                           // 29: services.qualifications.TakeExamResponse
	(*SubmitExamRequest)(nil),                          // 30: services.qualifications.SubmitExamRequest
	(*SubmitExamResponse)(nil),                         // 31: services.qualifications.SubmitExamResponse
	(*GetUserExamRequest)(nil),                         // 32: services.qualifications.GetUserExamRequest
	(*GetUserExamResponse)(nil),                        // 33: services.qualifications.GetUserExamResponse
	(*database.PaginationRequest)(nil),                 // 34: resources.common.database.PaginationRequest
	(*database.Sort)(nil),                              // 35: resources.common.database.Sort
	(*database.PaginationResponse)(nil),                // 36: resources.common.database.PaginationResponse
	(*qualifications.Qualification)(nil),               // 37: resources.qualifications.Qualification
	(*qualifications.QualificationAccess)(nil),         // 38: resources.qualifications.QualificationAccess
	(qualifications.RequestStatus)(0),                  // 39: resources.qualifications.RequestStatus
	(*qualifications.QualificationRequest)(nil),        // 40: resources.qualifications.QualificationRequest
	(qualifications.ResultStatus)(0),                   // 41: resources.qualifications.ResultStatus
	(*qualifications.QualificationResult)(nil),         // 42: resources.qualifications.QualificationResult
	(*qualifications.QualificationShort)(nil),          // 43: resources.qualifications.QualificationShort
	(*qualifications.ExamUser)(nil),                    // 44: resources.qualifications.ExamUser
	(*qualifications.ExamQuestions)(nil),               // 45: resources.qualifications.ExamQuestions
	(*qualifications.ExamResponses)(nil),               // 46: resources.qualifications.ExamResponses
	(*durationpb.Duration)(nil),                        // 47: google.protobuf.Duration
}
var file_services_qualifications_qualifications_proto_depIdxs = []int32{
	34, // 0: services.qualifications.ListQualificationsRequest.pagination:type_name -> resources.common.database.PaginationRequest
	35, // 1: services.qualifications.ListQualificationsRequest.sort:type_name -> resources.common.database.Sort
	36, // 2: services.qualifications.ListQualificationsResponse.pagination:type_name -> resources.common.database.PaginationResponse
	37, // 3: services.qualifications.ListQualificationsResponse.qualifications:type_name -> resources.qualifications.Qualification
	37, // 4: services.qualifications.GetQualificationResponse.qualification:type_name -> resources.qualifications.Qualification
	37, // 5: services.qualifications.CreateQualificationRequest.qualification:type_name -> resources.qualifications.Qualification
	37, // 6: services.qualifications.UpdateQualificationRequest.qualification:type_name -> resources.qualifications.Qualification
	38, // 7: services.qualifications.GetQualificationAccessResponse.access:type_name -> resources.qualifications.QualificationAccess
	38, // 8: services.qualifications.SetQualificationAccessRequest.access:type_name -> resources.qualifications.QualificationAccess
	34, // 9: services.qualifications.ListQualificationRequestsRequest.pagination:type_name -> resources.common.database.PaginationRequest
	35, // 10: services.qualifications.ListQualificationRequestsRequest.sort:type_name -> resources.common.database.Sort
	39, // 11: services.qualifications.ListQualificationRequestsRequest.status:type_name -> resources.qualifications.RequestStatus
	36, // 12: services.qualifications.ListQualificationRequestsResponse.pagination:type_name -> resources.common.database.PaginationResponse
	40, // 13: services.qualifications.ListQualificationRequestsResponse.requests:type_name -> resources.qualifications.QualificationRequest
	40, // 14: services.qualifications.CreateOrUpdateQualificationRequestRequest.request:type_name -> resources.qualifications.QualificationRequest
	40, // 15: services.qualifications.CreateOrUpdateQualificationRequestResponse.request:type_name -> resources.qualifications.QualificationRequest
	34, // 16: services.qualifications.ListQualificationsResultsRequest.pagination:type_name -> resources.common.database.PaginationRequest
	35, // 17: services.qualifications.ListQualificationsResultsRequest.sort:type_name -> resources.common.database.Sort
	41, // 18: services.qualifications.ListQualificationsResultsRequest.status:type_name -> resources.qualifications.ResultStatus
	36, // 19: services.qualifications.ListQualificationsResultsResponse.pagination:type_name -> resources.common.database.PaginationResponse
	42, // 20: services.qualifications.ListQualificationsResultsResponse.results:type_name -> resources.qualifications.QualificationResult
	42, // 21: services.qualifications.CreateOrUpdateQualificationResultRequest.result:type_name -> resources.qualifications.QualificationResult
	42, // 22: services.qualifications.CreateOrUpdateQualificationResultResponse.result:type_name -> resources.qualifications.QualificationResult
	43, // 23: services.qualifications.GetExamInfoResponse.qualification:type_name -> resources.qualifications.QualificationShort
	44, // 24: services.qualifications.GetExamInfoResponse.exam_user:type_name -> resources.qualifications.ExamUser
	45, // 25: services.qualifications.TakeExamResponse.exam:type_name -> resources.qualifications.ExamQuestions
	44, // 26: services.qualifications.TakeExamResponse.exam_user:type_name -> resources.qualifications.ExamUser
	46, // 27: services.qualifications.SubmitExamRequest.responses:type_name -> resources.qualifications.ExamResponses
	47, // 28: services.qualifications.SubmitExamResponse.duration:type_name -> google.protobuf.Duration
	45, // 29: services.qualifications.GetUserExamResponse.exam:type_name -> resources.qualifications.ExamQuestions
	44, // 30: services.qualifications.GetUserExamResponse.exam_user:type_name -> resources.qualifications.ExamUser
	46, // 31: services.qualifications.GetUserExamResponse.responses:type_name -> resources.qualifications.ExamResponses
	0,  // 32: services.qualifications.QualificationsService.ListQualifications:input_type -> services.qualifications.ListQualificationsRequest
	2,  // 33: services.qualifications.QualificationsService.GetQualification:input_type -> services.qualifications.GetQualificationRequest
	4,  // 34: services.qualifications.QualificationsService.CreateQualification:input_type -> services.qualifications.CreateQualificationRequest
	6,  // 35: services.qualifications.QualificationsService.UpdateQualification:input_type -> services.qualifications.UpdateQualificationRequest
	8,  // 36: services.qualifications.QualificationsService.DeleteQualification:input_type -> services.qualifications.DeleteQualificationRequest
	14, // 37: services.qualifications.QualificationsService.ListQualificationRequests:input_type -> services.qualifications.ListQualificationRequestsRequest
	16, // 38: services.qualifications.QualificationsService.CreateOrUpdateQualificationRequest:input_type -> services.qualifications.CreateOrUpdateQualificationRequestRequest
	18, // 39: services.qualifications.QualificationsService.DeleteQualificationReq:input_type -> services.qualifications.DeleteQualificationReqRequest
	20, // 40: services.qualifications.QualificationsService.ListQualificationsResults:input_type -> services.qualifications.ListQualificationsResultsRequest
	22, // 41: services.qualifications.QualificationsService.CreateOrUpdateQualificationResult:input_type -> services.qualifications.CreateOrUpdateQualificationResultRequest
	24, // 42: services.qualifications.QualificationsService.DeleteQualificationResult:input_type -> services.qualifications.DeleteQualificationResultRequest
	26, // 43: services.qualifications.QualificationsService.GetExamInfo:input_type -> services.qualifications.GetExamInfoRequest
	28, // 44: services.qualifications.QualificationsService.TakeExam:input_type -> services.qualifications.TakeExamRequest
	30, // 45: services.qualifications.QualificationsService.SubmitExam:input_type -> services.qualifications.SubmitExamRequest
	32, // 46: services.qualifications.QualificationsService.GetUserExam:input_type -> services.qualifications.GetUserExamRequest
	1,  // 47: services.qualifications.QualificationsService.ListQualifications:output_type -> services.qualifications.ListQualificationsResponse
	3,  // 48: services.qualifications.QualificationsService.GetQualification:output_type -> services.qualifications.GetQualificationResponse
	5,  // 49: services.qualifications.QualificationsService.CreateQualification:output_type -> services.qualifications.CreateQualificationResponse
	7,  // 50: services.qualifications.QualificationsService.UpdateQualification:output_type -> services.qualifications.UpdateQualificationResponse
	9,  // 51: services.qualifications.QualificationsService.DeleteQualification:output_type -> services.qualifications.DeleteQualificationResponse
	15, // 52: services.qualifications.QualificationsService.ListQualificationRequests:output_type -> services.qualifications.ListQualificationRequestsResponse
	17, // 53: services.qualifications.QualificationsService.CreateOrUpdateQualificationRequest:output_type -> services.qualifications.CreateOrUpdateQualificationRequestResponse
	19, // 54: services.qualifications.QualificationsService.DeleteQualificationReq:output_type -> services.qualifications.DeleteQualificationReqResponse
	21, // 55: services.qualifications.QualificationsService.ListQualificationsResults:output_type -> services.qualifications.ListQualificationsResultsResponse
	23, // 56: services.qualifications.QualificationsService.CreateOrUpdateQualificationResult:output_type -> services.qualifications.CreateOrUpdateQualificationResultResponse
	25, // 57: services.qualifications.QualificationsService.DeleteQualificationResult:output_type -> services.qualifications.DeleteQualificationResultResponse
	27, // 58: services.qualifications.QualificationsService.GetExamInfo:output_type -> services.qualifications.GetExamInfoResponse
	29, // 59: services.qualifications.QualificationsService.TakeExam:output_type -> services.qualifications.TakeExamResponse
	31, // 60: services.qualifications.QualificationsService.SubmitExam:output_type -> services.qualifications.SubmitExamResponse
	33, // 61: services.qualifications.QualificationsService.GetUserExam:output_type -> services.qualifications.GetUserExamResponse
	47, // [47:62] is the sub-list for method output_type
	32, // [32:47] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_services_qualifications_qualifications_proto_init() }
func file_services_qualifications_qualifications_proto_init() {
	if File_services_qualifications_qualifications_proto != nil {
		return
	}
	file_services_qualifications_qualifications_proto_msgTypes[0].OneofWrappers = []any{}
	file_services_qualifications_qualifications_proto_msgTypes[2].OneofWrappers = []any{}
	file_services_qualifications_qualifications_proto_msgTypes[14].OneofWrappers = []any{}
	file_services_qualifications_qualifications_proto_msgTypes[20].OneofWrappers = []any{}
	file_services_qualifications_qualifications_proto_msgTypes[27].OneofWrappers = []any{}
	file_services_qualifications_qualifications_proto_msgTypes[28].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_qualifications_qualifications_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_qualifications_qualifications_proto_goTypes,
		DependencyIndexes: file_services_qualifications_qualifications_proto_depIdxs,
		MessageInfos:      file_services_qualifications_qualifications_proto_msgTypes,
	}.Build()
	File_services_qualifications_qualifications_proto = out.File
	file_services_qualifications_qualifications_proto_rawDesc = nil
	file_services_qualifications_qualifications_proto_goTypes = nil
	file_services_qualifications_qualifications_proto_depIdxs = nil
}
