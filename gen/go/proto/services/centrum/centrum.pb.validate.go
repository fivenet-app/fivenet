// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/centrum/centrum.proto

package centrum

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	centrum "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/centrum"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = centrum.StatusUnit(0)
)

// Validate checks the field values on ListDispatchActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDispatchActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDispatchActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDispatchActivityRequestMultiError, or nil if none found.
func (m *ListDispatchActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDispatchActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDispatchActivityRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDispatchActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDispatchActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDispatchActivityRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return ListDispatchActivityRequestMultiError(errors)
	}

	return nil
}

// ListDispatchActivityRequestMultiError is an error wrapping multiple
// validation errors returned by ListDispatchActivityRequest.ValidateAll() if
// the designated constraints aren't met.
type ListDispatchActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDispatchActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDispatchActivityRequestMultiError) AllErrors() []error { return m }

// ListDispatchActivityRequestValidationError is the validation error returned
// by ListDispatchActivityRequest.Validate if the designated constraints
// aren't met.
type ListDispatchActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDispatchActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDispatchActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDispatchActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDispatchActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDispatchActivityRequestValidationError) ErrorName() string {
	return "ListDispatchActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDispatchActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDispatchActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDispatchActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDispatchActivityRequestValidationError{}

// Validate checks the field values on ListUnitActivityRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUnitActivityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnitActivityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUnitActivityRequestMultiError, or nil if none found.
func (m *ListUnitActivityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitActivityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListUnitActivityRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUnitActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUnitActivityRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUnitActivityRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	if len(errors) > 0 {
		return ListUnitActivityRequestMultiError(errors)
	}

	return nil
}

// ListUnitActivityRequestMultiError is an error wrapping multiple validation
// errors returned by ListUnitActivityRequest.ValidateAll() if the designated
// constraints aren't met.
type ListUnitActivityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitActivityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitActivityRequestMultiError) AllErrors() []error { return m }

// ListUnitActivityRequestValidationError is the validation error returned by
// ListUnitActivityRequest.Validate if the designated constraints aren't met.
type ListUnitActivityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitActivityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnitActivityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnitActivityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnitActivityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitActivityRequestValidationError) ErrorName() string {
	return "ListUnitActivityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnitActivityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitActivityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitActivityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitActivityRequestValidationError{}

// Validate checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsRequestMultiError, or nil if none found.
func (m *GetSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetSettingsRequestMultiError(errors)
	}

	return nil
}

// GetSettingsRequestMultiError is an error wrapping multiple validation errors
// returned by GetSettingsRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsRequestMultiError) AllErrors() []error { return m }

// GetSettingsRequestValidationError is the validation error returned by
// GetSettingsRequest.Validate if the designated constraints aren't met.
type GetSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsRequestValidationError) ErrorName() string {
	return "GetSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsRequestValidationError{}

// Validate checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSettingsResponseMultiError, or nil if none found.
func (m *GetSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSettingsResponseMultiError(errors)
	}

	return nil
}

// GetSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by GetSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSettingsResponseMultiError) AllErrors() []error { return m }

// GetSettingsResponseValidationError is the validation error returned by
// GetSettingsResponse.Validate if the designated constraints aren't met.
type GetSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSettingsResponseValidationError) ErrorName() string {
	return "GetSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSettingsResponseValidationError{}

// Validate checks the field values on UpdateSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingsRequestMultiError, or nil if none found.
func (m *UpdateSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateSettingsRequestValidationError is the validation error returned by
// UpdateSettingsRequest.Validate if the designated constraints aren't met.
type UpdateSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingsRequestValidationError) ErrorName() string {
	return "UpdateSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingsRequestValidationError{}

// Validate checks the field values on UpdateSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSettingsResponseMultiError, or nil if none found.
func (m *UpdateSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSettingsResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSettingsResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSettingsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateSettingsResponseValidationError is the validation error returned by
// UpdateSettingsResponse.Validate if the designated constraints aren't met.
type UpdateSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSettingsResponseValidationError) ErrorName() string {
	return "UpdateSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSettingsResponseValidationError{}

// Validate checks the field values on ListUnitsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUnitsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnitsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUnitsRequestMultiError, or nil if none found.
func (m *ListUnitsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if _, ok := centrum.StatusUnit_name[int32(item)]; !ok {
			err := ListUnitsRequestValidationError{
				field:  fmt.Sprintf("Status[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListUnitsRequestMultiError(errors)
	}

	return nil
}

// ListUnitsRequestMultiError is an error wrapping multiple validation errors
// returned by ListUnitsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListUnitsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitsRequestMultiError) AllErrors() []error { return m }

// ListUnitsRequestValidationError is the validation error returned by
// ListUnitsRequest.Validate if the designated constraints aren't met.
type ListUnitsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnitsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnitsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnitsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitsRequestValidationError) ErrorName() string { return "ListUnitsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUnitsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitsRequestValidationError{}

// Validate checks the field values on ListUnitsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListUnitsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnitsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUnitsResponseMultiError, or nil if none found.
func (m *ListUnitsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUnitsResponseValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUnitsResponseValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUnitsResponseValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUnitsResponseMultiError(errors)
	}

	return nil
}

// ListUnitsResponseMultiError is an error wrapping multiple validation errors
// returned by ListUnitsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListUnitsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitsResponseMultiError) AllErrors() []error { return m }

// ListUnitsResponseValidationError is the validation error returned by
// ListUnitsResponse.Validate if the designated constraints aren't met.
type ListUnitsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnitsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnitsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnitsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitsResponseValidationError) ErrorName() string {
	return "ListUnitsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnitsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitsResponseValidationError{}

// Validate checks the field values on CreateOrUpdateUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateUnitRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateUnitRequestMultiError, or nil if none found.
func (m *CreateOrUpdateUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUnit() == nil {
		err := CreateOrUpdateUnitRequestValidationError{
			field:  "Unit",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateUnitRequestValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateUnitRequestValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateUnitRequestValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateUnitRequestMultiError(errors)
	}

	return nil
}

// CreateOrUpdateUnitRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrUpdateUnitRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrUpdateUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateUnitRequestMultiError) AllErrors() []error { return m }

// CreateOrUpdateUnitRequestValidationError is the validation error returned by
// CreateOrUpdateUnitRequest.Validate if the designated constraints aren't met.
type CreateOrUpdateUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateUnitRequestValidationError) ErrorName() string {
	return "CreateOrUpdateUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateUnitRequestValidationError{}

// Validate checks the field values on CreateOrUpdateUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrUpdateUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrUpdateUnitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrUpdateUnitResponseMultiError, or nil if none found.
func (m *CreateOrUpdateUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrUpdateUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrUpdateUnitResponseValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrUpdateUnitResponseValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrUpdateUnitResponseValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrUpdateUnitResponseMultiError(errors)
	}

	return nil
}

// CreateOrUpdateUnitResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrUpdateUnitResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrUpdateUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrUpdateUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrUpdateUnitResponseMultiError) AllErrors() []error { return m }

// CreateOrUpdateUnitResponseValidationError is the validation error returned
// by CreateOrUpdateUnitResponse.Validate if the designated constraints aren't met.
type CreateOrUpdateUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrUpdateUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrUpdateUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrUpdateUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrUpdateUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrUpdateUnitResponseValidationError) ErrorName() string {
	return "CreateOrUpdateUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrUpdateUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrUpdateUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrUpdateUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrUpdateUnitResponseValidationError{}

// Validate checks the field values on DeleteUnitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUnitRequestMultiError, or nil if none found.
func (m *DeleteUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	if len(errors) > 0 {
		return DeleteUnitRequestMultiError(errors)
	}

	return nil
}

// DeleteUnitRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteUnitRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUnitRequestMultiError) AllErrors() []error { return m }

// DeleteUnitRequestValidationError is the validation error returned by
// DeleteUnitRequest.Validate if the designated constraints aren't met.
type DeleteUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUnitRequestValidationError) ErrorName() string {
	return "DeleteUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUnitRequestValidationError{}

// Validate checks the field values on DeleteUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteUnitResponseMultiError, or nil if none found.
func (m *DeleteUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteUnitResponseMultiError(errors)
	}

	return nil
}

// DeleteUnitResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteUnitResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteUnitResponseMultiError) AllErrors() []error { return m }

// DeleteUnitResponseValidationError is the validation error returned by
// DeleteUnitResponse.Validate if the designated constraints aren't met.
type DeleteUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUnitResponseValidationError) ErrorName() string {
	return "DeleteUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUnitResponseValidationError{}

// Validate checks the field values on UpdateUnitStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUnitStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUnitStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUnitStatusRequestMultiError, or nil if none found.
func (m *UpdateUnitStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUnitStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	if _, ok := centrum.StatusUnit_name[int32(m.GetStatus())]; !ok {
		err := UpdateUnitStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Reason != nil {

		if utf8.RuneCountInString(m.GetReason()) > 255 {
			err := UpdateUnitStatusRequestValidationError{
				field:  "Reason",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Code != nil {

		if utf8.RuneCountInString(m.GetCode()) > 20 {
			err := UpdateUnitStatusRequestValidationError{
				field:  "Code",
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateUnitStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateUnitStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateUnitStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateUnitStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUnitStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUnitStatusRequestMultiError) AllErrors() []error { return m }

// UpdateUnitStatusRequestValidationError is the validation error returned by
// UpdateUnitStatusRequest.Validate if the designated constraints aren't met.
type UpdateUnitStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUnitStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUnitStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUnitStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUnitStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUnitStatusRequestValidationError) ErrorName() string {
	return "UpdateUnitStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUnitStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUnitStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUnitStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUnitStatusRequestValidationError{}

// Validate checks the field values on UpdateUnitStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateUnitStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateUnitStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateUnitStatusResponseMultiError, or nil if none found.
func (m *UpdateUnitStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateUnitStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateUnitStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateUnitStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateUnitStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateUnitStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateUnitStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateUnitStatusResponseMultiError) AllErrors() []error { return m }

// UpdateUnitStatusResponseValidationError is the validation error returned by
// UpdateUnitStatusResponse.Validate if the designated constraints aren't met.
type UpdateUnitStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUnitStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUnitStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUnitStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUnitStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUnitStatusResponseValidationError) ErrorName() string {
	return "UpdateUnitStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUnitStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUnitStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUnitStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUnitStatusResponseValidationError{}

// Validate checks the field values on AssignUnitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AssignUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignUnitRequestMultiError, or nil if none found.
func (m *AssignUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnitId

	if len(errors) > 0 {
		return AssignUnitRequestMultiError(errors)
	}

	return nil
}

// AssignUnitRequestMultiError is an error wrapping multiple validation errors
// returned by AssignUnitRequest.ValidateAll() if the designated constraints
// aren't met.
type AssignUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignUnitRequestMultiError) AllErrors() []error { return m }

// AssignUnitRequestValidationError is the validation error returned by
// AssignUnitRequest.Validate if the designated constraints aren't met.
type AssignUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignUnitRequestValidationError) ErrorName() string {
	return "AssignUnitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignUnitRequestValidationError{}

// Validate checks the field values on AssignUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignUnitResponseMultiError, or nil if none found.
func (m *AssignUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignUnitResponseMultiError(errors)
	}

	return nil
}

// AssignUnitResponseMultiError is an error wrapping multiple validation errors
// returned by AssignUnitResponse.ValidateAll() if the designated constraints
// aren't met.
type AssignUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignUnitResponseMultiError) AllErrors() []error { return m }

// AssignUnitResponseValidationError is the validation error returned by
// AssignUnitResponse.Validate if the designated constraints aren't met.
type AssignUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignUnitResponseValidationError) ErrorName() string {
	return "AssignUnitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignUnitResponseValidationError{}

// Validate checks the field values on ListUnitActivityResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUnitActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUnitActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUnitActivityResponseMultiError, or nil if none found.
func (m *ListUnitActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUnitActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListUnitActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListUnitActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUnitActivityResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUnitActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUnitActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUnitActivityResponseValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUnitActivityResponseMultiError(errors)
	}

	return nil
}

// ListUnitActivityResponseMultiError is an error wrapping multiple validation
// errors returned by ListUnitActivityResponse.ValidateAll() if the designated
// constraints aren't met.
type ListUnitActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUnitActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUnitActivityResponseMultiError) AllErrors() []error { return m }

// ListUnitActivityResponseValidationError is the validation error returned by
// ListUnitActivityResponse.Validate if the designated constraints aren't met.
type ListUnitActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUnitActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUnitActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUnitActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUnitActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUnitActivityResponseValidationError) ErrorName() string {
	return "ListUnitActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUnitActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUnitActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUnitActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUnitActivityResponseValidationError{}

// Validate checks the field values on TakeControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TakeControlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakeControlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TakeControlRequestMultiError, or nil if none found.
func (m *TakeControlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TakeControlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signon

	if len(errors) > 0 {
		return TakeControlRequestMultiError(errors)
	}

	return nil
}

// TakeControlRequestMultiError is an error wrapping multiple validation errors
// returned by TakeControlRequest.ValidateAll() if the designated constraints
// aren't met.
type TakeControlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakeControlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakeControlRequestMultiError) AllErrors() []error { return m }

// TakeControlRequestValidationError is the validation error returned by
// TakeControlRequest.Validate if the designated constraints aren't met.
type TakeControlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakeControlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakeControlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakeControlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakeControlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakeControlRequestValidationError) ErrorName() string {
	return "TakeControlRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TakeControlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakeControlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakeControlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakeControlRequestValidationError{}

// Validate checks the field values on TakeControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TakeControlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakeControlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TakeControlResponseMultiError, or nil if none found.
func (m *TakeControlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TakeControlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TakeControlResponseMultiError(errors)
	}

	return nil
}

// TakeControlResponseMultiError is an error wrapping multiple validation
// errors returned by TakeControlResponse.ValidateAll() if the designated
// constraints aren't met.
type TakeControlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakeControlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakeControlResponseMultiError) AllErrors() []error { return m }

// TakeControlResponseValidationError is the validation error returned by
// TakeControlResponse.Validate if the designated constraints aren't met.
type TakeControlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakeControlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakeControlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakeControlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakeControlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakeControlResponseValidationError) ErrorName() string {
	return "TakeControlResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TakeControlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakeControlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakeControlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakeControlResponseValidationError{}

// Validate checks the field values on ListDispatchesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDispatchesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDispatchesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDispatchesRequestMultiError, or nil if none found.
func (m *ListDispatchesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDispatchesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDispatchesRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDispatchesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDispatchesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDispatchesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if _, ok := centrum.StatusDispatch_name[int32(item)]; !ok {
			err := ListDispatchesRequestValidationError{
				field:  fmt.Sprintf("Status[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	for idx, item := range m.GetNotStatus() {
		_, _ = idx, item

		if _, ok := centrum.StatusDispatch_name[int32(item)]; !ok {
			err := ListDispatchesRequestValidationError{
				field:  fmt.Sprintf("NotStatus[%v]", idx),
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetIds()) > 10 {
		err := ListDispatchesRequestValidationError{
			field:  "Ids",
			reason: "value must contain no more than 10 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Postal != nil {

		if utf8.RuneCountInString(m.GetPostal()) > 12 {
			err := ListDispatchesRequestValidationError{
				field:  "Postal",
				reason: "value length must be at most 12 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ListDispatchesRequestMultiError(errors)
	}

	return nil
}

// ListDispatchesRequestMultiError is an error wrapping multiple validation
// errors returned by ListDispatchesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDispatchesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDispatchesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDispatchesRequestMultiError) AllErrors() []error { return m }

// ListDispatchesRequestValidationError is the validation error returned by
// ListDispatchesRequest.Validate if the designated constraints aren't met.
type ListDispatchesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDispatchesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDispatchesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDispatchesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDispatchesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDispatchesRequestValidationError) ErrorName() string {
	return "ListDispatchesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDispatchesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDispatchesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDispatchesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDispatchesRequestValidationError{}

// Validate checks the field values on ListDispatchesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDispatchesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDispatchesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDispatchesResponseMultiError, or nil if none found.
func (m *ListDispatchesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDispatchesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDispatchesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDispatchesResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDispatchesResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDispatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDispatchesResponseValidationError{
						field:  fmt.Sprintf("Dispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDispatchesResponseValidationError{
						field:  fmt.Sprintf("Dispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDispatchesResponseValidationError{
					field:  fmt.Sprintf("Dispatches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDispatchesResponseMultiError(errors)
	}

	return nil
}

// ListDispatchesResponseMultiError is an error wrapping multiple validation
// errors returned by ListDispatchesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDispatchesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDispatchesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDispatchesResponseMultiError) AllErrors() []error { return m }

// ListDispatchesResponseValidationError is the validation error returned by
// ListDispatchesResponse.Validate if the designated constraints aren't met.
type ListDispatchesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDispatchesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDispatchesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDispatchesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDispatchesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDispatchesResponseValidationError) ErrorName() string {
	return "ListDispatchesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDispatchesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDispatchesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDispatchesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDispatchesResponseValidationError{}

// Validate checks the field values on GetDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDispatchRequestMultiError, or nil if none found.
func (m *GetDispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetDispatchRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetDispatchRequestMultiError(errors)
	}

	return nil
}

// GetDispatchRequestMultiError is an error wrapping multiple validation errors
// returned by GetDispatchRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDispatchRequestMultiError) AllErrors() []error { return m }

// GetDispatchRequestValidationError is the validation error returned by
// GetDispatchRequest.Validate if the designated constraints aren't met.
type GetDispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDispatchRequestValidationError) ErrorName() string {
	return "GetDispatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDispatchRequestValidationError{}

// Validate checks the field values on GetDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDispatchResponseMultiError, or nil if none found.
func (m *GetDispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDispatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDispatchResponseValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDispatchResponseValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDispatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDispatchResponseValidationError{
				field:  "Dispatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDispatchResponseMultiError(errors)
	}

	return nil
}

// GetDispatchResponseMultiError is an error wrapping multiple validation
// errors returned by GetDispatchResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDispatchResponseMultiError) AllErrors() []error { return m }

// GetDispatchResponseValidationError is the validation error returned by
// GetDispatchResponse.Validate if the designated constraints aren't met.
type GetDispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDispatchResponseValidationError) ErrorName() string {
	return "GetDispatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDispatchResponseValidationError{}

// Validate checks the field values on CreateDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDispatchRequestMultiError, or nil if none found.
func (m *CreateDispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDispatch() == nil {
		err := CreateDispatchRequestValidationError{
			field:  "Dispatch",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDispatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDispatchRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDispatchRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDispatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDispatchRequestValidationError{
				field:  "Dispatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDispatchRequestMultiError(errors)
	}

	return nil
}

// CreateDispatchRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDispatchRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDispatchRequestMultiError) AllErrors() []error { return m }

// CreateDispatchRequestValidationError is the validation error returned by
// CreateDispatchRequest.Validate if the designated constraints aren't met.
type CreateDispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDispatchRequestValidationError) ErrorName() string {
	return "CreateDispatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDispatchRequestValidationError{}

// Validate checks the field values on CreateDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDispatchResponseMultiError, or nil if none found.
func (m *CreateDispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDispatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDispatchResponseValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDispatchResponseValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDispatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDispatchResponseValidationError{
				field:  "Dispatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDispatchResponseMultiError(errors)
	}

	return nil
}

// CreateDispatchResponseMultiError is an error wrapping multiple validation
// errors returned by CreateDispatchResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateDispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDispatchResponseMultiError) AllErrors() []error { return m }

// CreateDispatchResponseValidationError is the validation error returned by
// CreateDispatchResponse.Validate if the designated constraints aren't met.
type CreateDispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDispatchResponseValidationError) ErrorName() string {
	return "CreateDispatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDispatchResponseValidationError{}

// Validate checks the field values on UpdateDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDispatchRequestMultiError, or nil if none found.
func (m *UpdateDispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDispatch() == nil {
		err := UpdateDispatchRequestValidationError{
			field:  "Dispatch",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDispatch()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDispatchRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDispatchRequestValidationError{
					field:  "Dispatch",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDispatch()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDispatchRequestValidationError{
				field:  "Dispatch",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDispatchRequestMultiError(errors)
	}

	return nil
}

// UpdateDispatchRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDispatchRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDispatchRequestMultiError) AllErrors() []error { return m }

// UpdateDispatchRequestValidationError is the validation error returned by
// UpdateDispatchRequest.Validate if the designated constraints aren't met.
type UpdateDispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDispatchRequestValidationError) ErrorName() string {
	return "UpdateDispatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDispatchRequestValidationError{}

// Validate checks the field values on UpdateDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDispatchResponseMultiError, or nil if none found.
func (m *UpdateDispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDispatchResponseMultiError(errors)
	}

	return nil
}

// UpdateDispatchResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDispatchResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDispatchResponseMultiError) AllErrors() []error { return m }

// UpdateDispatchResponseValidationError is the validation error returned by
// UpdateDispatchResponse.Validate if the designated constraints aren't met.
type UpdateDispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDispatchResponseValidationError) ErrorName() string {
	return "UpdateDispatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDispatchResponseValidationError{}

// Validate checks the field values on DeleteDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDispatchRequestMultiError, or nil if none found.
func (m *DeleteDispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := DeleteDispatchRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteDispatchRequestMultiError(errors)
	}

	return nil
}

// DeleteDispatchRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteDispatchRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteDispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDispatchRequestMultiError) AllErrors() []error { return m }

// DeleteDispatchRequestValidationError is the validation error returned by
// DeleteDispatchRequest.Validate if the designated constraints aren't met.
type DeleteDispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDispatchRequestValidationError) ErrorName() string {
	return "DeleteDispatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDispatchRequestValidationError{}

// Validate checks the field values on DeleteDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteDispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDispatchResponseMultiError, or nil if none found.
func (m *DeleteDispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteDispatchResponseMultiError(errors)
	}

	return nil
}

// DeleteDispatchResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteDispatchResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteDispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDispatchResponseMultiError) AllErrors() []error { return m }

// DeleteDispatchResponseValidationError is the validation error returned by
// DeleteDispatchResponse.Validate if the designated constraints aren't met.
type DeleteDispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDispatchResponseValidationError) ErrorName() string {
	return "DeleteDispatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteDispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDispatchResponseValidationError{}

// Validate checks the field values on UpdateDispatchStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDispatchStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDispatchStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDispatchStatusRequestMultiError, or nil if none found.
func (m *UpdateDispatchStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDispatchStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DispatchId

	if _, ok := centrum.StatusDispatch_name[int32(m.GetStatus())]; !ok {
		err := UpdateDispatchStatusRequestValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Reason != nil {

		if utf8.RuneCountInString(m.GetReason()) > 255 {
			err := UpdateDispatchStatusRequestValidationError{
				field:  "Reason",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Code != nil {
		// no validation rules for Code
	}

	if len(errors) > 0 {
		return UpdateDispatchStatusRequestMultiError(errors)
	}

	return nil
}

// UpdateDispatchStatusRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateDispatchStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type UpdateDispatchStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDispatchStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDispatchStatusRequestMultiError) AllErrors() []error { return m }

// UpdateDispatchStatusRequestValidationError is the validation error returned
// by UpdateDispatchStatusRequest.Validate if the designated constraints
// aren't met.
type UpdateDispatchStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDispatchStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDispatchStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDispatchStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDispatchStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDispatchStatusRequestValidationError) ErrorName() string {
	return "UpdateDispatchStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDispatchStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDispatchStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDispatchStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDispatchStatusRequestValidationError{}

// Validate checks the field values on UpdateDispatchStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDispatchStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDispatchStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDispatchStatusResponseMultiError, or nil if none found.
func (m *UpdateDispatchStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDispatchStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateDispatchStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateDispatchStatusResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateDispatchStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateDispatchStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDispatchStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDispatchStatusResponseMultiError) AllErrors() []error { return m }

// UpdateDispatchStatusResponseValidationError is the validation error returned
// by UpdateDispatchStatusResponse.Validate if the designated constraints
// aren't met.
type UpdateDispatchStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDispatchStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDispatchStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDispatchStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDispatchStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDispatchStatusResponseValidationError) ErrorName() string {
	return "UpdateDispatchStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDispatchStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDispatchStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDispatchStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDispatchStatusResponseValidationError{}

// Validate checks the field values on AssignDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignDispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignDispatchRequestMultiError, or nil if none found.
func (m *AssignDispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignDispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DispatchId

	if m.Forced != nil {
		// no validation rules for Forced
	}

	if len(errors) > 0 {
		return AssignDispatchRequestMultiError(errors)
	}

	return nil
}

// AssignDispatchRequestMultiError is an error wrapping multiple validation
// errors returned by AssignDispatchRequest.ValidateAll() if the designated
// constraints aren't met.
type AssignDispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignDispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignDispatchRequestMultiError) AllErrors() []error { return m }

// AssignDispatchRequestValidationError is the validation error returned by
// AssignDispatchRequest.Validate if the designated constraints aren't met.
type AssignDispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignDispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignDispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignDispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignDispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignDispatchRequestValidationError) ErrorName() string {
	return "AssignDispatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AssignDispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignDispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignDispatchRequestValidationError{}

// Validate checks the field values on AssignDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AssignDispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssignDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AssignDispatchResponseMultiError, or nil if none found.
func (m *AssignDispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AssignDispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AssignDispatchResponseMultiError(errors)
	}

	return nil
}

// AssignDispatchResponseMultiError is an error wrapping multiple validation
// errors returned by AssignDispatchResponse.ValidateAll() if the designated
// constraints aren't met.
type AssignDispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssignDispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssignDispatchResponseMultiError) AllErrors() []error { return m }

// AssignDispatchResponseValidationError is the validation error returned by
// AssignDispatchResponse.Validate if the designated constraints aren't met.
type AssignDispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssignDispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssignDispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssignDispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssignDispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssignDispatchResponseValidationError) ErrorName() string {
	return "AssignDispatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AssignDispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssignDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssignDispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssignDispatchResponseValidationError{}

// Validate checks the field values on ListDispatchActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDispatchActivityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDispatchActivityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDispatchActivityResponseMultiError, or nil if none found.
func (m *ListDispatchActivityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDispatchActivityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDispatchActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDispatchActivityResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDispatchActivityResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDispatchActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDispatchActivityResponseValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDispatchActivityResponseValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDispatchActivityResponseMultiError(errors)
	}

	return nil
}

// ListDispatchActivityResponseMultiError is an error wrapping multiple
// validation errors returned by ListDispatchActivityResponse.ValidateAll() if
// the designated constraints aren't met.
type ListDispatchActivityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDispatchActivityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDispatchActivityResponseMultiError) AllErrors() []error { return m }

// ListDispatchActivityResponseValidationError is the validation error returned
// by ListDispatchActivityResponse.Validate if the designated constraints
// aren't met.
type ListDispatchActivityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDispatchActivityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDispatchActivityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDispatchActivityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDispatchActivityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDispatchActivityResponseValidationError) ErrorName() string {
	return "ListDispatchActivityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDispatchActivityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDispatchActivityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDispatchActivityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDispatchActivityResponseValidationError{}

// Validate checks the field values on JoinUnitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinUnitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinUnitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinUnitRequestMultiError, or nil if none found.
func (m *JoinUnitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinUnitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.UnitId != nil {
		// no validation rules for UnitId
	}

	if len(errors) > 0 {
		return JoinUnitRequestMultiError(errors)
	}

	return nil
}

// JoinUnitRequestMultiError is an error wrapping multiple validation errors
// returned by JoinUnitRequest.ValidateAll() if the designated constraints
// aren't met.
type JoinUnitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinUnitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinUnitRequestMultiError) AllErrors() []error { return m }

// JoinUnitRequestValidationError is the validation error returned by
// JoinUnitRequest.Validate if the designated constraints aren't met.
type JoinUnitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinUnitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinUnitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinUnitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinUnitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinUnitRequestValidationError) ErrorName() string { return "JoinUnitRequestValidationError" }

// Error satisfies the builtin error interface
func (e JoinUnitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinUnitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinUnitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinUnitRequestValidationError{}

// Validate checks the field values on JoinUnitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *JoinUnitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JoinUnitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JoinUnitResponseMultiError, or nil if none found.
func (m *JoinUnitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *JoinUnitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUnit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JoinUnitResponseValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JoinUnitResponseValidationError{
					field:  "Unit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JoinUnitResponseValidationError{
				field:  "Unit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return JoinUnitResponseMultiError(errors)
	}

	return nil
}

// JoinUnitResponseMultiError is an error wrapping multiple validation errors
// returned by JoinUnitResponse.ValidateAll() if the designated constraints
// aren't met.
type JoinUnitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JoinUnitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JoinUnitResponseMultiError) AllErrors() []error { return m }

// JoinUnitResponseValidationError is the validation error returned by
// JoinUnitResponse.Validate if the designated constraints aren't met.
type JoinUnitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JoinUnitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JoinUnitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JoinUnitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JoinUnitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JoinUnitResponseValidationError) ErrorName() string { return "JoinUnitResponseValidationError" }

// Error satisfies the builtin error interface
func (e JoinUnitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJoinUnitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JoinUnitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JoinUnitResponseValidationError{}

// Validate checks the field values on TakeDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TakeDispatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakeDispatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TakeDispatchRequestMultiError, or nil if none found.
func (m *TakeDispatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TakeDispatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDispatchIds()) < 1 {
		err := TakeDispatchRequestValidationError{
			field:  "DispatchIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := centrum.TakeDispatchResp_name[int32(m.GetResp())]; !ok {
		err := TakeDispatchRequestValidationError{
			field:  "Resp",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Reason != nil {

		if utf8.RuneCountInString(m.GetReason()) > 255 {
			err := TakeDispatchRequestValidationError{
				field:  "Reason",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return TakeDispatchRequestMultiError(errors)
	}

	return nil
}

// TakeDispatchRequestMultiError is an error wrapping multiple validation
// errors returned by TakeDispatchRequest.ValidateAll() if the designated
// constraints aren't met.
type TakeDispatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakeDispatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakeDispatchRequestMultiError) AllErrors() []error { return m }

// TakeDispatchRequestValidationError is the validation error returned by
// TakeDispatchRequest.Validate if the designated constraints aren't met.
type TakeDispatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakeDispatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakeDispatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakeDispatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakeDispatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakeDispatchRequestValidationError) ErrorName() string {
	return "TakeDispatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TakeDispatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakeDispatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakeDispatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakeDispatchRequestValidationError{}

// Validate checks the field values on TakeDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TakeDispatchResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TakeDispatchResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TakeDispatchResponseMultiError, or nil if none found.
func (m *TakeDispatchResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TakeDispatchResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TakeDispatchResponseMultiError(errors)
	}

	return nil
}

// TakeDispatchResponseMultiError is an error wrapping multiple validation
// errors returned by TakeDispatchResponse.ValidateAll() if the designated
// constraints aren't met.
type TakeDispatchResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TakeDispatchResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TakeDispatchResponseMultiError) AllErrors() []error { return m }

// TakeDispatchResponseValidationError is the validation error returned by
// TakeDispatchResponse.Validate if the designated constraints aren't met.
type TakeDispatchResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TakeDispatchResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TakeDispatchResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TakeDispatchResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TakeDispatchResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TakeDispatchResponseValidationError) ErrorName() string {
	return "TakeDispatchResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TakeDispatchResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTakeDispatchResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TakeDispatchResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TakeDispatchResponseValidationError{}

// Validate checks the field values on LatestState with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LatestState) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LatestState with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LatestStateMultiError, or
// nil if none found.
func (m *LatestState) ValidateAll() error {
	return m.validate(true)
}

func (m *LatestState) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetServerTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestStateValidationError{
					field:  "ServerTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestStateValidationError{
					field:  "ServerTime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetServerTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestStateValidationError{
				field:  "ServerTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LatestStateValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LatestStateValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LatestStateValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDisponents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LatestStateValidationError{
						field:  fmt.Sprintf("Disponents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LatestStateValidationError{
						field:  fmt.Sprintf("Disponents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LatestStateValidationError{
					field:  fmt.Sprintf("Disponents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUnits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LatestStateValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LatestStateValidationError{
						field:  fmt.Sprintf("Units[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LatestStateValidationError{
					field:  fmt.Sprintf("Units[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDispatches() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LatestStateValidationError{
						field:  fmt.Sprintf("Dispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LatestStateValidationError{
						field:  fmt.Sprintf("Dispatches[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LatestStateValidationError{
					field:  fmt.Sprintf("Dispatches[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.OwnUnitId != nil {
		// no validation rules for OwnUnitId
	}

	if len(errors) > 0 {
		return LatestStateMultiError(errors)
	}

	return nil
}

// LatestStateMultiError is an error wrapping multiple validation errors
// returned by LatestState.ValidateAll() if the designated constraints aren't met.
type LatestStateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LatestStateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LatestStateMultiError) AllErrors() []error { return m }

// LatestStateValidationError is the validation error returned by
// LatestState.Validate if the designated constraints aren't met.
type LatestStateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LatestStateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LatestStateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LatestStateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LatestStateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LatestStateValidationError) ErrorName() string { return "LatestStateValidationError" }

// Error satisfies the builtin error interface
func (e LatestStateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLatestState.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LatestStateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LatestStateValidationError{}

// Validate checks the field values on StreamRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamRequestMultiError, or
// nil if none found.
func (m *StreamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StreamRequestMultiError(errors)
	}

	return nil
}

// StreamRequestMultiError is an error wrapping multiple validation errors
// returned by StreamRequest.ValidateAll() if the designated constraints
// aren't met.
type StreamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamRequestMultiError) AllErrors() []error { return m }

// StreamRequestValidationError is the validation error returned by
// StreamRequest.Validate if the designated constraints aren't met.
type StreamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamRequestValidationError) ErrorName() string { return "StreamRequestValidationError" }

// Error satisfies the builtin error interface
func (e StreamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamRequestValidationError{}

// Validate checks the field values on StreamResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StreamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StreamResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StreamResponseMultiError,
// or nil if none found.
func (m *StreamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StreamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofChangePresent := false
	switch v := m.Change.(type) {
	case *StreamResponse_LatestState:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetLatestState()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "LatestState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "LatestState",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLatestState()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "LatestState",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_Settings:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "Settings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_Disponents:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetDisponents()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "Disponents",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "Disponents",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDisponents()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "Disponents",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_UnitCreated:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetUnitCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnitCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "UnitCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_UnitDeleted:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetUnitDeleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnitDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "UnitDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_UnitUpdated:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetUnitUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnitUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "UnitUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_UnitStatus:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetUnitStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "UnitStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUnitStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "UnitStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_DispatchCreated:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetDispatchCreated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchCreated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatchCreated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "DispatchCreated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_DispatchDeleted:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetDispatchDeleted()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchDeleted",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatchDeleted()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "DispatchDeleted",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_DispatchUpdated:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetDispatchUpdated()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchUpdated",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatchUpdated()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "DispatchUpdated",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *StreamResponse_DispatchStatus:
		if v == nil {
			err := StreamResponseValidationError{
				field:  "Change",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofChangePresent = true

		if all {
			switch v := interface{}(m.GetDispatchStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StreamResponseValidationError{
						field:  "DispatchStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDispatchStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StreamResponseValidationError{
					field:  "DispatchStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofChangePresent {
		err := StreamResponseValidationError{
			field:  "Change",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StreamResponseMultiError(errors)
	}

	return nil
}

// StreamResponseMultiError is an error wrapping multiple validation errors
// returned by StreamResponse.ValidateAll() if the designated constraints
// aren't met.
type StreamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StreamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StreamResponseMultiError) AllErrors() []error { return m }

// StreamResponseValidationError is the validation error returned by
// StreamResponse.Validate if the designated constraints aren't met.
type StreamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamResponseValidationError) ErrorName() string { return "StreamResponseValidationError" }

// Error satisfies the builtin error interface
func (e StreamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamResponseValidationError{}
