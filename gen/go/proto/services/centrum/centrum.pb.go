// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: services/centrum/centrum.proto

package centrum

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	centrum "github.com/fivenet-app/fivenet/gen/go/proto/resources/centrum"
	database "github.com/fivenet-app/fivenet/gen/go/proto/resources/common/database"
	jobs "github.com/fivenet-app/fivenet/gen/go/proto/resources/jobs"
	timestamp "github.com/fivenet-app/fivenet/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListDispatchActivityRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Pagination    *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id            uint64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDispatchActivityRequest) Reset() {
	*x = ListDispatchActivityRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDispatchActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDispatchActivityRequest) ProtoMessage() {}

func (x *ListDispatchActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDispatchActivityRequest.ProtoReflect.Descriptor instead.
func (*ListDispatchActivityRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{0}
}

func (x *ListDispatchActivityRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListDispatchActivityRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListUnitActivityRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Pagination    *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Id            uint64                      `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUnitActivityRequest) Reset() {
	*x = ListUnitActivityRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnitActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitActivityRequest) ProtoMessage() {}

func (x *ListUnitActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitActivityRequest.ProtoReflect.Descriptor instead.
func (*ListUnitActivityRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{1}
}

func (x *ListUnitActivityRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListUnitActivityRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{2}
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settings      *centrum.Settings      `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{3}
}

func (x *GetSettingsResponse) GetSettings() *centrum.Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settings      *centrum.Settings      `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingsRequest) Reset() {
	*x = UpdateSettingsRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsRequest) ProtoMessage() {}

func (x *UpdateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateSettingsRequest) GetSettings() *centrum.Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdateSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Settings      *centrum.Settings      `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSettingsResponse) Reset() {
	*x = UpdateSettingsResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingsResponse) ProtoMessage() {}

func (x *UpdateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateSettingsResponse) GetSettings() *centrum.Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ListUnitsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        []centrum.StatusUnit   `protobuf:"varint,1,rep,packed,name=status,proto3,enum=resources.centrum.StatusUnit" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUnitsRequest) Reset() {
	*x = ListUnitsRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitsRequest) ProtoMessage() {}

func (x *ListUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitsRequest.ProtoReflect.Descriptor instead.
func (*ListUnitsRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{6}
}

func (x *ListUnitsRequest) GetStatus() []centrum.StatusUnit {
	if x != nil {
		return x.Status
	}
	return nil
}

type ListUnitsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Units         []*centrum.Unit        `protobuf:"bytes,1,rep,name=units,proto3" json:"units,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUnitsResponse) Reset() {
	*x = ListUnitsResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitsResponse) ProtoMessage() {}

func (x *ListUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitsResponse.ProtoReflect.Descriptor instead.
func (*ListUnitsResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{7}
}

func (x *ListUnitsResponse) GetUnits() []*centrum.Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

type CreateOrUpdateUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unit          *centrum.Unit          `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateUnitRequest) Reset() {
	*x = CreateOrUpdateUnitRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateUnitRequest) ProtoMessage() {}

func (x *CreateOrUpdateUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateUnitRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateUnitRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{8}
}

func (x *CreateOrUpdateUnitRequest) GetUnit() *centrum.Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

type CreateOrUpdateUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unit          *centrum.Unit          `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateOrUpdateUnitResponse) Reset() {
	*x = CreateOrUpdateUnitResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateOrUpdateUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateUnitResponse) ProtoMessage() {}

func (x *CreateOrUpdateUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateUnitResponse.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateUnitResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{9}
}

func (x *CreateOrUpdateUnitResponse) GetUnit() *centrum.Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

type DeleteUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint64                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUnitRequest) Reset() {
	*x = DeleteUnitRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnitRequest) ProtoMessage() {}

func (x *DeleteUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnitRequest.ProtoReflect.Descriptor instead.
func (*DeleteUnitRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteUnitRequest) GetUnitId() uint64 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

type DeleteUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteUnitResponse) Reset() {
	*x = DeleteUnitResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUnitResponse) ProtoMessage() {}

func (x *DeleteUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUnitResponse.ProtoReflect.Descriptor instead.
func (*DeleteUnitResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{11}
}

type UpdateUnitStatusRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UnitId uint64                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	Status centrum.StatusUnit     `protobuf:"varint,2,opt,name=status,proto3,enum=resources.centrum.StatusUnit" json:"status,omitempty"`
	// @sanitize
	Reason *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// @sanitize
	Code          *string `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUnitStatusRequest) Reset() {
	*x = UpdateUnitStatusRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUnitStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUnitStatusRequest) ProtoMessage() {}

func (x *UpdateUnitStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUnitStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateUnitStatusRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateUnitStatusRequest) GetUnitId() uint64 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *UpdateUnitStatusRequest) GetStatus() centrum.StatusUnit {
	if x != nil {
		return x.Status
	}
	return centrum.StatusUnit(0)
}

func (x *UpdateUnitStatusRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *UpdateUnitStatusRequest) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type UpdateUnitStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUnitStatusResponse) Reset() {
	*x = UpdateUnitStatusResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUnitStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUnitStatusResponse) ProtoMessage() {}

func (x *UpdateUnitStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUnitStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateUnitStatusResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{13}
}

type AssignUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        uint64                 `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3" json:"unit_id,omitempty"`
	ToAdd         []int32                `protobuf:"varint,2,rep,packed,name=to_add,json=toAdd,proto3" json:"to_add,omitempty"`
	ToRemove      []int32                `protobuf:"varint,3,rep,packed,name=to_remove,json=toRemove,proto3" json:"to_remove,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignUnitRequest) Reset() {
	*x = AssignUnitRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUnitRequest) ProtoMessage() {}

func (x *AssignUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUnitRequest.ProtoReflect.Descriptor instead.
func (*AssignUnitRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{14}
}

func (x *AssignUnitRequest) GetUnitId() uint64 {
	if x != nil {
		return x.UnitId
	}
	return 0
}

func (x *AssignUnitRequest) GetToAdd() []int32 {
	if x != nil {
		return x.ToAdd
	}
	return nil
}

func (x *AssignUnitRequest) GetToRemove() []int32 {
	if x != nil {
		return x.ToRemove
	}
	return nil
}

type AssignUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignUnitResponse) Reset() {
	*x = AssignUnitResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignUnitResponse) ProtoMessage() {}

func (x *AssignUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignUnitResponse.ProtoReflect.Descriptor instead.
func (*AssignUnitResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{15}
}

type ListUnitActivityResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Activity      []*centrum.UnitStatus        `protobuf:"bytes,2,rep,name=activity,proto3" json:"activity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUnitActivityResponse) Reset() {
	*x = ListUnitActivityResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUnitActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUnitActivityResponse) ProtoMessage() {}

func (x *ListUnitActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUnitActivityResponse.ProtoReflect.Descriptor instead.
func (*ListUnitActivityResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{16}
}

func (x *ListUnitActivityResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListUnitActivityResponse) GetActivity() []*centrum.UnitStatus {
	if x != nil {
		return x.Activity
	}
	return nil
}

type TakeControlRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Signon        bool                   `protobuf:"varint,1,opt,name=signon,proto3" json:"signon,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeControlRequest) Reset() {
	*x = TakeControlRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeControlRequest) ProtoMessage() {}

func (x *TakeControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeControlRequest.ProtoReflect.Descriptor instead.
func (*TakeControlRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{17}
}

func (x *TakeControlRequest) GetSignon() bool {
	if x != nil {
		return x.Signon
	}
	return false
}

type TakeControlResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeControlResponse) Reset() {
	*x = TakeControlResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeControlResponse) ProtoMessage() {}

func (x *TakeControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeControlResponse.ProtoReflect.Descriptor instead.
func (*TakeControlResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{18}
}

type ListDispatchesRequest struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Pagination    *database.PaginationRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Status        []centrum.StatusDispatch    `protobuf:"varint,2,rep,packed,name=status,proto3,enum=resources.centrum.StatusDispatch" json:"status,omitempty"`
	NotStatus     []centrum.StatusDispatch    `protobuf:"varint,3,rep,packed,name=not_status,json=notStatus,proto3,enum=resources.centrum.StatusDispatch" json:"not_status,omitempty"`
	Ids           []uint64                    `protobuf:"varint,4,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Postal        *string                     `protobuf:"bytes,5,opt,name=postal,proto3,oneof" json:"postal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDispatchesRequest) Reset() {
	*x = ListDispatchesRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDispatchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDispatchesRequest) ProtoMessage() {}

func (x *ListDispatchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDispatchesRequest.ProtoReflect.Descriptor instead.
func (*ListDispatchesRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{19}
}

func (x *ListDispatchesRequest) GetPagination() *database.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListDispatchesRequest) GetStatus() []centrum.StatusDispatch {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ListDispatchesRequest) GetNotStatus() []centrum.StatusDispatch {
	if x != nil {
		return x.NotStatus
	}
	return nil
}

func (x *ListDispatchesRequest) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ListDispatchesRequest) GetPostal() string {
	if x != nil && x.Postal != nil {
		return *x.Postal
	}
	return ""
}

type ListDispatchesResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Dispatches    []*centrum.Dispatch          `protobuf:"bytes,2,rep,name=dispatches,proto3" json:"dispatches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDispatchesResponse) Reset() {
	*x = ListDispatchesResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDispatchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDispatchesResponse) ProtoMessage() {}

func (x *ListDispatchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDispatchesResponse.ProtoReflect.Descriptor instead.
func (*ListDispatchesResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{20}
}

func (x *ListDispatchesResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListDispatchesResponse) GetDispatches() []*centrum.Dispatch {
	if x != nil {
		return x.Dispatches
	}
	return nil
}

type GetDispatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDispatchRequest) Reset() {
	*x = GetDispatchRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDispatchRequest) ProtoMessage() {}

func (x *GetDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDispatchRequest.ProtoReflect.Descriptor instead.
func (*GetDispatchRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{21}
}

func (x *GetDispatchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dispatch      *centrum.Dispatch      `protobuf:"bytes,1,opt,name=dispatch,proto3" json:"dispatch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetDispatchResponse) Reset() {
	*x = GetDispatchResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDispatchResponse) ProtoMessage() {}

func (x *GetDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDispatchResponse.ProtoReflect.Descriptor instead.
func (*GetDispatchResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{22}
}

func (x *GetDispatchResponse) GetDispatch() *centrum.Dispatch {
	if x != nil {
		return x.Dispatch
	}
	return nil
}

type CreateDispatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dispatch      *centrum.Dispatch      `protobuf:"bytes,1,opt,name=dispatch,proto3" json:"dispatch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDispatchRequest) Reset() {
	*x = CreateDispatchRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDispatchRequest) ProtoMessage() {}

func (x *CreateDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDispatchRequest.ProtoReflect.Descriptor instead.
func (*CreateDispatchRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{23}
}

func (x *CreateDispatchRequest) GetDispatch() *centrum.Dispatch {
	if x != nil {
		return x.Dispatch
	}
	return nil
}

type CreateDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dispatch      *centrum.Dispatch      `protobuf:"bytes,1,opt,name=dispatch,proto3" json:"dispatch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDispatchResponse) Reset() {
	*x = CreateDispatchResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDispatchResponse) ProtoMessage() {}

func (x *CreateDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDispatchResponse.ProtoReflect.Descriptor instead.
func (*CreateDispatchResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{24}
}

func (x *CreateDispatchResponse) GetDispatch() *centrum.Dispatch {
	if x != nil {
		return x.Dispatch
	}
	return nil
}

type UpdateDispatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Dispatch      *centrum.Dispatch      `protobuf:"bytes,1,opt,name=dispatch,proto3" json:"dispatch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDispatchRequest) Reset() {
	*x = UpdateDispatchRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDispatchRequest) ProtoMessage() {}

func (x *UpdateDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDispatchRequest.ProtoReflect.Descriptor instead.
func (*UpdateDispatchRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateDispatchRequest) GetDispatch() *centrum.Dispatch {
	if x != nil {
		return x.Dispatch
	}
	return nil
}

type UpdateDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDispatchResponse) Reset() {
	*x = UpdateDispatchResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDispatchResponse) ProtoMessage() {}

func (x *UpdateDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDispatchResponse.ProtoReflect.Descriptor instead.
func (*UpdateDispatchResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{26}
}

type DeleteDispatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDispatchRequest) Reset() {
	*x = DeleteDispatchRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDispatchRequest) ProtoMessage() {}

func (x *DeleteDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDispatchRequest.ProtoReflect.Descriptor instead.
func (*DeleteDispatchRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteDispatchRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteDispatchResponse) Reset() {
	*x = DeleteDispatchResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDispatchResponse) ProtoMessage() {}

func (x *DeleteDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDispatchResponse.ProtoReflect.Descriptor instead.
func (*DeleteDispatchResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{28}
}

type UpdateDispatchStatusRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	DispatchId uint64                 `protobuf:"varint,1,opt,name=dispatch_id,json=dispatchId,proto3" json:"dispatch_id,omitempty"`
	Status     centrum.StatusDispatch `protobuf:"varint,2,opt,name=status,proto3,enum=resources.centrum.StatusDispatch" json:"status,omitempty"`
	// @sanitize
	Reason *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	// @sanitize
	Code          *string `protobuf:"bytes,4,opt,name=code,proto3,oneof" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDispatchStatusRequest) Reset() {
	*x = UpdateDispatchStatusRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDispatchStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDispatchStatusRequest) ProtoMessage() {}

func (x *UpdateDispatchStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDispatchStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDispatchStatusRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateDispatchStatusRequest) GetDispatchId() uint64 {
	if x != nil {
		return x.DispatchId
	}
	return 0
}

func (x *UpdateDispatchStatusRequest) GetStatus() centrum.StatusDispatch {
	if x != nil {
		return x.Status
	}
	return centrum.StatusDispatch(0)
}

func (x *UpdateDispatchStatusRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *UpdateDispatchStatusRequest) GetCode() string {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return ""
}

type UpdateDispatchStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDispatchStatusResponse) Reset() {
	*x = UpdateDispatchStatusResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDispatchStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDispatchStatusResponse) ProtoMessage() {}

func (x *UpdateDispatchStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDispatchStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDispatchStatusResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{30}
}

type AssignDispatchRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DispatchId    uint64                 `protobuf:"varint,1,opt,name=dispatch_id,json=dispatchId,proto3" json:"dispatch_id,omitempty"`
	ToAdd         []uint64               `protobuf:"varint,2,rep,packed,name=to_add,json=toAdd,proto3" json:"to_add,omitempty"`
	ToRemove      []uint64               `protobuf:"varint,3,rep,packed,name=to_remove,json=toRemove,proto3" json:"to_remove,omitempty"`
	Forced        *bool                  `protobuf:"varint,4,opt,name=forced,proto3,oneof" json:"forced,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignDispatchRequest) Reset() {
	*x = AssignDispatchRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDispatchRequest) ProtoMessage() {}

func (x *AssignDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDispatchRequest.ProtoReflect.Descriptor instead.
func (*AssignDispatchRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{31}
}

func (x *AssignDispatchRequest) GetDispatchId() uint64 {
	if x != nil {
		return x.DispatchId
	}
	return 0
}

func (x *AssignDispatchRequest) GetToAdd() []uint64 {
	if x != nil {
		return x.ToAdd
	}
	return nil
}

func (x *AssignDispatchRequest) GetToRemove() []uint64 {
	if x != nil {
		return x.ToRemove
	}
	return nil
}

func (x *AssignDispatchRequest) GetForced() bool {
	if x != nil && x.Forced != nil {
		return *x.Forced
	}
	return false
}

type AssignDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AssignDispatchResponse) Reset() {
	*x = AssignDispatchResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssignDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignDispatchResponse) ProtoMessage() {}

func (x *AssignDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignDispatchResponse.ProtoReflect.Descriptor instead.
func (*AssignDispatchResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{32}
}

type ListDispatchActivityResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Pagination    *database.PaginationResponse `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Activity      []*centrum.DispatchStatus    `protobuf:"bytes,2,rep,name=activity,proto3" json:"activity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDispatchActivityResponse) Reset() {
	*x = ListDispatchActivityResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDispatchActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDispatchActivityResponse) ProtoMessage() {}

func (x *ListDispatchActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDispatchActivityResponse.ProtoReflect.Descriptor instead.
func (*ListDispatchActivityResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{33}
}

func (x *ListDispatchActivityResponse) GetPagination() *database.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListDispatchActivityResponse) GetActivity() []*centrum.DispatchStatus {
	if x != nil {
		return x.Activity
	}
	return nil
}

type JoinUnitRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UnitId        *uint64                `protobuf:"varint,1,opt,name=unit_id,json=unitId,proto3,oneof" json:"unit_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinUnitRequest) Reset() {
	*x = JoinUnitRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinUnitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinUnitRequest) ProtoMessage() {}

func (x *JoinUnitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinUnitRequest.ProtoReflect.Descriptor instead.
func (*JoinUnitRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{34}
}

func (x *JoinUnitRequest) GetUnitId() uint64 {
	if x != nil && x.UnitId != nil {
		return *x.UnitId
	}
	return 0
}

type JoinUnitResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Unit          *centrum.Unit          `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JoinUnitResponse) Reset() {
	*x = JoinUnitResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JoinUnitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinUnitResponse) ProtoMessage() {}

func (x *JoinUnitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinUnitResponse.ProtoReflect.Descriptor instead.
func (*JoinUnitResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{35}
}

func (x *JoinUnitResponse) GetUnit() *centrum.Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

type TakeDispatchRequest struct {
	state       protoimpl.MessageState   `protogen:"open.v1"`
	DispatchIds []uint64                 `protobuf:"varint,1,rep,packed,name=dispatch_ids,json=dispatchIds,proto3" json:"dispatch_ids,omitempty"`
	Resp        centrum.TakeDispatchResp `protobuf:"varint,2,opt,name=resp,proto3,enum=resources.centrum.TakeDispatchResp" json:"resp,omitempty"`
	// @sanitize
	Reason        *string `protobuf:"bytes,3,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeDispatchRequest) Reset() {
	*x = TakeDispatchRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeDispatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeDispatchRequest) ProtoMessage() {}

func (x *TakeDispatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeDispatchRequest.ProtoReflect.Descriptor instead.
func (*TakeDispatchRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{36}
}

func (x *TakeDispatchRequest) GetDispatchIds() []uint64 {
	if x != nil {
		return x.DispatchIds
	}
	return nil
}

func (x *TakeDispatchRequest) GetResp() centrum.TakeDispatchResp {
	if x != nil {
		return x.Resp
	}
	return centrum.TakeDispatchResp(0)
}

func (x *TakeDispatchRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type TakeDispatchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TakeDispatchResponse) Reset() {
	*x = TakeDispatchResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TakeDispatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeDispatchResponse) ProtoMessage() {}

func (x *TakeDispatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeDispatchResponse.ProtoReflect.Descriptor instead.
func (*TakeDispatchResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{37}
}

type LatestState struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	ServerTime *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	Settings   *centrum.Settings      `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	Disponents []*jobs.Colleague      `protobuf:"bytes,3,rep,name=disponents,proto3" json:"disponents,omitempty"`
	OwnUnitId  *uint64                `protobuf:"varint,4,opt,name=own_unit_id,json=ownUnitId,proto3,oneof" json:"own_unit_id,omitempty"`
	// Send the current units and dispatches
	Units         []*centrum.Unit     `protobuf:"bytes,5,rep,name=units,proto3" json:"units,omitempty"`
	Dispatches    []*centrum.Dispatch `protobuf:"bytes,6,rep,name=dispatches,proto3" json:"dispatches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestState) Reset() {
	*x = LatestState{}
	mi := &file_services_centrum_centrum_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestState) ProtoMessage() {}

func (x *LatestState) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestState.ProtoReflect.Descriptor instead.
func (*LatestState) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{38}
}

func (x *LatestState) GetServerTime() *timestamp.Timestamp {
	if x != nil {
		return x.ServerTime
	}
	return nil
}

func (x *LatestState) GetSettings() *centrum.Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *LatestState) GetDisponents() []*jobs.Colleague {
	if x != nil {
		return x.Disponents
	}
	return nil
}

func (x *LatestState) GetOwnUnitId() uint64 {
	if x != nil && x.OwnUnitId != nil {
		return *x.OwnUnitId
	}
	return 0
}

func (x *LatestState) GetUnits() []*centrum.Unit {
	if x != nil {
		return x.Units
	}
	return nil
}

func (x *LatestState) GetDispatches() []*centrum.Dispatch {
	if x != nil {
		return x.Dispatches
	}
	return nil
}

type StreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	mi := &file_services_centrum_centrum_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{39}
}

type StreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Change:
	//
	//	*StreamResponse_LatestState
	//	*StreamResponse_Settings
	//	*StreamResponse_Disponents
	//	*StreamResponse_UnitCreated
	//	*StreamResponse_UnitDeleted
	//	*StreamResponse_UnitUpdated
	//	*StreamResponse_UnitStatus
	//	*StreamResponse_DispatchCreated
	//	*StreamResponse_DispatchDeleted
	//	*StreamResponse_DispatchUpdated
	//	*StreamResponse_DispatchStatus
	Change        isStreamResponse_Change `protobuf_oneof:"change"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	mi := &file_services_centrum_centrum_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_centrum_centrum_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_services_centrum_centrum_proto_rawDescGZIP(), []int{40}
}

func (x *StreamResponse) GetChange() isStreamResponse_Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *StreamResponse) GetLatestState() *LatestState {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_LatestState); ok {
			return x.LatestState
		}
	}
	return nil
}

func (x *StreamResponse) GetSettings() *centrum.Settings {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_Settings); ok {
			return x.Settings
		}
	}
	return nil
}

func (x *StreamResponse) GetDisponents() *centrum.Disponents {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_Disponents); ok {
			return x.Disponents
		}
	}
	return nil
}

func (x *StreamResponse) GetUnitCreated() *centrum.Unit {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_UnitCreated); ok {
			return x.UnitCreated
		}
	}
	return nil
}

func (x *StreamResponse) GetUnitDeleted() *centrum.Unit {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_UnitDeleted); ok {
			return x.UnitDeleted
		}
	}
	return nil
}

func (x *StreamResponse) GetUnitUpdated() *centrum.Unit {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_UnitUpdated); ok {
			return x.UnitUpdated
		}
	}
	return nil
}

func (x *StreamResponse) GetUnitStatus() *centrum.UnitStatus {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_UnitStatus); ok {
			return x.UnitStatus
		}
	}
	return nil
}

func (x *StreamResponse) GetDispatchCreated() *centrum.Dispatch {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_DispatchCreated); ok {
			return x.DispatchCreated
		}
	}
	return nil
}

func (x *StreamResponse) GetDispatchDeleted() *centrum.Dispatch {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_DispatchDeleted); ok {
			return x.DispatchDeleted
		}
	}
	return nil
}

func (x *StreamResponse) GetDispatchUpdated() *centrum.Dispatch {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_DispatchUpdated); ok {
			return x.DispatchUpdated
		}
	}
	return nil
}

func (x *StreamResponse) GetDispatchStatus() *centrum.DispatchStatus {
	if x != nil {
		if x, ok := x.Change.(*StreamResponse_DispatchStatus); ok {
			return x.DispatchStatus
		}
	}
	return nil
}

type isStreamResponse_Change interface {
	isStreamResponse_Change()
}

type StreamResponse_LatestState struct {
	LatestState *LatestState `protobuf:"bytes,1,opt,name=latest_state,json=latestState,proto3,oneof"`
}

type StreamResponse_Settings struct {
	Settings *centrum.Settings `protobuf:"bytes,2,opt,name=settings,proto3,oneof"`
}

type StreamResponse_Disponents struct {
	Disponents *centrum.Disponents `protobuf:"bytes,3,opt,name=disponents,proto3,oneof"`
}

type StreamResponse_UnitCreated struct {
	UnitCreated *centrum.Unit `protobuf:"bytes,4,opt,name=unit_created,json=unitCreated,proto3,oneof"`
}

type StreamResponse_UnitDeleted struct {
	UnitDeleted *centrum.Unit `protobuf:"bytes,5,opt,name=unit_deleted,json=unitDeleted,proto3,oneof"`
}

type StreamResponse_UnitUpdated struct {
	UnitUpdated *centrum.Unit `protobuf:"bytes,6,opt,name=unit_updated,json=unitUpdated,proto3,oneof"`
}

type StreamResponse_UnitStatus struct {
	UnitStatus *centrum.UnitStatus `protobuf:"bytes,7,opt,name=unit_status,json=unitStatus,proto3,oneof"`
}

type StreamResponse_DispatchCreated struct {
	DispatchCreated *centrum.Dispatch `protobuf:"bytes,8,opt,name=dispatch_created,json=dispatchCreated,proto3,oneof"`
}

type StreamResponse_DispatchDeleted struct {
	DispatchDeleted *centrum.Dispatch `protobuf:"bytes,9,opt,name=dispatch_deleted,json=dispatchDeleted,proto3,oneof"`
}

type StreamResponse_DispatchUpdated struct {
	DispatchUpdated *centrum.Dispatch `protobuf:"bytes,10,opt,name=dispatch_updated,json=dispatchUpdated,proto3,oneof"`
}

type StreamResponse_DispatchStatus struct {
	DispatchStatus *centrum.DispatchStatus `protobuf:"bytes,11,opt,name=dispatch_status,json=dispatchStatus,proto3,oneof"`
}

func (*StreamResponse_LatestState) isStreamResponse_Change() {}

func (*StreamResponse_Settings) isStreamResponse_Change() {}

func (*StreamResponse_Disponents) isStreamResponse_Change() {}

func (*StreamResponse_UnitCreated) isStreamResponse_Change() {}

func (*StreamResponse_UnitDeleted) isStreamResponse_Change() {}

func (*StreamResponse_UnitUpdated) isStreamResponse_Change() {}

func (*StreamResponse_UnitStatus) isStreamResponse_Change() {}

func (*StreamResponse_DispatchCreated) isStreamResponse_Change() {}

func (*StreamResponse_DispatchDeleted) isStreamResponse_Change() {}

func (*StreamResponse_DispatchUpdated) isStreamResponse_Change() {}

func (*StreamResponse_DispatchStatus) isStreamResponse_Change() {}

var File_services_centrum_centrum_proto protoreflect.FileDescriptor

var file_services_centrum_centrum_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x6d, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x6d, 0x1a, 0x28, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x22, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x2f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x61, 0x67, 0x75, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x14, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x51, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x58, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x0d,
	0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x52, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x49, 0x0a,
	0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x69, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18, 0x14,
	0x48, 0x01, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x1a, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f,
	0x61, 0x64, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x41, 0x64, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x2c, 0x0a, 0x12, 0x54, 0x61,
	0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x13, 0x54, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0xd7, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01,
	0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4f, 0x0a, 0x0a, 0x6e,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x42, 0x0d, 0xfa, 0x42, 0x0a, 0x92, 0x01, 0x07, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01,
	0x02, 0x10, 0x0a, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x18,
	0x0c, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x22, 0xa4, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x22, 0x2d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x4e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22,
	0x5a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x51, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x5a,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x32, 0x02,
	0x20, 0x00, 0x52, 0x02, 0x69, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xd7, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01,
	0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04, 0x52,
	0x08, 0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x64, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75,
	0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x3b, 0x0a, 0x0f, 0x4a, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x07, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00,
	0x52, 0x06, 0x75, 0x6e, 0x69, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x6b,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x04, 0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e,
	0x54, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x72, 0x65, 0x73, 0x70,
	0x12, 0x25, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x18, 0xff, 0x01, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x16, 0x0a, 0x14, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x0b, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75,
	0x6d, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x61,
	0x67, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x05, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x77, 0x6e, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x69, 0x64,
	0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x87, 0x06, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55,
	0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x69,
	0x74, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x3c, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x40,
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x48, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x4c,
	0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0d, 0x0a, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x32, 0xc0, 0x0f, 0x0a, 0x0e,
	0x43, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75,
	0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63,
	0x0a, 0x0e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e,
	0x74, 0x72, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x06,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x08, 0x4a, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x69, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x70, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x23, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65,
	0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a,
	0x0c, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x12, 0x25, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d,
	0x2e, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x10,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x29, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74,
	0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x76,
	0x65, 0x6e, 0x65, 0x74, 0x2d, 0x61, 0x70, 0x70, 0x2f, 0x66, 0x69, 0x76, 0x65, 0x6e, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x3b, 0x63,
	0x65, 0x6e, 0x74, 0x72, 0x75, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_services_centrum_centrum_proto_rawDescOnce sync.Once
	file_services_centrum_centrum_proto_rawDescData []byte
)

func file_services_centrum_centrum_proto_rawDescGZIP() []byte {
	file_services_centrum_centrum_proto_rawDescOnce.Do(func() {
		file_services_centrum_centrum_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_services_centrum_centrum_proto_rawDesc), len(file_services_centrum_centrum_proto_rawDesc)))
	})
	return file_services_centrum_centrum_proto_rawDescData
}

var file_services_centrum_centrum_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_services_centrum_centrum_proto_goTypes = []any{
	(*ListDispatchActivityRequest)(nil),  // 0: services.centrum.ListDispatchActivityRequest
	(*ListUnitActivityRequest)(nil),      // 1: services.centrum.ListUnitActivityRequest
	(*GetSettingsRequest)(nil),           // 2: services.centrum.GetSettingsRequest
	(*GetSettingsResponse)(nil),          // 3: services.centrum.GetSettingsResponse
	(*UpdateSettingsRequest)(nil),        // 4: services.centrum.UpdateSettingsRequest
	(*UpdateSettingsResponse)(nil),       // 5: services.centrum.UpdateSettingsResponse
	(*ListUnitsRequest)(nil),             // 6: services.centrum.ListUnitsRequest
	(*ListUnitsResponse)(nil),            // 7: services.centrum.ListUnitsResponse
	(*CreateOrUpdateUnitRequest)(nil),    // 8: services.centrum.CreateOrUpdateUnitRequest
	(*CreateOrUpdateUnitResponse)(nil),   // 9: services.centrum.CreateOrUpdateUnitResponse
	(*DeleteUnitRequest)(nil),            // 10: services.centrum.DeleteUnitRequest
	(*DeleteUnitResponse)(nil),           // 11: services.centrum.DeleteUnitResponse
	(*UpdateUnitStatusRequest)(nil),      // 12: services.centrum.UpdateUnitStatusRequest
	(*UpdateUnitStatusResponse)(nil),     // 13: services.centrum.UpdateUnitStatusResponse
	(*AssignUnitRequest)(nil),            // 14: services.centrum.AssignUnitRequest
	(*AssignUnitResponse)(nil),           // 15: services.centrum.AssignUnitResponse
	(*ListUnitActivityResponse)(nil),     // 16: services.centrum.ListUnitActivityResponse
	(*TakeControlRequest)(nil),           // 17: services.centrum.TakeControlRequest
	(*TakeControlResponse)(nil),          // 18: services.centrum.TakeControlResponse
	(*ListDispatchesRequest)(nil),        // 19: services.centrum.ListDispatchesRequest
	(*ListDispatchesResponse)(nil),       // 20: services.centrum.ListDispatchesResponse
	(*GetDispatchRequest)(nil),           // 21: services.centrum.GetDispatchRequest
	(*GetDispatchResponse)(nil),          // 22: services.centrum.GetDispatchResponse
	(*CreateDispatchRequest)(nil),        // 23: services.centrum.CreateDispatchRequest
	(*CreateDispatchResponse)(nil),       // 24: services.centrum.CreateDispatchResponse
	(*UpdateDispatchRequest)(nil),        // 25: services.centrum.UpdateDispatchRequest
	(*UpdateDispatchResponse)(nil),       // 26: services.centrum.UpdateDispatchResponse
	(*DeleteDispatchRequest)(nil),        // 27: services.centrum.DeleteDispatchRequest
	(*DeleteDispatchResponse)(nil),       // 28: services.centrum.DeleteDispatchResponse
	(*UpdateDispatchStatusRequest)(nil),  // 29: services.centrum.UpdateDispatchStatusRequest
	(*UpdateDispatchStatusResponse)(nil), // 30: services.centrum.UpdateDispatchStatusResponse
	(*AssignDispatchRequest)(nil),        // 31: services.centrum.AssignDispatchRequest
	(*AssignDispatchResponse)(nil),       // 32: services.centrum.AssignDispatchResponse
	(*ListDispatchActivityResponse)(nil), // 33: services.centrum.ListDispatchActivityResponse
	(*JoinUnitRequest)(nil),              // 34: services.centrum.JoinUnitRequest
	(*JoinUnitResponse)(nil),             // 35: services.centrum.JoinUnitResponse
	(*TakeDispatchRequest)(nil),          // 36: services.centrum.TakeDispatchRequest
	(*TakeDispatchResponse)(nil),         // 37: services.centrum.TakeDispatchResponse
	(*LatestState)(nil),                  // 38: services.centrum.LatestState
	(*StreamRequest)(nil),                // 39: services.centrum.StreamRequest
	(*StreamResponse)(nil),               // 40: services.centrum.StreamResponse
	(*database.PaginationRequest)(nil),   // 41: resources.common.database.PaginationRequest
	(*centrum.Settings)(nil),             // 42: resources.centrum.Settings
	(centrum.StatusUnit)(0),              // 43: resources.centrum.StatusUnit
	(*centrum.Unit)(nil),                 // 44: resources.centrum.Unit
	(*database.PaginationResponse)(nil),  // 45: resources.common.database.PaginationResponse
	(*centrum.UnitStatus)(nil),           // 46: resources.centrum.UnitStatus
	(centrum.StatusDispatch)(0),          // 47: resources.centrum.StatusDispatch
	(*centrum.Dispatch)(nil),             // 48: resources.centrum.Dispatch
	(*centrum.DispatchStatus)(nil),       // 49: resources.centrum.DispatchStatus
	(centrum.TakeDispatchResp)(0),        // 50: resources.centrum.TakeDispatchResp
	(*timestamp.Timestamp)(nil),          // 51: resources.timestamp.Timestamp
	(*jobs.Colleague)(nil),               // 52: resources.jobs.Colleague
	(*centrum.Disponents)(nil),           // 53: resources.centrum.Disponents
}
var file_services_centrum_centrum_proto_depIdxs = []int32{
	41, // 0: services.centrum.ListDispatchActivityRequest.pagination:type_name -> resources.common.database.PaginationRequest
	41, // 1: services.centrum.ListUnitActivityRequest.pagination:type_name -> resources.common.database.PaginationRequest
	42, // 2: services.centrum.GetSettingsResponse.settings:type_name -> resources.centrum.Settings
	42, // 3: services.centrum.UpdateSettingsRequest.settings:type_name -> resources.centrum.Settings
	42, // 4: services.centrum.UpdateSettingsResponse.settings:type_name -> resources.centrum.Settings
	43, // 5: services.centrum.ListUnitsRequest.status:type_name -> resources.centrum.StatusUnit
	44, // 6: services.centrum.ListUnitsResponse.units:type_name -> resources.centrum.Unit
	44, // 7: services.centrum.CreateOrUpdateUnitRequest.unit:type_name -> resources.centrum.Unit
	44, // 8: services.centrum.CreateOrUpdateUnitResponse.unit:type_name -> resources.centrum.Unit
	43, // 9: services.centrum.UpdateUnitStatusRequest.status:type_name -> resources.centrum.StatusUnit
	45, // 10: services.centrum.ListUnitActivityResponse.pagination:type_name -> resources.common.database.PaginationResponse
	46, // 11: services.centrum.ListUnitActivityResponse.activity:type_name -> resources.centrum.UnitStatus
	41, // 12: services.centrum.ListDispatchesRequest.pagination:type_name -> resources.common.database.PaginationRequest
	47, // 13: services.centrum.ListDispatchesRequest.status:type_name -> resources.centrum.StatusDispatch
	47, // 14: services.centrum.ListDispatchesRequest.not_status:type_name -> resources.centrum.StatusDispatch
	45, // 15: services.centrum.ListDispatchesResponse.pagination:type_name -> resources.common.database.PaginationResponse
	48, // 16: services.centrum.ListDispatchesResponse.dispatches:type_name -> resources.centrum.Dispatch
	48, // 17: services.centrum.GetDispatchResponse.dispatch:type_name -> resources.centrum.Dispatch
	48, // 18: services.centrum.CreateDispatchRequest.dispatch:type_name -> resources.centrum.Dispatch
	48, // 19: services.centrum.CreateDispatchResponse.dispatch:type_name -> resources.centrum.Dispatch
	48, // 20: services.centrum.UpdateDispatchRequest.dispatch:type_name -> resources.centrum.Dispatch
	47, // 21: services.centrum.UpdateDispatchStatusRequest.status:type_name -> resources.centrum.StatusDispatch
	45, // 22: services.centrum.ListDispatchActivityResponse.pagination:type_name -> resources.common.database.PaginationResponse
	49, // 23: services.centrum.ListDispatchActivityResponse.activity:type_name -> resources.centrum.DispatchStatus
	44, // 24: services.centrum.JoinUnitResponse.unit:type_name -> resources.centrum.Unit
	50, // 25: services.centrum.TakeDispatchRequest.resp:type_name -> resources.centrum.TakeDispatchResp
	51, // 26: services.centrum.LatestState.server_time:type_name -> resources.timestamp.Timestamp
	42, // 27: services.centrum.LatestState.settings:type_name -> resources.centrum.Settings
	52, // 28: services.centrum.LatestState.disponents:type_name -> resources.jobs.Colleague
	44, // 29: services.centrum.LatestState.units:type_name -> resources.centrum.Unit
	48, // 30: services.centrum.LatestState.dispatches:type_name -> resources.centrum.Dispatch
	38, // 31: services.centrum.StreamResponse.latest_state:type_name -> services.centrum.LatestState
	42, // 32: services.centrum.StreamResponse.settings:type_name -> resources.centrum.Settings
	53, // 33: services.centrum.StreamResponse.disponents:type_name -> resources.centrum.Disponents
	44, // 34: services.centrum.StreamResponse.unit_created:type_name -> resources.centrum.Unit
	44, // 35: services.centrum.StreamResponse.unit_deleted:type_name -> resources.centrum.Unit
	44, // 36: services.centrum.StreamResponse.unit_updated:type_name -> resources.centrum.Unit
	46, // 37: services.centrum.StreamResponse.unit_status:type_name -> resources.centrum.UnitStatus
	48, // 38: services.centrum.StreamResponse.dispatch_created:type_name -> resources.centrum.Dispatch
	48, // 39: services.centrum.StreamResponse.dispatch_deleted:type_name -> resources.centrum.Dispatch
	48, // 40: services.centrum.StreamResponse.dispatch_updated:type_name -> resources.centrum.Dispatch
	49, // 41: services.centrum.StreamResponse.dispatch_status:type_name -> resources.centrum.DispatchStatus
	4,  // 42: services.centrum.CentrumService.UpdateSettings:input_type -> services.centrum.UpdateSettingsRequest
	23, // 43: services.centrum.CentrumService.CreateDispatch:input_type -> services.centrum.CreateDispatchRequest
	25, // 44: services.centrum.CentrumService.UpdateDispatch:input_type -> services.centrum.UpdateDispatchRequest
	27, // 45: services.centrum.CentrumService.DeleteDispatch:input_type -> services.centrum.DeleteDispatchRequest
	17, // 46: services.centrum.CentrumService.TakeControl:input_type -> services.centrum.TakeControlRequest
	31, // 47: services.centrum.CentrumService.AssignDispatch:input_type -> services.centrum.AssignDispatchRequest
	14, // 48: services.centrum.CentrumService.AssignUnit:input_type -> services.centrum.AssignUnitRequest
	39, // 49: services.centrum.CentrumService.Stream:input_type -> services.centrum.StreamRequest
	2,  // 50: services.centrum.CentrumService.GetSettings:input_type -> services.centrum.GetSettingsRequest
	34, // 51: services.centrum.CentrumService.JoinUnit:input_type -> services.centrum.JoinUnitRequest
	6,  // 52: services.centrum.CentrumService.ListUnits:input_type -> services.centrum.ListUnitsRequest
	1,  // 53: services.centrum.CentrumService.ListUnitActivity:input_type -> services.centrum.ListUnitActivityRequest
	21, // 54: services.centrum.CentrumService.GetDispatch:input_type -> services.centrum.GetDispatchRequest
	19, // 55: services.centrum.CentrumService.ListDispatches:input_type -> services.centrum.ListDispatchesRequest
	0,  // 56: services.centrum.CentrumService.ListDispatchActivity:input_type -> services.centrum.ListDispatchActivityRequest
	8,  // 57: services.centrum.CentrumService.CreateOrUpdateUnit:input_type -> services.centrum.CreateOrUpdateUnitRequest
	10, // 58: services.centrum.CentrumService.DeleteUnit:input_type -> services.centrum.DeleteUnitRequest
	36, // 59: services.centrum.CentrumService.TakeDispatch:input_type -> services.centrum.TakeDispatchRequest
	12, // 60: services.centrum.CentrumService.UpdateUnitStatus:input_type -> services.centrum.UpdateUnitStatusRequest
	29, // 61: services.centrum.CentrumService.UpdateDispatchStatus:input_type -> services.centrum.UpdateDispatchStatusRequest
	5,  // 62: services.centrum.CentrumService.UpdateSettings:output_type -> services.centrum.UpdateSettingsResponse
	24, // 63: services.centrum.CentrumService.CreateDispatch:output_type -> services.centrum.CreateDispatchResponse
	26, // 64: services.centrum.CentrumService.UpdateDispatch:output_type -> services.centrum.UpdateDispatchResponse
	28, // 65: services.centrum.CentrumService.DeleteDispatch:output_type -> services.centrum.DeleteDispatchResponse
	18, // 66: services.centrum.CentrumService.TakeControl:output_type -> services.centrum.TakeControlResponse
	32, // 67: services.centrum.CentrumService.AssignDispatch:output_type -> services.centrum.AssignDispatchResponse
	15, // 68: services.centrum.CentrumService.AssignUnit:output_type -> services.centrum.AssignUnitResponse
	40, // 69: services.centrum.CentrumService.Stream:output_type -> services.centrum.StreamResponse
	3,  // 70: services.centrum.CentrumService.GetSettings:output_type -> services.centrum.GetSettingsResponse
	35, // 71: services.centrum.CentrumService.JoinUnit:output_type -> services.centrum.JoinUnitResponse
	7,  // 72: services.centrum.CentrumService.ListUnits:output_type -> services.centrum.ListUnitsResponse
	16, // 73: services.centrum.CentrumService.ListUnitActivity:output_type -> services.centrum.ListUnitActivityResponse
	22, // 74: services.centrum.CentrumService.GetDispatch:output_type -> services.centrum.GetDispatchResponse
	20, // 75: services.centrum.CentrumService.ListDispatches:output_type -> services.centrum.ListDispatchesResponse
	33, // 76: services.centrum.CentrumService.ListDispatchActivity:output_type -> services.centrum.ListDispatchActivityResponse
	9,  // 77: services.centrum.CentrumService.CreateOrUpdateUnit:output_type -> services.centrum.CreateOrUpdateUnitResponse
	11, // 78: services.centrum.CentrumService.DeleteUnit:output_type -> services.centrum.DeleteUnitResponse
	37, // 79: services.centrum.CentrumService.TakeDispatch:output_type -> services.centrum.TakeDispatchResponse
	13, // 80: services.centrum.CentrumService.UpdateUnitStatus:output_type -> services.centrum.UpdateUnitStatusResponse
	30, // 81: services.centrum.CentrumService.UpdateDispatchStatus:output_type -> services.centrum.UpdateDispatchStatusResponse
	62, // [62:82] is the sub-list for method output_type
	42, // [42:62] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_services_centrum_centrum_proto_init() }
func file_services_centrum_centrum_proto_init() {
	if File_services_centrum_centrum_proto != nil {
		return
	}
	file_services_centrum_centrum_proto_msgTypes[12].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[19].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[29].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[31].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[34].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[36].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[38].OneofWrappers = []any{}
	file_services_centrum_centrum_proto_msgTypes[40].OneofWrappers = []any{
		(*StreamResponse_LatestState)(nil),
		(*StreamResponse_Settings)(nil),
		(*StreamResponse_Disponents)(nil),
		(*StreamResponse_UnitCreated)(nil),
		(*StreamResponse_UnitDeleted)(nil),
		(*StreamResponse_UnitUpdated)(nil),
		(*StreamResponse_UnitStatus)(nil),
		(*StreamResponse_DispatchCreated)(nil),
		(*StreamResponse_DispatchDeleted)(nil),
		(*StreamResponse_DispatchUpdated)(nil),
		(*StreamResponse_DispatchStatus)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_services_centrum_centrum_proto_rawDesc), len(file_services_centrum_centrum_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_centrum_centrum_proto_goTypes,
		DependencyIndexes: file_services_centrum_centrum_proto_depIdxs,
		MessageInfos:      file_services_centrum_centrum_proto_msgTypes,
	}.Build()
	File_services_centrum_centrum_proto = out.File
	file_services_centrum_centrum_proto_goTypes = nil
	file_services_centrum_centrum_proto_depIdxs = nil
}
