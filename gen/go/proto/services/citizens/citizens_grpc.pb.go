// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: services/citizens/citizens.proto

package citizens

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CitizensService_ListCitizens_FullMethodName      = "/services.citizens.CitizensService/ListCitizens"
	CitizensService_GetUser_FullMethodName           = "/services.citizens.CitizensService/GetUser"
	CitizensService_ListUserActivity_FullMethodName  = "/services.citizens.CitizensService/ListUserActivity"
	CitizensService_SetUserProps_FullMethodName      = "/services.citizens.CitizensService/SetUserProps"
	CitizensService_SetProfilePicture_FullMethodName = "/services.citizens.CitizensService/SetProfilePicture"
	CitizensService_ManageLabels_FullMethodName      = "/services.citizens.CitizensService/ManageLabels"
)

// CitizensServiceClient is the client API for CitizensService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CitizensServiceClient interface {
	// @perm: Attrs=Fields/StringList:[]string{"PhoneNumber", "Licenses", "UserProps.Wanted", "UserProps.Job", "UserProps.TrafficInfractionPoints", "UserProps.OpenFines", "UserProps.BloodType", "UserProps.MugShot", "UserProps.Labels", "UserProps.Email"}
	ListCitizens(ctx context.Context, in *ListCitizensRequest, opts ...grpc.CallOption) (*ListCitizensResponse, error)
	// @perm: Attrs=Jobs/JobGradeList
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"SourceUser", "Own"}
	ListUserActivity(ctx context.Context, in *ListUserActivityRequest, opts ...grpc.CallOption) (*ListUserActivityResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Wanted", "Job", "TrafficInfractionPoints", "MugShot", "Labels"}
	SetUserProps(ctx context.Context, in *SetUserPropsRequest, opts ...grpc.CallOption) (*SetUserPropsResponse, error)
	// @perm: Name=Any
	SetProfilePicture(ctx context.Context, in *SetProfilePictureRequest, opts ...grpc.CallOption) (*SetProfilePictureResponse, error)
	// @perm
	ManageLabels(ctx context.Context, in *ManageLabelsRequest, opts ...grpc.CallOption) (*ManageLabelsResponse, error)
}

type citizensServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCitizensServiceClient(cc grpc.ClientConnInterface) CitizensServiceClient {
	return &citizensServiceClient{cc}
}

func (c *citizensServiceClient) ListCitizens(ctx context.Context, in *ListCitizensRequest, opts ...grpc.CallOption) (*ListCitizensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCitizensResponse)
	err := c.cc.Invoke(ctx, CitizensService_ListCitizens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizensServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, CitizensService_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizensServiceClient) ListUserActivity(ctx context.Context, in *ListUserActivityRequest, opts ...grpc.CallOption) (*ListUserActivityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListUserActivityResponse)
	err := c.cc.Invoke(ctx, CitizensService_ListUserActivity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizensServiceClient) SetUserProps(ctx context.Context, in *SetUserPropsRequest, opts ...grpc.CallOption) (*SetUserPropsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetUserPropsResponse)
	err := c.cc.Invoke(ctx, CitizensService_SetUserProps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizensServiceClient) SetProfilePicture(ctx context.Context, in *SetProfilePictureRequest, opts ...grpc.CallOption) (*SetProfilePictureResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetProfilePictureResponse)
	err := c.cc.Invoke(ctx, CitizensService_SetProfilePicture_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *citizensServiceClient) ManageLabels(ctx context.Context, in *ManageLabelsRequest, opts ...grpc.CallOption) (*ManageLabelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ManageLabelsResponse)
	err := c.cc.Invoke(ctx, CitizensService_ManageLabels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CitizensServiceServer is the server API for CitizensService service.
// All implementations must embed UnimplementedCitizensServiceServer
// for forward compatibility.
type CitizensServiceServer interface {
	// @perm: Attrs=Fields/StringList:[]string{"PhoneNumber", "Licenses", "UserProps.Wanted", "UserProps.Job", "UserProps.TrafficInfractionPoints", "UserProps.OpenFines", "UserProps.BloodType", "UserProps.MugShot", "UserProps.Labels", "UserProps.Email"}
	ListCitizens(context.Context, *ListCitizensRequest) (*ListCitizensResponse, error)
	// @perm: Attrs=Jobs/JobGradeList
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"SourceUser", "Own"}
	ListUserActivity(context.Context, *ListUserActivityRequest) (*ListUserActivityResponse, error)
	// @perm: Attrs=Fields/StringList:[]string{"Wanted", "Job", "TrafficInfractionPoints", "MugShot", "Labels"}
	SetUserProps(context.Context, *SetUserPropsRequest) (*SetUserPropsResponse, error)
	// @perm: Name=Any
	SetProfilePicture(context.Context, *SetProfilePictureRequest) (*SetProfilePictureResponse, error)
	// @perm
	ManageLabels(context.Context, *ManageLabelsRequest) (*ManageLabelsResponse, error)
	mustEmbedUnimplementedCitizensServiceServer()
}

// UnimplementedCitizensServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCitizensServiceServer struct{}

func (UnimplementedCitizensServiceServer) ListCitizens(context.Context, *ListCitizensRequest) (*ListCitizensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCitizens not implemented")
}
func (UnimplementedCitizensServiceServer) GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCitizensServiceServer) ListUserActivity(context.Context, *ListUserActivityRequest) (*ListUserActivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserActivity not implemented")
}
func (UnimplementedCitizensServiceServer) SetUserProps(context.Context, *SetUserPropsRequest) (*SetUserPropsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUserProps not implemented")
}
func (UnimplementedCitizensServiceServer) SetProfilePicture(context.Context, *SetProfilePictureRequest) (*SetProfilePictureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProfilePicture not implemented")
}
func (UnimplementedCitizensServiceServer) ManageLabels(context.Context, *ManageLabelsRequest) (*ManageLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageLabels not implemented")
}
func (UnimplementedCitizensServiceServer) mustEmbedUnimplementedCitizensServiceServer() {}
func (UnimplementedCitizensServiceServer) testEmbeddedByValue()                         {}

// UnsafeCitizensServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CitizensServiceServer will
// result in compilation errors.
type UnsafeCitizensServiceServer interface {
	mustEmbedUnimplementedCitizensServiceServer()
}

func RegisterCitizensServiceServer(s grpc.ServiceRegistrar, srv CitizensServiceServer) {
	// If the following call pancis, it indicates UnimplementedCitizensServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CitizensService_ServiceDesc, srv)
}

func _CitizensService_ListCitizens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCitizensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizensServiceServer).ListCitizens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizensService_ListCitizens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizensServiceServer).ListCitizens(ctx, req.(*ListCitizensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizensService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizensServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizensService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizensServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizensService_ListUserActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserActivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizensServiceServer).ListUserActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizensService_ListUserActivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizensServiceServer).ListUserActivity(ctx, req.(*ListUserActivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizensService_SetUserProps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserPropsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizensServiceServer).SetUserProps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizensService_SetUserProps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizensServiceServer).SetUserProps(ctx, req.(*SetUserPropsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizensService_SetProfilePicture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetProfilePictureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizensServiceServer).SetProfilePicture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizensService_SetProfilePicture_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizensServiceServer).SetProfilePicture(ctx, req.(*SetProfilePictureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CitizensService_ManageLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CitizensServiceServer).ManageLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CitizensService_ManageLabels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CitizensServiceServer).ManageLabels(ctx, req.(*ManageLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CitizensService_ServiceDesc is the grpc.ServiceDesc for CitizensService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CitizensService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.citizens.CitizensService",
	HandlerType: (*CitizensServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCitizens",
			Handler:    _CitizensService_ListCitizens_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CitizensService_GetUser_Handler,
		},
		{
			MethodName: "ListUserActivity",
			Handler:    _CitizensService_ListUserActivity_Handler,
		},
		{
			MethodName: "SetUserProps",
			Handler:    _CitizensService_SetUserProps_Handler,
		},
		{
			MethodName: "SetProfilePicture",
			Handler:    _CitizensService_SetProfilePicture_Handler,
		},
		{
			MethodName: "ManageLabels",
			Handler:    _CitizensService_ManageLabels_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/citizens/citizens.proto",
}
