// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/auth/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRegToken()) != 6 {
		err := CreateAccountRequestValidationError{
			field:  "RegToken",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_CreateAccountRequest_RegToken_Pattern.MatchString(m.GetRegToken()) {
		err := CreateAccountRequestValidationError{
			field:  "RegToken",
			reason: "value does not match regex pattern \"^[0-9]{6}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetUsername()); l < 3 || l > 24 {
		err := CreateAccountRequestValidationError{
			field:  "Username",
			reason: "value length must be between 3 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateAccountRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := CreateAccountRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"(?i)^[0-9A-ZÄÖÜß_-]{3,24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := CreateAccountRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPassword()) > 70 {
		err := CreateAccountRequestValidationError{
			field:  "Password",
			reason: "value length must be at most 70 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

var _CreateAccountRequest_RegToken_Pattern = regexp.MustCompile("^[0-9]{6}$")

var _CreateAccountRequest_Username_Pattern = regexp.MustCompile("(?i)^[0-9A-ZÄÖÜß_-]{3,24}$")

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetUsername()); l < 3 || l > 24 {
		err := LoginRequestValidationError{
			field:  "Username",
			reason: "value length must be between 3 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_LoginRequest_Username_Pattern.MatchString(m.GetUsername()) {
		err := LoginRequestValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"(?i)^[0-9A-ZÄÖÜß_-]{3,24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 6 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPassword()) > 70 {
		err := LoginRequestValidationError{
			field:  "Password",
			reason: "value length must be at most 70 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

var _LoginRequest_Username_Pattern = regexp.MustCompile("(?i)^[0-9A-ZÄÖÜß_-]{3,24}$")

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoginResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoginResponseValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AccountId

	if m.Char != nil {

		if all {
			switch v := interface{}(m.GetChar()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoginResponseValidationError{
						field:  "Char",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoginResponseValidationError{
						field:  "Char",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetChar()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginResponseValidationError{
					field:  "Char",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordRequestMultiError, or nil if none found.
func (m *ChangePasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCurrent()) < 6 {
		err := ChangePasswordRequestValidationError{
			field:  "Current",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetCurrent()) > 70 {
		err := ChangePasswordRequestValidationError{
			field:  "Current",
			reason: "value length must be at most 70 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNew()) < 6 {
		err := ChangePasswordRequestValidationError{
			field:  "New",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNew()) > 70 {
		err := ChangePasswordRequestValidationError{
			field:  "New",
			reason: "value length must be at most 70 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangePasswordRequestMultiError(errors)
	}

	return nil
}

// ChangePasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordRequestMultiError) AllErrors() []error { return m }

// ChangePasswordRequestValidationError is the validation error returned by
// ChangePasswordRequest.Validate if the designated constraints aren't met.
type ChangePasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordRequestValidationError) ErrorName() string {
	return "ChangePasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordRequestValidationError{}

// Validate checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangePasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangePasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangePasswordResponseMultiError, or nil if none found.
func (m *ChangePasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangePasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChangePasswordResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChangePasswordResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangePasswordResponseValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChangePasswordResponseMultiError(errors)
	}

	return nil
}

// ChangePasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ChangePasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangePasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangePasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangePasswordResponseMultiError) AllErrors() []error { return m }

// ChangePasswordResponseValidationError is the validation error returned by
// ChangePasswordResponse.Validate if the designated constraints aren't met.
type ChangePasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangePasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangePasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangePasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangePasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangePasswordResponseValidationError) ErrorName() string {
	return "ChangePasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangePasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangePasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangePasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangePasswordResponseValidationError{}

// Validate checks the field values on ChangeUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeUsernameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeUsernameRequestMultiError, or nil if none found.
func (m *ChangeUsernameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUsernameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCurrent()); l < 3 || l > 24 {
		err := ChangeUsernameRequestValidationError{
			field:  "Current",
			reason: "value length must be between 3 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ChangeUsernameRequest_Current_Pattern.MatchString(m.GetCurrent()) {
		err := ChangeUsernameRequestValidationError{
			field:  "Current",
			reason: "value does not match regex pattern \"(?i)^[0-9A-ZÄÖÜß_-]{3,24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetNew()); l < 3 || l > 24 {
		err := ChangeUsernameRequestValidationError{
			field:  "New",
			reason: "value length must be between 3 and 24 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ChangeUsernameRequest_New_Pattern.MatchString(m.GetNew()) {
		err := ChangeUsernameRequestValidationError{
			field:  "New",
			reason: "value does not match regex pattern \"(?i)^[0-9A-ZÄÖÜß_-]{3,24}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChangeUsernameRequestMultiError(errors)
	}

	return nil
}

// ChangeUsernameRequestMultiError is an error wrapping multiple validation
// errors returned by ChangeUsernameRequest.ValidateAll() if the designated
// constraints aren't met.
type ChangeUsernameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUsernameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUsernameRequestMultiError) AllErrors() []error { return m }

// ChangeUsernameRequestValidationError is the validation error returned by
// ChangeUsernameRequest.Validate if the designated constraints aren't met.
type ChangeUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUsernameRequestValidationError) ErrorName() string {
	return "ChangeUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUsernameRequestValidationError{}

var _ChangeUsernameRequest_Current_Pattern = regexp.MustCompile("(?i)^[0-9A-ZÄÖÜß_-]{3,24}$")

var _ChangeUsernameRequest_New_Pattern = regexp.MustCompile("(?i)^[0-9A-ZÄÖÜß_-]{3,24}$")

// Validate checks the field values on ChangeUsernameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeUsernameResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeUsernameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeUsernameResponseMultiError, or nil if none found.
func (m *ChangeUsernameResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeUsernameResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ChangeUsernameResponseMultiError(errors)
	}

	return nil
}

// ChangeUsernameResponseMultiError is an error wrapping multiple validation
// errors returned by ChangeUsernameResponse.ValidateAll() if the designated
// constraints aren't met.
type ChangeUsernameResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeUsernameResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeUsernameResponseMultiError) AllErrors() []error { return m }

// ChangeUsernameResponseValidationError is the validation error returned by
// ChangeUsernameResponse.Validate if the designated constraints aren't met.
type ChangeUsernameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeUsernameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeUsernameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeUsernameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeUsernameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeUsernameResponseValidationError) ErrorName() string {
	return "ChangeUsernameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeUsernameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeUsernameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeUsernameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeUsernameResponseValidationError{}

// Validate checks the field values on ForgotPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordRequestMultiError, or nil if none found.
func (m *ForgotPasswordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRegToken()) != 6 {
		err := ForgotPasswordRequestValidationError{
			field:  "RegToken",
			reason: "value length must be 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_ForgotPasswordRequest_RegToken_Pattern.MatchString(m.GetRegToken()) {
		err := ForgotPasswordRequestValidationError{
			field:  "RegToken",
			reason: "value does not match regex pattern \"^[0-9]{6}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNew()) < 6 {
		err := ForgotPasswordRequestValidationError{
			field:  "New",
			reason: "value length must be at least 6 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetNew()) > 70 {
		err := ForgotPasswordRequestValidationError{
			field:  "New",
			reason: "value length must be at most 70 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ForgotPasswordRequestMultiError(errors)
	}

	return nil
}

// ForgotPasswordRequestMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordRequest.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordRequestMultiError) AllErrors() []error { return m }

// ForgotPasswordRequestValidationError is the validation error returned by
// ForgotPasswordRequest.Validate if the designated constraints aren't met.
type ForgotPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordRequestValidationError) ErrorName() string {
	return "ForgotPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordRequestValidationError{}

var _ForgotPasswordRequest_RegToken_Pattern = regexp.MustCompile("^[0-9]{6}$")

// Validate checks the field values on ForgotPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ForgotPasswordResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ForgotPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ForgotPasswordResponseMultiError, or nil if none found.
func (m *ForgotPasswordResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ForgotPasswordResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ForgotPasswordResponseMultiError(errors)
	}

	return nil
}

// ForgotPasswordResponseMultiError is an error wrapping multiple validation
// errors returned by ForgotPasswordResponse.ValidateAll() if the designated
// constraints aren't met.
type ForgotPasswordResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ForgotPasswordResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ForgotPasswordResponseMultiError) AllErrors() []error { return m }

// ForgotPasswordResponseValidationError is the validation error returned by
// ForgotPasswordResponse.Validate if the designated constraints aren't met.
type ForgotPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ForgotPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ForgotPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ForgotPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ForgotPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ForgotPasswordResponseValidationError) ErrorName() string {
	return "ForgotPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ForgotPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sForgotPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ForgotPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ForgotPasswordResponseValidationError{}

// Validate checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoRequestMultiError, or nil if none found.
func (m *GetAccountInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAccountInfoRequestMultiError(errors)
	}

	return nil
}

// GetAccountInfoRequestMultiError is an error wrapping multiple validation
// errors returned by GetAccountInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAccountInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoRequestMultiError) AllErrors() []error { return m }

// GetAccountInfoRequestValidationError is the validation error returned by
// GetAccountInfoRequest.Validate if the designated constraints aren't met.
type GetAccountInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoRequestValidationError) ErrorName() string {
	return "GetAccountInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoRequestValidationError{}

// Validate checks the field values on GetAccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAccountInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAccountInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAccountInfoResponseMultiError, or nil if none found.
func (m *GetAccountInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAccountInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAccount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAccountInfoResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAccountInfoResponseValidationError{
					field:  "Account",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAccountInfoResponseValidationError{
				field:  "Account",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetOauth2Providers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountInfoResponseValidationError{
						field:  fmt.Sprintf("Oauth2Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountInfoResponseValidationError{
						field:  fmt.Sprintf("Oauth2Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountInfoResponseValidationError{
					field:  fmt.Sprintf("Oauth2Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOauth2Connections() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAccountInfoResponseValidationError{
						field:  fmt.Sprintf("Oauth2Connections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAccountInfoResponseValidationError{
						field:  fmt.Sprintf("Oauth2Connections[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAccountInfoResponseValidationError{
					field:  fmt.Sprintf("Oauth2Connections[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAccountInfoResponseMultiError(errors)
	}

	return nil
}

// GetAccountInfoResponseMultiError is an error wrapping multiple validation
// errors returned by GetAccountInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAccountInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAccountInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAccountInfoResponseMultiError) AllErrors() []error { return m }

// GetAccountInfoResponseValidationError is the validation error returned by
// GetAccountInfoResponse.Validate if the designated constraints aren't met.
type GetAccountInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAccountInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAccountInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAccountInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAccountInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAccountInfoResponseValidationError) ErrorName() string {
	return "GetAccountInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAccountInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAccountInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAccountInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAccountInfoResponseValidationError{}

// Validate checks the field values on GetCharactersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCharactersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCharactersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCharactersRequestMultiError, or nil if none found.
func (m *GetCharactersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCharactersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCharactersRequestMultiError(errors)
	}

	return nil
}

// GetCharactersRequestMultiError is an error wrapping multiple validation
// errors returned by GetCharactersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCharactersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCharactersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCharactersRequestMultiError) AllErrors() []error { return m }

// GetCharactersRequestValidationError is the validation error returned by
// GetCharactersRequest.Validate if the designated constraints aren't met.
type GetCharactersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCharactersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCharactersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCharactersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCharactersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCharactersRequestValidationError) ErrorName() string {
	return "GetCharactersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCharactersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCharactersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCharactersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCharactersRequestValidationError{}

// Validate checks the field values on GetCharactersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCharactersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCharactersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCharactersResponseMultiError, or nil if none found.
func (m *GetCharactersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCharactersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChars() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCharactersResponseValidationError{
						field:  fmt.Sprintf("Chars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCharactersResponseValidationError{
						field:  fmt.Sprintf("Chars[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCharactersResponseValidationError{
					field:  fmt.Sprintf("Chars[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetCharactersResponseMultiError(errors)
	}

	return nil
}

// GetCharactersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCharactersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCharactersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCharactersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCharactersResponseMultiError) AllErrors() []error { return m }

// GetCharactersResponseValidationError is the validation error returned by
// GetCharactersResponse.Validate if the designated constraints aren't met.
type GetCharactersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCharactersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCharactersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCharactersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCharactersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCharactersResponseValidationError) ErrorName() string {
	return "GetCharactersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCharactersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCharactersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCharactersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCharactersResponseValidationError{}

// Validate checks the field values on ChooseCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChooseCharacterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChooseCharacterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChooseCharacterRequestMultiError, or nil if none found.
func (m *ChooseCharacterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChooseCharacterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetCharId() <= 0 {
		err := ChooseCharacterRequestValidationError{
			field:  "CharId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ChooseCharacterRequestMultiError(errors)
	}

	return nil
}

// ChooseCharacterRequestMultiError is an error wrapping multiple validation
// errors returned by ChooseCharacterRequest.ValidateAll() if the designated
// constraints aren't met.
type ChooseCharacterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChooseCharacterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChooseCharacterRequestMultiError) AllErrors() []error { return m }

// ChooseCharacterRequestValidationError is the validation error returned by
// ChooseCharacterRequest.Validate if the designated constraints aren't met.
type ChooseCharacterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChooseCharacterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChooseCharacterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChooseCharacterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChooseCharacterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChooseCharacterRequestValidationError) ErrorName() string {
	return "ChooseCharacterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChooseCharacterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChooseCharacterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChooseCharacterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChooseCharacterRequestValidationError{}

// Validate checks the field values on ChooseCharacterResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChooseCharacterResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChooseCharacterResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChooseCharacterResponseMultiError, or nil if none found.
func (m *ChooseCharacterResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChooseCharacterResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChooseCharacterResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChooseCharacterResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChooseCharacterResponseValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Username

	if all {
		switch v := interface{}(m.GetJobProps()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChooseCharacterResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChooseCharacterResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobProps()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChooseCharacterResponseValidationError{
				field:  "JobProps",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChooseCharacterResponseValidationError{
					field:  "Char",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChooseCharacterResponseValidationError{
					field:  "Char",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChooseCharacterResponseValidationError{
				field:  "Char",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChooseCharacterResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChooseCharacterResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChooseCharacterResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChooseCharacterResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChooseCharacterResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChooseCharacterResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChooseCharacterResponseMultiError(errors)
	}

	return nil
}

// ChooseCharacterResponseMultiError is an error wrapping multiple validation
// errors returned by ChooseCharacterResponse.ValidateAll() if the designated
// constraints aren't met.
type ChooseCharacterResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChooseCharacterResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChooseCharacterResponseMultiError) AllErrors() []error { return m }

// ChooseCharacterResponseValidationError is the validation error returned by
// ChooseCharacterResponse.Validate if the designated constraints aren't met.
type ChooseCharacterResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChooseCharacterResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChooseCharacterResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChooseCharacterResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChooseCharacterResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChooseCharacterResponseValidationError) ErrorName() string {
	return "ChooseCharacterResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChooseCharacterResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChooseCharacterResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChooseCharacterResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChooseCharacterResponseValidationError{}

// Validate checks the field values on LogoutRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutRequestMultiError, or
// nil if none found.
func (m *LogoutRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LogoutRequestMultiError(errors)
	}

	return nil
}

// LogoutRequestMultiError is an error wrapping multiple validation errors
// returned by LogoutRequest.ValidateAll() if the designated constraints
// aren't met.
type LogoutRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutRequestMultiError) AllErrors() []error { return m }

// LogoutRequestValidationError is the validation error returned by
// LogoutRequest.Validate if the designated constraints aren't met.
type LogoutRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutRequestValidationError) ErrorName() string { return "LogoutRequestValidationError" }

// Error satisfies the builtin error interface
func (e LogoutRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutRequestValidationError{}

// Validate checks the field values on LogoutResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LogoutResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogoutResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LogoutResponseMultiError,
// or nil if none found.
func (m *LogoutResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LogoutResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return LogoutResponseMultiError(errors)
	}

	return nil
}

// LogoutResponseMultiError is an error wrapping multiple validation errors
// returned by LogoutResponse.ValidateAll() if the designated constraints
// aren't met.
type LogoutResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogoutResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogoutResponseMultiError) AllErrors() []error { return m }

// LogoutResponseValidationError is the validation error returned by
// LogoutResponse.Validate if the designated constraints aren't met.
type LogoutResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogoutResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogoutResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogoutResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogoutResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogoutResponseValidationError) ErrorName() string { return "LogoutResponseValidationError" }

// Error satisfies the builtin error interface
func (e LogoutResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogoutResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogoutResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogoutResponseValidationError{}

// Validate checks the field values on DeleteOAuth2ConnectionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuth2ConnectionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuth2ConnectionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOAuth2ConnectionRequestMultiError, or nil if none found.
func (m *DeleteOAuth2ConnectionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuth2ConnectionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProvider()) > 50 {
		err := DeleteOAuth2ConnectionRequestValidationError{
			field:  "Provider",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteOAuth2ConnectionRequestMultiError(errors)
	}

	return nil
}

// DeleteOAuth2ConnectionRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteOAuth2ConnectionRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteOAuth2ConnectionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuth2ConnectionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuth2ConnectionRequestMultiError) AllErrors() []error { return m }

// DeleteOAuth2ConnectionRequestValidationError is the validation error
// returned by DeleteOAuth2ConnectionRequest.Validate if the designated
// constraints aren't met.
type DeleteOAuth2ConnectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuth2ConnectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuth2ConnectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuth2ConnectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuth2ConnectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuth2ConnectionRequestValidationError) ErrorName() string {
	return "DeleteOAuth2ConnectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuth2ConnectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuth2ConnectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuth2ConnectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuth2ConnectionRequestValidationError{}

// Validate checks the field values on DeleteOAuth2ConnectionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOAuth2ConnectionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOAuth2ConnectionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteOAuth2ConnectionResponseMultiError, or nil if none found.
func (m *DeleteOAuth2ConnectionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOAuth2ConnectionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteOAuth2ConnectionResponseMultiError(errors)
	}

	return nil
}

// DeleteOAuth2ConnectionResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOAuth2ConnectionResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteOAuth2ConnectionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOAuth2ConnectionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOAuth2ConnectionResponseMultiError) AllErrors() []error { return m }

// DeleteOAuth2ConnectionResponseValidationError is the validation error
// returned by DeleteOAuth2ConnectionResponse.Validate if the designated
// constraints aren't met.
type DeleteOAuth2ConnectionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOAuth2ConnectionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOAuth2ConnectionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOAuth2ConnectionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOAuth2ConnectionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOAuth2ConnectionResponseValidationError) ErrorName() string {
	return "DeleteOAuth2ConnectionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOAuth2ConnectionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOAuth2ConnectionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOAuth2ConnectionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOAuth2ConnectionResponseValidationError{}

// Validate checks the field values on SetSuperuserModeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuperuserModeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuperuserModeRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuperuserModeRequestMultiError, or nil if none found.
func (m *SetSuperuserModeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuperuserModeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Superuser

	if m.Job != nil {

		if utf8.RuneCountInString(m.GetJob()) > 20 {
			err := SetSuperuserModeRequestValidationError{
				field:  "Job",
				reason: "value length must be at most 20 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SetSuperuserModeRequestMultiError(errors)
	}

	return nil
}

// SetSuperuserModeRequestMultiError is an error wrapping multiple validation
// errors returned by SetSuperuserModeRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSuperuserModeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuperuserModeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuperuserModeRequestMultiError) AllErrors() []error { return m }

// SetSuperuserModeRequestValidationError is the validation error returned by
// SetSuperuserModeRequest.Validate if the designated constraints aren't met.
type SetSuperuserModeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuperuserModeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuperuserModeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuperuserModeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuperuserModeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuperuserModeRequestValidationError) ErrorName() string {
	return "SetSuperuserModeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuperuserModeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuperuserModeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuperuserModeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuperuserModeRequestValidationError{}

// Validate checks the field values on SetSuperuserModeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuperuserModeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuperuserModeResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuperuserModeResponseMultiError, or nil if none found.
func (m *SetSuperuserModeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuperuserModeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetExpires()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSuperuserModeResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSuperuserModeResponseValidationError{
					field:  "Expires",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpires()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSuperuserModeResponseValidationError{
				field:  "Expires",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChar()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SetSuperuserModeResponseValidationError{
					field:  "Char",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SetSuperuserModeResponseValidationError{
					field:  "Char",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChar()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSuperuserModeResponseValidationError{
				field:  "Char",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetSuperuserModeResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetSuperuserModeResponseValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetSuperuserModeResponseValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAttributes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetSuperuserModeResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetSuperuserModeResponseValidationError{
						field:  fmt.Sprintf("Attributes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetSuperuserModeResponseValidationError{
					field:  fmt.Sprintf("Attributes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.JobProps != nil {

		if all {
			switch v := interface{}(m.GetJobProps()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SetSuperuserModeResponseValidationError{
						field:  "JobProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SetSuperuserModeResponseValidationError{
						field:  "JobProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobProps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetSuperuserModeResponseValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SetSuperuserModeResponseMultiError(errors)
	}

	return nil
}

// SetSuperuserModeResponseMultiError is an error wrapping multiple validation
// errors returned by SetSuperuserModeResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSuperuserModeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuperuserModeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuperuserModeResponseMultiError) AllErrors() []error { return m }

// SetSuperuserModeResponseValidationError is the validation error returned by
// SetSuperuserModeResponse.Validate if the designated constraints aren't met.
type SetSuperuserModeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuperuserModeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuperuserModeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuperuserModeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuperuserModeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuperuserModeResponseValidationError) ErrorName() string {
	return "SetSuperuserModeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuperuserModeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuperuserModeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuperuserModeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuperuserModeResponseValidationError{}
