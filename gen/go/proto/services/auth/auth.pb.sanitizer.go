// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: services/auth/auth.proto

package auth

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ChangePasswordRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Current
	m.Current = htmlsanitizer.Sanitize(m.Current)

	// Field: New
	m.New = htmlsanitizer.Sanitize(m.New)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ChangePasswordResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Expires
	if m.Expires != nil {
		if v, ok := any(m.GetExpires()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ChangeUsernameRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Current
	m.Current = htmlsanitizer.Sanitize(m.Current)

	// Field: New
	m.New = htmlsanitizer.Sanitize(m.New)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ChangeUsernameResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ChooseCharacterRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ChooseCharacterResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attributes
	for idx, item := range m.Attributes {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Char
	if m.Char != nil {
		if v, ok := any(m.GetChar()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Expires
	if m.Expires != nil {
		if v, ok := any(m.GetExpires()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: JobProps
	if m.JobProps != nil {
		if v, ok := any(m.GetJobProps()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Permissions
	for idx, item := range m.Permissions {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Username
	m.Username = htmlsanitizer.Sanitize(m.Username)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CreateAccountRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Password
	m.Password = htmlsanitizer.Sanitize(m.Password)

	// Field: RegToken
	m.RegToken = htmlsanitizer.Sanitize(m.RegToken)

	// Field: Username
	m.Username = htmlsanitizer.Sanitize(m.Username)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CreateAccountResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteOAuth2ConnectionRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Provider
	m.Provider = htmlsanitizer.Sanitize(m.Provider)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteOAuth2ConnectionResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ForgotPasswordRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: New
	m.New = htmlsanitizer.Sanitize(m.New)

	// Field: RegToken
	m.RegToken = htmlsanitizer.Sanitize(m.RegToken)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ForgotPasswordResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetAccountInfoRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetAccountInfoResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Account
	if m.Account != nil {
		if v, ok := any(m.GetAccount()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Oauth2Connections
	for idx, item := range m.Oauth2Connections {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Oauth2Providers
	for idx, item := range m.Oauth2Providers {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetCharactersRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *GetCharactersResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Chars
	for idx, item := range m.Chars {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LoginRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Password
	m.Password = htmlsanitizer.Sanitize(m.Password)

	// Field: Username
	m.Username = htmlsanitizer.Sanitize(m.Username)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LoginResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Char
	if m.Char != nil {
		if v, ok := any(m.GetChar()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Expires
	if m.Expires != nil {
		if v, ok := any(m.GetExpires()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LogoutRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LogoutResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SetSuperuserModeRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Job
	if m.Job != nil {
		*m.Job = htmlsanitizer.Sanitize(*m.Job)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SetSuperuserModeResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attributes
	for idx, item := range m.Attributes {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Char
	if m.Char != nil {
		if v, ok := any(m.GetChar()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Expires
	if m.Expires != nil {
		if v, ok := any(m.GetExpires()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: JobProps
	if m.JobProps != nil {
		if v, ok := any(m.GetJobProps()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Permissions
	for idx, item := range m.Permissions {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
