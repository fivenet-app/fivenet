// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: services/filestore/filestore.proto

package filestore

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteFileByPathRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Path
	m.Path = htmlsanitizer.Sanitize(m.Path)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteFileByPathResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListFilesRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Path
	if m.Path != nil {
		*m.Path = htmlsanitizer.Sanitize(*m.Path)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ListFilesResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Files
	for idx, item := range m.Files {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Pagination
	if m.Pagination != nil {
		if v, ok := any(m.GetPagination()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
