// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: services/filestore/filestore.proto

package filestore

import (
	context "context"
	file "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/file"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FilestoreService_Upload_FullMethodName           = "/services.filestore.FilestoreService/Upload"
	FilestoreService_ListFiles_FullMethodName        = "/services.filestore.FilestoreService/ListFiles"
	FilestoreService_DeleteFile_FullMethodName       = "/services.filestore.FilestoreService/DeleteFile"
	FilestoreService_DeleteFileByPath_FullMethodName = "/services.filestore.FilestoreService/DeleteFileByPath"
)

// FilestoreServiceClient is the client API for FilestoreService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilestoreServiceClient interface {
	// @perm: Name=Superuser
	Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse], error)
	// @perm: Name=Superuser
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// @perm: Name=Superuser
	DeleteFile(ctx context.Context, in *file.DeleteFileRequest, opts ...grpc.CallOption) (*file.DeleteFileResponse, error)
	// @perm: Name=Superuser
	DeleteFileByPath(ctx context.Context, in *DeleteFileByPathRequest, opts ...grpc.CallOption) (*DeleteFileByPathResponse, error)
}

type filestoreServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilestoreServiceClient(cc grpc.ClientConnInterface) FilestoreServiceClient {
	return &filestoreServiceClient{cc}
}

func (c *filestoreServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilestoreService_ServiceDesc.Streams[0], FilestoreService_Upload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[file.UploadPacket, file.UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilestoreService_UploadClient = grpc.ClientStreamingClient[file.UploadPacket, file.UploadResponse]

func (c *filestoreServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, FilestoreService_ListFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filestoreServiceClient) DeleteFile(ctx context.Context, in *file.DeleteFileRequest, opts ...grpc.CallOption) (*file.DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(file.DeleteFileResponse)
	err := c.cc.Invoke(ctx, FilestoreService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filestoreServiceClient) DeleteFileByPath(ctx context.Context, in *DeleteFileByPathRequest, opts ...grpc.CallOption) (*DeleteFileByPathResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileByPathResponse)
	err := c.cc.Invoke(ctx, FilestoreService_DeleteFileByPath_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilestoreServiceServer is the server API for FilestoreService service.
// All implementations must embed UnimplementedFilestoreServiceServer
// for forward compatibility.
type FilestoreServiceServer interface {
	// @perm: Name=Superuser
	Upload(grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]) error
	// @perm: Name=Superuser
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// @perm: Name=Superuser
	DeleteFile(context.Context, *file.DeleteFileRequest) (*file.DeleteFileResponse, error)
	// @perm: Name=Superuser
	DeleteFileByPath(context.Context, *DeleteFileByPathRequest) (*DeleteFileByPathResponse, error)
	mustEmbedUnimplementedFilestoreServiceServer()
}

// UnimplementedFilestoreServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilestoreServiceServer struct{}

func (UnimplementedFilestoreServiceServer) Upload(grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedFilestoreServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedFilestoreServiceServer) DeleteFile(context.Context, *file.DeleteFileRequest) (*file.DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFilestoreServiceServer) DeleteFileByPath(context.Context, *DeleteFileByPathRequest) (*DeleteFileByPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileByPath not implemented")
}
func (UnimplementedFilestoreServiceServer) mustEmbedUnimplementedFilestoreServiceServer() {}
func (UnimplementedFilestoreServiceServer) testEmbeddedByValue()                          {}

// UnsafeFilestoreServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilestoreServiceServer will
// result in compilation errors.
type UnsafeFilestoreServiceServer interface {
	mustEmbedUnimplementedFilestoreServiceServer()
}

func RegisterFilestoreServiceServer(s grpc.ServiceRegistrar, srv FilestoreServiceServer) {
	// If the following call pancis, it indicates UnimplementedFilestoreServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FilestoreService_ServiceDesc, srv)
}

func _FilestoreService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilestoreServiceServer).Upload(&grpc.GenericServerStream[file.UploadPacket, file.UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilestoreService_UploadServer = grpc.ClientStreamingServer[file.UploadPacket, file.UploadResponse]

func _FilestoreService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilestoreService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilestoreService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(file.DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilestoreService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServiceServer).DeleteFile(ctx, req.(*file.DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilestoreService_DeleteFileByPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileByPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilestoreServiceServer).DeleteFileByPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilestoreService_DeleteFileByPath_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilestoreServiceServer).DeleteFileByPath(ctx, req.(*DeleteFileByPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilestoreService_ServiceDesc is the grpc.ServiceDesc for FilestoreService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilestoreService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.filestore.FilestoreService",
	HandlerType: (*FilestoreServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListFiles",
			Handler:    _FilestoreService_ListFiles_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FilestoreService_DeleteFile_Handler,
		},
		{
			MethodName: "DeleteFileByPath",
			Handler:    _FilestoreService_DeleteFileByPath_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FilestoreService_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "services/filestore/filestore.proto",
}
