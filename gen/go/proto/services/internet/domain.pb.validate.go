// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: services/internet/domain.proto

package internet

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListTLDsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTLDsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTLDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTLDsRequestMultiError, or nil if none found.
func (m *ListTLDsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTLDsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Internal != nil {
		// no validation rules for Internal
	}

	if len(errors) > 0 {
		return ListTLDsRequestMultiError(errors)
	}

	return nil
}

// ListTLDsRequestMultiError is an error wrapping multiple validation errors
// returned by ListTLDsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListTLDsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTLDsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTLDsRequestMultiError) AllErrors() []error { return m }

// ListTLDsRequestValidationError is the validation error returned by
// ListTLDsRequest.Validate if the designated constraints aren't met.
type ListTLDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTLDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTLDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTLDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTLDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTLDsRequestValidationError) ErrorName() string { return "ListTLDsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTLDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTLDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTLDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTLDsRequestValidationError{}

// Validate checks the field values on ListTLDsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListTLDsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListTLDsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListTLDsResponseMultiError, or nil if none found.
func (m *ListTLDsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListTLDsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetTlds() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListTLDsResponseValidationError{
						field:  fmt.Sprintf("Tlds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListTLDsResponseValidationError{
						field:  fmt.Sprintf("Tlds[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTLDsResponseValidationError{
					field:  fmt.Sprintf("Tlds[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListTLDsResponseMultiError(errors)
	}

	return nil
}

// ListTLDsResponseMultiError is an error wrapping multiple validation errors
// returned by ListTLDsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListTLDsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListTLDsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListTLDsResponseMultiError) AllErrors() []error { return m }

// ListTLDsResponseValidationError is the validation error returned by
// ListTLDsResponse.Validate if the designated constraints aren't met.
type ListTLDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTLDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTLDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTLDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTLDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTLDsResponseValidationError) ErrorName() string { return "ListTLDsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListTLDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTLDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTLDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTLDsResponseValidationError{}

// Validate checks the field values on CheckDomainAvailabilityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckDomainAvailabilityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckDomainAvailabilityRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckDomainAvailabilityRequestMultiError, or nil if none found.
func (m *CheckDomainAvailabilityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckDomainAvailabilityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TldId

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
		err := CheckDomainAvailabilityRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckDomainAvailabilityRequestMultiError(errors)
	}

	return nil
}

// CheckDomainAvailabilityRequestMultiError is an error wrapping multiple
// validation errors returned by CheckDomainAvailabilityRequest.ValidateAll()
// if the designated constraints aren't met.
type CheckDomainAvailabilityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckDomainAvailabilityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckDomainAvailabilityRequestMultiError) AllErrors() []error { return m }

// CheckDomainAvailabilityRequestValidationError is the validation error
// returned by CheckDomainAvailabilityRequest.Validate if the designated
// constraints aren't met.
type CheckDomainAvailabilityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckDomainAvailabilityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckDomainAvailabilityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckDomainAvailabilityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckDomainAvailabilityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckDomainAvailabilityRequestValidationError) ErrorName() string {
	return "CheckDomainAvailabilityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckDomainAvailabilityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckDomainAvailabilityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckDomainAvailabilityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckDomainAvailabilityRequestValidationError{}

// Validate checks the field values on CheckDomainAvailabilityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckDomainAvailabilityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckDomainAvailabilityResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CheckDomainAvailabilityResponseMultiError, or nil if none found.
func (m *CheckDomainAvailabilityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckDomainAvailabilityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Available

	if m.Transferable != nil {
		// no validation rules for Transferable
	}

	if len(errors) > 0 {
		return CheckDomainAvailabilityResponseMultiError(errors)
	}

	return nil
}

// CheckDomainAvailabilityResponseMultiError is an error wrapping multiple
// validation errors returned by CheckDomainAvailabilityResponse.ValidateAll()
// if the designated constraints aren't met.
type CheckDomainAvailabilityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckDomainAvailabilityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckDomainAvailabilityResponseMultiError) AllErrors() []error { return m }

// CheckDomainAvailabilityResponseValidationError is the validation error
// returned by CheckDomainAvailabilityResponse.Validate if the designated
// constraints aren't met.
type CheckDomainAvailabilityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckDomainAvailabilityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckDomainAvailabilityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckDomainAvailabilityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckDomainAvailabilityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckDomainAvailabilityResponseValidationError) ErrorName() string {
	return "CheckDomainAvailabilityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CheckDomainAvailabilityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckDomainAvailabilityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckDomainAvailabilityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckDomainAvailabilityResponseValidationError{}

// Validate checks the field values on RegisterDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDomainRequestMultiError, or nil if none found.
func (m *RegisterDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TldId

	if l := utf8.RuneCountInString(m.GetName()); l < 3 || l > 60 {
		err := RegisterDomainRequestValidationError{
			field:  "Name",
			reason: "value length must be between 3 and 60 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.TransferCode != nil {

		if utf8.RuneCountInString(m.GetTransferCode()) != 10 {
			err := RegisterDomainRequestValidationError{
				field:  "TransferCode",
				reason: "value length must be 10 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

		if !_RegisterDomainRequest_TransferCode_Pattern.MatchString(m.GetTransferCode()) {
			err := RegisterDomainRequestValidationError{
				field:  "TransferCode",
				reason: "value does not match regex pattern \"^[0-9A-Z]{6}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return RegisterDomainRequestMultiError(errors)
	}

	return nil
}

// RegisterDomainRequestMultiError is an error wrapping multiple validation
// errors returned by RegisterDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type RegisterDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDomainRequestMultiError) AllErrors() []error { return m }

// RegisterDomainRequestValidationError is the validation error returned by
// RegisterDomainRequest.Validate if the designated constraints aren't met.
type RegisterDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDomainRequestValidationError) ErrorName() string {
	return "RegisterDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDomainRequestValidationError{}

var _RegisterDomainRequest_TransferCode_Pattern = regexp.MustCompile("^[0-9A-Z]{6}$")

// Validate checks the field values on RegisterDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RegisterDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RegisterDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RegisterDomainResponseMultiError, or nil if none found.
func (m *RegisterDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RegisterDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RegisterDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RegisterDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegisterDomainResponseValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RegisterDomainResponseMultiError(errors)
	}

	return nil
}

// RegisterDomainResponseMultiError is an error wrapping multiple validation
// errors returned by RegisterDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type RegisterDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegisterDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegisterDomainResponseMultiError) AllErrors() []error { return m }

// RegisterDomainResponseValidationError is the validation error returned by
// RegisterDomainResponse.Validate if the designated constraints aren't met.
type RegisterDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegisterDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegisterDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegisterDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegisterDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegisterDomainResponseValidationError) ErrorName() string {
	return "RegisterDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegisterDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegisterDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegisterDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegisterDomainResponseValidationError{}

// Validate checks the field values on ListDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDomainsRequestMultiError, or nil if none found.
func (m *ListDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDomainsRequestValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDomainsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDomainsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDomainsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDomainsRequestMultiError(errors)
	}

	return nil
}

// ListDomainsRequestMultiError is an error wrapping multiple validation errors
// returned by ListDomainsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDomainsRequestMultiError) AllErrors() []error { return m }

// ListDomainsRequestValidationError is the validation error returned by
// ListDomainsRequest.Validate if the designated constraints aren't met.
type ListDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDomainsRequestValidationError) ErrorName() string {
	return "ListDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDomainsRequestValidationError{}

// Validate checks the field values on ListDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDomainsResponseMultiError, or nil if none found.
func (m *ListDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPagination() == nil {
		err := ListDomainsResponseValidationError{
			field:  "Pagination",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDomainsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDomainsResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDomainsResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDomainsResponseValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDomainsResponseMultiError(errors)
	}

	return nil
}

// ListDomainsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDomainsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDomainsResponseMultiError) AllErrors() []error { return m }

// ListDomainsResponseValidationError is the validation error returned by
// ListDomainsResponse.Validate if the designated constraints aren't met.
type ListDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDomainsResponseValidationError) ErrorName() string {
	return "ListDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDomainsResponseValidationError{}

// Validate checks the field values on UpdateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainRequestMultiError, or nil if none found.
func (m *UpdateDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DomainId

	// no validation rules for Transferable

	if len(errors) > 0 {
		return UpdateDomainRequestMultiError(errors)
	}

	return nil
}

// UpdateDomainRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainRequestMultiError) AllErrors() []error { return m }

// UpdateDomainRequestValidationError is the validation error returned by
// UpdateDomainRequest.Validate if the designated constraints aren't met.
type UpdateDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainRequestValidationError) ErrorName() string {
	return "UpdateDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainRequestValidationError{}

// Validate checks the field values on UpdateDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDomainResponseMultiError, or nil if none found.
func (m *UpdateDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDomain()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateDomainResponseValidationError{
					field:  "Domain",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDomain()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDomainResponseValidationError{
				field:  "Domain",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateDomainResponseMultiError(errors)
	}

	return nil
}

// UpdateDomainResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateDomainResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDomainResponseMultiError) AllErrors() []error { return m }

// UpdateDomainResponseValidationError is the validation error returned by
// UpdateDomainResponse.Validate if the designated constraints aren't met.
type UpdateDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainResponseValidationError) ErrorName() string {
	return "UpdateDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainResponseValidationError{}
