// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/wiki/activity.proto

package wiki

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageAccessJobsDiff) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ToCreate
	for idx, item := range m.ToCreate {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: ToDelete
	for idx, item := range m.ToDelete {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: ToUpdate
	for idx, item := range m.ToUpdate {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageAccessUpdated) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Jobs
	if m.Jobs != nil {
		if v, ok := any(m.GetJobs()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Users
	if m.Users != nil {
		if v, ok := any(m.GetUsers()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageAccessUsersDiff) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ToCreate
	for idx, item := range m.ToCreate {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: ToDelete
	for idx, item := range m.ToDelete {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: ToUpdate
	for idx, item := range m.ToUpdate {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageActivity) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatorJob
	m.CreatorJob = htmlsanitizer.Sanitize(m.CreatorJob)

	// Field: CreatorJobLabel
	if m.CreatorJobLabel != nil {
		*m.CreatorJobLabel = htmlsanitizer.Sanitize(*m.CreatorJobLabel)
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Reason
	if m.Reason != nil {
		*m.Reason = htmlsanitizer.Sanitize(*m.Reason)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageActivityData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AccessUpdated
	switch v := m.Data.(type) {

	case *PageActivityData_AccessUpdated:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Updated
	case *PageActivityData_Updated:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageFilesChange) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PageUpdated) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ContentDiff
	if m.ContentDiff != nil {
		*m.ContentDiff = htmlsanitizer.Sanitize(*m.ContentDiff)
	}

	// Field: DescriptionDiff
	if m.DescriptionDiff != nil {
		*m.DescriptionDiff = htmlsanitizer.Sanitize(*m.DescriptionDiff)
	}

	// Field: FilesChange
	if m.FilesChange != nil {
		if v, ok := any(m.GetFilesChange()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: TitleDiff
	if m.TitleDiff != nil {
		*m.TitleDiff = htmlsanitizer.Sanitize(*m.TitleDiff)
	}

	return nil
}
