// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/mailer/events.proto

package mailer

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *MailerEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: EmailSettingsUpdated
	switch v := m.Data.(type) {

	case *MailerEvent_EmailSettingsUpdated:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: EmailUpdate
	case *MailerEvent_EmailUpdate:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: MessageUpdate
	case *MailerEvent_MessageUpdate:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: ThreadStateUpdate
	case *MailerEvent_ThreadStateUpdate:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: ThreadUpdate
	case *MailerEvent_ThreadUpdate:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
