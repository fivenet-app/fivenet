// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/userinfo/user_info.proto

package userinfo

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInfoMultiError, or nil
// if none found.
func (m *UserInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for AccountId

	// no validation rules for License

	// no validation rules for UserId

	// no validation rules for Job

	// no validation rules for JobGrade

	// no validation rules for Group

	// no validation rules for CanBeSuperuser

	// no validation rules for Superuser

	if m.LastChar != nil {
		// no validation rules for LastChar
	}

	if m.OverrideJob != nil {
		// no validation rules for OverrideJob
	}

	if m.OverrideJobGrade != nil {
		// no validation rules for OverrideJobGrade
	}

	if len(errors) > 0 {
		return UserInfoMultiError(errors)
	}

	return nil
}

// UserInfoMultiError is an error wrapping multiple validation errors returned
// by UserInfo.ValidateAll() if the designated constraints aren't met.
type UserInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoMultiError) AllErrors() []error { return m }

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on PollReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PollReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PollReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PollReqMultiError, or nil if none found.
func (m *PollReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PollReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for UserId

	if len(errors) > 0 {
		return PollReqMultiError(errors)
	}

	return nil
}

// PollReqMultiError is an error wrapping multiple validation errors returned
// by PollReq.ValidateAll() if the designated constraints aren't met.
type PollReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PollReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PollReqMultiError) AllErrors() []error { return m }

// PollReqValidationError is the validation error returned by PollReq.Validate
// if the designated constraints aren't met.
type PollReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PollReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PollReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PollReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PollReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PollReqValidationError) ErrorName() string { return "PollReqValidationError" }

// Error satisfies the builtin error interface
func (e PollReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPollReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PollReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PollReqValidationError{}

// Validate checks the field values on UserInfoChanged with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserInfoChanged) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoChanged with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoChangedMultiError, or nil if none found.
func (m *UserInfoChanged) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoChanged) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccountId

	// no validation rules for UserId

	// no validation rules for OldJob

	// no validation rules for NewJob

	// no validation rules for OldJobGrade

	// no validation rules for NewJobGrade

	if all {
		switch v := interface{}(m.GetChangedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserInfoChangedValidationError{
					field:  "ChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserInfoChangedValidationError{
					field:  "ChangedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChangedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoChangedValidationError{
				field:  "ChangedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.NewJobLabel != nil {
		// no validation rules for NewJobLabel
	}

	if m.NewJobGradeLabel != nil {
		// no validation rules for NewJobGradeLabel
	}

	if len(errors) > 0 {
		return UserInfoChangedMultiError(errors)
	}

	return nil
}

// UserInfoChangedMultiError is an error wrapping multiple validation errors
// returned by UserInfoChanged.ValidateAll() if the designated constraints
// aren't met.
type UserInfoChangedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoChangedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoChangedMultiError) AllErrors() []error { return m }

// UserInfoChangedValidationError is the validation error returned by
// UserInfoChanged.Validate if the designated constraints aren't met.
type UserInfoChangedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoChangedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoChangedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoChangedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoChangedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoChangedValidationError) ErrorName() string { return "UserInfoChangedValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoChangedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoChanged.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoChangedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoChangedValidationError{}
