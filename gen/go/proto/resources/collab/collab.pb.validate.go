// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/collab/collab.proto

package collab

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClientPacket with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientPacket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientPacket with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientPacketMultiError, or
// nil if none found.
func (m *ClientPacket) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientPacket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofMsgPresent := false
	switch v := m.Msg.(type) {
	case *ClientPacket_Hello:
		if v == nil {
			err := ClientPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetHello()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "Hello",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "Hello",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHello()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientPacketValidationError{
					field:  "Hello",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ClientPacket_SyncStep:
		if v == nil {
			err := ClientPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetSyncStep()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "SyncStep",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "SyncStep",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSyncStep()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientPacketValidationError{
					field:  "SyncStep",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ClientPacket_YjsUpdate:
		if v == nil {
			err := ClientPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetYjsUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "YjsUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "YjsUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetYjsUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientPacketValidationError{
					field:  "YjsUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ClientPacket_Awareness:
		if v == nil {
			err := ClientPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetAwareness()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "Awareness",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ClientPacketValidationError{
						field:  "Awareness",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwareness()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ClientPacketValidationError{
					field:  "Awareness",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofMsgPresent {
		err := ClientPacketValidationError{
			field:  "Msg",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClientPacketMultiError(errors)
	}

	return nil
}

// ClientPacketMultiError is an error wrapping multiple validation errors
// returned by ClientPacket.ValidateAll() if the designated constraints aren't met.
type ClientPacketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientPacketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientPacketMultiError) AllErrors() []error { return m }

// ClientPacketValidationError is the validation error returned by
// ClientPacket.Validate if the designated constraints aren't met.
type ClientPacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientPacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientPacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientPacketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientPacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientPacketValidationError) ErrorName() string { return "ClientPacketValidationError" }

// Error satisfies the builtin error interface
func (e ClientPacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientPacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientPacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientPacketValidationError{}

// Validate checks the field values on CollabInit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CollabInit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollabInit with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CollabInitMultiError, or
// nil if none found.
func (m *CollabInit) ValidateAll() error {
	return m.validate(true)
}

func (m *CollabInit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetId() <= 0 {
		err := CollabInitValidationError{
			field:  "TargetId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CollabInitMultiError(errors)
	}

	return nil
}

// CollabInitMultiError is an error wrapping multiple validation errors
// returned by CollabInit.ValidateAll() if the designated constraints aren't met.
type CollabInitMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollabInitMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollabInitMultiError) AllErrors() []error { return m }

// CollabInitValidationError is the validation error returned by
// CollabInit.Validate if the designated constraints aren't met.
type CollabInitValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollabInitValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollabInitValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollabInitValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollabInitValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollabInitValidationError) ErrorName() string { return "CollabInitValidationError" }

// Error satisfies the builtin error interface
func (e CollabInitValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollabInit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollabInitValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollabInitValidationError{}

// Validate checks the field values on SyncStep with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SyncStep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SyncStep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SyncStepMultiError, or nil
// if none found.
func (m *SyncStep) ValidateAll() error {
	return m.validate(true)
}

func (m *SyncStep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _SyncStep_Step_InLookup[m.GetStep()]; !ok {
		err := SyncStepValidationError{
			field:  "Step",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Data

	if m.ReceiverId != nil {

		if m.GetReceiverId() <= 0 {
			err := SyncStepValidationError{
				field:  "ReceiverId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return SyncStepMultiError(errors)
	}

	return nil
}

// SyncStepMultiError is an error wrapping multiple validation errors returned
// by SyncStep.ValidateAll() if the designated constraints aren't met.
type SyncStepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SyncStepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SyncStepMultiError) AllErrors() []error { return m }

// SyncStepValidationError is the validation error returned by
// SyncStep.Validate if the designated constraints aren't met.
type SyncStepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SyncStepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SyncStepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SyncStepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SyncStepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SyncStepValidationError) ErrorName() string { return "SyncStepValidationError" }

// Error satisfies the builtin error interface
func (e SyncStepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSyncStep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SyncStepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SyncStepValidationError{}

var _SyncStep_Step_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on YjsUpdate with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *YjsUpdate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on YjsUpdate with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in YjsUpdateMultiError, or nil
// if none found.
func (m *YjsUpdate) ValidateAll() error {
	return m.validate(true)
}

func (m *YjsUpdate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return YjsUpdateMultiError(errors)
	}

	return nil
}

// YjsUpdateMultiError is an error wrapping multiple validation errors returned
// by YjsUpdate.ValidateAll() if the designated constraints aren't met.
type YjsUpdateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m YjsUpdateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m YjsUpdateMultiError) AllErrors() []error { return m }

// YjsUpdateValidationError is the validation error returned by
// YjsUpdate.Validate if the designated constraints aren't met.
type YjsUpdateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e YjsUpdateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e YjsUpdateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e YjsUpdateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e YjsUpdateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e YjsUpdateValidationError) ErrorName() string { return "YjsUpdateValidationError" }

// Error satisfies the builtin error interface
func (e YjsUpdateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sYjsUpdate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = YjsUpdateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = YjsUpdateValidationError{}

// Validate checks the field values on AwarenessPing with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AwarenessPing) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AwarenessPing with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AwarenessPingMultiError, or
// nil if none found.
func (m *AwarenessPing) ValidateAll() error {
	return m.validate(true)
}

func (m *AwarenessPing) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Data

	if len(errors) > 0 {
		return AwarenessPingMultiError(errors)
	}

	return nil
}

// AwarenessPingMultiError is an error wrapping multiple validation errors
// returned by AwarenessPing.ValidateAll() if the designated constraints
// aren't met.
type AwarenessPingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AwarenessPingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AwarenessPingMultiError) AllErrors() []error { return m }

// AwarenessPingValidationError is the validation error returned by
// AwarenessPing.Validate if the designated constraints aren't met.
type AwarenessPingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AwarenessPingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AwarenessPingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AwarenessPingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AwarenessPingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AwarenessPingValidationError) ErrorName() string { return "AwarenessPingValidationError" }

// Error satisfies the builtin error interface
func (e AwarenessPingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAwarenessPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AwarenessPingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AwarenessPingValidationError{}

// Validate checks the field values on ServerPacket with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ServerPacket) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ServerPacket with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ServerPacketMultiError, or
// nil if none found.
func (m *ServerPacket) ValidateAll() error {
	return m.validate(true)
}

func (m *ServerPacket) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSenderId() <= 0 {
		err := ServerPacketValidationError{
			field:  "SenderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	oneofMsgPresent := false
	switch v := m.Msg.(type) {
	case *ServerPacket_Handshake:
		if v == nil {
			err := ServerPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetHandshake()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "Handshake",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "Handshake",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetHandshake()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerPacketValidationError{
					field:  "Handshake",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerPacket_SyncStep:
		if v == nil {
			err := ServerPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetSyncStep()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "SyncStep",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "SyncStep",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSyncStep()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerPacketValidationError{
					field:  "SyncStep",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerPacket_YjsUpdate:
		if v == nil {
			err := ServerPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetYjsUpdate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "YjsUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "YjsUpdate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetYjsUpdate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerPacketValidationError{
					field:  "YjsUpdate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerPacket_Awareness:
		if v == nil {
			err := ServerPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetAwareness()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "Awareness",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "Awareness",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAwareness()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerPacketValidationError{
					field:  "Awareness",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ServerPacket_TargetSaved:
		if v == nil {
			err := ServerPacketValidationError{
				field:  "Msg",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofMsgPresent = true

		if all {
			switch v := interface{}(m.GetTargetSaved()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "TargetSaved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ServerPacketValidationError{
						field:  "TargetSaved",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetSaved()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServerPacketValidationError{
					field:  "TargetSaved",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofMsgPresent {
		err := ServerPacketValidationError{
			field:  "Msg",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ServerPacketMultiError(errors)
	}

	return nil
}

// ServerPacketMultiError is an error wrapping multiple validation errors
// returned by ServerPacket.ValidateAll() if the designated constraints aren't met.
type ServerPacketMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServerPacketMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServerPacketMultiError) AllErrors() []error { return m }

// ServerPacketValidationError is the validation error returned by
// ServerPacket.Validate if the designated constraints aren't met.
type ServerPacketValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServerPacketValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServerPacketValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServerPacketValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServerPacketValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServerPacketValidationError) ErrorName() string { return "ServerPacketValidationError" }

// Error satisfies the builtin error interface
func (e ServerPacketValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServerPacket.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServerPacketValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServerPacketValidationError{}

// Validate checks the field values on CollabHandshake with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CollabHandshake) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CollabHandshake with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CollabHandshakeMultiError, or nil if none found.
func (m *CollabHandshake) ValidateAll() error {
	return m.validate(true)
}

func (m *CollabHandshake) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ClientId

	// no validation rules for First

	if len(errors) > 0 {
		return CollabHandshakeMultiError(errors)
	}

	return nil
}

// CollabHandshakeMultiError is an error wrapping multiple validation errors
// returned by CollabHandshake.ValidateAll() if the designated constraints
// aren't met.
type CollabHandshakeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CollabHandshakeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CollabHandshakeMultiError) AllErrors() []error { return m }

// CollabHandshakeValidationError is the validation error returned by
// CollabHandshake.Validate if the designated constraints aren't met.
type CollabHandshakeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CollabHandshakeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CollabHandshakeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CollabHandshakeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CollabHandshakeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CollabHandshakeValidationError) ErrorName() string { return "CollabHandshakeValidationError" }

// Error satisfies the builtin error interface
func (e CollabHandshakeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCollabHandshake.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CollabHandshakeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CollabHandshakeValidationError{}

// Validate checks the field values on TargetSaved with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TargetSaved) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TargetSaved with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TargetSavedMultiError, or
// nil if none found.
func (m *TargetSaved) ValidateAll() error {
	return m.validate(true)
}

func (m *TargetSaved) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetId() <= 0 {
		err := TargetSavedValidationError{
			field:  "TargetId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TargetSavedMultiError(errors)
	}

	return nil
}

// TargetSavedMultiError is an error wrapping multiple validation errors
// returned by TargetSaved.ValidateAll() if the designated constraints aren't met.
type TargetSavedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TargetSavedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TargetSavedMultiError) AllErrors() []error { return m }

// TargetSavedValidationError is the validation error returned by
// TargetSaved.Validate if the designated constraints aren't met.
type TargetSavedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TargetSavedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TargetSavedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TargetSavedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TargetSavedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TargetSavedValidationError) ErrorName() string { return "TargetSavedValidationError" }

// Error satisfies the builtin error interface
func (e TargetSavedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTargetSaved.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TargetSavedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TargetSavedValidationError{}
