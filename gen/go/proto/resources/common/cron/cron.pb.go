// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: resources/common/cron/cron.proto

package cron

import (
	timestamp "github.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// States of Cronjbo
type CronjobState int32

const (
	CronjobState_CRONJOB_STATE_UNSPECIFIED CronjobState = 0
	CronjobState_CRONJOB_STATE_WAITING     CronjobState = 1
	CronjobState_CRONJOB_STATE_PENDING     CronjobState = 2
	CronjobState_CRONJOB_STATE_RUNNING     CronjobState = 3
)

// Enum value maps for CronjobState.
var (
	CronjobState_name = map[int32]string{
		0: "CRONJOB_STATE_UNSPECIFIED",
		1: "CRONJOB_STATE_WAITING",
		2: "CRONJOB_STATE_PENDING",
		3: "CRONJOB_STATE_RUNNING",
	}
	CronjobState_value = map[string]int32{
		"CRONJOB_STATE_UNSPECIFIED": 0,
		"CRONJOB_STATE_WAITING":     1,
		"CRONJOB_STATE_PENDING":     2,
		"CRONJOB_STATE_RUNNING":     3,
	}
)

func (x CronjobState) Enum() *CronjobState {
	p := new(CronjobState)
	*p = x
	return p
}

func (x CronjobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CronjobState) Descriptor() protoreflect.EnumDescriptor {
	return file_resources_common_cron_cron_proto_enumTypes[0].Descriptor()
}

func (CronjobState) Type() protoreflect.EnumType {
	return &file_resources_common_cron_cron_proto_enumTypes[0]
}

func (x CronjobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CronjobState.Descriptor instead.
func (CronjobState) EnumDescriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{0}
}

type Cronjob struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cronjob name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cron schedule expression
	// For available valid expressions, see [adhocore/gronx - Cron Expressions Documentation](https://github.com/adhocore/gronx/blob/fea40e3e90e70476877cfb9b50fac10c7de41c5c/README.md#cron-expression).
	//
	// To generate Cronjob schedule expressions, you can also use web tools like https://crontab.guru/.
	Schedule string `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// Cronjob state
	State CronjobState `protobuf:"varint,3,opt,name=state,proto3,enum=resources.common.cron.CronjobState" json:"state,omitempty"`
	// Next time the cronjob should be run
	NextScheduleTime *timestamp.Timestamp `protobuf:"bytes,4,opt,name=next_schedule_time,json=nextScheduleTime,proto3" json:"next_schedule_time,omitempty"`
	// Last attempted start time of Cronjob
	LastAttemptTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=last_attempt_time,json=lastAttemptTime,proto3,oneof" json:"last_attempt_time,omitempty"`
	// Time current cronjob was started
	StartedTime *timestamp.Timestamp `protobuf:"bytes,6,opt,name=started_time,json=startedTime,proto3,oneof" json:"started_time,omitempty"`
	// Optional timeout for cronjob execution
	Timeout *durationpb.Duration `protobuf:"bytes,7,opt,name=timeout,proto3,oneof" json:"timeout,omitempty"`
	// Cronjob data
	Data *CronjobData `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	// Last event info to ease debugging and tracking
	LastCompletedEvent *CronjobCompletedEvent `protobuf:"bytes,9,opt,name=last_completed_event,json=lastCompletedEvent,proto3,oneof" json:"last_completed_event,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Cronjob) Reset() {
	*x = Cronjob{}
	mi := &file_resources_common_cron_cron_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cronjob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cronjob) ProtoMessage() {}

func (x *Cronjob) ProtoReflect() protoreflect.Message {
	mi := &file_resources_common_cron_cron_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cronjob.ProtoReflect.Descriptor instead.
func (*Cronjob) Descriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{0}
}

func (x *Cronjob) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cronjob) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *Cronjob) GetState() CronjobState {
	if x != nil {
		return x.State
	}
	return CronjobState_CRONJOB_STATE_UNSPECIFIED
}

func (x *Cronjob) GetNextScheduleTime() *timestamp.Timestamp {
	if x != nil {
		return x.NextScheduleTime
	}
	return nil
}

func (x *Cronjob) GetLastAttemptTime() *timestamp.Timestamp {
	if x != nil {
		return x.LastAttemptTime
	}
	return nil
}

func (x *Cronjob) GetStartedTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *Cronjob) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *Cronjob) GetData() *CronjobData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Cronjob) GetLastCompletedEvent() *CronjobCompletedEvent {
	if x != nil {
		return x.LastCompletedEvent
	}
	return nil
}

type CronjobData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UpdatedAt     *timestamp.Timestamp   `protobuf:"bytes,1,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Data          *anypb.Any             `protobuf:"bytes,2,opt,name=data,proto3,oneof" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronjobData) Reset() {
	*x = CronjobData{}
	mi := &file_resources_common_cron_cron_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronjobData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobData) ProtoMessage() {}

func (x *CronjobData) ProtoReflect() protoreflect.Message {
	mi := &file_resources_common_cron_cron_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobData.ProtoReflect.Descriptor instead.
func (*CronjobData) Descriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{1}
}

func (x *CronjobData) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *CronjobData) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

type CronjobLockOwnerState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Hostname of the agent the cronjob is running on
	Hostname      string               `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	UpdatedAt     *timestamp.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronjobLockOwnerState) Reset() {
	*x = CronjobLockOwnerState{}
	mi := &file_resources_common_cron_cron_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronjobLockOwnerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobLockOwnerState) ProtoMessage() {}

func (x *CronjobLockOwnerState) ProtoReflect() protoreflect.Message {
	mi := &file_resources_common_cron_cron_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobLockOwnerState.ProtoReflect.Descriptor instead.
func (*CronjobLockOwnerState) Descriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{2}
}

func (x *CronjobLockOwnerState) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CronjobLockOwnerState) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CronjobSchedulerEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Full Cronjob spec
	Cronjob       *Cronjob `protobuf:"bytes,1,opt,name=cronjob,proto3" json:"cronjob,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronjobSchedulerEvent) Reset() {
	*x = CronjobSchedulerEvent{}
	mi := &file_resources_common_cron_cron_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronjobSchedulerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobSchedulerEvent) ProtoMessage() {}

func (x *CronjobSchedulerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_resources_common_cron_cron_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobSchedulerEvent.ProtoReflect.Descriptor instead.
func (*CronjobSchedulerEvent) Descriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{3}
}

func (x *CronjobSchedulerEvent) GetCronjob() *Cronjob {
	if x != nil {
		return x.Cronjob
	}
	return nil
}

type CronjobCompletedEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cronjob name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cronjob execution success status
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// Cronjob execution was cancelled
	Cancelled bool `protobuf:"varint,7,opt,name=cancelled,proto3" json:"cancelled,omitempty"`
	// Cronjob end time
	EndDate *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Cronjob execution time/elapsed time
	Elapsed *durationpb.Duration `protobuf:"bytes,4,opt,name=elapsed,proto3" json:"elapsed,omitempty"`
	// Cronjob data (can be empty if not touched by the Cronjob handler)
	Data *CronjobData `protobuf:"bytes,5,opt,name=data,proto3,oneof" json:"data,omitempty"`
	// Name of the node where the cronjob was executed
	NodeName string `protobuf:"bytes,6,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// Error message (if success = false)
	ErrorMessage  *string `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CronjobCompletedEvent) Reset() {
	*x = CronjobCompletedEvent{}
	mi := &file_resources_common_cron_cron_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CronjobCompletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CronjobCompletedEvent) ProtoMessage() {}

func (x *CronjobCompletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_resources_common_cron_cron_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CronjobCompletedEvent.ProtoReflect.Descriptor instead.
func (*CronjobCompletedEvent) Descriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{4}
}

func (x *CronjobCompletedEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CronjobCompletedEvent) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CronjobCompletedEvent) GetCancelled() bool {
	if x != nil {
		return x.Cancelled
	}
	return false
}

func (x *CronjobCompletedEvent) GetEndDate() *timestamp.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *CronjobCompletedEvent) GetElapsed() *durationpb.Duration {
	if x != nil {
		return x.Elapsed
	}
	return nil
}

func (x *CronjobCompletedEvent) GetData() *CronjobData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *CronjobCompletedEvent) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *CronjobCompletedEvent) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

type GenericCronData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// @sanitize: method=StripTags
	Attributes    map[string]string `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenericCronData) Reset() {
	*x = GenericCronData{}
	mi := &file_resources_common_cron_cron_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenericCronData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericCronData) ProtoMessage() {}

func (x *GenericCronData) ProtoReflect() protoreflect.Message {
	mi := &file_resources_common_cron_cron_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericCronData.ProtoReflect.Descriptor instead.
func (*GenericCronData) Descriptor() ([]byte, []int) {
	return file_resources_common_cron_cron_proto_rawDescGZIP(), []int{5}
}

func (x *GenericCronData) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_resources_common_cron_cron_proto protoreflect.FileDescriptor

const file_resources_common_cron_cron_proto_rawDesc = "" +
	"\n" +
	" resources/common/cron/cron.proto\x12\x15resources.common.cron\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\x1a#resources/timestamp/timestamp.proto\"\xfe\x04\n" +
	"\aCronjob\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bschedule\x18\x02 \x01(\tR\bschedule\x129\n" +
	"\x05state\x18\x03 \x01(\x0e2#.resources.common.cron.CronjobStateR\x05state\x12L\n" +
	"\x12next_schedule_time\x18\x04 \x01(\v2\x1e.resources.timestamp.TimestampR\x10nextScheduleTime\x12O\n" +
	"\x11last_attempt_time\x18\x05 \x01(\v2\x1e.resources.timestamp.TimestampH\x00R\x0flastAttemptTime\x88\x01\x01\x12F\n" +
	"\fstarted_time\x18\x06 \x01(\v2\x1e.resources.timestamp.TimestampH\x01R\vstartedTime\x88\x01\x01\x128\n" +
	"\atimeout\x18\a \x01(\v2\x19.google.protobuf.DurationH\x02R\atimeout\x88\x01\x01\x126\n" +
	"\x04data\x18\b \x01(\v2\".resources.common.cron.CronjobDataR\x04data\x12c\n" +
	"\x14last_completed_event\x18\t \x01(\v2,.resources.common.cron.CronjobCompletedEventH\x03R\x12lastCompletedEvent\x88\x01\x01B\x14\n" +
	"\x12_last_attempt_timeB\x0f\n" +
	"\r_started_timeB\n" +
	"\n" +
	"\b_timeoutB\x17\n" +
	"\x15_last_completed_event\"\x84\x01\n" +
	"\vCronjobData\x12=\n" +
	"\n" +
	"updated_at\x18\x01 \x01(\v2\x1e.resources.timestamp.TimestampR\tupdatedAt\x12-\n" +
	"\x04data\x18\x02 \x01(\v2\x14.google.protobuf.AnyH\x00R\x04data\x88\x01\x01B\a\n" +
	"\x05_data\"r\n" +
	"\x15CronjobLockOwnerState\x12\x1a\n" +
	"\bhostname\x18\x01 \x01(\tR\bhostname\x12=\n" +
	"\n" +
	"updated_at\x18\x02 \x01(\v2\x1e.resources.timestamp.TimestampR\tupdatedAt\"Q\n" +
	"\x15CronjobSchedulerEvent\x128\n" +
	"\acronjob\x18\x01 \x01(\v2\x1e.resources.common.cron.CronjobR\acronjob\"\xf2\x02\n" +
	"\x15CronjobCompletedEvent\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x1c\n" +
	"\tcancelled\x18\a \x01(\bR\tcancelled\x129\n" +
	"\bend_date\x18\x03 \x01(\v2\x1e.resources.timestamp.TimestampR\aendDate\x123\n" +
	"\aelapsed\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\aelapsed\x12;\n" +
	"\x04data\x18\x05 \x01(\v2\".resources.common.cron.CronjobDataH\x00R\x04data\x88\x01\x01\x12\x1b\n" +
	"\tnode_name\x18\x06 \x01(\tR\bnodeName\x12(\n" +
	"\rerror_message\x18\b \x01(\tH\x01R\ferrorMessage\x88\x01\x01B\a\n" +
	"\x05_dataB\x10\n" +
	"\x0e_error_message\"\xa8\x01\n" +
	"\x0fGenericCronData\x12V\n" +
	"\n" +
	"attributes\x18\x01 \x03(\v26.resources.common.cron.GenericCronData.AttributesEntryR\n" +
	"attributes\x1a=\n" +
	"\x0fAttributesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01*~\n" +
	"\fCronjobState\x12\x1d\n" +
	"\x19CRONJOB_STATE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15CRONJOB_STATE_WAITING\x10\x01\x12\x19\n" +
	"\x15CRONJOB_STATE_PENDING\x10\x02\x12\x19\n" +
	"\x15CRONJOB_STATE_RUNNING\x10\x03BNZLgithub.com/fivenet-app/fivenet/v2025/gen/go/proto/resources/common/cron;cronb\x06proto3"

var (
	file_resources_common_cron_cron_proto_rawDescOnce sync.Once
	file_resources_common_cron_cron_proto_rawDescData []byte
)

func file_resources_common_cron_cron_proto_rawDescGZIP() []byte {
	file_resources_common_cron_cron_proto_rawDescOnce.Do(func() {
		file_resources_common_cron_cron_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_resources_common_cron_cron_proto_rawDesc), len(file_resources_common_cron_cron_proto_rawDesc)))
	})
	return file_resources_common_cron_cron_proto_rawDescData
}

var file_resources_common_cron_cron_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_resources_common_cron_cron_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_resources_common_cron_cron_proto_goTypes = []any{
	(CronjobState)(0),             // 0: resources.common.cron.CronjobState
	(*Cronjob)(nil),               // 1: resources.common.cron.Cronjob
	(*CronjobData)(nil),           // 2: resources.common.cron.CronjobData
	(*CronjobLockOwnerState)(nil), // 3: resources.common.cron.CronjobLockOwnerState
	(*CronjobSchedulerEvent)(nil), // 4: resources.common.cron.CronjobSchedulerEvent
	(*CronjobCompletedEvent)(nil), // 5: resources.common.cron.CronjobCompletedEvent
	(*GenericCronData)(nil),       // 6: resources.common.cron.GenericCronData
	nil,                           // 7: resources.common.cron.GenericCronData.AttributesEntry
	(*timestamp.Timestamp)(nil),   // 8: resources.timestamp.Timestamp
	(*durationpb.Duration)(nil),   // 9: google.protobuf.Duration
	(*anypb.Any)(nil),             // 10: google.protobuf.Any
}
var file_resources_common_cron_cron_proto_depIdxs = []int32{
	0,  // 0: resources.common.cron.Cronjob.state:type_name -> resources.common.cron.CronjobState
	8,  // 1: resources.common.cron.Cronjob.next_schedule_time:type_name -> resources.timestamp.Timestamp
	8,  // 2: resources.common.cron.Cronjob.last_attempt_time:type_name -> resources.timestamp.Timestamp
	8,  // 3: resources.common.cron.Cronjob.started_time:type_name -> resources.timestamp.Timestamp
	9,  // 4: resources.common.cron.Cronjob.timeout:type_name -> google.protobuf.Duration
	2,  // 5: resources.common.cron.Cronjob.data:type_name -> resources.common.cron.CronjobData
	5,  // 6: resources.common.cron.Cronjob.last_completed_event:type_name -> resources.common.cron.CronjobCompletedEvent
	8,  // 7: resources.common.cron.CronjobData.updated_at:type_name -> resources.timestamp.Timestamp
	10, // 8: resources.common.cron.CronjobData.data:type_name -> google.protobuf.Any
	8,  // 9: resources.common.cron.CronjobLockOwnerState.updated_at:type_name -> resources.timestamp.Timestamp
	1,  // 10: resources.common.cron.CronjobSchedulerEvent.cronjob:type_name -> resources.common.cron.Cronjob
	8,  // 11: resources.common.cron.CronjobCompletedEvent.end_date:type_name -> resources.timestamp.Timestamp
	9,  // 12: resources.common.cron.CronjobCompletedEvent.elapsed:type_name -> google.protobuf.Duration
	2,  // 13: resources.common.cron.CronjobCompletedEvent.data:type_name -> resources.common.cron.CronjobData
	7,  // 14: resources.common.cron.GenericCronData.attributes:type_name -> resources.common.cron.GenericCronData.AttributesEntry
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_resources_common_cron_cron_proto_init() }
func file_resources_common_cron_cron_proto_init() {
	if File_resources_common_cron_cron_proto != nil {
		return
	}
	file_resources_common_cron_cron_proto_msgTypes[0].OneofWrappers = []any{}
	file_resources_common_cron_cron_proto_msgTypes[1].OneofWrappers = []any{}
	file_resources_common_cron_cron_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_resources_common_cron_cron_proto_rawDesc), len(file_resources_common_cron_cron_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_resources_common_cron_cron_proto_goTypes,
		DependencyIndexes: file_resources_common_cron_cron_proto_depIdxs,
		EnumInfos:         file_resources_common_cron_cron_proto_enumTypes,
		MessageInfos:      file_resources_common_cron_cron_proto_msgTypes,
	}.Build()
	File_resources_common_cron_cron_proto = out.File
	file_resources_common_cron_cron_proto_goTypes = nil
	file_resources_common_cron_cron_proto_depIdxs = nil
}
