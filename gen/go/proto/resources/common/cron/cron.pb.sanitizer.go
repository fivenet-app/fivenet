// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/common/cron/cron.proto

package cron

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

func (m *Cronjob) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: LastAttemptTime
	if m.LastAttemptTime != nil {
		if v, ok := any(m.GetLastAttemptTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: LastCompletedEvent
	if m.LastCompletedEvent != nil {
		if v, ok := any(m.GetLastCompletedEvent()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: NextScheduleTime
	if m.NextScheduleTime != nil {
		if v, ok := any(m.GetNextScheduleTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: StartedTime
	if m.StartedTime != nil {
		if v, ok := any(m.GetStartedTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Timeout
	if m.Timeout != nil {
		if v, ok := any(m.GetTimeout()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CronjobCompletedEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Elapsed
	if m.Elapsed != nil {
		if v, ok := any(m.GetElapsed()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: EndDate
	if m.EndDate != nil {
		if v, ok := any(m.GetEndDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CronjobData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CronjobLockOwnerState) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *CronjobSchedulerEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Cronjob
	if m.Cronjob != nil {
		if v, ok := any(m.GetCronjob()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *GenericCronData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attributes
	for idx, item := range m.Attributes {
		_, _ = idx, item

		m.Attributes[idx] = htmlsanitizer.StripTags(m.Attributes[idx])

	}

	return nil
}
