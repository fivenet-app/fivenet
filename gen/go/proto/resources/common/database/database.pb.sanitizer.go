// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/common/database/database.proto

package database

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DateRange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: End
	if m.End != nil {
		if v, ok := any(m.GetEnd()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Start
	if m.Start != nil {
		if v, ok := any(m.GetStart()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PaginationRequest) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PaginationResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Sort) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Columns
	for idx, item := range m.Columns {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SortByColumn) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Id
	m.Id = htmlsanitizer.Sanitize(m.Id)

	return nil
}
