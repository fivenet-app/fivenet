// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/documents/documents.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Document) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Category
	if m.Category != nil {
		if v, ok := any(m.GetCategory()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Content
	if m.Content != nil {
		if v, ok := any(m.GetContent()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatorJob
	m.CreatorJob = htmlsanitizer.Sanitize(m.CreatorJob)

	// Field: CreatorJobLabel
	if m.CreatorJobLabel != nil {
		*m.CreatorJobLabel = htmlsanitizer.Sanitize(*m.CreatorJobLabel)
	}

	// Field: Data
	if m.Data != nil {
		*m.Data = htmlsanitizer.Sanitize(*m.Data)
	}

	// Field: DeletedAt
	if m.DeletedAt != nil {
		if v, ok := any(m.GetDeletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Files
	for idx, item := range m.Files {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Meta
	if m.Meta != nil {
		if v, ok := any(m.GetMeta()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Pin
	if m.Pin != nil {
		if v, ok := any(m.GetPin()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Title
	m.Title = htmlsanitizer.Sanitize(m.Title)

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: WorkflowState
	if m.WorkflowState != nil {
		if v, ok := any(m.GetWorkflowState()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: WorkflowUser
	if m.WorkflowUser != nil {
		if v, ok := any(m.GetWorkflowUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DocumentMeta) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: RecomputedAt
	if m.RecomputedAt != nil {
		if v, ok := any(m.GetRecomputedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: State
	m.State = htmlsanitizer.Sanitize(m.State)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DocumentReference) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: SourceDocument
	if m.SourceDocument != nil {
		if v, ok := any(m.GetSourceDocument()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: TargetDocument
	if m.TargetDocument != nil {
		if v, ok := any(m.GetTargetDocument()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DocumentRelation) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Document
	if m.Document != nil {
		if v, ok := any(m.GetDocument()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: SourceUser
	if m.SourceUser != nil {
		if v, ok := any(m.GetSourceUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: TargetUser
	if m.TargetUser != nil {
		if v, ok := any(m.GetTargetUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DocumentShort) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Category
	if m.Category != nil {
		if v, ok := any(m.GetCategory()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Content
	if m.Content != nil {
		if v, ok := any(m.GetContent()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatorJob
	m.CreatorJob = htmlsanitizer.Sanitize(m.CreatorJob)

	// Field: CreatorJobLabel
	if m.CreatorJobLabel != nil {
		*m.CreatorJobLabel = htmlsanitizer.Sanitize(*m.CreatorJobLabel)
	}

	// Field: DeletedAt
	if m.DeletedAt != nil {
		if v, ok := any(m.GetDeletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Meta
	if m.Meta != nil {
		if v, ok := any(m.GetMeta()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Pin
	if m.Pin != nil {
		if v, ok := any(m.GetPin()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Title
	m.Title = htmlsanitizer.Sanitize(m.Title)

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: WorkflowState
	if m.WorkflowState != nil {
		if v, ok := any(m.GetWorkflowState()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: WorkflowUser
	if m.WorkflowUser != nil {
		if v, ok := any(m.GetWorkflowUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *WorkflowState) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AutoCloseTime
	if m.AutoCloseTime != nil {
		if v, ok := any(m.GetAutoCloseTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Document
	if m.Document != nil {
		if v, ok := any(m.GetDocument()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: NextReminderTime
	if m.NextReminderTime != nil {
		if v, ok := any(m.GetNextReminderTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Workflow
	if m.Workflow != nil {
		if v, ok := any(m.GetWorkflow()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *WorkflowUserState) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Document
	if m.Document != nil {
		if v, ok := any(m.GetDocument()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: ManualReminderMessage
	if m.ManualReminderMessage != nil {
		*m.ManualReminderMessage = htmlsanitizer.Sanitize(*m.ManualReminderMessage)
	}

	// Field: ManualReminderTime
	if m.ManualReminderTime != nil {
		if v, ok := any(m.GetManualReminderTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Workflow
	if m.Workflow != nil {
		if v, ok := any(m.GetWorkflow()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
