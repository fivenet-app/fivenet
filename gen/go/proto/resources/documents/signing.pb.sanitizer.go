// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/documents/signing.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Signature) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: PayloadJson
	m.PayloadJson = htmlsanitizer.Sanitize(m.PayloadJson)

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	// Field: RevokedAt
	if m.RevokedAt != nil {
		if v, ok := any(m.GetRevokedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: SnapshotHash
	m.SnapshotHash = htmlsanitizer.Sanitize(m.SnapshotHash)

	// Field: VersionSignedOn
	m.VersionSignedOn = htmlsanitizer.Sanitize(m.VersionSignedOn)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SignatureRequirement) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AllowedTypes
	for idx, item := range m.AllowedTypes {
		_, _ = idx, item

	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Label
	m.Label = htmlsanitizer.Sanitize(m.Label)

	// Field: Selector
	if m.Selector != nil {
		if v, ok := any(m.GetSelector()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Stamp) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	// Field: JobLabel
	if m.JobLabel != nil {
		*m.JobLabel = htmlsanitizer.Sanitize(*m.JobLabel)
	}

	// Field: PolicyJson
	m.PolicyJson = htmlsanitizer.Sanitize(m.PolicyJson)

	// Field: SvgTemplate
	m.SvgTemplate = htmlsanitizer.Sanitize(m.SvgTemplate)

	// Field: VariantsJson
	m.VariantsJson = htmlsanitizer.Sanitize(m.VariantsJson)

	return nil
}
