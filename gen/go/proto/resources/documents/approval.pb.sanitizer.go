// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/documents/approval.proto

package documents

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApprovalAccess) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Jobs
	for idx, item := range m.Jobs {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApprovalJobAccess) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	// Field: JobGradeLabel
	if m.JobGradeLabel != nil {
		*m.JobGradeLabel = htmlsanitizer.Sanitize(*m.JobGradeLabel)
	}

	// Field: JobLabel
	if m.JobLabel != nil {
		*m.JobLabel = htmlsanitizer.Sanitize(*m.JobLabel)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApprovalPolicy) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Access
	if m.Access != nil {
		if v, ok := any(m.GetAccess()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: ActiveSnapshotDate
	if m.ActiveSnapshotDate != nil {
		if v, ok := any(m.GetActiveSnapshotDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CompletedAt
	if m.CompletedAt != nil {
		if v, ok := any(m.GetCompletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: DueAt
	if m.DueAt != nil {
		if v, ok := any(m.GetDueAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: StartedAt
	if m.StartedAt != nil {
		if v, ok := any(m.GetStartedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ApprovalTask) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Comment
	if m.Comment != nil {
		*m.Comment = htmlsanitizer.Sanitize(*m.Comment)
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatorJob
	m.CreatorJob = htmlsanitizer.Sanitize(m.CreatorJob)

	// Field: DecidedAt
	if m.DecidedAt != nil {
		if v, ok := any(m.GetDecidedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: DecidedByJob
	if m.DecidedByJob != nil {
		*m.DecidedByJob = htmlsanitizer.Sanitize(*m.DecidedByJob)
	}

	// Field: DueAt
	if m.DueAt != nil {
		if v, ok := any(m.GetDueAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	if m.Job != nil {
		*m.Job = htmlsanitizer.Sanitize(*m.Job)
	}

	// Field: JobLabel
	if m.JobLabel != nil {
		*m.JobLabel = htmlsanitizer.Sanitize(*m.JobLabel)
	}

	// Field: SnapshotDate
	if m.SnapshotDate != nil {
		if v, ok := any(m.GetSnapshotDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
