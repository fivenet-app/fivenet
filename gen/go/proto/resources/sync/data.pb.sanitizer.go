// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/sync/data.proto

package sync

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CitizenLocations) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Coords
	if m.Coords != nil {
		if v, ok := any(m.GetCoords()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Identifier
	m.Identifier = htmlsanitizer.Sanitize(m.Identifier)

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DataJobs) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Jobs
	for idx, item := range m.Jobs {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DataLicenses) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Licenses
	for idx, item := range m.Licenses {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DataStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DataUserLocations) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Users
	for idx, item := range m.Users {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DataUsers) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Users
	for idx, item := range m.Users {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DataVehicles) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Vehicles
	for idx, item := range m.Vehicles {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteUsers) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DeleteVehicles) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Plates
	for idx, item := range m.Plates {
		_, _ = idx, item

		m.Plates[idx] = htmlsanitizer.Sanitize(m.Plates[idx])

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LastCharID) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Identifier
	m.Identifier = htmlsanitizer.Sanitize(m.Identifier)

	return nil
}
