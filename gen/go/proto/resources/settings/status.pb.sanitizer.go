// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/settings/status.proto

package settings

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *DBSyncStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: LastDbsyncVersion
	if m.LastDbsyncVersion != nil {
		*m.LastDbsyncVersion = htmlsanitizer.Sanitize(*m.LastDbsyncVersion)
	}

	// Field: LastSyncedActivity
	if m.LastSyncedActivity != nil {
		if v, ok := any(m.GetLastSyncedActivity()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: LastSyncedData
	if m.LastSyncedData != nil {
		if v, ok := any(m.GetLastSyncedData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Database) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DbCharset
	m.DbCharset = htmlsanitizer.Sanitize(m.DbCharset)

	// Field: DbCollation
	m.DbCollation = htmlsanitizer.Sanitize(m.DbCollation)

	// Field: Version
	m.Version = htmlsanitizer.Sanitize(m.Version)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Nats) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Version
	m.Version = htmlsanitizer.Sanitize(m.Version)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *NewVersionInfo) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ReleaseDate
	if m.ReleaseDate != nil {
		if v, ok := any(m.GetReleaseDate()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Url
	m.Url = htmlsanitizer.Sanitize(m.Url)

	// Field: Version
	m.Version = htmlsanitizer.Sanitize(m.Version)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SystemStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Database
	if m.Database != nil {
		if v, ok := any(m.GetDatabase()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Dbsync
	if m.Dbsync != nil {
		if v, ok := any(m.GetDbsync()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Nats
	if m.Nats != nil {
		if v, ok := any(m.GetNats()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Version
	if m.Version != nil {
		if v, ok := any(m.GetVersion()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *VersionStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Current
	m.Current = htmlsanitizer.Sanitize(m.Current)

	// Field: NewVersion
	if m.NewVersion != nil {
		if v, ok := any(m.GetNewVersion()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
