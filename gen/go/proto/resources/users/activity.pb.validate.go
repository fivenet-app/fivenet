// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/users/activity.proto

package users

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserActivity with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserActivityMultiError, or
// nil if none found.
func (m *UserActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *UserActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if _, ok := UserActivityType_name[int32(m.GetType())]; !ok {
		err := UserActivityValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserActivityValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TargetUserId

	if all {
		switch v := interface{}(m.GetTargetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "TargetUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserActivityValidationError{
					field:  "TargetUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserActivityValidationError{
				field:  "TargetUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetKey()) > 64 {
		err := UserActivityValidationError{
			field:  "Key",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetReason()) > 255 {
		err := UserActivityValidationError{
			field:  "Reason",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOldValue()) > 255 {
		err := UserActivityValidationError{
			field:  "OldValue",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetNewValue()) > 255 {
		err := UserActivityValidationError{
			field:  "NewValue",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.SourceUserId != nil {
		// no validation rules for SourceUserId
	}

	if m.SourceUser != nil {

		if all {
			switch v := interface{}(m.GetSourceUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityValidationError{
						field:  "SourceUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityValidationError{
						field:  "SourceUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSourceUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityValidationError{
					field:  "SourceUser",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserActivityMultiError(errors)
	}

	return nil
}

// UserActivityMultiError is an error wrapping multiple validation errors
// returned by UserActivity.ValidateAll() if the designated constraints aren't met.
type UserActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserActivityMultiError) AllErrors() []error { return m }

// UserActivityValidationError is the validation error returned by
// UserActivity.Validate if the designated constraints aren't met.
type UserActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserActivityValidationError) ErrorName() string { return "UserActivityValidationError" }

// Error satisfies the builtin error interface
func (e UserActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserActivityValidationError{}

// Validate checks the field values on UserActivityData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UserActivityData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserActivityData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserActivityDataMultiError, or nil if none found.
func (m *UserActivityData) ValidateAll() error {
	return m.validate(true)
}

func (m *UserActivityData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *UserActivityData_NameChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetNameChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "NameChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "NameChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNameChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "NameChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_LicensesChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetLicensesChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "LicensesChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "LicensesChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLicensesChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "LicensesChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_WantedChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetWantedChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "WantedChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "WantedChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetWantedChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "WantedChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_TrafficInfractionPointsChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetTrafficInfractionPointsChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "TrafficInfractionPointsChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "TrafficInfractionPointsChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTrafficInfractionPointsChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "TrafficInfractionPointsChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_MugshotChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetMugshotChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "MugshotChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "MugshotChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMugshotChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "MugshotChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_LabelsChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetLabelsChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "LabelsChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "LabelsChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLabelsChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "LabelsChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_JobChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetJobChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "JobChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "JobChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "JobChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_DocumentRelation:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetDocumentRelation()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "DocumentRelation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "DocumentRelation",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDocumentRelation()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "DocumentRelation",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_JailChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetJailChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "JailChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "JailChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJailChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "JailChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserActivityData_FineChange:
		if v == nil {
			err := UserActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetFineChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "FineChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserActivityDataValidationError{
						field:  "FineChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFineChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserActivityDataValidationError{
					field:  "FineChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := UserActivityDataValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserActivityDataMultiError(errors)
	}

	return nil
}

// UserActivityDataMultiError is an error wrapping multiple validation errors
// returned by UserActivityData.ValidateAll() if the designated constraints
// aren't met.
type UserActivityDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserActivityDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserActivityDataMultiError) AllErrors() []error { return m }

// UserActivityDataValidationError is the validation error returned by
// UserActivityData.Validate if the designated constraints aren't met.
type UserActivityDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserActivityDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserActivityDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserActivityDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserActivityDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserActivityDataValidationError) ErrorName() string { return "UserActivityDataValidationError" }

// Error satisfies the builtin error interface
func (e UserActivityDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserActivityData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserActivityDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserActivityDataValidationError{}

// Validate checks the field values on NameChange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NameChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NameChange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NameChangeMultiError, or
// nil if none found.
func (m *NameChange) ValidateAll() error {
	return m.validate(true)
}

func (m *NameChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Old

	// no validation rules for New

	if len(errors) > 0 {
		return NameChangeMultiError(errors)
	}

	return nil
}

// NameChangeMultiError is an error wrapping multiple validation errors
// returned by NameChange.ValidateAll() if the designated constraints aren't met.
type NameChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameChangeMultiError) AllErrors() []error { return m }

// NameChangeValidationError is the validation error returned by
// NameChange.Validate if the designated constraints aren't met.
type NameChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameChangeValidationError) ErrorName() string { return "NameChangeValidationError" }

// Error satisfies the builtin error interface
func (e NameChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNameChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameChangeValidationError{}

// Validate checks the field values on LicenseChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LicenseChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LicenseChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LicenseChangeMultiError, or
// nil if none found.
func (m *LicenseChange) ValidateAll() error {
	return m.validate(true)
}

func (m *LicenseChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Added

	for idx, item := range m.GetLicenses() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LicenseChangeValidationError{
						field:  fmt.Sprintf("Licenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LicenseChangeValidationError{
						field:  fmt.Sprintf("Licenses[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LicenseChangeValidationError{
					field:  fmt.Sprintf("Licenses[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LicenseChangeMultiError(errors)
	}

	return nil
}

// LicenseChangeMultiError is an error wrapping multiple validation errors
// returned by LicenseChange.ValidateAll() if the designated constraints
// aren't met.
type LicenseChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LicenseChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LicenseChangeMultiError) AllErrors() []error { return m }

// LicenseChangeValidationError is the validation error returned by
// LicenseChange.Validate if the designated constraints aren't met.
type LicenseChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LicenseChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LicenseChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LicenseChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LicenseChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LicenseChangeValidationError) ErrorName() string { return "LicenseChangeValidationError" }

// Error satisfies the builtin error interface
func (e LicenseChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLicenseChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LicenseChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LicenseChangeValidationError{}

// Validate checks the field values on WantedChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WantedChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WantedChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WantedChangeMultiError, or
// nil if none found.
func (m *WantedChange) ValidateAll() error {
	return m.validate(true)
}

func (m *WantedChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Wanted

	if len(errors) > 0 {
		return WantedChangeMultiError(errors)
	}

	return nil
}

// WantedChangeMultiError is an error wrapping multiple validation errors
// returned by WantedChange.ValidateAll() if the designated constraints aren't met.
type WantedChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WantedChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WantedChangeMultiError) AllErrors() []error { return m }

// WantedChangeValidationError is the validation error returned by
// WantedChange.Validate if the designated constraints aren't met.
type WantedChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WantedChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WantedChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WantedChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WantedChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WantedChangeValidationError) ErrorName() string { return "WantedChangeValidationError" }

// Error satisfies the builtin error interface
func (e WantedChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWantedChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WantedChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WantedChangeValidationError{}

// Validate checks the field values on TrafficInfractionPointsChange with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TrafficInfractionPointsChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TrafficInfractionPointsChange with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TrafficInfractionPointsChangeMultiError, or nil if none found.
func (m *TrafficInfractionPointsChange) ValidateAll() error {
	return m.validate(true)
}

func (m *TrafficInfractionPointsChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Old

	// no validation rules for New

	if len(errors) > 0 {
		return TrafficInfractionPointsChangeMultiError(errors)
	}

	return nil
}

// TrafficInfractionPointsChangeMultiError is an error wrapping multiple
// validation errors returned by TrafficInfractionPointsChange.ValidateAll()
// if the designated constraints aren't met.
type TrafficInfractionPointsChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TrafficInfractionPointsChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TrafficInfractionPointsChangeMultiError) AllErrors() []error { return m }

// TrafficInfractionPointsChangeValidationError is the validation error
// returned by TrafficInfractionPointsChange.Validate if the designated
// constraints aren't met.
type TrafficInfractionPointsChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TrafficInfractionPointsChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TrafficInfractionPointsChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TrafficInfractionPointsChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TrafficInfractionPointsChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TrafficInfractionPointsChangeValidationError) ErrorName() string {
	return "TrafficInfractionPointsChangeValidationError"
}

// Error satisfies the builtin error interface
func (e TrafficInfractionPointsChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTrafficInfractionPointsChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TrafficInfractionPointsChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TrafficInfractionPointsChangeValidationError{}

// Validate checks the field values on MugshotChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MugshotChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MugshotChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MugshotChangeMultiError, or
// nil if none found.
func (m *MugshotChange) ValidateAll() error {
	return m.validate(true)
}

func (m *MugshotChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.New != nil {
		// no validation rules for New
	}

	if len(errors) > 0 {
		return MugshotChangeMultiError(errors)
	}

	return nil
}

// MugshotChangeMultiError is an error wrapping multiple validation errors
// returned by MugshotChange.ValidateAll() if the designated constraints
// aren't met.
type MugshotChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MugshotChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MugshotChangeMultiError) AllErrors() []error { return m }

// MugshotChangeValidationError is the validation error returned by
// MugshotChange.Validate if the designated constraints aren't met.
type MugshotChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MugshotChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MugshotChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MugshotChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MugshotChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MugshotChangeValidationError) ErrorName() string { return "MugshotChangeValidationError" }

// Error satisfies the builtin error interface
func (e MugshotChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMugshotChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MugshotChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MugshotChangeValidationError{}

// Validate checks the field values on LabelsChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelsChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelsChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelsChangeMultiError, or
// nil if none found.
func (m *LabelsChange) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelsChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdded() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Added[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Added[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelsChangeValidationError{
					field:  fmt.Sprintf("Added[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRemoved() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Removed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Removed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelsChangeValidationError{
					field:  fmt.Sprintf("Removed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LabelsChangeMultiError(errors)
	}

	return nil
}

// LabelsChangeMultiError is an error wrapping multiple validation errors
// returned by LabelsChange.ValidateAll() if the designated constraints aren't met.
type LabelsChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsChangeMultiError) AllErrors() []error { return m }

// LabelsChangeValidationError is the validation error returned by
// LabelsChange.Validate if the designated constraints aren't met.
type LabelsChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsChangeValidationError) ErrorName() string { return "LabelsChangeValidationError" }

// Error satisfies the builtin error interface
func (e LabelsChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelsChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsChangeValidationError{}

// Validate checks the field values on JobChange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobChange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobChangeMultiError, or nil
// if none found.
func (m *JobChange) ValidateAll() error {
	return m.validate(true)
}

func (m *JobChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Job != nil {
		// no validation rules for Job
	}

	if m.JobLabel != nil {
		// no validation rules for JobLabel
	}

	if m.Grade != nil {
		// no validation rules for Grade
	}

	if m.GradeLabel != nil {
		// no validation rules for GradeLabel
	}

	if len(errors) > 0 {
		return JobChangeMultiError(errors)
	}

	return nil
}

// JobChangeMultiError is an error wrapping multiple validation errors returned
// by JobChange.ValidateAll() if the designated constraints aren't met.
type JobChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobChangeMultiError) AllErrors() []error { return m }

// JobChangeValidationError is the validation error returned by
// JobChange.Validate if the designated constraints aren't met.
type JobChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobChangeValidationError) ErrorName() string { return "JobChangeValidationError" }

// Error satisfies the builtin error interface
func (e JobChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobChangeValidationError{}

// Validate checks the field values on CitizenDocumentRelation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CitizenDocumentRelation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CitizenDocumentRelation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CitizenDocumentRelationMultiError, or nil if none found.
func (m *CitizenDocumentRelation) ValidateAll() error {
	return m.validate(true)
}

func (m *CitizenDocumentRelation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Added

	// no validation rules for DocumentId

	// no validation rules for Relation

	if len(errors) > 0 {
		return CitizenDocumentRelationMultiError(errors)
	}

	return nil
}

// CitizenDocumentRelationMultiError is an error wrapping multiple validation
// errors returned by CitizenDocumentRelation.ValidateAll() if the designated
// constraints aren't met.
type CitizenDocumentRelationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CitizenDocumentRelationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CitizenDocumentRelationMultiError) AllErrors() []error { return m }

// CitizenDocumentRelationValidationError is the validation error returned by
// CitizenDocumentRelation.Validate if the designated constraints aren't met.
type CitizenDocumentRelationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CitizenDocumentRelationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CitizenDocumentRelationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CitizenDocumentRelationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CitizenDocumentRelationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CitizenDocumentRelationValidationError) ErrorName() string {
	return "CitizenDocumentRelationValidationError"
}

// Error satisfies the builtin error interface
func (e CitizenDocumentRelationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCitizenDocumentRelation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CitizenDocumentRelationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CitizenDocumentRelationValidationError{}

// Validate checks the field values on JailChange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JailChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JailChange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JailChangeMultiError, or
// nil if none found.
func (m *JailChange) ValidateAll() error {
	return m.validate(true)
}

func (m *JailChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Seconds

	// no validation rules for Admin

	if m.Location != nil {
		// no validation rules for Location
	}

	if len(errors) > 0 {
		return JailChangeMultiError(errors)
	}

	return nil
}

// JailChangeMultiError is an error wrapping multiple validation errors
// returned by JailChange.ValidateAll() if the designated constraints aren't met.
type JailChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JailChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JailChangeMultiError) AllErrors() []error { return m }

// JailChangeValidationError is the validation error returned by
// JailChange.Validate if the designated constraints aren't met.
type JailChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JailChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JailChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JailChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JailChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JailChangeValidationError) ErrorName() string { return "JailChangeValidationError" }

// Error satisfies the builtin error interface
func (e JailChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJailChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JailChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JailChangeValidationError{}

// Validate checks the field values on FineChange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FineChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FineChange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FineChangeMultiError, or
// nil if none found.
func (m *FineChange) ValidateAll() error {
	return m.validate(true)
}

func (m *FineChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Removed

	// no validation rules for Amount

	if len(errors) > 0 {
		return FineChangeMultiError(errors)
	}

	return nil
}

// FineChangeMultiError is an error wrapping multiple validation errors
// returned by FineChange.ValidateAll() if the designated constraints aren't met.
type FineChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FineChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FineChangeMultiError) AllErrors() []error { return m }

// FineChangeValidationError is the validation error returned by
// FineChange.Validate if the designated constraints aren't met.
type FineChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FineChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FineChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FineChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FineChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FineChangeValidationError) ErrorName() string { return "FineChangeValidationError" }

// Error satisfies the builtin error interface
func (e FineChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFineChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FineChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FineChangeValidationError{}
