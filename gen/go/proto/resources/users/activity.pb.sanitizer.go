// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/users/activity.proto

package users

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CitizenDocumentRelation) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *FineChange) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *JailChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Location
	if m.Location != nil {
		*m.Location = htmlsanitizer.Sanitize(*m.Location)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *JobChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: GradeLabel
	if m.GradeLabel != nil {
		*m.GradeLabel = htmlsanitizer.Sanitize(*m.GradeLabel)
	}

	// Field: Job
	if m.Job != nil {
		*m.Job = htmlsanitizer.Sanitize(*m.Job)
	}

	// Field: JobLabel
	if m.JobLabel != nil {
		*m.JobLabel = htmlsanitizer.Sanitize(*m.JobLabel)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LabelsChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Added
	for idx, item := range m.Added {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Removed
	for idx, item := range m.Removed {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LicenseChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Licenses
	for idx, item := range m.Licenses {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *MugshotChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: New
	if m.New != nil {
		*m.New = htmlsanitizer.Sanitize(*m.New)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *NameChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: New
	m.New = htmlsanitizer.Sanitize(m.New)

	// Field: Old
	m.Old = htmlsanitizer.Sanitize(m.Old)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *TrafficInfractionPointsChange) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UserActivity) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Key
	m.Key = htmlsanitizer.Sanitize(m.Key)

	// Field: NewValue
	m.NewValue = htmlsanitizer.Sanitize(m.NewValue)

	// Field: OldValue
	m.OldValue = htmlsanitizer.Sanitize(m.OldValue)

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	// Field: SourceUser
	if m.SourceUser != nil {
		if v, ok := any(m.GetSourceUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: TargetUser
	if m.TargetUser != nil {
		if v, ok := any(m.GetTargetUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UserActivityData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DocumentRelation
	switch v := m.Data.(type) {

	case *UserActivityData_DocumentRelation:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: FineChange
	case *UserActivityData_FineChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: JailChange
	case *UserActivityData_JailChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: JobChange
	case *UserActivityData_JobChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: LabelsChange
	case *UserActivityData_LabelsChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: LicensesChange
	case *UserActivityData_LicensesChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: MugshotChange
	case *UserActivityData_MugshotChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: NameChange
	case *UserActivityData_NameChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: TrafficInfractionPointsChange
	case *UserActivityData_TrafficInfractionPointsChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: WantedChange
	case *UserActivityData_WantedChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *WantedChange) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}
