// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/permissions/attributes.proto

package permissions

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RawRoleAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RawRoleAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RawRoleAttribute with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RawRoleAttributeMultiError, or nil if none found.
func (m *RawRoleAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *RawRoleAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for AttrId

	// no validation rules for PermissionId

	if utf8.RuneCountInString(m.GetCategory()) > 128 {
		err := RawRoleAttributeValidationError{
			field:  "Category",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 255 {
		err := RawRoleAttributeValidationError{
			field:  "Name",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) > 255 {
		err := RawRoleAttributeValidationError{
			field:  "Key",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) > 255 {
		err := RawRoleAttributeValidationError{
			field:  "Type",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValidValues()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RawRoleAttributeValidationError{
					field:  "ValidValues",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RawRoleAttributeValidationError{
					field:  "ValidValues",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RawRoleAttributeValidationError{
				field:  "ValidValues",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RawRoleAttributeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RawRoleAttributeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RawRoleAttributeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RawRoleAttributeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RawRoleAttributeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RawRoleAttributeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RawRoleAttributeMultiError(errors)
	}

	return nil
}

// RawRoleAttributeMultiError is an error wrapping multiple validation errors
// returned by RawRoleAttribute.ValidateAll() if the designated constraints
// aren't met.
type RawRoleAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RawRoleAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RawRoleAttributeMultiError) AllErrors() []error { return m }

// RawRoleAttributeValidationError is the validation error returned by
// RawRoleAttribute.Validate if the designated constraints aren't met.
type RawRoleAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RawRoleAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RawRoleAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RawRoleAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RawRoleAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RawRoleAttributeValidationError) ErrorName() string { return "RawRoleAttributeValidationError" }

// Error satisfies the builtin error interface
func (e RawRoleAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRawRoleAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RawRoleAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RawRoleAttributeValidationError{}

// Validate checks the field values on RoleAttribute with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleAttribute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleAttribute with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleAttributeMultiError, or
// nil if none found.
func (m *RoleAttribute) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleAttribute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for AttrId

	// no validation rules for PermissionId

	if utf8.RuneCountInString(m.GetCategory()) > 128 {
		err := RoleAttributeValidationError{
			field:  "Category",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 255 {
		err := RoleAttributeValidationError{
			field:  "Name",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetKey()) > 255 {
		err := RoleAttributeValidationError{
			field:  "Key",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetType()) > 255 {
		err := RoleAttributeValidationError{
			field:  "Type",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetValidValues()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleAttributeValidationError{
					field:  "ValidValues",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleAttributeValidationError{
					field:  "ValidValues",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidValues()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleAttributeValidationError{
				field:  "ValidValues",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RoleAttributeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RoleAttributeValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RoleAttributeValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleAttributeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleAttributeValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleAttributeValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.MaxValues != nil {

		if all {
			switch v := interface{}(m.GetMaxValues()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleAttributeValidationError{
						field:  "MaxValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleAttributeValidationError{
						field:  "MaxValues",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMaxValues()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleAttributeValidationError{
					field:  "MaxValues",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleAttributeMultiError(errors)
	}

	return nil
}

// RoleAttributeMultiError is an error wrapping multiple validation errors
// returned by RoleAttribute.ValidateAll() if the designated constraints
// aren't met.
type RoleAttributeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleAttributeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleAttributeMultiError) AllErrors() []error { return m }

// RoleAttributeValidationError is the validation error returned by
// RoleAttribute.Validate if the designated constraints aren't met.
type RoleAttributeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleAttributeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleAttributeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleAttributeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleAttributeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleAttributeValidationError) ErrorName() string { return "RoleAttributeValidationError" }

// Error satisfies the builtin error interface
func (e RoleAttributeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleAttribute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleAttributeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleAttributeValidationError{}

// Validate checks the field values on AttributeValues with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttributeValues) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttributeValues with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttributeValuesMultiError, or nil if none found.
func (m *AttributeValues) ValidateAll() error {
	return m.validate(true)
}

func (m *AttributeValues) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofValidValuesPresent := false
	switch v := m.ValidValues.(type) {
	case *AttributeValues_StringList:
		if v == nil {
			err := AttributeValuesValidationError{
				field:  "ValidValues",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValidValuesPresent = true

		if all {
			switch v := interface{}(m.GetStringList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttributeValuesValidationError{
						field:  "StringList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttributeValuesValidationError{
						field:  "StringList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStringList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttributeValuesValidationError{
					field:  "StringList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AttributeValues_JobList:
		if v == nil {
			err := AttributeValuesValidationError{
				field:  "ValidValues",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValidValuesPresent = true

		if all {
			switch v := interface{}(m.GetJobList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttributeValuesValidationError{
						field:  "JobList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttributeValuesValidationError{
						field:  "JobList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttributeValuesValidationError{
					field:  "JobList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *AttributeValues_JobGradeList:
		if v == nil {
			err := AttributeValuesValidationError{
				field:  "ValidValues",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofValidValuesPresent = true

		if all {
			switch v := interface{}(m.GetJobGradeList()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttributeValuesValidationError{
						field:  "JobGradeList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttributeValuesValidationError{
						field:  "JobGradeList",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobGradeList()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttributeValuesValidationError{
					field:  "JobGradeList",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofValidValuesPresent {
		err := AttributeValuesValidationError{
			field:  "ValidValues",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttributeValuesMultiError(errors)
	}

	return nil
}

// AttributeValuesMultiError is an error wrapping multiple validation errors
// returned by AttributeValues.ValidateAll() if the designated constraints
// aren't met.
type AttributeValuesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttributeValuesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttributeValuesMultiError) AllErrors() []error { return m }

// AttributeValuesValidationError is the validation error returned by
// AttributeValues.Validate if the designated constraints aren't met.
type AttributeValuesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttributeValuesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttributeValuesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttributeValuesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttributeValuesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttributeValuesValidationError) ErrorName() string { return "AttributeValuesValidationError" }

// Error satisfies the builtin error interface
func (e AttributeValuesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttributeValues.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttributeValuesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttributeValuesValidationError{}

// Validate checks the field values on StringList with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StringList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringList with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StringListMultiError, or
// nil if none found.
func (m *StringList) ValidateAll() error {
	return m.validate(true)
}

func (m *StringList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return StringListMultiError(errors)
	}

	return nil
}

// StringListMultiError is an error wrapping multiple validation errors
// returned by StringList.ValidateAll() if the designated constraints aren't met.
type StringListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringListMultiError) AllErrors() []error { return m }

// StringListValidationError is the validation error returned by
// StringList.Validate if the designated constraints aren't met.
type StringListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringListValidationError) ErrorName() string { return "StringListValidationError" }

// Error satisfies the builtin error interface
func (e StringListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringListValidationError{}

// Validate checks the field values on JobGradeList with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobGradeList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobGradeList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobGradeListMultiError, or
// nil if none found.
func (m *JobGradeList) ValidateAll() error {
	return m.validate(true)
}

func (m *JobGradeList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FineGrained

	// no validation rules for Jobs

	{
		sorted_keys := make([]string, len(m.GetGrades()))
		i := 0
		for key := range m.GetGrades() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetGrades()[key]
			_ = val

			// no validation rules for Grades[key]

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, JobGradeListValidationError{
							field:  fmt.Sprintf("Grades[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, JobGradeListValidationError{
							field:  fmt.Sprintf("Grades[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return JobGradeListValidationError{
						field:  fmt.Sprintf("Grades[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return JobGradeListMultiError(errors)
	}

	return nil
}

// JobGradeListMultiError is an error wrapping multiple validation errors
// returned by JobGradeList.ValidateAll() if the designated constraints aren't met.
type JobGradeListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobGradeListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobGradeListMultiError) AllErrors() []error { return m }

// JobGradeListValidationError is the validation error returned by
// JobGradeList.Validate if the designated constraints aren't met.
type JobGradeListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobGradeListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobGradeListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobGradeListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobGradeListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobGradeListValidationError) ErrorName() string { return "JobGradeListValidationError" }

// Error satisfies the builtin error interface
func (e JobGradeListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobGradeList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobGradeListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobGradeListValidationError{}

// Validate checks the field values on JobGrades with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobGrades) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobGrades with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobGradesMultiError, or nil
// if none found.
func (m *JobGrades) ValidateAll() error {
	return m.validate(true)
}

func (m *JobGrades) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return JobGradesMultiError(errors)
	}

	return nil
}

// JobGradesMultiError is an error wrapping multiple validation errors returned
// by JobGrades.ValidateAll() if the designated constraints aren't met.
type JobGradesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobGradesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobGradesMultiError) AllErrors() []error { return m }

// JobGradesValidationError is the validation error returned by
// JobGrades.Validate if the designated constraints aren't met.
type JobGradesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobGradesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobGradesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobGradesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobGradesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobGradesValidationError) ErrorName() string { return "JobGradesValidationError" }

// Error satisfies the builtin error interface
func (e JobGradesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobGrades.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobGradesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobGradesValidationError{}
