// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/permissions/permissions.proto

package permissions

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *PermItem) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Permission) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Category
	m.Category = htmlsanitizer.Sanitize(m.Category)

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: GuardName
	m.GuardName = htmlsanitizer.Sanitize(m.GuardName)

	// Field: Icon
	if m.Icon != nil {
		*m.Icon = htmlsanitizer.Sanitize(*m.Icon)
	}

	// Field: Name
	m.Name = htmlsanitizer.Sanitize(m.Name)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Role) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Attributes
	for idx, item := range m.Attributes {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	// Field: JobGradeLabel
	if m.JobGradeLabel != nil {
		*m.JobGradeLabel = htmlsanitizer.Sanitize(*m.JobGradeLabel)
	}

	// Field: JobLabel
	if m.JobLabel != nil {
		*m.JobLabel = htmlsanitizer.Sanitize(*m.JobLabel)
	}

	// Field: Permissions
	for idx, item := range m.Permissions {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
