// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/calendar/calendar.proto

package calendar

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Calendar) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Access
	if m.Access != nil {
		if v, ok := any(m.GetAccess()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Color
	m.Color = htmlsanitizer.StripTags(m.Color)

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatorJob
	m.CreatorJob = htmlsanitizer.Sanitize(m.CreatorJob)

	// Field: DeletedAt
	if m.DeletedAt != nil {
		if v, ok := any(m.GetDeletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Description
	if m.Description != nil {
		*m.Description = htmlsanitizer.StripTags(*m.Description)
	}

	// Field: Job
	if m.Job != nil {
		*m.Job = htmlsanitizer.Sanitize(*m.Job)
	}

	// Field: Name
	m.Name = htmlsanitizer.StripTags(m.Name)

	// Field: Subscription
	if m.Subscription != nil {
		if v, ok := any(m.GetSubscription()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CalendarEntry) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Calendar
	if m.Calendar != nil {
		if v, ok := any(m.GetCalendar()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Content
	if m.Content != nil {
		if v, ok := any(m.GetContent()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatorJob
	m.CreatorJob = htmlsanitizer.Sanitize(m.CreatorJob)

	// Field: DeletedAt
	if m.DeletedAt != nil {
		if v, ok := any(m.GetDeletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: EndTime
	if m.EndTime != nil {
		if v, ok := any(m.GetEndTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	if m.Job != nil {
		*m.Job = htmlsanitizer.Sanitize(*m.Job)
	}

	// Field: Recurring
	if m.Recurring != nil {
		if v, ok := any(m.GetRecurring()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Rsvp
	if m.Rsvp != nil {
		if v, ok := any(m.GetRsvp()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: StartTime
	if m.StartTime != nil {
		if v, ok := any(m.GetStartTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Title
	m.Title = htmlsanitizer.StripTags(m.Title)

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CalendarEntryRSVP) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: User
	if m.User != nil {
		if v, ok := any(m.GetUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CalendarEntryRecurring) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Every
	m.Every = htmlsanitizer.Sanitize(m.Every)

	// Field: Until
	if m.Until != nil {
		if v, ok := any(m.GetUntil()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CalendarShort) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Color
	m.Color = htmlsanitizer.StripTags(m.Color)

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Description
	if m.Description != nil {
		*m.Description = htmlsanitizer.StripTags(*m.Description)
	}

	// Field: Job
	if m.Job != nil {
		*m.Job = htmlsanitizer.Sanitize(*m.Job)
	}

	// Field: Name
	m.Name = htmlsanitizer.StripTags(m.Name)

	// Field: Subscription
	if m.Subscription != nil {
		if v, ok := any(m.GetSubscription()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *CalendarSub) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: User
	if m.User != nil {
		if v, ok := any(m.GetUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
