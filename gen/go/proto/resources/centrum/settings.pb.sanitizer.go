// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/centrum/settings.proto

package centrum

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

func (m *Configuration) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DeduplicationDuration
	if m.DeduplicationDuration != nil {
		if v, ok := any(m.GetDeduplicationDuration()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Job) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *JobList) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Jobs
	for idx, item := range m.Jobs {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *PredefinedStatus) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DispatchStatus
	for idx, item := range m.DispatchStatus {
		_, _ = idx, item

		m.DispatchStatus[idx] = htmlsanitizer.StripTags(m.DispatchStatus[idx])

	}

	// Field: UnitStatus
	for idx, item := range m.UnitStatus {
		_, _ = idx, item

		m.UnitStatus[idx] = htmlsanitizer.StripTags(m.UnitStatus[idx])

	}

	return nil
}

func (m *Settings) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Access
	if m.Access != nil {
		if v, ok := any(m.GetAccess()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Configuration
	if m.Configuration != nil {
		if v, ok := any(m.GetConfiguration()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: PredefinedStatus
	if m.PredefinedStatus != nil {
		if v, ok := any(m.GetPredefinedStatus()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Timings
	if m.Timings != nil {
		if v, ok := any(m.GetTimings()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Timings) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}
