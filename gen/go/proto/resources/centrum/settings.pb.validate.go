// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/centrum/settings.proto

package centrum

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Settings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Settings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Settings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SettingsMultiError, or nil
// if none found.
func (m *Settings) ValidateAll() error {
	return m.validate(true)
}

func (m *Settings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := SettingsValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if _, ok := CentrumMode_name[int32(m.GetMode())]; !ok {
		err := SettingsValidationError{
			field:  "Mode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := CentrumMode_name[int32(m.GetFallbackMode())]; !ok {
		err := SettingsValidationError{
			field:  "FallbackMode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTimings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SettingsValidationError{
					field:  "Timings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SettingsValidationError{
					field:  "Timings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SettingsValidationError{
				field:  "Timings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.PredefinedStatus != nil {

		if all {
			switch v := interface{}(m.GetPredefinedStatus()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  "PredefinedStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SettingsValidationError{
						field:  "PredefinedStatus",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPredefinedStatus()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SettingsValidationError{
					field:  "PredefinedStatus",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SettingsMultiError(errors)
	}

	return nil
}

// SettingsMultiError is an error wrapping multiple validation errors returned
// by Settings.ValidateAll() if the designated constraints aren't met.
type SettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SettingsMultiError) AllErrors() []error { return m }

// SettingsValidationError is the validation error returned by
// Settings.Validate if the designated constraints aren't met.
type SettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SettingsValidationError) ErrorName() string { return "SettingsValidationError" }

// Error satisfies the builtin error interface
func (e SettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SettingsValidationError{}

// Validate checks the field values on PredefinedStatus with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PredefinedStatus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PredefinedStatus with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PredefinedStatusMultiError, or nil if none found.
func (m *PredefinedStatus) ValidateAll() error {
	return m.validate(true)
}

func (m *PredefinedStatus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetUnitStatus()) > 20 {
		err := PredefinedStatusValidationError{
			field:  "UnitStatus",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetUnitStatus() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 64 {
			err := PredefinedStatusValidationError{
				field:  fmt.Sprintf("UnitStatus[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetDispatchStatus()) > 20 {
		err := PredefinedStatusValidationError{
			field:  "DispatchStatus",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDispatchStatus() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 64 {
			err := PredefinedStatusValidationError{
				field:  fmt.Sprintf("DispatchStatus[%v]", idx),
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return PredefinedStatusMultiError(errors)
	}

	return nil
}

// PredefinedStatusMultiError is an error wrapping multiple validation errors
// returned by PredefinedStatus.ValidateAll() if the designated constraints
// aren't met.
type PredefinedStatusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PredefinedStatusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PredefinedStatusMultiError) AllErrors() []error { return m }

// PredefinedStatusValidationError is the validation error returned by
// PredefinedStatus.Validate if the designated constraints aren't met.
type PredefinedStatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PredefinedStatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PredefinedStatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PredefinedStatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PredefinedStatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PredefinedStatusValidationError) ErrorName() string { return "PredefinedStatusValidationError" }

// Error satisfies the builtin error interface
func (e PredefinedStatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPredefinedStatus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PredefinedStatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PredefinedStatusValidationError{}

// Validate checks the field values on Timings with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Timings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Timings with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TimingsMultiError, or nil if none found.
func (m *Timings) ValidateAll() error {
	return m.validate(true)
}

func (m *Timings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetDispatchMaxWait(); val <= 30 || val >= 6000 {
		err := TimingsValidationError{
			field:  "DispatchMaxWait",
			reason: "value must be inside range (30, 6000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RequireUnit

	if val := m.GetRequireUnitReminderSeconds(); val <= 30 || val >= 6000 {
		err := TimingsValidationError{
			field:  "RequireUnitReminderSeconds",
			reason: "value must be inside range (30, 6000)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TimingsMultiError(errors)
	}

	return nil
}

// TimingsMultiError is an error wrapping multiple validation errors returned
// by Timings.ValidateAll() if the designated constraints aren't met.
type TimingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimingsMultiError) AllErrors() []error { return m }

// TimingsValidationError is the validation error returned by Timings.Validate
// if the designated constraints aren't met.
type TimingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimingsValidationError) ErrorName() string { return "TimingsValidationError" }

// Error satisfies the builtin error interface
func (e TimingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimingsValidationError{}
