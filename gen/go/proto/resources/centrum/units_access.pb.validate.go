// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/centrum/units_access.proto

package centrum

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UnitAccess with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnitAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnitAccessMultiError, or
// nil if none found.
func (m *UnitAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetJobs()) > 20 {
		err := UnitAccessValidationError{
			field:  "Jobs",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetJobs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnitAccessValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnitAccessValidationError{
						field:  fmt.Sprintf("Jobs[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnitAccessValidationError{
					field:  fmt.Sprintf("Jobs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(m.GetQualifications()) > 20 {
		err := UnitAccessValidationError{
			field:  "Qualifications",
			reason: "value must contain no more than 20 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetQualifications() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnitAccessValidationError{
						field:  fmt.Sprintf("Qualifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnitAccessValidationError{
						field:  fmt.Sprintf("Qualifications[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnitAccessValidationError{
					field:  fmt.Sprintf("Qualifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnitAccessMultiError(errors)
	}

	return nil
}

// UnitAccessMultiError is an error wrapping multiple validation errors
// returned by UnitAccess.ValidateAll() if the designated constraints aren't met.
type UnitAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitAccessMultiError) AllErrors() []error { return m }

// UnitAccessValidationError is the validation error returned by
// UnitAccess.Validate if the designated constraints aren't met.
type UnitAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitAccessValidationError) ErrorName() string { return "UnitAccessValidationError" }

// Error satisfies the builtin error interface
func (e UnitAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitAccessValidationError{}

// Validate checks the field values on UnitJobAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnitJobAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitJobAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnitJobAccessMultiError, or
// nil if none found.
func (m *UnitJobAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitJobAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TargetId

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := UnitJobAccessValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinimumGrade() < 0 {
		err := UnitJobAccessValidationError{
			field:  "MinimumGrade",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := UnitAccessLevel_name[int32(m.GetAccess())]; !ok {
		err := UnitJobAccessValidationError{
			field:  "Access",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnitJobAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnitJobAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnitJobAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.JobLabel != nil {

		if utf8.RuneCountInString(m.GetJobLabel()) > 50 {
			err := UnitJobAccessValidationError{
				field:  "JobLabel",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.JobGradeLabel != nil {

		if utf8.RuneCountInString(m.GetJobGradeLabel()) > 50 {
			err := UnitJobAccessValidationError{
				field:  "JobGradeLabel",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UnitJobAccessMultiError(errors)
	}

	return nil
}

// UnitJobAccessMultiError is an error wrapping multiple validation errors
// returned by UnitJobAccess.ValidateAll() if the designated constraints
// aren't met.
type UnitJobAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitJobAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitJobAccessMultiError) AllErrors() []error { return m }

// UnitJobAccessValidationError is the validation error returned by
// UnitJobAccess.Validate if the designated constraints aren't met.
type UnitJobAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitJobAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitJobAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitJobAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitJobAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitJobAccessValidationError) ErrorName() string { return "UnitJobAccessValidationError" }

// Error satisfies the builtin error interface
func (e UnitJobAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitJobAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitJobAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitJobAccessValidationError{}

// Validate checks the field values on UnitUserAccess with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnitUserAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitUserAccess with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnitUserAccessMultiError,
// or nil if none found.
func (m *UnitUserAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitUserAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UnitUserAccessMultiError(errors)
	}

	return nil
}

// UnitUserAccessMultiError is an error wrapping multiple validation errors
// returned by UnitUserAccess.ValidateAll() if the designated constraints
// aren't met.
type UnitUserAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitUserAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitUserAccessMultiError) AllErrors() []error { return m }

// UnitUserAccessValidationError is the validation error returned by
// UnitUserAccess.Validate if the designated constraints aren't met.
type UnitUserAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitUserAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitUserAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitUserAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitUserAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitUserAccessValidationError) ErrorName() string { return "UnitUserAccessValidationError" }

// Error satisfies the builtin error interface
func (e UnitUserAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitUserAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitUserAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitUserAccessValidationError{}

// Validate checks the field values on UnitQualificationAccess with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UnitQualificationAccess) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnitQualificationAccess with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UnitQualificationAccessMultiError, or nil if none found.
func (m *UnitQualificationAccess) ValidateAll() error {
	return m.validate(true)
}

func (m *UnitQualificationAccess) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TargetId

	// no validation rules for QualificationId

	if _, ok := UnitAccessLevel_name[int32(m.GetAccess())]; !ok {
		err := UnitQualificationAccessValidationError{
			field:  "Access",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnitQualificationAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnitQualificationAccessValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnitQualificationAccessValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Qualification != nil {

		if all {
			switch v := interface{}(m.GetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UnitQualificationAccessValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UnitQualificationAccessValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UnitQualificationAccessValidationError{
					field:  "Qualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UnitQualificationAccessMultiError(errors)
	}

	return nil
}

// UnitQualificationAccessMultiError is an error wrapping multiple validation
// errors returned by UnitQualificationAccess.ValidateAll() if the designated
// constraints aren't met.
type UnitQualificationAccessMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnitQualificationAccessMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnitQualificationAccessMultiError) AllErrors() []error { return m }

// UnitQualificationAccessValidationError is the validation error returned by
// UnitQualificationAccess.Validate if the designated constraints aren't met.
type UnitQualificationAccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnitQualificationAccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnitQualificationAccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnitQualificationAccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnitQualificationAccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnitQualificationAccessValidationError) ErrorName() string {
	return "UnitQualificationAccessValidationError"
}

// Error satisfies the builtin error interface
func (e UnitQualificationAccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnitQualificationAccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnitQualificationAccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnitQualificationAccessValidationError{}
