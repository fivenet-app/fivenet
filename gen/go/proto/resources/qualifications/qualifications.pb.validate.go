// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/qualifications/qualifications.proto

package qualifications

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Qualification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Qualification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Qualification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QualificationMultiError, or
// nil if none found.
func (m *Qualification) ValidateAll() error {
	return m.validate(true)
}

func (m *Qualification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := QualificationValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() >= 4294967295 {
		err := QualificationValidationError{
			field:  "Weight",
			reason: "value must be less than 4294967295",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Closed

	if utf8.RuneCountInString(m.GetAbbreviation()) > 20 {
		err := QualificationValidationError{
			field:  "Abbreviation",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 1024 {
		err := QualificationValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetContent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationValidationError{
					field:  "Content",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetContent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationValidationError{
				field:  "Content",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCreatorJob()) > 20 {
		err := QualificationValidationError{
			field:  "CreatorJob",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAccess()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationValidationError{
					field:  "Access",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationValidationError{
				field:  "Access",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRequirements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  fmt.Sprintf("Requirements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  fmt.Sprintf("Requirements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  fmt.Sprintf("Requirements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DiscordSyncEnabled

	if _, ok := QualificationExamMode_name[int32(m.GetExamMode())]; !ok {
		err := QualificationValidationError{
			field:  "ExamMode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LabelSyncEnabled

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) > 512 {
			err := QualificationValidationError{
				field:  "Description",
				reason: "value length must be at most 512 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CreatorId != nil {

		if m.GetCreatorId() <= 0 {
			err := QualificationValidationError{
				field:  "CreatorId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Creator != nil {

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DiscordSettings != nil {

		if all {
			switch v := interface{}(m.GetDiscordSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "DiscordSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "DiscordSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDiscordSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "DiscordSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExamSettings != nil {

		if all {
			switch v := interface{}(m.GetExamSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "ExamSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "ExamSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "ExamSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Exam != nil {

		if all {
			switch v := interface{}(m.GetExam()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Exam",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Exam",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExam()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "Exam",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Request != nil {

		if all {
			switch v := interface{}(m.GetRequest()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Request",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationValidationError{
						field:  "Request",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetRequest()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationValidationError{
					field:  "Request",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.LabelSyncFormat != nil {

		if utf8.RuneCountInString(m.GetLabelSyncFormat()) > 128 {
			err := QualificationValidationError{
				field:  "LabelSyncFormat",
				reason: "value length must be at most 128 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return QualificationMultiError(errors)
	}

	return nil
}

// QualificationMultiError is an error wrapping multiple validation errors
// returned by Qualification.ValidateAll() if the designated constraints
// aren't met.
type QualificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationMultiError) AllErrors() []error { return m }

// QualificationValidationError is the validation error returned by
// Qualification.Validate if the designated constraints aren't met.
type QualificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationValidationError) ErrorName() string { return "QualificationValidationError" }

// Error satisfies the builtin error interface
func (e QualificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationValidationError{}

// Validate checks the field values on QualificationShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationShort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationShort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationShortMultiError, or nil if none found.
func (m *QualificationShort) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationShort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := QualificationShortValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetWeight() >= 4294967295 {
		err := QualificationShortValidationError{
			field:  "Weight",
			reason: "value must be less than 4294967295",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Closed

	if utf8.RuneCountInString(m.GetAbbreviation()) > 20 {
		err := QualificationShortValidationError{
			field:  "Abbreviation",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 3 || l > 1024 {
		err := QualificationShortValidationError{
			field:  "Title",
			reason: "value length must be between 3 and 1024 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCreatorJob()) > 20 {
		err := QualificationShortValidationError{
			field:  "CreatorJob",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetRequirements() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  fmt.Sprintf("Requirements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  fmt.Sprintf("Requirements[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  fmt.Sprintf("Requirements[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if _, ok := QualificationExamMode_name[int32(m.GetExamMode())]; !ok {
		err := QualificationShortValidationError{
			field:  "ExamMode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {

		if utf8.RuneCountInString(m.GetDescription()) > 512 {
			err := QualificationShortValidationError{
				field:  "Description",
				reason: "value length must be at most 512 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CreatorId != nil {

		if m.GetCreatorId() <= 0 {
			err := QualificationShortValidationError{
				field:  "CreatorId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Creator != nil {

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExamSettings != nil {

		if all {
			switch v := interface{}(m.GetExamSettings()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "ExamSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "ExamSettings",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExamSettings()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  "ExamSettings",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Result != nil {

		if all {
			switch v := interface{}(m.GetResult()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationShortValidationError{
						field:  "Result",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationShortValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QualificationShortMultiError(errors)
	}

	return nil
}

// QualificationShortMultiError is an error wrapping multiple validation errors
// returned by QualificationShort.ValidateAll() if the designated constraints
// aren't met.
type QualificationShortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationShortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationShortMultiError) AllErrors() []error { return m }

// QualificationShortValidationError is the validation error returned by
// QualificationShort.Validate if the designated constraints aren't met.
type QualificationShortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationShortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationShortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationShortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationShortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationShortValidationError) ErrorName() string {
	return "QualificationShortValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationShortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationShort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationShortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationShortValidationError{}

// Validate checks the field values on QualificationRequirement with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationRequirement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationRequirement with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationRequirementMultiError, or nil if none found.
func (m *QualificationRequirement) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationRequirement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for QualificationId

	// no validation rules for TargetQualificationId

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequirementValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequirementValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequirementValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.TargetQualification != nil {

		if all {
			switch v := interface{}(m.GetTargetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequirementValidationError{
						field:  "TargetQualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequirementValidationError{
						field:  "TargetQualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTargetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequirementValidationError{
					field:  "TargetQualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QualificationRequirementMultiError(errors)
	}

	return nil
}

// QualificationRequirementMultiError is an error wrapping multiple validation
// errors returned by QualificationRequirement.ValidateAll() if the designated
// constraints aren't met.
type QualificationRequirementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationRequirementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationRequirementMultiError) AllErrors() []error { return m }

// QualificationRequirementValidationError is the validation error returned by
// QualificationRequirement.Validate if the designated constraints aren't met.
type QualificationRequirementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationRequirementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationRequirementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationRequirementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationRequirementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationRequirementValidationError) ErrorName() string {
	return "QualificationRequirementValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationRequirementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationRequirement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationRequirementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationRequirementValidationError{}

// Validate checks the field values on QualificationDiscordSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationDiscordSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationDiscordSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationDiscordSettingsMultiError, or nil if none found.
func (m *QualificationDiscordSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationDiscordSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.RoleName != nil {

		if utf8.RuneCountInString(m.GetRoleName()) > 64 {
			err := QualificationDiscordSettingsValidationError{
				field:  "RoleName",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.RoleFormat != nil {

		if utf8.RuneCountInString(m.GetRoleFormat()) > 64 {
			err := QualificationDiscordSettingsValidationError{
				field:  "RoleFormat",
				reason: "value length must be at most 64 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return QualificationDiscordSettingsMultiError(errors)
	}

	return nil
}

// QualificationDiscordSettingsMultiError is an error wrapping multiple
// validation errors returned by QualificationDiscordSettings.ValidateAll() if
// the designated constraints aren't met.
type QualificationDiscordSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationDiscordSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationDiscordSettingsMultiError) AllErrors() []error { return m }

// QualificationDiscordSettingsValidationError is the validation error returned
// by QualificationDiscordSettings.Validate if the designated constraints
// aren't met.
type QualificationDiscordSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationDiscordSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationDiscordSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationDiscordSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationDiscordSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationDiscordSettingsValidationError) ErrorName() string {
	return "QualificationDiscordSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationDiscordSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationDiscordSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationDiscordSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationDiscordSettingsValidationError{}

// Validate checks the field values on QualificationExamSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationExamSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationExamSettings with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationExamSettingsMultiError, or nil if none found.
func (m *QualificationExamSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationExamSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTime() == nil {
		err := QualificationExamSettingsValidationError{
			field:  "Time",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetTime(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = QualificationExamSettingsValidationError{
				field:  "Time",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(1036800*time.Second + 0*time.Nanosecond)
			gte := time.Duration(300*time.Second + 0*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := QualificationExamSettingsValidationError{
					field:  "Time",
					reason: "value must be inside range [5m0s, 288h0m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return QualificationExamSettingsMultiError(errors)
	}

	return nil
}

// QualificationExamSettingsMultiError is an error wrapping multiple validation
// errors returned by QualificationExamSettings.ValidateAll() if the
// designated constraints aren't met.
type QualificationExamSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationExamSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationExamSettingsMultiError) AllErrors() []error { return m }

// QualificationExamSettingsValidationError is the validation error returned by
// QualificationExamSettings.Validate if the designated constraints aren't met.
type QualificationExamSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationExamSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationExamSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationExamSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationExamSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationExamSettingsValidationError) ErrorName() string {
	return "QualificationExamSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationExamSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationExamSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationExamSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationExamSettingsValidationError{}

// Validate checks the field values on QualificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationRequestMultiError, or nil if none found.
func (m *QualificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for QualificationId

	if m.GetUserId() < 0 {
		err := QualificationRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationRequestValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequestValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequestValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Qualification != nil {

		if all {
			switch v := interface{}(m.GetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequestValidationError{
					field:  "Qualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UserComment != nil {

		if utf8.RuneCountInString(m.GetUserComment()) > 512 {
			err := QualificationRequestValidationError{
				field:  "UserComment",
				reason: "value length must be at most 512 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Status != nil {

		if _, ok := RequestStatus_name[int32(m.GetStatus())]; !ok {
			err := QualificationRequestValidationError{
				field:  "Status",
				reason: "value must be one of the defined enum values",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ApprovedAt != nil {

		if all {
			switch v := interface{}(m.GetApprovedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "ApprovedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "ApprovedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApprovedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequestValidationError{
					field:  "ApprovedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ApproverComment != nil {

		if utf8.RuneCountInString(m.GetApproverComment()) > 512 {
			err := QualificationRequestValidationError{
				field:  "ApproverComment",
				reason: "value length must be at most 512 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.ApproverId != nil {

		if m.GetApproverId() <= 0 {
			err := QualificationRequestValidationError{
				field:  "ApproverId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Approver != nil {

		if all {
			switch v := interface{}(m.GetApprover()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "Approver",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationRequestValidationError{
						field:  "Approver",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetApprover()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationRequestValidationError{
					field:  "Approver",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ApproverJob != nil {
		// no validation rules for ApproverJob
	}

	if len(errors) > 0 {
		return QualificationRequestMultiError(errors)
	}

	return nil
}

// QualificationRequestMultiError is an error wrapping multiple validation
// errors returned by QualificationRequest.ValidateAll() if the designated
// constraints aren't met.
type QualificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationRequestMultiError) AllErrors() []error { return m }

// QualificationRequestValidationError is the validation error returned by
// QualificationRequest.Validate if the designated constraints aren't met.
type QualificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationRequestValidationError) ErrorName() string {
	return "QualificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationRequestValidationError{}

// Validate checks the field values on QualificationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *QualificationResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QualificationResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// QualificationResultMultiError, or nil if none found.
func (m *QualificationResult) ValidateAll() error {
	return m.validate(true)
}

func (m *QualificationResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for QualificationId

	if m.GetUserId() < 0 {
		err := QualificationResultValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationResultValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if _, ok := ResultStatus_name[int32(m.GetStatus())]; !ok {
		err := QualificationResultValidationError{
			field:  "Status",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSummary()) > 512 {
		err := QualificationResultValidationError{
			field:  "Summary",
			reason: "value length must be at most 512 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCreatorId() <= 0 {
		err := QualificationResultValidationError{
			field:  "CreatorId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreator()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QualificationResultValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QualificationResultValidationError{
				field:  "Creator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetCreatorJob()) > 20 {
		err := QualificationResultValidationError{
			field:  "CreatorJob",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationResultValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationResultValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Qualification != nil {

		if all {
			switch v := interface{}(m.GetQualification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QualificationResultValidationError{
						field:  "Qualification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetQualification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QualificationResultValidationError{
					field:  "Qualification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Score != nil {

		if val := m.GetScore(); val < 0 || val > 1000 {
			err := QualificationResultValidationError{
				field:  "Score",
				reason: "value must be inside range [0, 1000]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return QualificationResultMultiError(errors)
	}

	return nil
}

// QualificationResultMultiError is an error wrapping multiple validation
// errors returned by QualificationResult.ValidateAll() if the designated
// constraints aren't met.
type QualificationResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QualificationResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QualificationResultMultiError) AllErrors() []error { return m }

// QualificationResultValidationError is the validation error returned by
// QualificationResult.Validate if the designated constraints aren't met.
type QualificationResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QualificationResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QualificationResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QualificationResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QualificationResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QualificationResultValidationError) ErrorName() string {
	return "QualificationResultValidationError"
}

// Error satisfies the builtin error interface
func (e QualificationResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQualificationResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QualificationResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QualificationResultValidationError{}
