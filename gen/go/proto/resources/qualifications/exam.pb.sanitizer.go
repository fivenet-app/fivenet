// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/qualifications/exam.proto

package qualifications

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamGrading) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Responses
	for idx, item := range m.Responses {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamGradingResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestion) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Answer
	if m.Answer != nil {
		if v, ok := any(m.GetAnswer()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Description
	if m.Description != nil {
		*m.Description = htmlsanitizer.StripTags(*m.Description)
	}

	// Field: Title
	m.Title = htmlsanitizer.StripTags(m.Title)

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionAnswerData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AnswerKey
	m.AnswerKey = htmlsanitizer.Sanitize(m.AnswerKey)

	// Field: FreeText
	switch v := m.Answer.(type) {

	case *ExamQuestionAnswerData_FreeText:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: MultipleChoice
	case *ExamQuestionAnswerData_MultipleChoice:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: SingleChoice
	case *ExamQuestionAnswerData_SingleChoice:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Yesno
	case *ExamQuestionAnswerData_Yesno:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: FreeText
	switch v := m.Data.(type) {

	case *ExamQuestionData_FreeText:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Image
	case *ExamQuestionData_Image:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: MultipleChoice
	case *ExamQuestionData_MultipleChoice:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Separator
	case *ExamQuestionData_Separator:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: SingleChoice
	case *ExamQuestionData_SingleChoice:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Yesno
	case *ExamQuestionData_Yesno:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionImage) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Alt
	if m.Alt != nil {
		*m.Alt = htmlsanitizer.Sanitize(*m.Alt)
	}

	// Field: Image
	if m.Image != nil {
		if v, ok := any(m.GetImage()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionMultipleChoice) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Choices
	for idx, item := range m.Choices {
		_, _ = idx, item

		m.Choices[idx] = htmlsanitizer.StripTags(m.Choices[idx])

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionSeparator) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionSingleChoice) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Choices
	for idx, item := range m.Choices {
		_, _ = idx, item

		m.Choices[idx] = htmlsanitizer.StripTags(m.Choices[idx])

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionText) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestionYesNo) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamQuestions) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Questions
	for idx, item := range m.Questions {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponse) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Question
	if m.Question != nil {
		if v, ok := any(m.GetQuestion()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Response
	if m.Response != nil {
		if v, ok := any(m.GetResponse()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponseData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: FreeText
	switch v := m.Response.(type) {

	case *ExamResponseData_FreeText:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: MultipleChoice
	case *ExamResponseData_MultipleChoice:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Separator
	case *ExamResponseData_Separator:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: SingleChoice
	case *ExamResponseData_SingleChoice:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Yesno
	case *ExamResponseData_Yesno:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponseMultipleChoice) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Choices
	for idx, item := range m.Choices {
		_, _ = idx, item

		m.Choices[idx] = htmlsanitizer.StripTags(m.Choices[idx])

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponseSeparator) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponseSingleChoice) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Choice
	m.Choice = htmlsanitizer.StripTags(m.Choice)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponseText) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Text
	m.Text = htmlsanitizer.StripTags(m.Text)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponseYesNo) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamResponses) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Responses
	for idx, item := range m.Responses {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ExamUser) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: EndedAt
	if m.EndedAt != nil {
		if v, ok := any(m.GetEndedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: EndsAt
	if m.EndsAt != nil {
		if v, ok := any(m.GetEndsAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: StartedAt
	if m.StartedAt != nil {
		if v, ok := any(m.GetStartedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
