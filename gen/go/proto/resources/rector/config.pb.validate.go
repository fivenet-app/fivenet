// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/rector/config.proto

package rector

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AppConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AppConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AppConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AppConfigMultiError, or nil
// if none found.
func (m *AppConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AppConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetDefaultLocale()) > 20 {
		err := AppConfigValidationError{
			field:  "DefaultLocale",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetAuth()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Auth",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuth()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Auth",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPerms()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Perms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Perms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPerms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Perms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebsite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Website",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Website",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebsite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Website",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJobInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "JobInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "JobInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "JobInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUserTracker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "UserTracker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "UserTracker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserTracker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "UserTracker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Discord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "Discord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "Discord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AppConfigValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AppConfigValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Version != nil {
		// no validation rules for Version
	}

	if len(errors) > 0 {
		return AppConfigMultiError(errors)
	}

	return nil
}

// AppConfigMultiError is an error wrapping multiple validation errors returned
// by AppConfig.ValidateAll() if the designated constraints aren't met.
type AppConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AppConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AppConfigMultiError) AllErrors() []error { return m }

// AppConfigValidationError is the validation error returned by
// AppConfig.Validate if the designated constraints aren't met.
type AppConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AppConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AppConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AppConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AppConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AppConfigValidationError) ErrorName() string { return "AppConfigValidationError" }

// Error satisfies the builtin error interface
func (e AppConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAppConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AppConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AppConfigValidationError{}

// Validate checks the field values on Auth with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Auth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Auth with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthMultiError, or nil if none found.
func (m *Auth) ValidateAll() error {
	return m.validate(true)
}

func (m *Auth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignupEnabled

	// no validation rules for LastCharLock

	if len(errors) > 0 {
		return AuthMultiError(errors)
	}

	return nil
}

// AuthMultiError is an error wrapping multiple validation errors returned by
// Auth.ValidateAll() if the designated constraints aren't met.
type AuthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthMultiError) AllErrors() []error { return m }

// AuthValidationError is the validation error returned by Auth.Validate if the
// designated constraints aren't met.
type AuthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthValidationError) ErrorName() string { return "AuthValidationError" }

// Error satisfies the builtin error interface
func (e AuthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthValidationError{}

// Validate checks the field values on Perms with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Perms) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Perms with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PermsMultiError, or nil if none found.
func (m *Perms) ValidateAll() error {
	return m.validate(true)
}

func (m *Perms) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetDefault()) > 100 {
		err := PermsValidationError{
			field:  "Default",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDefault() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PermsValidationError{
						field:  fmt.Sprintf("Default[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PermsValidationError{
						field:  fmt.Sprintf("Default[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PermsValidationError{
					field:  fmt.Sprintf("Default[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PermsMultiError(errors)
	}

	return nil
}

// PermsMultiError is an error wrapping multiple validation errors returned by
// Perms.ValidateAll() if the designated constraints aren't met.
type PermsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermsMultiError) AllErrors() []error { return m }

// PermsValidationError is the validation error returned by Perms.Validate if
// the designated constraints aren't met.
type PermsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermsValidationError) ErrorName() string { return "PermsValidationError" }

// Error satisfies the builtin error interface
func (e PermsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerms.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermsValidationError{}

// Validate checks the field values on Perm with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Perm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Perm with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in PermMultiError, or nil if none found.
func (m *Perm) ValidateAll() error {
	return m.validate(true)
}

func (m *Perm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetCategory()) > 128 {
		err := PermValidationError{
			field:  "Category",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) > 255 {
		err := PermValidationError{
			field:  "Name",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PermMultiError(errors)
	}

	return nil
}

// PermMultiError is an error wrapping multiple validation errors returned by
// Perm.ValidateAll() if the designated constraints aren't met.
type PermMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermMultiError) AllErrors() []error { return m }

// PermValidationError is the validation error returned by Perm.Validate if the
// designated constraints aren't met.
type PermValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermValidationError) ErrorName() string { return "PermValidationError" }

// Error satisfies the builtin error interface
func (e PermValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPerm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermValidationError{}

// Validate checks the field values on Website with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Website) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Website with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WebsiteMultiError, or nil if none found.
func (m *Website) ValidateAll() error {
	return m.validate(true)
}

func (m *Website) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLinks()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsiteValidationError{
					field:  "Links",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsiteValidationError{
					field:  "Links",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsiteValidationError{
				field:  "Links",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatsPage

	if len(errors) > 0 {
		return WebsiteMultiError(errors)
	}

	return nil
}

// WebsiteMultiError is an error wrapping multiple validation errors returned
// by Website.ValidateAll() if the designated constraints aren't met.
type WebsiteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsiteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsiteMultiError) AllErrors() []error { return m }

// WebsiteValidationError is the validation error returned by Website.Validate
// if the designated constraints aren't met.
type WebsiteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsiteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsiteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsiteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsiteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsiteValidationError) ErrorName() string { return "WebsiteValidationError" }

// Error satisfies the builtin error interface
func (e WebsiteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsiteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsiteValidationError{}

// Validate checks the field values on Links with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Links) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Links with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinksMultiError, or nil if none found.
func (m *Links) ValidateAll() error {
	return m.validate(true)
}

func (m *Links) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.PrivacyPolicy != nil {

		if utf8.RuneCountInString(m.GetPrivacyPolicy()) > 255 {
			err := LinksValidationError{
				field:  "PrivacyPolicy",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Imprint != nil {

		if utf8.RuneCountInString(m.GetImprint()) > 255 {
			err := LinksValidationError{
				field:  "Imprint",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return LinksMultiError(errors)
	}

	return nil
}

// LinksMultiError is an error wrapping multiple validation errors returned by
// Links.ValidateAll() if the designated constraints aren't met.
type LinksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinksMultiError) AllErrors() []error { return m }

// LinksValidationError is the validation error returned by Links.Validate if
// the designated constraints aren't met.
type LinksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinksValidationError) ErrorName() string { return "LinksValidationError" }

// Error satisfies the builtin error interface
func (e LinksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinksValidationError{}

// Validate checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JobInfoMultiError, or nil if none found.
func (m *JobInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *JobInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUnemployedJob() == nil {
		err := JobInfoValidationError{
			field:  "UnemployedJob",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetUnemployedJob()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "UnemployedJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobInfoValidationError{
					field:  "UnemployedJob",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUnemployedJob()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobInfoValidationError{
				field:  "UnemployedJob",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetPublicJobs()) > 100 {
		err := JobInfoValidationError{
			field:  "PublicJobs",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetHiddenJobs()) > 100 {
		err := JobInfoValidationError{
			field:  "HiddenJobs",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JobInfoMultiError(errors)
	}

	return nil
}

// JobInfoMultiError is an error wrapping multiple validation errors returned
// by JobInfo.ValidateAll() if the designated constraints aren't met.
type JobInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobInfoMultiError) AllErrors() []error { return m }

// JobInfoValidationError is the validation error returned by JobInfo.Validate
// if the designated constraints aren't met.
type JobInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobInfoValidationError) ErrorName() string { return "JobInfoValidationError" }

// Error satisfies the builtin error interface
func (e JobInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobInfoValidationError{}

// Validate checks the field values on UnemployedJob with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UnemployedJob) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UnemployedJob with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UnemployedJobMultiError, or
// nil if none found.
func (m *UnemployedJob) ValidateAll() error {
	return m.validate(true)
}

func (m *UnemployedJob) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 20 {
		err := UnemployedJobValidationError{
			field:  "Name",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGrade() < 0 {
		err := UnemployedJobValidationError{
			field:  "Grade",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UnemployedJobMultiError(errors)
	}

	return nil
}

// UnemployedJobMultiError is an error wrapping multiple validation errors
// returned by UnemployedJob.ValidateAll() if the designated constraints
// aren't met.
type UnemployedJobMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UnemployedJobMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UnemployedJobMultiError) AllErrors() []error { return m }

// UnemployedJobValidationError is the validation error returned by
// UnemployedJob.Validate if the designated constraints aren't met.
type UnemployedJobValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnemployedJobValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnemployedJobValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnemployedJobValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnemployedJobValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnemployedJobValidationError) ErrorName() string { return "UnemployedJobValidationError" }

// Error satisfies the builtin error interface
func (e UnemployedJobValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnemployedJob.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnemployedJobValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnemployedJobValidationError{}

// Validate checks the field values on UserTracker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserTracker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserTracker with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserTrackerMultiError, or
// nil if none found.
func (m *UserTracker) ValidateAll() error {
	return m.validate(true)
}

func (m *UserTracker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetRefreshTime() == nil {
		err := UserTrackerValidationError{
			field:  "RefreshTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetRefreshTime(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = UserTrackerValidationError{
				field:  "RefreshTime",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(60*time.Second + 0*time.Nanosecond)
			gte := time.Duration(0*time.Second + 500000000*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := UserTrackerValidationError{
					field:  "RefreshTime",
					reason: "value must be inside range [500ms, 1m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if m.GetDbRefreshTime() == nil {
		err := UserTrackerValidationError{
			field:  "DbRefreshTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetDbRefreshTime(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = UserTrackerValidationError{
				field:  "DbRefreshTime",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(60*time.Second + 0*time.Nanosecond)
			gte := time.Duration(0*time.Second + 500000000*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := UserTrackerValidationError{
					field:  "DbRefreshTime",
					reason: "value must be inside range [500ms, 1m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(errors) > 0 {
		return UserTrackerMultiError(errors)
	}

	return nil
}

// UserTrackerMultiError is an error wrapping multiple validation errors
// returned by UserTracker.ValidateAll() if the designated constraints aren't met.
type UserTrackerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserTrackerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserTrackerMultiError) AllErrors() []error { return m }

// UserTrackerValidationError is the validation error returned by
// UserTracker.Validate if the designated constraints aren't met.
type UserTrackerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserTrackerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserTrackerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserTrackerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserTrackerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserTrackerValidationError) ErrorName() string { return "UserTrackerValidationError" }

// Error satisfies the builtin error interface
func (e UserTrackerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserTracker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserTrackerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserTrackerValidationError{}

// Validate checks the field values on Discord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DiscordMultiError, or nil if none found.
func (m *Discord) ValidateAll() error {
	return m.validate(true)
}

func (m *Discord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	if m.GetSyncInterval() == nil {
		err := DiscordValidationError{
			field:  "SyncInterval",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if d := m.GetSyncInterval(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			err = DiscordValidationError{
				field:  "SyncInterval",
				reason: "value is not a valid duration",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {

			lt := time.Duration(180000000*time.Second + 0*time.Nanosecond)
			gte := time.Duration(60*time.Second + 0*time.Nanosecond)

			if dur < gte || dur >= lt {
				err := DiscordValidationError{
					field:  "SyncInterval",
					reason: "value must be inside range [1m0s, 50000h0m0s)",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

		}
	}

	if len(m.GetIgnoredJobs()) > 100 {
		err := DiscordValidationError{
			field:  "IgnoredJobs",
			reason: "value must contain no more than 100 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.InviteUrl != nil {

		if utf8.RuneCountInString(m.GetInviteUrl()) > 255 {
			err := DiscordValidationError{
				field:  "InviteUrl",
				reason: "value length must be at most 255 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.BotPresence != nil {

		if all {
			switch v := interface{}(m.GetBotPresence()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscordValidationError{
						field:  "BotPresence",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscordValidationError{
						field:  "BotPresence",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBotPresence()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscordValidationError{
					field:  "BotPresence",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscordMultiError(errors)
	}

	return nil
}

// DiscordMultiError is an error wrapping multiple validation errors returned
// by Discord.ValidateAll() if the designated constraints aren't met.
type DiscordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordMultiError) AllErrors() []error { return m }

// DiscordValidationError is the validation error returned by Discord.Validate
// if the designated constraints aren't met.
type DiscordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordValidationError) ErrorName() string { return "DiscordValidationError" }

// Error satisfies the builtin error interface
func (e DiscordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordValidationError{}

// Validate checks the field values on DiscordBotPresence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscordBotPresence) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscordBotPresence with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscordBotPresenceMultiError, or nil if none found.
func (m *DiscordBotPresence) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscordBotPresence) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if m.Status != nil {
		// no validation rules for Status
	}

	if m.Url != nil {
		// no validation rules for Url
	}

	if len(errors) > 0 {
		return DiscordBotPresenceMultiError(errors)
	}

	return nil
}

// DiscordBotPresenceMultiError is an error wrapping multiple validation errors
// returned by DiscordBotPresence.ValidateAll() if the designated constraints
// aren't met.
type DiscordBotPresenceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordBotPresenceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordBotPresenceMultiError) AllErrors() []error { return m }

// DiscordBotPresenceValidationError is the validation error returned by
// DiscordBotPresence.Validate if the designated constraints aren't met.
type DiscordBotPresenceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordBotPresenceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordBotPresenceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordBotPresenceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordBotPresenceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordBotPresenceValidationError) ErrorName() string {
	return "DiscordBotPresenceValidationError"
}

// Error satisfies the builtin error interface
func (e DiscordBotPresenceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscordBotPresence.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordBotPresenceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordBotPresenceValidationError{}

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *System) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SystemMultiError, or nil if none found.
func (m *System) ValidateAll() error {
	return m.validate(true)
}

func (m *System) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BannerMessageEnabled

	if all {
		switch v := interface{}(m.GetBannerMessage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemValidationError{
					field:  "BannerMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemValidationError{
					field:  "BannerMessage",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBannerMessage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemValidationError{
				field:  "BannerMessage",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SystemMultiError(errors)
	}

	return nil
}

// SystemMultiError is an error wrapping multiple validation errors returned by
// System.ValidateAll() if the designated constraints aren't met.
type SystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMultiError) AllErrors() []error { return m }

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}
