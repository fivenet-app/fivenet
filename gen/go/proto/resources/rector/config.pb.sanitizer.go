// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/rector/config.proto

package rector

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

func (m *AppConfig) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Auth
	if m.Auth != nil {
		if v, ok := any(m.GetAuth()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Discord
	if m.Discord != nil {
		if v, ok := any(m.GetDiscord()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: JobInfo
	if m.JobInfo != nil {
		if v, ok := any(m.GetJobInfo()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Perms
	if m.Perms != nil {
		if v, ok := any(m.GetPerms()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: System
	if m.System != nil {
		if v, ok := any(m.GetSystem()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: UserTracker
	if m.UserTracker != nil {
		if v, ok := any(m.GetUserTracker()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Website
	if m.Website != nil {
		if v, ok := any(m.GetWebsite()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Auth) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *Discord) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: BotPresence
	if m.BotPresence != nil {
		if v, ok := any(m.GetBotPresence()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: IgnoredJobs
	for idx, item := range m.IgnoredJobs {
		_, _ = idx, item

		m.IgnoredJobs[idx] = htmlsanitizer.StripTags(m.IgnoredJobs[idx])

	}

	// Field: InviteUrl

	if m.InviteUrl != nil {
		*m.InviteUrl = htmlsanitizer.StripTags(*m.InviteUrl)
	}

	// Field: SyncInterval
	if m.SyncInterval != nil {
		if v, ok := any(m.GetSyncInterval()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *DiscordBotPresence) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Status

	if m.Status != nil {
		*m.Status = htmlsanitizer.StripTags(*m.Status)
	}

	// Field: Url

	if m.Url != nil {
		*m.Url = htmlsanitizer.StripTags(*m.Url)
	}

	return nil
}

func (m *JobInfo) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: HiddenJobs
	for idx, item := range m.HiddenJobs {
		_, _ = idx, item

		m.HiddenJobs[idx] = htmlsanitizer.StripTags(m.HiddenJobs[idx])

	}

	// Field: PublicJobs
	for idx, item := range m.PublicJobs {
		_, _ = idx, item

		m.PublicJobs[idx] = htmlsanitizer.StripTags(m.PublicJobs[idx])

	}

	// Field: UnemployedJob
	if m.UnemployedJob != nil {
		if v, ok := any(m.GetUnemployedJob()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Links) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Imprint

	if m.Imprint != nil {
		*m.Imprint = htmlsanitizer.StripTags(*m.Imprint)
	}

	// Field: PrivacyPolicy

	if m.PrivacyPolicy != nil {
		*m.PrivacyPolicy = htmlsanitizer.StripTags(*m.PrivacyPolicy)
	}

	return nil
}

func (m *Perm) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Category
	m.Category = htmlsanitizer.StripTags(m.Category)

	// Field: Name
	m.Name = htmlsanitizer.StripTags(m.Name)

	return nil
}

func (m *Perms) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Default
	for idx, item := range m.Default {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *System) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: BannerMessage
	if m.BannerMessage != nil {
		if v, ok := any(m.GetBannerMessage()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *UnemployedJob) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *UserTracker) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DbRefreshTime
	if m.DbRefreshTime != nil {
		if v, ok := any(m.GetDbRefreshTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: RefreshTime
	if m.RefreshTime != nil {
		if v, ok := any(m.GetRefreshTime()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *Website) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Links
	if m.Links != nil {
		if v, ok := any(m.GetLinks()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
