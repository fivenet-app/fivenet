// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/livemap/livemap.proto

package livemap

import (
	"github.com/fivenet-app/fivenet/pkg/html/htmlsanitizer"
)

func (m *CircleMarker) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *Coords) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *IconMarker) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Icon
	m.Icon = htmlsanitizer.StripTags(m.Icon)

	return nil
}

func (m *MarkerData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Circle
	switch v := m.Data.(type) {

	case *MarkerData_Circle:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: Icon
	case *MarkerData_Icon:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *MarkerMarker) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Color

	if m.Color != nil {
		*m.Color = htmlsanitizer.StripTags(*m.Color)
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Creator
	if m.Creator != nil {
		if v, ok := any(m.GetCreator()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: DeletedAt
	if m.DeletedAt != nil {
		if v, ok := any(m.GetDeletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Description

	if m.Description != nil {
		*m.Description = htmlsanitizer.Sanitize(*m.Description)
	}

	// Field: ExpiresAt
	if m.ExpiresAt != nil {
		if v, ok := any(m.GetExpiresAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Name
	m.Name = htmlsanitizer.Sanitize(m.Name)

	// Field: Postal

	if m.Postal != nil {
		*m.Postal = htmlsanitizer.StripTags(*m.Postal)
	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *UserMarker) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Color

	if m.Color != nil {
		*m.Color = htmlsanitizer.StripTags(*m.Color)
	}

	// Field: Postal

	if m.Postal != nil {
		*m.Postal = htmlsanitizer.StripTags(*m.Postal)
	}

	// Field: Unit
	if m.Unit != nil {
		if v, ok := any(m.GetUnit()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: User
	if m.User != nil {
		if v, ok := any(m.GetUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
