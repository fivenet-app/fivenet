// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/livemap/marker_marker.proto

package livemap

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MarkerMarker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MarkerMarker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkerMarker with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MarkerMarkerMultiError, or
// nil if none found.
func (m *MarkerMarker) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkerMarker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for X

	// no validation rules for Y

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := MarkerMarkerValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := MarkerMarkerValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for JobLabel

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MarkerMarkerValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MarkerMarkerValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MarkerMarkerValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerMarkerValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.UpdatedAt != nil {

		if all {
			switch v := interface{}(m.GetUpdatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "UpdatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerMarkerValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.ExpiresAt != nil {

		if all {
			switch v := interface{}(m.GetExpiresAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "ExpiresAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "ExpiresAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetExpiresAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerMarkerValidationError{
					field:  "ExpiresAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerMarkerValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Postal != nil {

		if utf8.RuneCountInString(m.GetPostal()) > 48 {
			err := MarkerMarkerValidationError{
				field:  "Postal",
				reason: "value length must be at most 48 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Color != nil {

		if utf8.RuneCountInString(m.GetColor()) != 7 {
			err := MarkerMarkerValidationError{
				field:  "Color",
				reason: "value length must be 7 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)

		}

		if !_MarkerMarker_Color_Pattern.MatchString(m.GetColor()) {
			err := MarkerMarkerValidationError{
				field:  "Color",
				reason: "value does not match regex pattern \"^#[A-Fa-f0-9]{6}$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.CreatorId != nil {

		if m.GetCreatorId() <= 0 {
			err := MarkerMarkerValidationError{
				field:  "CreatorId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.Creator != nil {

		if all {
			switch v := interface{}(m.GetCreator()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerMarkerValidationError{
						field:  "Creator",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreator()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerMarkerValidationError{
					field:  "Creator",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MarkerMarkerMultiError(errors)
	}

	return nil
}

// MarkerMarkerMultiError is an error wrapping multiple validation errors
// returned by MarkerMarker.ValidateAll() if the designated constraints aren't met.
type MarkerMarkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkerMarkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkerMarkerMultiError) AllErrors() []error { return m }

// MarkerMarkerValidationError is the validation error returned by
// MarkerMarker.Validate if the designated constraints aren't met.
type MarkerMarkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkerMarkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkerMarkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkerMarkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkerMarkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkerMarkerValidationError) ErrorName() string { return "MarkerMarkerValidationError" }

// Error satisfies the builtin error interface
func (e MarkerMarkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkerMarker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkerMarkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkerMarkerValidationError{}

var _MarkerMarker_Color_Pattern = regexp.MustCompile("^#[A-Fa-f0-9]{6}$")

// Validate checks the field values on MarkerData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MarkerData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkerData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MarkerDataMultiError, or
// nil if none found.
func (m *MarkerData) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkerData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *MarkerData_Circle:
		if v == nil {
			err := MarkerDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetCircle()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerDataValidationError{
						field:  "Circle",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerDataValidationError{
						field:  "Circle",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCircle()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerDataValidationError{
					field:  "Circle",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *MarkerData_Icon:
		if v == nil {
			err := MarkerDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetIcon()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MarkerDataValidationError{
						field:  "Icon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MarkerDataValidationError{
						field:  "Icon",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetIcon()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MarkerDataValidationError{
					field:  "Icon",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := MarkerDataValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MarkerDataMultiError(errors)
	}

	return nil
}

// MarkerDataMultiError is an error wrapping multiple validation errors
// returned by MarkerData.ValidateAll() if the designated constraints aren't met.
type MarkerDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkerDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkerDataMultiError) AllErrors() []error { return m }

// MarkerDataValidationError is the validation error returned by
// MarkerData.Validate if the designated constraints aren't met.
type MarkerDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkerDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkerDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkerDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkerDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkerDataValidationError) ErrorName() string { return "MarkerDataValidationError" }

// Error satisfies the builtin error interface
func (e MarkerDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkerData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkerDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkerDataValidationError{}

// Validate checks the field values on CircleMarker with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CircleMarker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CircleMarker with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CircleMarkerMultiError, or
// nil if none found.
func (m *CircleMarker) ValidateAll() error {
	return m.validate(true)
}

func (m *CircleMarker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Radius

	if m.Opacity != nil {

		if val := m.GetOpacity(); val < 1 || val > 75 {
			err := CircleMarkerValidationError{
				field:  "Opacity",
				reason: "value must be inside range [1, 75]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CircleMarkerMultiError(errors)
	}

	return nil
}

// CircleMarkerMultiError is an error wrapping multiple validation errors
// returned by CircleMarker.ValidateAll() if the designated constraints aren't met.
type CircleMarkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CircleMarkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CircleMarkerMultiError) AllErrors() []error { return m }

// CircleMarkerValidationError is the validation error returned by
// CircleMarker.Validate if the designated constraints aren't met.
type CircleMarkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CircleMarkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CircleMarkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CircleMarkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CircleMarkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CircleMarkerValidationError) ErrorName() string { return "CircleMarkerValidationError" }

// Error satisfies the builtin error interface
func (e CircleMarkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCircleMarker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CircleMarkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CircleMarkerValidationError{}

// Validate checks the field values on IconMarker with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IconMarker) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IconMarker with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IconMarkerMultiError, or
// nil if none found.
func (m *IconMarker) ValidateAll() error {
	return m.validate(true)
}

func (m *IconMarker) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetIcon()) > 128 {
		err := IconMarkerValidationError{
			field:  "Icon",
			reason: "value length must be at most 128 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IconMarkerMultiError(errors)
	}

	return nil
}

// IconMarkerMultiError is an error wrapping multiple validation errors
// returned by IconMarker.ValidateAll() if the designated constraints aren't met.
type IconMarkerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IconMarkerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IconMarkerMultiError) AllErrors() []error { return m }

// IconMarkerValidationError is the validation error returned by
// IconMarker.Validate if the designated constraints aren't met.
type IconMarkerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IconMarkerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IconMarkerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IconMarkerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IconMarkerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IconMarkerValidationError) ErrorName() string { return "IconMarkerValidationError" }

// Error satisfies the builtin error interface
func (e IconMarkerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIconMarker.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IconMarkerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IconMarkerValidationError{}
