// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/clientconfig/clientconfig.proto

package clientconfig

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ClientConfig) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DefaultLocale
	m.DefaultLocale = htmlsanitizer.Sanitize(m.DefaultLocale)

	// Field: Discord
	if m.Discord != nil {
		if v, ok := any(m.GetDiscord()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Display
	if m.Display != nil {
		if v, ok := any(m.GetDisplay()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: FeatureGates
	if m.FeatureGates != nil {
		if v, ok := any(m.GetFeatureGates()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Game
	if m.Game != nil {
		if v, ok := any(m.GetGame()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Login
	if m.Login != nil {
		if v, ok := any(m.GetLogin()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: System
	if m.System != nil {
		if v, ok := any(m.GetSystem()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Version
	m.Version = htmlsanitizer.Sanitize(m.Version)

	// Field: Website
	if m.Website != nil {
		if v, ok := any(m.GetWebsite()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Discord) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Display) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CurrencyName
	m.CurrencyName = htmlsanitizer.Sanitize(m.CurrencyName)

	// Field: IntlLocale
	if m.IntlLocale != nil {
		*m.IntlLocale = htmlsanitizer.Sanitize(*m.IntlLocale)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *FeatureGates) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Game) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: UnemployedJobName
	m.UnemployedJobName = htmlsanitizer.Sanitize(m.UnemployedJobName)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Links) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Imprint
	if m.Imprint != nil {
		*m.Imprint = htmlsanitizer.Sanitize(*m.Imprint)
	}

	// Field: PrivacyPolicy
	if m.PrivacyPolicy != nil {
		*m.PrivacyPolicy = htmlsanitizer.Sanitize(*m.PrivacyPolicy)
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *LoginConfig) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Providers
	for idx, item := range m.Providers {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *OTLPFrontend) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Headers
	for idx, item := range m.Headers {
		_, _ = idx, item

		m.Headers[idx] = htmlsanitizer.Sanitize(m.Headers[idx])

	}

	// Field: Url
	m.Url = htmlsanitizer.Sanitize(m.Url)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *ProviderConfig) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Homepage
	m.Homepage = htmlsanitizer.Sanitize(m.Homepage)

	// Field: Icon
	if m.Icon != nil {
		*m.Icon = htmlsanitizer.Sanitize(*m.Icon)
	}

	// Field: Label
	m.Label = htmlsanitizer.Sanitize(m.Label)

	// Field: Name
	m.Name = htmlsanitizer.Sanitize(m.Name)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *System) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: BannerMessage
	if m.BannerMessage != nil {
		if v, ok := any(m.GetBannerMessage()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Otlp
	if m.Otlp != nil {
		if v, ok := any(m.GetOtlp()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Website) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Links
	if m.Links != nil {
		if v, ok := any(m.GetLinks()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}
