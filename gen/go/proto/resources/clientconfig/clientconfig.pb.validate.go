// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/clientconfig/clientconfig.proto

package clientconfig

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ClientConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ClientConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClientConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ClientConfigMultiError, or
// nil if none found.
func (m *ClientConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ClientConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	// no validation rules for DefaultLocale

	if all {
		switch v := interface{}(m.GetLogin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Login",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLogin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "Login",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscord()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Discord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Discord",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscord()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "Discord",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWebsite()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Website",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Website",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWebsite()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "Website",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFeatureGates()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "FeatureGates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "FeatureGates",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeatureGates()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "FeatureGates",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGame()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "Game",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGame()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "Game",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSystem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientConfigValidationError{
					field:  "System",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSystem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientConfigValidationError{
				field:  "System",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ClientConfigMultiError(errors)
	}

	return nil
}

// ClientConfigMultiError is an error wrapping multiple validation errors
// returned by ClientConfig.ValidateAll() if the designated constraints aren't met.
type ClientConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientConfigMultiError) AllErrors() []error { return m }

// ClientConfigValidationError is the validation error returned by
// ClientConfig.Validate if the designated constraints aren't met.
type ClientConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientConfigValidationError) ErrorName() string { return "ClientConfigValidationError" }

// Error satisfies the builtin error interface
func (e ClientConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClientConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientConfigValidationError{}

// Validate checks the field values on LoginConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginConfigMultiError, or
// nil if none found.
func (m *LoginConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignupEnabled

	// no validation rules for LastCharLock

	for idx, item := range m.GetProviders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LoginConfigValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LoginConfigValidationError{
						field:  fmt.Sprintf("Providers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LoginConfigValidationError{
					field:  fmt.Sprintf("Providers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LoginConfigMultiError(errors)
	}

	return nil
}

// LoginConfigMultiError is an error wrapping multiple validation errors
// returned by LoginConfig.ValidateAll() if the designated constraints aren't met.
type LoginConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginConfigMultiError) AllErrors() []error { return m }

// LoginConfigValidationError is the validation error returned by
// LoginConfig.Validate if the designated constraints aren't met.
type LoginConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginConfigValidationError) ErrorName() string { return "LoginConfigValidationError" }

// Error satisfies the builtin error interface
func (e LoginConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginConfigValidationError{}

// Validate checks the field values on ProviderConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProviderConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProviderConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProviderConfigMultiError,
// or nil if none found.
func (m *ProviderConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *ProviderConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Label

	// no validation rules for Homepage

	if m.Icon != nil {
		// no validation rules for Icon
	}

	if len(errors) > 0 {
		return ProviderConfigMultiError(errors)
	}

	return nil
}

// ProviderConfigMultiError is an error wrapping multiple validation errors
// returned by ProviderConfig.ValidateAll() if the designated constraints
// aren't met.
type ProviderConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProviderConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProviderConfigMultiError) AllErrors() []error { return m }

// ProviderConfigValidationError is the validation error returned by
// ProviderConfig.Validate if the designated constraints aren't met.
type ProviderConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderConfigValidationError) ErrorName() string { return "ProviderConfigValidationError" }

// Error satisfies the builtin error interface
func (e ProviderConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderConfigValidationError{}

// Validate checks the field values on Discord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discord with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in DiscordMultiError, or nil if none found.
func (m *Discord) ValidateAll() error {
	return m.validate(true)
}

func (m *Discord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BotEnabled

	if len(errors) > 0 {
		return DiscordMultiError(errors)
	}

	return nil
}

// DiscordMultiError is an error wrapping multiple validation errors returned
// by Discord.ValidateAll() if the designated constraints aren't met.
type DiscordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordMultiError) AllErrors() []error { return m }

// DiscordValidationError is the validation error returned by Discord.Validate
// if the designated constraints aren't met.
type DiscordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordValidationError) ErrorName() string { return "DiscordValidationError" }

// Error satisfies the builtin error interface
func (e DiscordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordValidationError{}

// Validate checks the field values on Website with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Website) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Website with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in WebsiteMultiError, or nil if none found.
func (m *Website) ValidateAll() error {
	return m.validate(true)
}

func (m *Website) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetLinks()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WebsiteValidationError{
					field:  "Links",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WebsiteValidationError{
					field:  "Links",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLinks()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WebsiteValidationError{
				field:  "Links",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatsPage

	if len(errors) > 0 {
		return WebsiteMultiError(errors)
	}

	return nil
}

// WebsiteMultiError is an error wrapping multiple validation errors returned
// by Website.ValidateAll() if the designated constraints aren't met.
type WebsiteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WebsiteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WebsiteMultiError) AllErrors() []error { return m }

// WebsiteValidationError is the validation error returned by Website.Validate
// if the designated constraints aren't met.
type WebsiteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WebsiteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WebsiteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WebsiteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WebsiteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WebsiteValidationError) ErrorName() string { return "WebsiteValidationError" }

// Error satisfies the builtin error interface
func (e WebsiteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWebsite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WebsiteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WebsiteValidationError{}

// Validate checks the field values on Links with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Links) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Links with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LinksMultiError, or nil if none found.
func (m *Links) ValidateAll() error {
	return m.validate(true)
}

func (m *Links) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Imprint != nil {
		// no validation rules for Imprint
	}

	if m.PrivacyPolicy != nil {
		// no validation rules for PrivacyPolicy
	}

	if len(errors) > 0 {
		return LinksMultiError(errors)
	}

	return nil
}

// LinksMultiError is an error wrapping multiple validation errors returned by
// Links.ValidateAll() if the designated constraints aren't met.
type LinksMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LinksMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LinksMultiError) AllErrors() []error { return m }

// LinksValidationError is the validation error returned by Links.Validate if
// the designated constraints aren't met.
type LinksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LinksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LinksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LinksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LinksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LinksValidationError) ErrorName() string { return "LinksValidationError" }

// Error satisfies the builtin error interface
func (e LinksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLinks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LinksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LinksValidationError{}

// Validate checks the field values on FeatureGates with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeatureGates) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeatureGates with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeatureGatesMultiError, or
// nil if none found.
func (m *FeatureGates) ValidateAll() error {
	return m.validate(true)
}

func (m *FeatureGates) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ImageProxy

	if len(errors) > 0 {
		return FeatureGatesMultiError(errors)
	}

	return nil
}

// FeatureGatesMultiError is an error wrapping multiple validation errors
// returned by FeatureGates.ValidateAll() if the designated constraints aren't met.
type FeatureGatesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeatureGatesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeatureGatesMultiError) AllErrors() []error { return m }

// FeatureGatesValidationError is the validation error returned by
// FeatureGates.Validate if the designated constraints aren't met.
type FeatureGatesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeatureGatesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeatureGatesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeatureGatesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeatureGatesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeatureGatesValidationError) ErrorName() string { return "FeatureGatesValidationError" }

// Error satisfies the builtin error interface
func (e FeatureGatesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeatureGates.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeatureGatesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeatureGatesValidationError{}

// Validate checks the field values on Game with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Game) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Game with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in GameMultiError, or nil if none found.
func (m *Game) ValidateAll() error {
	return m.validate(true)
}

func (m *Game) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UnemployedJobName

	// no validation rules for StartJobGrade

	if len(errors) > 0 {
		return GameMultiError(errors)
	}

	return nil
}

// GameMultiError is an error wrapping multiple validation errors returned by
// Game.ValidateAll() if the designated constraints aren't met.
type GameMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameMultiError) AllErrors() []error { return m }

// GameValidationError is the validation error returned by Game.Validate if the
// designated constraints aren't met.
type GameValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameValidationError) ErrorName() string { return "GameValidationError" }

// Error satisfies the builtin error interface
func (e GameValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGame.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameValidationError{}

// Validate checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *System) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on System with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SystemMultiError, or nil if none found.
func (m *System) ValidateAll() error {
	return m.validate(true)
}

func (m *System) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BannerMessageEnabled

	if all {
		switch v := interface{}(m.GetOtlp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemValidationError{
					field:  "Otlp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemValidationError{
					field:  "Otlp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOtlp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemValidationError{
				field:  "Otlp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.BannerMessage != nil {

		if all {
			switch v := interface{}(m.GetBannerMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  "BannerMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemValidationError{
						field:  "BannerMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBannerMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemValidationError{
					field:  "BannerMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SystemMultiError(errors)
	}

	return nil
}

// SystemMultiError is an error wrapping multiple validation errors returned by
// System.ValidateAll() if the designated constraints aren't met.
type SystemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemMultiError) AllErrors() []error { return m }

// SystemValidationError is the validation error returned by System.Validate if
// the designated constraints aren't met.
type SystemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemValidationError) ErrorName() string { return "SystemValidationError" }

// Error satisfies the builtin error interface
func (e SystemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemValidationError{}

// Validate checks the field values on OTLPFrontend with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OTLPFrontend) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OTLPFrontend with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OTLPFrontendMultiError, or
// nil if none found.
func (m *OTLPFrontend) ValidateAll() error {
	return m.validate(true)
}

func (m *OTLPFrontend) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enabled

	// no validation rules for Url

	// no validation rules for Headers

	if len(errors) > 0 {
		return OTLPFrontendMultiError(errors)
	}

	return nil
}

// OTLPFrontendMultiError is an error wrapping multiple validation errors
// returned by OTLPFrontend.ValidateAll() if the designated constraints aren't met.
type OTLPFrontendMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OTLPFrontendMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OTLPFrontendMultiError) AllErrors() []error { return m }

// OTLPFrontendValidationError is the validation error returned by
// OTLPFrontend.Validate if the designated constraints aren't met.
type OTLPFrontendValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OTLPFrontendValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OTLPFrontendValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OTLPFrontendValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OTLPFrontendValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OTLPFrontendValidationError) ErrorName() string { return "OTLPFrontendValidationError" }

// Error satisfies the builtin error interface
func (e OTLPFrontendValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOTLPFrontend.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OTLPFrontendValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OTLPFrontendValidationError{}
