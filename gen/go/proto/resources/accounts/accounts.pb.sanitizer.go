// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/accounts/accounts.proto

package accounts

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Account) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: License
	m.License = htmlsanitizer.Sanitize(m.License)

	// Field: Oauth2Accounts
	for idx, item := range m.Oauth2Accounts {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: UpdatedAt
	if m.UpdatedAt != nil {
		if v, ok := any(m.GetUpdatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Username
	m.Username = htmlsanitizer.Sanitize(m.Username)

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *Character) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Char
	if m.Char != nil {
		if v, ok := any(m.GetChar()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Group
	m.Group = htmlsanitizer.Sanitize(m.Group)

	return nil
}
