// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/notifications/events.proto

package notifications

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *JobEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: JobProps
	switch v := m.Data.(type) {

	case *JobEvent_JobProps:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *JobGradeEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *SystemEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: ClientConfig
	switch v := m.Data.(type) {

	case *SystemEvent_ClientConfig:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *UserEvent) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Notification
	switch v := m.Data.(type) {

	case *UserEvent_Notification:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: UserInfoChanged
	case *UserEvent_UserInfoChanged:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
