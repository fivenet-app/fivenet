// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/notifications/events.proto

package notifications

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on UserEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserEventMultiError, or nil
// if none found.
func (m *UserEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *UserEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *UserEvent_RefreshToken:
		if v == nil {
			err := UserEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true
		// no validation rules for RefreshToken
	case *UserEvent_Notification:
		if v == nil {
			err := UserEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetNotification()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserEventValidationError{
						field:  "Notification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserEventValidationError{
						field:  "Notification",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserEventValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *UserEvent_NotificationsReadCount:
		if v == nil {
			err := UserEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true
		// no validation rules for NotificationsReadCount
	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := UserEventValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UserEventMultiError(errors)
	}

	return nil
}

// UserEventMultiError is an error wrapping multiple validation errors returned
// by UserEvent.ValidateAll() if the designated constraints aren't met.
type UserEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserEventMultiError) AllErrors() []error { return m }

// UserEventValidationError is the validation error returned by
// UserEvent.Validate if the designated constraints aren't met.
type UserEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserEventValidationError) ErrorName() string { return "UserEventValidationError" }

// Error satisfies the builtin error interface
func (e UserEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserEventValidationError{}

// Validate checks the field values on JobEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobEventMultiError, or nil
// if none found.
func (m *JobEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *JobEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *JobEvent_JobProps:
		if v == nil {
			err := JobEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetJobProps()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobEventValidationError{
						field:  "JobProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobEventValidationError{
						field:  "JobProps",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetJobProps()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobEventValidationError{
					field:  "JobProps",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := JobEventValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JobEventMultiError(errors)
	}

	return nil
}

// JobEventMultiError is an error wrapping multiple validation errors returned
// by JobEvent.ValidateAll() if the designated constraints aren't met.
type JobEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobEventMultiError) AllErrors() []error { return m }

// JobEventValidationError is the validation error returned by
// JobEvent.Validate if the designated constraints aren't met.
type JobEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobEventValidationError) ErrorName() string { return "JobEventValidationError" }

// Error satisfies the builtin error interface
func (e JobEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobEventValidationError{}

// Validate checks the field values on JobGradeEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobGradeEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobGradeEvent with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobGradeEventMultiError, or
// nil if none found.
func (m *JobGradeEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *JobGradeEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *JobGradeEvent_RefreshToken:
		if v == nil {
			err := JobGradeEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true
		// no validation rules for RefreshToken
	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := JobGradeEventValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JobGradeEventMultiError(errors)
	}

	return nil
}

// JobGradeEventMultiError is an error wrapping multiple validation errors
// returned by JobGradeEvent.ValidateAll() if the designated constraints
// aren't met.
type JobGradeEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobGradeEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobGradeEventMultiError) AllErrors() []error { return m }

// JobGradeEventValidationError is the validation error returned by
// JobGradeEvent.Validate if the designated constraints aren't met.
type JobGradeEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobGradeEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobGradeEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobGradeEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobGradeEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobGradeEventValidationError) ErrorName() string { return "JobGradeEventValidationError" }

// Error satisfies the builtin error interface
func (e JobGradeEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobGradeEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobGradeEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobGradeEventValidationError{}

// Validate checks the field values on SystemEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemEventMultiError, or
// nil if none found.
func (m *SystemEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *SystemEvent_Ping:
		if v == nil {
			err := SystemEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true
		// no validation rules for Ping
	case *SystemEvent_BannerMessage:
		if v == nil {
			err := SystemEventValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetBannerMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SystemEventValidationError{
						field:  "BannerMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SystemEventValidationError{
						field:  "BannerMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBannerMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SystemEventValidationError{
					field:  "BannerMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := SystemEventValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SystemEventMultiError(errors)
	}

	return nil
}

// SystemEventMultiError is an error wrapping multiple validation errors
// returned by SystemEvent.ValidateAll() if the designated constraints aren't met.
type SystemEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemEventMultiError) AllErrors() []error { return m }

// SystemEventValidationError is the validation error returned by
// SystemEvent.Validate if the designated constraints aren't met.
type SystemEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemEventValidationError) ErrorName() string { return "SystemEventValidationError" }

// Error satisfies the builtin error interface
func (e SystemEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemEventValidationError{}

// Validate checks the field values on BannerMessageWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BannerMessageWrapper) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BannerMessageWrapper with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BannerMessageWrapperMultiError, or nil if none found.
func (m *BannerMessageWrapper) ValidateAll() error {
	return m.validate(true)
}

func (m *BannerMessageWrapper) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BannerMessageEnabled

	if m.BannerMessage != nil {

		if all {
			switch v := interface{}(m.GetBannerMessage()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BannerMessageWrapperValidationError{
						field:  "BannerMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BannerMessageWrapperValidationError{
						field:  "BannerMessage",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetBannerMessage()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BannerMessageWrapperValidationError{
					field:  "BannerMessage",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BannerMessageWrapperMultiError(errors)
	}

	return nil
}

// BannerMessageWrapperMultiError is an error wrapping multiple validation
// errors returned by BannerMessageWrapper.ValidateAll() if the designated
// constraints aren't met.
type BannerMessageWrapperMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BannerMessageWrapperMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BannerMessageWrapperMultiError) AllErrors() []error { return m }

// BannerMessageWrapperValidationError is the validation error returned by
// BannerMessageWrapper.Validate if the designated constraints aren't met.
type BannerMessageWrapperValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BannerMessageWrapperValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BannerMessageWrapperValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BannerMessageWrapperValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BannerMessageWrapperValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BannerMessageWrapperValidationError) ErrorName() string {
	return "BannerMessageWrapperValidationError"
}

// Error satisfies the builtin error interface
func (e BannerMessageWrapperValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBannerMessageWrapper.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BannerMessageWrapperValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BannerMessageWrapperValidationError{}
