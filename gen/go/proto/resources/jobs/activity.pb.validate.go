// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/jobs/activity.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ColleagueActivity with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ColleagueActivity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColleagueActivity with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColleagueActivityMultiError, or nil if none found.
func (m *ColleagueActivity) ValidateAll() error {
	return m.validate(true)
}

func (m *ColleagueActivity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := ColleagueActivityValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTargetUserId() <= 0 {
		err := ColleagueActivityValidationError{
			field:  "TargetUserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetTargetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ColleagueActivityValidationError{
					field:  "TargetUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ColleagueActivityValidationError{
					field:  "TargetUser",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTargetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ColleagueActivityValidationError{
				field:  "TargetUser",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ActivityType

	if utf8.RuneCountInString(m.GetReason()) > 255 {
		err := ColleagueActivityValidationError{
			field:  "Reason",
			reason: "value length must be at most 255 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ColleagueActivityValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ColleagueActivityValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ColleagueActivityValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.CreatedAt != nil {

		if all {
			switch v := interface{}(m.GetCreatedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleagueActivityValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleagueActivityValidationError{
						field:  "CreatedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleagueActivityValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.SourceUserId != nil {

		if m.GetSourceUserId() <= 0 {
			err := ColleagueActivityValidationError{
				field:  "SourceUserId",
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.SourceUser != nil {

		if all {
			switch v := interface{}(m.GetSourceUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleagueActivityValidationError{
						field:  "SourceUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleagueActivityValidationError{
						field:  "SourceUser",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSourceUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleagueActivityValidationError{
					field:  "SourceUser",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ColleagueActivityMultiError(errors)
	}

	return nil
}

// ColleagueActivityMultiError is an error wrapping multiple validation errors
// returned by ColleagueActivity.ValidateAll() if the designated constraints
// aren't met.
type ColleagueActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColleagueActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColleagueActivityMultiError) AllErrors() []error { return m }

// ColleagueActivityValidationError is the validation error returned by
// ColleagueActivity.Validate if the designated constraints aren't met.
type ColleagueActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColleagueActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColleagueActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColleagueActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColleagueActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColleagueActivityValidationError) ErrorName() string {
	return "ColleagueActivityValidationError"
}

// Error satisfies the builtin error interface
func (e ColleagueActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColleagueActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColleagueActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColleagueActivityValidationError{}

// Validate checks the field values on ColleagueActivityData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ColleagueActivityData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ColleagueActivityData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ColleagueActivityDataMultiError, or nil if none found.
func (m *ColleagueActivityData) ValidateAll() error {
	return m.validate(true)
}

func (m *ColleagueActivityData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	oneofDataPresent := false
	switch v := m.Data.(type) {
	case *ColleagueActivityData_AbsenceDate:
		if v == nil {
			err := ColleagueActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetAbsenceDate()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "AbsenceDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "AbsenceDate",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAbsenceDate()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleagueActivityDataValidationError{
					field:  "AbsenceDate",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ColleagueActivityData_GradeChange:
		if v == nil {
			err := ColleagueActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetGradeChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "GradeChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "GradeChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetGradeChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleagueActivityDataValidationError{
					field:  "GradeChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ColleagueActivityData_LabelsChange:
		if v == nil {
			err := ColleagueActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetLabelsChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "LabelsChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "LabelsChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLabelsChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleagueActivityDataValidationError{
					field:  "LabelsChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ColleagueActivityData_NameChange:
		if v == nil {
			err := ColleagueActivityDataValidationError{
				field:  "Data",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		oneofDataPresent = true

		if all {
			switch v := interface{}(m.GetNameChange()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "NameChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ColleagueActivityDataValidationError{
						field:  "NameChange",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNameChange()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ColleagueActivityDataValidationError{
					field:  "NameChange",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	if !oneofDataPresent {
		err := ColleagueActivityDataValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ColleagueActivityDataMultiError(errors)
	}

	return nil
}

// ColleagueActivityDataMultiError is an error wrapping multiple validation
// errors returned by ColleagueActivityData.ValidateAll() if the designated
// constraints aren't met.
type ColleagueActivityDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ColleagueActivityDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ColleagueActivityDataMultiError) AllErrors() []error { return m }

// ColleagueActivityDataValidationError is the validation error returned by
// ColleagueActivityData.Validate if the designated constraints aren't met.
type ColleagueActivityDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ColleagueActivityDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ColleagueActivityDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ColleagueActivityDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ColleagueActivityDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ColleagueActivityDataValidationError) ErrorName() string {
	return "ColleagueActivityDataValidationError"
}

// Error satisfies the builtin error interface
func (e ColleagueActivityDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sColleagueActivityData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ColleagueActivityDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ColleagueActivityDataValidationError{}

// Validate checks the field values on AbsenceDateChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AbsenceDateChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AbsenceDateChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AbsenceDateChangeMultiError, or nil if none found.
func (m *AbsenceDateChange) ValidateAll() error {
	return m.validate(true)
}

func (m *AbsenceDateChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetAbsenceBegin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbsenceDateChangeValidationError{
					field:  "AbsenceBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbsenceDateChangeValidationError{
					field:  "AbsenceBegin",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAbsenceBegin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbsenceDateChangeValidationError{
				field:  "AbsenceBegin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAbsenceEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AbsenceDateChangeValidationError{
					field:  "AbsenceEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AbsenceDateChangeValidationError{
					field:  "AbsenceEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAbsenceEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AbsenceDateChangeValidationError{
				field:  "AbsenceEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AbsenceDateChangeMultiError(errors)
	}

	return nil
}

// AbsenceDateChangeMultiError is an error wrapping multiple validation errors
// returned by AbsenceDateChange.ValidateAll() if the designated constraints
// aren't met.
type AbsenceDateChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AbsenceDateChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AbsenceDateChangeMultiError) AllErrors() []error { return m }

// AbsenceDateChangeValidationError is the validation error returned by
// AbsenceDateChange.Validate if the designated constraints aren't met.
type AbsenceDateChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AbsenceDateChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AbsenceDateChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AbsenceDateChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AbsenceDateChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AbsenceDateChangeValidationError) ErrorName() string {
	return "AbsenceDateChangeValidationError"
}

// Error satisfies the builtin error interface
func (e AbsenceDateChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAbsenceDateChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AbsenceDateChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AbsenceDateChangeValidationError{}

// Validate checks the field values on GradeChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GradeChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GradeChange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GradeChangeMultiError, or
// nil if none found.
func (m *GradeChange) ValidateAll() error {
	return m.validate(true)
}

func (m *GradeChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Grade

	// no validation rules for GradeLabel

	if len(errors) > 0 {
		return GradeChangeMultiError(errors)
	}

	return nil
}

// GradeChangeMultiError is an error wrapping multiple validation errors
// returned by GradeChange.ValidateAll() if the designated constraints aren't met.
type GradeChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GradeChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GradeChangeMultiError) AllErrors() []error { return m }

// GradeChangeValidationError is the validation error returned by
// GradeChange.Validate if the designated constraints aren't met.
type GradeChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GradeChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GradeChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GradeChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GradeChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GradeChangeValidationError) ErrorName() string { return "GradeChangeValidationError" }

// Error satisfies the builtin error interface
func (e GradeChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGradeChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GradeChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GradeChangeValidationError{}

// Validate checks the field values on LabelsChange with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LabelsChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LabelsChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LabelsChangeMultiError, or
// nil if none found.
func (m *LabelsChange) ValidateAll() error {
	return m.validate(true)
}

func (m *LabelsChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetAdded() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Added[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Added[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelsChangeValidationError{
					field:  fmt.Sprintf("Added[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetRemoved() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Removed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LabelsChangeValidationError{
						field:  fmt.Sprintf("Removed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LabelsChangeValidationError{
					field:  fmt.Sprintf("Removed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LabelsChangeMultiError(errors)
	}

	return nil
}

// LabelsChangeMultiError is an error wrapping multiple validation errors
// returned by LabelsChange.ValidateAll() if the designated constraints aren't met.
type LabelsChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LabelsChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LabelsChangeMultiError) AllErrors() []error { return m }

// LabelsChangeValidationError is the validation error returned by
// LabelsChange.Validate if the designated constraints aren't met.
type LabelsChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LabelsChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LabelsChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LabelsChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LabelsChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LabelsChangeValidationError) ErrorName() string { return "LabelsChangeValidationError" }

// Error satisfies the builtin error interface
func (e LabelsChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLabelsChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LabelsChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LabelsChangeValidationError{}

// Validate checks the field values on NameChange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NameChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NameChange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NameChangeMultiError, or
// nil if none found.
func (m *NameChange) ValidateAll() error {
	return m.validate(true)
}

func (m *NameChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Prefix != nil {
		// no validation rules for Prefix
	}

	if m.Suffix != nil {
		// no validation rules for Suffix
	}

	if len(errors) > 0 {
		return NameChangeMultiError(errors)
	}

	return nil
}

// NameChangeMultiError is an error wrapping multiple validation errors
// returned by NameChange.ValidateAll() if the designated constraints aren't met.
type NameChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NameChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NameChangeMultiError) AllErrors() []error { return m }

// NameChangeValidationError is the validation error returned by
// NameChange.Validate if the designated constraints aren't met.
type NameChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NameChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NameChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NameChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NameChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NameChangeValidationError) ErrorName() string { return "NameChangeValidationError" }

// Error satisfies the builtin error interface
func (e NameChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNameChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NameChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NameChangeValidationError{}
