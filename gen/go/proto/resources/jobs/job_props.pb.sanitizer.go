// Code generated by protoc-gen-backend. DO NOT EDIT.
// source: resources/jobs/job_props.proto

package jobs

import (
	"github.com/fivenet-app/fivenet/v2025/pkg/html/htmlsanitizer"
)

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *JobProps) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: DeletedAt
	if m.DeletedAt != nil {
		if v, ok := any(m.GetDeletedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: DiscordGuildId
	if m.DiscordGuildId != nil {
		*m.DiscordGuildId = htmlsanitizer.Sanitize(*m.DiscordGuildId)
	}

	// Field: DiscordLastSync
	if m.DiscordLastSync != nil {
		if v, ok := any(m.GetDiscordLastSync()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: DiscordSyncChanges
	if m.DiscordSyncChanges != nil {
		if v, ok := any(m.GetDiscordSyncChanges()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: DiscordSyncSettings
	if m.DiscordSyncSettings != nil {
		if v, ok := any(m.GetDiscordSyncSettings()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Job
	m.Job = htmlsanitizer.Sanitize(m.Job)

	// Field: JobLabel
	if m.JobLabel != nil {
		*m.JobLabel = htmlsanitizer.Sanitize(*m.JobLabel)
	}

	// Field: LivemapMarkerColor
	m.LivemapMarkerColor = htmlsanitizer.Sanitize(m.LivemapMarkerColor)

	// Field: LogoFile
	if m.LogoFile != nil {
		if v, ok := any(m.GetLogoFile()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Motd
	if m.Motd != nil {
		*m.Motd = htmlsanitizer.Sanitize(*m.Motd)
	}

	// Field: QuickButtons
	if m.QuickButtons != nil {
		if v, ok := any(m.GetQuickButtons()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: RadioFrequency
	if m.RadioFrequency != nil {
		*m.RadioFrequency = htmlsanitizer.Sanitize(*m.RadioFrequency)
	}

	// Field: Settings
	if m.Settings != nil {
		if v, ok := any(m.GetSettings()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Sanitize sanitizes the message's fields, in case of complex types it calls
// their Sanitize() method recursively.
func (m *QuickButtons) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}
