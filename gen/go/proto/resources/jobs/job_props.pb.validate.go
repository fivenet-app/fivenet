// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/jobs/job_props.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on JobProps with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobProps) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobProps with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobPropsMultiError, or nil
// if none found.
func (m *JobProps) ValidateAll() error {
	return m.validate(true)
}

func (m *JobProps) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := JobPropsValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLivemapMarkerColor()) != 7 {
		err := JobPropsValidationError{
			field:  "LivemapMarkerColor",
			reason: "value length must be 7 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if !_JobProps_LivemapMarkerColor_Pattern.MatchString(m.GetLivemapMarkerColor()) {
		err := JobPropsValidationError{
			field:  "LivemapMarkerColor",
			reason: "value does not match regex pattern \"^#[A-Fa-f0-9]{6}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetQuickButtons()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobPropsValidationError{
					field:  "QuickButtons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobPropsValidationError{
					field:  "QuickButtons",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuickButtons()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobPropsValidationError{
				field:  "QuickButtons",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDiscordSyncSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobPropsValidationError{
					field:  "DiscordSyncSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobPropsValidationError{
					field:  "DiscordSyncSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscordSyncSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobPropsValidationError{
				field:  "DiscordSyncSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, JobPropsValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, JobPropsValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JobPropsValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.JobLabel != nil {

		if utf8.RuneCountInString(m.GetJobLabel()) > 50 {
			err := JobPropsValidationError{
				field:  "JobLabel",
				reason: "value length must be at most 50 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DeletedAt != nil {

		if all {
			switch v := interface{}(m.GetDeletedAt()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "DeletedAt",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobPropsValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.RadioFrequency != nil {

		if utf8.RuneCountInString(m.GetRadioFrequency()) > 24 {
			err := JobPropsValidationError{
				field:  "RadioFrequency",
				reason: "value length must be at most 24 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.DiscordGuildId != nil {
		// no validation rules for DiscordGuildId
	}

	if m.DiscordLastSync != nil {

		if all {
			switch v := interface{}(m.GetDiscordLastSync()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "DiscordLastSync",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "DiscordLastSync",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDiscordLastSync()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobPropsValidationError{
					field:  "DiscordLastSync",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.DiscordSyncChanges != nil {

		if all {
			switch v := interface{}(m.GetDiscordSyncChanges()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "DiscordSyncChanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "DiscordSyncChanges",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDiscordSyncChanges()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobPropsValidationError{
					field:  "DiscordSyncChanges",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Motd != nil {

		if utf8.RuneCountInString(m.GetMotd()) > 1024 {
			err := JobPropsValidationError{
				field:  "Motd",
				reason: "value length must be at most 1024 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.LogoUrl != nil {

		if all {
			switch v := interface{}(m.GetLogoUrl()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "LogoUrl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, JobPropsValidationError{
						field:  "LogoUrl",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetLogoUrl()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return JobPropsValidationError{
					field:  "LogoUrl",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return JobPropsMultiError(errors)
	}

	return nil
}

// JobPropsMultiError is an error wrapping multiple validation errors returned
// by JobProps.ValidateAll() if the designated constraints aren't met.
type JobPropsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobPropsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobPropsMultiError) AllErrors() []error { return m }

// JobPropsValidationError is the validation error returned by
// JobProps.Validate if the designated constraints aren't met.
type JobPropsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobPropsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobPropsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobPropsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobPropsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobPropsValidationError) ErrorName() string { return "JobPropsValidationError" }

// Error satisfies the builtin error interface
func (e JobPropsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobProps.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobPropsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobPropsValidationError{}

var _JobProps_LivemapMarkerColor_Pattern = regexp.MustCompile("^#[A-Fa-f0-9]{6}$")

// Validate checks the field values on QuickButtons with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QuickButtons) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QuickButtons with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QuickButtonsMultiError, or
// nil if none found.
func (m *QuickButtons) ValidateAll() error {
	return m.validate(true)
}

func (m *QuickButtons) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PenaltyCalculator

	// no validation rules for BodyCheckup

	// no validation rules for MathCalculator

	if len(errors) > 0 {
		return QuickButtonsMultiError(errors)
	}

	return nil
}

// QuickButtonsMultiError is an error wrapping multiple validation errors
// returned by QuickButtons.ValidateAll() if the designated constraints aren't met.
type QuickButtonsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QuickButtonsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QuickButtonsMultiError) AllErrors() []error { return m }

// QuickButtonsValidationError is the validation error returned by
// QuickButtons.Validate if the designated constraints aren't met.
type QuickButtonsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QuickButtonsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QuickButtonsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QuickButtonsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QuickButtonsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QuickButtonsValidationError) ErrorName() string { return "QuickButtonsValidationError" }

// Error satisfies the builtin error interface
func (e QuickButtonsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQuickButtons.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QuickButtonsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QuickButtonsValidationError{}
