// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/jobs/timeclock.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on TimeclockEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeclockEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeclockEntryMultiError,
// or nil if none found.
func (m *TimeclockEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() < 0 {
		err := TimeclockEntryValidationError{
			field:  "UserId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := TimeclockEntryValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeclockEntryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeclockEntryValidationError{
					field:  "Date",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeclockEntryValidationError{
				field:  "Date",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SpentTime

	if m.User != nil {

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockEntryValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockEntryValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockEntryValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.StartTime != nil {

		if all {
			switch v := interface{}(m.GetStartTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockEntryValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockEntryValidationError{
						field:  "StartTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockEntryValidationError{
					field:  "StartTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.EndTime != nil {

		if all {
			switch v := interface{}(m.GetEndTime()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeclockEntryValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeclockEntryValidationError{
						field:  "EndTime",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeclockEntryValidationError{
					field:  "EndTime",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TimeclockEntryMultiError(errors)
	}

	return nil
}

// TimeclockEntryMultiError is an error wrapping multiple validation errors
// returned by TimeclockEntry.ValidateAll() if the designated constraints
// aren't met.
type TimeclockEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockEntryMultiError) AllErrors() []error { return m }

// TimeclockEntryValidationError is the validation error returned by
// TimeclockEntry.Validate if the designated constraints aren't met.
type TimeclockEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockEntryValidationError) ErrorName() string { return "TimeclockEntryValidationError" }

// Error satisfies the builtin error interface
func (e TimeclockEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockEntryValidationError{}

// Validate checks the field values on TimeclockStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeclockStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockStats with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TimeclockStatsMultiError,
// or nil if none found.
func (m *TimeclockStats) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetJob()) > 20 {
		err := TimeclockStatsValidationError{
			field:  "Job",
			reason: "value length must be at most 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SpentTimeSum

	// no validation rules for SpentTimeAvg

	// no validation rules for SpentTimeMax

	if len(errors) > 0 {
		return TimeclockStatsMultiError(errors)
	}

	return nil
}

// TimeclockStatsMultiError is an error wrapping multiple validation errors
// returned by TimeclockStats.ValidateAll() if the designated constraints
// aren't met.
type TimeclockStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockStatsMultiError) AllErrors() []error { return m }

// TimeclockStatsValidationError is the validation error returned by
// TimeclockStats.Validate if the designated constraints aren't met.
type TimeclockStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockStatsValidationError) ErrorName() string { return "TimeclockStatsValidationError" }

// Error satisfies the builtin error interface
func (e TimeclockStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockStatsValidationError{}

// Validate checks the field values on TimeclockWeeklyStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeclockWeeklyStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeclockWeeklyStats with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeclockWeeklyStatsMultiError, or nil if none found.
func (m *TimeclockWeeklyStats) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeclockWeeklyStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Year

	// no validation rules for CalendarWeek

	// no validation rules for Sum

	// no validation rules for Avg

	// no validation rules for Max

	if len(errors) > 0 {
		return TimeclockWeeklyStatsMultiError(errors)
	}

	return nil
}

// TimeclockWeeklyStatsMultiError is an error wrapping multiple validation
// errors returned by TimeclockWeeklyStats.ValidateAll() if the designated
// constraints aren't met.
type TimeclockWeeklyStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeclockWeeklyStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeclockWeeklyStatsMultiError) AllErrors() []error { return m }

// TimeclockWeeklyStatsValidationError is the validation error returned by
// TimeclockWeeklyStats.Validate if the designated constraints aren't met.
type TimeclockWeeklyStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeclockWeeklyStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeclockWeeklyStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeclockWeeklyStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeclockWeeklyStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeclockWeeklyStatsValidationError) ErrorName() string {
	return "TimeclockWeeklyStatsValidationError"
}

// Error satisfies the builtin error interface
func (e TimeclockWeeklyStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeclockWeeklyStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeclockWeeklyStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeclockWeeklyStatsValidationError{}
