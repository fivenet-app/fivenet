// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: resources/jobs/job_settings.proto

package jobs

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DiscordSyncSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscordSyncSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscordSyncSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscordSyncSettingsMultiError, or nil if none found.
func (m *DiscordSyncSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscordSyncSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DryRun

	// no validation rules for UserInfoSync

	if all {
		switch v := interface{}(m.GetUserInfoSyncSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "UserInfoSyncSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "UserInfoSyncSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfoSyncSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscordSyncSettingsValidationError{
				field:  "UserInfoSyncSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for StatusLog

	if all {
		switch v := interface{}(m.GetStatusLogSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "StatusLogSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "StatusLogSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStatusLogSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscordSyncSettingsValidationError{
				field:  "StatusLogSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for JobsAbsence

	if all {
		switch v := interface{}(m.GetJobsAbsenceSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "JobsAbsenceSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "JobsAbsenceSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJobsAbsenceSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscordSyncSettingsValidationError{
				field:  "JobsAbsenceSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetGroupSyncSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "GroupSyncSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscordSyncSettingsValidationError{
					field:  "GroupSyncSettings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetGroupSyncSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscordSyncSettingsValidationError{
				field:  "GroupSyncSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetQualificationsRoleFormat()) > 64 {
		err := DiscordSyncSettingsValidationError{
			field:  "QualificationsRoleFormat",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DiscordSyncSettingsMultiError(errors)
	}

	return nil
}

// DiscordSyncSettingsMultiError is an error wrapping multiple validation
// errors returned by DiscordSyncSettings.ValidateAll() if the designated
// constraints aren't met.
type DiscordSyncSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordSyncSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordSyncSettingsMultiError) AllErrors() []error { return m }

// DiscordSyncSettingsValidationError is the validation error returned by
// DiscordSyncSettings.Validate if the designated constraints aren't met.
type DiscordSyncSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordSyncSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordSyncSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordSyncSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordSyncSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordSyncSettingsValidationError) ErrorName() string {
	return "DiscordSyncSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e DiscordSyncSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscordSyncSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordSyncSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordSyncSettingsValidationError{}

// Validate checks the field values on DiscordSyncChanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscordSyncChanges) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscordSyncChanges with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscordSyncChangesMultiError, or nil if none found.
func (m *DiscordSyncChanges) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscordSyncChanges) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscordSyncChangesValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscordSyncChangesValidationError{
						field:  fmt.Sprintf("Changes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscordSyncChangesValidationError{
					field:  fmt.Sprintf("Changes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscordSyncChangesMultiError(errors)
	}

	return nil
}

// DiscordSyncChangesMultiError is an error wrapping multiple validation errors
// returned by DiscordSyncChanges.ValidateAll() if the designated constraints
// aren't met.
type DiscordSyncChangesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordSyncChangesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordSyncChangesMultiError) AllErrors() []error { return m }

// DiscordSyncChangesValidationError is the validation error returned by
// DiscordSyncChanges.Validate if the designated constraints aren't met.
type DiscordSyncChangesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordSyncChangesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordSyncChangesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordSyncChangesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordSyncChangesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordSyncChangesValidationError) ErrorName() string {
	return "DiscordSyncChangesValidationError"
}

// Error satisfies the builtin error interface
func (e DiscordSyncChangesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscordSyncChanges.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordSyncChangesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordSyncChangesValidationError{}

// Validate checks the field values on DiscordSyncChange with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscordSyncChange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscordSyncChange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscordSyncChangeMultiError, or nil if none found.
func (m *DiscordSyncChange) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscordSyncChange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscordSyncChangeValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscordSyncChangeValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscordSyncChangeValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Plan

	if len(errors) > 0 {
		return DiscordSyncChangeMultiError(errors)
	}

	return nil
}

// DiscordSyncChangeMultiError is an error wrapping multiple validation errors
// returned by DiscordSyncChange.ValidateAll() if the designated constraints
// aren't met.
type DiscordSyncChangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscordSyncChangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscordSyncChangeMultiError) AllErrors() []error { return m }

// DiscordSyncChangeValidationError is the validation error returned by
// DiscordSyncChange.Validate if the designated constraints aren't met.
type DiscordSyncChangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscordSyncChangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscordSyncChangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscordSyncChangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscordSyncChangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscordSyncChangeValidationError) ErrorName() string {
	return "DiscordSyncChangeValidationError"
}

// Error satisfies the builtin error interface
func (e DiscordSyncChangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscordSyncChange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscordSyncChangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscordSyncChangeValidationError{}

// Validate checks the field values on UserInfoSyncSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UserInfoSyncSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInfoSyncSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UserInfoSyncSettingsMultiError, or nil if none found.
func (m *UserInfoSyncSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInfoSyncSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for EmployeeRoleEnabled

	if utf8.RuneCountInString(m.GetEmployeeRoleFormat()) > 64 {
		err := UserInfoSyncSettingsValidationError{
			field:  "EmployeeRoleFormat",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetGradeRoleFormat()) > 64 {
		err := UserInfoSyncSettingsValidationError{
			field:  "GradeRoleFormat",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UnemployedEnabled

	if _, ok := UserInfoSyncUnemployedMode_name[int32(m.GetUnemployedMode())]; !ok {
		err := UserInfoSyncSettingsValidationError{
			field:  "UnemployedMode",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetUnemployedRoleName()) > 64 {
		err := UserInfoSyncSettingsValidationError{
			field:  "UnemployedRoleName",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SyncNicknames

	for idx, item := range m.GetGroupMapping() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserInfoSyncSettingsValidationError{
						field:  fmt.Sprintf("GroupMapping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserInfoSyncSettingsValidationError{
						field:  fmt.Sprintf("GroupMapping[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserInfoSyncSettingsValidationError{
					field:  fmt.Sprintf("GroupMapping[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UserInfoSyncSettingsMultiError(errors)
	}

	return nil
}

// UserInfoSyncSettingsMultiError is an error wrapping multiple validation
// errors returned by UserInfoSyncSettings.ValidateAll() if the designated
// constraints aren't met.
type UserInfoSyncSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInfoSyncSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInfoSyncSettingsMultiError) AllErrors() []error { return m }

// UserInfoSyncSettingsValidationError is the validation error returned by
// UserInfoSyncSettings.Validate if the designated constraints aren't met.
type UserInfoSyncSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoSyncSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoSyncSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoSyncSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoSyncSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoSyncSettingsValidationError) ErrorName() string {
	return "UserInfoSyncSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e UserInfoSyncSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoSyncSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoSyncSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoSyncSettingsValidationError{}

// Validate checks the field values on GroupMapping with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GroupMapping) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupMapping with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GroupMappingMultiError, or
// nil if none found.
func (m *GroupMapping) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupMapping) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) > 64 {
		err := GroupMappingValidationError{
			field:  "Name",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFromGrade() < 0 {
		err := GroupMappingValidationError{
			field:  "FromGrade",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToGrade() < 0 {
		err := GroupMappingValidationError{
			field:  "ToGrade",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupMappingMultiError(errors)
	}

	return nil
}

// GroupMappingMultiError is an error wrapping multiple validation errors
// returned by GroupMapping.ValidateAll() if the designated constraints aren't met.
type GroupMappingMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupMappingMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupMappingMultiError) AllErrors() []error { return m }

// GroupMappingValidationError is the validation error returned by
// GroupMapping.Validate if the designated constraints aren't met.
type GroupMappingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupMappingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupMappingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupMappingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupMappingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupMappingValidationError) ErrorName() string { return "GroupMappingValidationError" }

// Error satisfies the builtin error interface
func (e GroupMappingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupMapping.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupMappingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupMappingValidationError{}

// Validate checks the field values on StatusLogSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StatusLogSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StatusLogSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StatusLogSettingsMultiError, or nil if none found.
func (m *StatusLogSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *StatusLogSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return StatusLogSettingsMultiError(errors)
	}

	return nil
}

// StatusLogSettingsMultiError is an error wrapping multiple validation errors
// returned by StatusLogSettings.ValidateAll() if the designated constraints
// aren't met.
type StatusLogSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StatusLogSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StatusLogSettingsMultiError) AllErrors() []error { return m }

// StatusLogSettingsValidationError is the validation error returned by
// StatusLogSettings.Validate if the designated constraints aren't met.
type StatusLogSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusLogSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusLogSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusLogSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusLogSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusLogSettingsValidationError) ErrorName() string {
	return "StatusLogSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e StatusLogSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusLogSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusLogSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusLogSettingsValidationError{}

// Validate checks the field values on JobsAbsenceSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *JobsAbsenceSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobsAbsenceSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// JobsAbsenceSettingsMultiError, or nil if none found.
func (m *JobsAbsenceSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *JobsAbsenceSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAbsenceRole()) > 64 {
		err := JobsAbsenceSettingsValidationError{
			field:  "AbsenceRole",
			reason: "value length must be at most 64 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JobsAbsenceSettingsMultiError(errors)
	}

	return nil
}

// JobsAbsenceSettingsMultiError is an error wrapping multiple validation
// errors returned by JobsAbsenceSettings.ValidateAll() if the designated
// constraints aren't met.
type JobsAbsenceSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobsAbsenceSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobsAbsenceSettingsMultiError) AllErrors() []error { return m }

// JobsAbsenceSettingsValidationError is the validation error returned by
// JobsAbsenceSettings.Validate if the designated constraints aren't met.
type JobsAbsenceSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobsAbsenceSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobsAbsenceSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobsAbsenceSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobsAbsenceSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobsAbsenceSettingsValidationError) ErrorName() string {
	return "JobsAbsenceSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e JobsAbsenceSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobsAbsenceSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobsAbsenceSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobsAbsenceSettingsValidationError{}

// Validate checks the field values on GroupSyncSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GroupSyncSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupSyncSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupSyncSettingsMultiError, or nil if none found.
func (m *GroupSyncSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupSyncSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetIgnoredRoleIds()) > 25 {
		err := GroupSyncSettingsValidationError{
			field:  "IgnoredRoleIds",
			reason: "value must contain no more than 25 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetIgnoredRoleIds() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) > 24 {
			err := GroupSyncSettingsValidationError{
				field:  fmt.Sprintf("IgnoredRoleIds[%v]", idx),
				reason: "value length must be at most 24 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return GroupSyncSettingsMultiError(errors)
	}

	return nil
}

// GroupSyncSettingsMultiError is an error wrapping multiple validation errors
// returned by GroupSyncSettings.ValidateAll() if the designated constraints
// aren't met.
type GroupSyncSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupSyncSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupSyncSettingsMultiError) AllErrors() []error { return m }

// GroupSyncSettingsValidationError is the validation error returned by
// GroupSyncSettings.Validate if the designated constraints aren't met.
type GroupSyncSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupSyncSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupSyncSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupSyncSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupSyncSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupSyncSettingsValidationError) ErrorName() string {
	return "GroupSyncSettingsValidationError"
}

// Error satisfies the builtin error interface
func (e GroupSyncSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupSyncSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupSyncSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupSyncSettingsValidationError{}

// Validate checks the field values on JobSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JobSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JobSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JobSettingsMultiError, or
// nil if none found.
func (m *JobSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *JobSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetAbsencePastDays(); val < 0 || val > 31 {
		err := JobSettingsValidationError{
			field:  "AbsencePastDays",
			reason: "value must be inside range [0, 31]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetAbsenceFutureDays(); val < 3 || val > 186 {
		err := JobSettingsValidationError{
			field:  "AbsenceFutureDays",
			reason: "value must be inside range [3, 186]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return JobSettingsMultiError(errors)
	}

	return nil
}

// JobSettingsMultiError is an error wrapping multiple validation errors
// returned by JobSettings.ValidateAll() if the designated constraints aren't met.
type JobSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JobSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JobSettingsMultiError) AllErrors() []error { return m }

// JobSettingsValidationError is the validation error returned by
// JobSettings.Validate if the designated constraints aren't met.
type JobSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JobSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JobSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JobSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JobSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JobSettingsValidationError) ErrorName() string { return "JobSettingsValidationError" }

// Error satisfies the builtin error interface
func (e JobSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJobSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JobSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JobSettingsValidationError{}
