// Code generated by protoc-gen-customizer. DO NOT EDIT.
// source: resources/jobs/activity.proto

package jobs

import (
	"github.com/fivenet-app/fivenet/pkg/html/htmlsanitizer"
)

func (m *ColleagueAbsenceDate) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AbsenceBegin
	if m.AbsenceBegin != nil {
		if v, ok := any(m.GetAbsenceBegin()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: AbsenceEnd
	if m.AbsenceEnd != nil {
		if v, ok := any(m.GetAbsenceEnd()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *ColleagueGradeChange) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *ColleagueLabelsChange) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: Added
	for idx, item := range m.Added {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	// Field: Removed
	for idx, item := range m.Removed {
		_, _ = idx, item

		if v, ok := any(item).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ColleagueNameChange) Sanitize() error {
	if m == nil {
		return nil
	}

	return nil
}

func (m *JobsUserActivity) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: CreatedAt
	if m.CreatedAt != nil {
		if v, ok := any(m.GetCreatedAt()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Data
	if m.Data != nil {
		if v, ok := any(m.GetData()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: Reason
	m.Reason = htmlsanitizer.Sanitize(m.Reason)

	// Field: SourceUser
	if m.SourceUser != nil {
		if v, ok := any(m.GetSourceUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	// Field: TargetUser
	if m.TargetUser != nil {
		if v, ok := any(m.GetTargetUser()).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}
	}

	return nil
}

func (m *JobsUserActivityData) Sanitize() error {
	if m == nil {
		return nil
	}

	// Field: AbsenceDate
	switch v := m.Data.(type) {

	case *JobsUserActivityData_AbsenceDate:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: GradeChange
	case *JobsUserActivityData_GradeChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: LabelsChange
	case *JobsUserActivityData_LabelsChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

		// Field: NameChange
	case *JobsUserActivityData_NameChange:
		if v, ok := any(v).(interface{ Sanitize() error }); ok {
			if err := v.Sanitize(); err != nil {
				return err
			}
		}

	}

	return nil
}
