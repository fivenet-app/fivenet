// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/permissions/attributes.proto" (package "resources.permissions", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.permissions.RoleAttribute
 */
export interface RoleAttribute {
    /**
     * @generated from protobuf field: uint64 role_id = 1
     */
    roleId: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 attr_id = 3
     */
    attrId: number;
    /**
     * @generated from protobuf field: uint64 permission_id = 4
     */
    permissionId: number;
    /**
     * @generated from protobuf field: string category = 5
     */
    category: string;
    /**
     * @generated from protobuf field: string name = 6
     */
    name: string;
    /**
     * @generated from protobuf field: string key = 7
     */
    key: string;
    /**
     * @generated from protobuf field: string type = 8
     */
    type: string;
    /**
     * @generated from protobuf field: resources.permissions.AttributeValues valid_values = 9
     */
    validValues?: AttributeValues;
    /**
     * @generated from protobuf field: resources.permissions.AttributeValues value = 10
     */
    value?: AttributeValues;
    /**
     * @generated from protobuf field: optional resources.permissions.AttributeValues max_values = 11
     */
    maxValues?: AttributeValues;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.permissions.AttributeValues
 */
export interface AttributeValues {
    /**
     * @generated from protobuf oneof: valid_values
     */
    validValues: {
        oneofKind: "stringList";
        /**
         * @generated from protobuf field: resources.permissions.StringList string_list = 1
         */
        stringList: StringList;
    } | {
        oneofKind: "jobList";
        /**
         * @generated from protobuf field: resources.permissions.StringList job_list = 2
         */
        jobList: StringList;
    } | {
        oneofKind: "jobGradeList";
        /**
         * @generated from protobuf field: resources.permissions.JobGradeList job_grade_list = 3
         */
        jobGradeList: JobGradeList;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.permissions.StringList
 */
export interface StringList {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: repeated string strings = 1
     */
    strings: string[];
}
/**
 * @generated from protobuf message resources.permissions.JobGradeList
 */
export interface JobGradeList {
    /**
     * @generated from protobuf field: bool fine_grained = 2
     */
    fineGrained: boolean;
    /**
     * @generated from protobuf field: map<string, int32> jobs = 1
     */
    jobs: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: map<string, resources.permissions.JobGrades> grades = 3
     */
    grades: {
        [key: string]: JobGrades;
    };
}
/**
 * @generated from protobuf message resources.permissions.JobGrades
 */
export interface JobGrades {
    /**
     * @generated from protobuf field: repeated int32 grades = 1
     */
    grades: number[];
}
// @generated message type with reflection information, may provide speed optimized methods
class RoleAttribute$Type extends MessageType<RoleAttribute> {
    constructor() {
        super("resources.permissions.RoleAttribute", [
            { no: 1, name: "role_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "attr_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "permission_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "category", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "128" } } } },
            { no: 6, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 7, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 8, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 9, name: "valid_values", kind: "message", T: () => AttributeValues },
            { no: 10, name: "value", kind: "message", T: () => AttributeValues },
            { no: 11, name: "max_values", kind: "message", T: () => AttributeValues }
        ]);
    }
    create(value?: PartialMessage<RoleAttribute>): RoleAttribute {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.roleId = 0;
        message.attrId = 0;
        message.permissionId = 0;
        message.category = "";
        message.name = "";
        message.key = "";
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<RoleAttribute>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoleAttribute): RoleAttribute {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 role_id */ 1:
                    message.roleId = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 attr_id */ 3:
                    message.attrId = reader.uint64().toNumber();
                    break;
                case /* uint64 permission_id */ 4:
                    message.permissionId = reader.uint64().toNumber();
                    break;
                case /* string category */ 5:
                    message.category = reader.string();
                    break;
                case /* string name */ 6:
                    message.name = reader.string();
                    break;
                case /* string key */ 7:
                    message.key = reader.string();
                    break;
                case /* string type */ 8:
                    message.type = reader.string();
                    break;
                case /* resources.permissions.AttributeValues valid_values */ 9:
                    message.validValues = AttributeValues.internalBinaryRead(reader, reader.uint32(), options, message.validValues);
                    break;
                case /* resources.permissions.AttributeValues value */ 10:
                    message.value = AttributeValues.internalBinaryRead(reader, reader.uint32(), options, message.value);
                    break;
                case /* optional resources.permissions.AttributeValues max_values */ 11:
                    message.maxValues = AttributeValues.internalBinaryRead(reader, reader.uint32(), options, message.maxValues);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoleAttribute, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 role_id = 1; */
        if (message.roleId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.roleId);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 attr_id = 3; */
        if (message.attrId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.attrId);
        /* uint64 permission_id = 4; */
        if (message.permissionId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.permissionId);
        /* string category = 5; */
        if (message.category !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.category);
        /* string name = 6; */
        if (message.name !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* string key = 7; */
        if (message.key !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.key);
        /* string type = 8; */
        if (message.type !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.type);
        /* resources.permissions.AttributeValues valid_values = 9; */
        if (message.validValues)
            AttributeValues.internalBinaryWrite(message.validValues, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* resources.permissions.AttributeValues value = 10; */
        if (message.value)
            AttributeValues.internalBinaryWrite(message.value, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.permissions.AttributeValues max_values = 11; */
        if (message.maxValues)
            AttributeValues.internalBinaryWrite(message.maxValues, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.permissions.RoleAttribute
 */
export const RoleAttribute = new RoleAttribute$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttributeValues$Type extends MessageType<AttributeValues> {
    constructor() {
        super("resources.permissions.AttributeValues", [
            { no: 1, name: "string_list", kind: "message", oneof: "validValues", T: () => StringList },
            { no: 2, name: "job_list", kind: "message", oneof: "validValues", T: () => StringList },
            { no: 3, name: "job_grade_list", kind: "message", oneof: "validValues", T: () => JobGradeList }
        ]);
    }
    create(value?: PartialMessage<AttributeValues>): AttributeValues {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.validValues = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<AttributeValues>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttributeValues): AttributeValues {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.permissions.StringList string_list */ 1:
                    message.validValues = {
                        oneofKind: "stringList",
                        stringList: StringList.internalBinaryRead(reader, reader.uint32(), options, (message.validValues as any).stringList)
                    };
                    break;
                case /* resources.permissions.StringList job_list */ 2:
                    message.validValues = {
                        oneofKind: "jobList",
                        jobList: StringList.internalBinaryRead(reader, reader.uint32(), options, (message.validValues as any).jobList)
                    };
                    break;
                case /* resources.permissions.JobGradeList job_grade_list */ 3:
                    message.validValues = {
                        oneofKind: "jobGradeList",
                        jobGradeList: JobGradeList.internalBinaryRead(reader, reader.uint32(), options, (message.validValues as any).jobGradeList)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttributeValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.permissions.StringList string_list = 1; */
        if (message.validValues.oneofKind === "stringList")
            StringList.internalBinaryWrite(message.validValues.stringList, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.permissions.StringList job_list = 2; */
        if (message.validValues.oneofKind === "jobList")
            StringList.internalBinaryWrite(message.validValues.jobList, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.permissions.JobGradeList job_grade_list = 3; */
        if (message.validValues.oneofKind === "jobGradeList")
            JobGradeList.internalBinaryWrite(message.validValues.jobGradeList, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.permissions.AttributeValues
 */
export const AttributeValues = new AttributeValues$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StringList$Type extends MessageType<StringList> {
    constructor() {
        super("resources.permissions.StringList", [
            { no: 1, name: "strings", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StringList>): StringList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.strings = [];
        if (value !== undefined)
            reflectionMergePartial<StringList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StringList): StringList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string strings */ 1:
                    message.strings.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StringList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string strings = 1; */
        for (let i = 0; i < message.strings.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.strings[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.permissions.StringList
 */
export const StringList = new StringList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobGradeList$Type extends MessageType<JobGradeList> {
    constructor() {
        super("resources.permissions.JobGradeList", [
            { no: 2, name: "fine_grained", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "jobs", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 3, name: "grades", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => JobGrades } }
        ]);
    }
    create(value?: PartialMessage<JobGradeList>): JobGradeList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fineGrained = false;
        message.jobs = {};
        message.grades = {};
        if (value !== undefined)
            reflectionMergePartial<JobGradeList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobGradeList): JobGradeList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool fine_grained */ 2:
                    message.fineGrained = reader.bool();
                    break;
                case /* map<string, int32> jobs */ 1:
                    this.binaryReadMap1(message.jobs, reader, options);
                    break;
                case /* map<string, resources.permissions.JobGrades> grades */ 3:
                    this.binaryReadMap3(message.grades, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: JobGradeList["jobs"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof JobGradeList["jobs"] | undefined, val: JobGradeList["jobs"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for resources.permissions.JobGradeList.jobs");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    private binaryReadMap3(map: JobGradeList["grades"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof JobGradeList["grades"] | undefined, val: JobGradeList["grades"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = JobGrades.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for resources.permissions.JobGradeList.grades");
            }
        }
        map[key ?? ""] = val ?? JobGrades.create();
    }
    internalBinaryWrite(message: JobGradeList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, int32> jobs = 1; */
        for (let k of globalThis.Object.keys(message.jobs))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.jobs[k]).join();
        /* bool fine_grained = 2; */
        if (message.fineGrained !== false)
            writer.tag(2, WireType.Varint).bool(message.fineGrained);
        /* map<string, resources.permissions.JobGrades> grades = 3; */
        for (let k of globalThis.Object.keys(message.grades)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            JobGrades.internalBinaryWrite(message.grades[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.permissions.JobGradeList
 */
export const JobGradeList = new JobGradeList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JobGrades$Type extends MessageType<JobGrades> {
    constructor() {
        super("resources.permissions.JobGrades", [
            { no: 1, name: "grades", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<JobGrades>): JobGrades {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.grades = [];
        if (value !== undefined)
            reflectionMergePartial<JobGrades>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobGrades): JobGrades {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 grades */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.grades.push(reader.int32());
                    else
                        message.grades.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobGrades, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 grades = 1; */
        if (message.grades.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.grades.length; i++)
                writer.int32(message.grades[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.permissions.JobGrades
 */
export const JobGrades = new JobGrades$Type();
