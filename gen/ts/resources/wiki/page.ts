// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/wiki/page.proto" (package "resources.wiki", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ContentType } from "../common/content/content";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
import { File } from "../file/file";
import { PageAccess } from "./access";
import { Content } from "../common/content/content";
/**
 * @generated from protobuf message resources.wiki.Page
 */
export interface Page {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string job = 2
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 3
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: optional uint64 parent_id = 4
     */
    parentId?: number;
    /**
     * @generated from protobuf field: resources.wiki.PageMeta meta = 5
     */
    meta?: PageMeta;
    /**
     * @generated from protobuf field: resources.common.content.Content content = 6
     */
    content?: Content;
    /**
     * @generated from protobuf field: resources.wiki.PageAccess access = 7
     */
    access?: PageAccess;
    /**
     * @generated from protobuf field: repeated resources.file.File files = 8
     */
    files: File[]; // @gotags: alias:"files"
}
/**
 * @generated from protobuf message resources.wiki.PageMeta
 */
export interface PageMeta {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 1
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 2
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 3
     */
    deletedAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string slug = 4
     */
    slug?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 5
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string description = 6
     */
    description: string;
    /**
     * @generated from protobuf field: optional int32 creator_id = 7
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 8
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: resources.common.content.ContentType content_type = 9
     */
    contentType: ContentType;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: repeated string tags = 10
     */
    tags: string[];
    /**
     * @generated from protobuf field: optional bool toc = 11
     */
    toc?: boolean;
    /**
     * @generated from protobuf field: bool public = 12
     */
    public: boolean;
    /**
     * @generated from protobuf field: bool draft = 13
     */
    draft: boolean;
}
/**
 * @generated from protobuf message resources.wiki.PageShort
 */
export interface PageShort {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: string job = 2
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 3
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: optional uint64 parent_id = 4
     */
    parentId?: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 5
     */
    deletedAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string slug = 6
     */
    slug?: string;
    /**
     * @generated from protobuf field: string title = 7
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 8
     */
    description: string;
    /**
     * @generated from protobuf field: repeated resources.wiki.PageShort children = 9
     */
    children: PageShort[];
    /**
     * @generated from protobuf field: optional resources.wiki.PageRootInfo root_info = 10
     */
    rootInfo?: PageRootInfo;
    /**
     * @generated from protobuf field: optional int32 level = 11
     */
    level?: number;
    /**
     * @generated from protobuf field: bool draft = 13
     */
    draft: boolean;
}
/**
 * @generated from protobuf message resources.wiki.PageRootInfo
 */
export interface PageRootInfo {
    /**
     * @generated from protobuf field: optional uint64 logo_file_id = 1
     */
    logoFileId?: number;
    /**
     * @generated from protobuf field: optional resources.file.File logo = 2
     */
    logo?: File; // @gotags: alias:"logo"
}
// @generated message type with reflection information, may provide speed optimized methods
class Page$Type extends MessageType<Page> {
    constructor() {
        super("resources.wiki.Page", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 3, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 4, name: "parent_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "meta", kind: "message", T: () => PageMeta, options: { "validate.rules": { message: { required: true } } } },
            { no: 6, name: "content", kind: "message", T: () => Content },
            { no: 7, name: "access", kind: "message", T: () => PageAccess, options: { "validate.rules": { message: { required: true } } } },
            { no: 8, name: "files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => File }
        ]);
    }
    create(value?: PartialMessage<Page>): Page {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.files = [];
        if (value !== undefined)
            reflectionMergePartial<Page>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Page): Page {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* string job */ 2:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 3:
                    message.jobLabel = reader.string();
                    break;
                case /* optional uint64 parent_id */ 4:
                    message.parentId = reader.uint64().toNumber();
                    break;
                case /* resources.wiki.PageMeta meta */ 5:
                    message.meta = PageMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* resources.common.content.Content content */ 6:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* resources.wiki.PageAccess access */ 7:
                    message.access = PageAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                case /* repeated resources.file.File files */ 8:
                    message.files.push(File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Page, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string job = 2; */
        if (message.job !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 3; */
        if (message.jobLabel !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.jobLabel);
        /* optional uint64 parent_id = 4; */
        if (message.parentId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.parentId);
        /* resources.wiki.PageMeta meta = 5; */
        if (message.meta)
            PageMeta.internalBinaryWrite(message.meta, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* resources.common.content.Content content = 6; */
        if (message.content)
            Content.internalBinaryWrite(message.content, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.wiki.PageAccess access = 7; */
        if (message.access)
            PageAccess.internalBinaryWrite(message.access, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.file.File files = 8; */
        for (let i = 0; i < message.files.length; i++)
            File.internalBinaryWrite(message.files[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.wiki.Page
 */
export const Page = new Page$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageMeta$Type extends MessageType<PageMeta> {
    constructor() {
        super("resources.wiki.PageMeta", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "slug", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "100" } } } },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "1024" } } } },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "128" } } } },
            { no: 7, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 8, name: "creator", kind: "message", T: () => UserShort },
            { no: 9, name: "content_type", kind: "enum", T: () => ["resources.common.content.ContentType", ContentType, "CONTENT_TYPE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 10, name: "tags", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "toc", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "draft", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PageMeta>): PageMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.title = "";
        message.description = "";
        message.contentType = 0;
        message.tags = [];
        message.public = false;
        message.draft = false;
        if (value !== undefined)
            reflectionMergePartial<PageMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageMeta): PageMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 2:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 3:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* optional string slug */ 4:
                    message.slug = reader.string();
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* optional int32 creator_id */ 7:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 8:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* resources.common.content.ContentType content_type */ 9:
                    message.contentType = reader.int32();
                    break;
                case /* repeated string tags */ 10:
                    message.tags.push(reader.string());
                    break;
                case /* optional bool toc */ 11:
                    message.toc = reader.bool();
                    break;
                case /* bool public */ 12:
                    message.public = reader.bool();
                    break;
                case /* bool draft */ 13:
                    message.draft = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 2; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 3; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional string slug = 4; */
        if (message.slug !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.slug);
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* optional int32 creator_id = 7; */
        if (message.creatorId !== undefined)
            writer.tag(7, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 8; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* resources.common.content.ContentType content_type = 9; */
        if (message.contentType !== 0)
            writer.tag(9, WireType.Varint).int32(message.contentType);
        /* repeated string tags = 10; */
        for (let i = 0; i < message.tags.length; i++)
            writer.tag(10, WireType.LengthDelimited).string(message.tags[i]);
        /* optional bool toc = 11; */
        if (message.toc !== undefined)
            writer.tag(11, WireType.Varint).bool(message.toc);
        /* bool public = 12; */
        if (message.public !== false)
            writer.tag(12, WireType.Varint).bool(message.public);
        /* bool draft = 13; */
        if (message.draft !== false)
            writer.tag(13, WireType.Varint).bool(message.draft);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.wiki.PageMeta
 */
export const PageMeta = new PageMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageShort$Type extends MessageType<PageShort> {
    constructor() {
        super("resources.wiki.PageShort", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 3, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 4, name: "parent_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "slug", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "100" } } } },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "children", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PageShort },
            { no: 10, name: "root_info", kind: "message", T: () => PageRootInfo },
            { no: 11, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } },
            { no: 13, name: "draft", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PageShort>): PageShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.title = "";
        message.description = "";
        message.children = [];
        message.draft = false;
        if (value !== undefined)
            reflectionMergePartial<PageShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageShort): PageShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* string job */ 2:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 3:
                    message.jobLabel = reader.string();
                    break;
                case /* optional uint64 parent_id */ 4:
                    message.parentId = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 5:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* optional string slug */ 6:
                    message.slug = reader.string();
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* string description */ 8:
                    message.description = reader.string();
                    break;
                case /* repeated resources.wiki.PageShort children */ 9:
                    message.children.push(PageShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional resources.wiki.PageRootInfo root_info */ 10:
                    message.rootInfo = PageRootInfo.internalBinaryRead(reader, reader.uint32(), options, message.rootInfo);
                    break;
                case /* optional int32 level */ 11:
                    message.level = reader.int32();
                    break;
                case /* bool draft */ 13:
                    message.draft = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string job = 2; */
        if (message.job !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 3; */
        if (message.jobLabel !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.jobLabel);
        /* optional uint64 parent_id = 4; */
        if (message.parentId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.parentId);
        /* optional resources.timestamp.Timestamp deleted_at = 5; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional string slug = 6; */
        if (message.slug !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.slug);
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* string description = 8; */
        if (message.description !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* repeated resources.wiki.PageShort children = 9; */
        for (let i = 0; i < message.children.length; i++)
            PageShort.internalBinaryWrite(message.children[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.wiki.PageRootInfo root_info = 10; */
        if (message.rootInfo)
            PageRootInfo.internalBinaryWrite(message.rootInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 level = 11; */
        if (message.level !== undefined)
            writer.tag(11, WireType.Varint).int32(message.level);
        /* bool draft = 13; */
        if (message.draft !== false)
            writer.tag(13, WireType.Varint).bool(message.draft);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.wiki.PageShort
 */
export const PageShort = new PageShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PageRootInfo$Type extends MessageType<PageRootInfo> {
    constructor() {
        super("resources.wiki.PageRootInfo", [
            { no: 1, name: "logo_file_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "logo", kind: "message", T: () => File }
        ]);
    }
    create(value?: PartialMessage<PageRootInfo>): PageRootInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PageRootInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PageRootInfo): PageRootInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 logo_file_id */ 1:
                    message.logoFileId = reader.uint64().toNumber();
                    break;
                case /* optional resources.file.File logo */ 2:
                    message.logo = File.internalBinaryRead(reader, reader.uint32(), options, message.logo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PageRootInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 logo_file_id = 1; */
        if (message.logoFileId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.logoFileId);
        /* optional resources.file.File logo = 2; */
        if (message.logo)
            File.internalBinaryWrite(message.logo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.wiki.PageRootInfo
 */
export const PageRootInfo = new PageRootInfo$Type();
