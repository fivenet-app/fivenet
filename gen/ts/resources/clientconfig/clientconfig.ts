// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/clientconfig/clientconfig.proto" (package "resources.clientconfig", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BannerMessage } from "../settings/banner";
/**
 * @generated from protobuf message resources.clientconfig.ClientConfig
 */
export interface ClientConfig {
    /**
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: string default_locale = 2
     */
    defaultLocale: string;
    /**
     * @generated from protobuf field: resources.clientconfig.LoginConfig login = 3
     */
    login?: LoginConfig;
    /**
     * @generated from protobuf field: resources.clientconfig.Discord discord = 4
     */
    discord?: Discord;
    /**
     * @generated from protobuf field: resources.clientconfig.Website website = 5
     */
    website?: Website;
    /**
     * @generated from protobuf field: resources.clientconfig.FeatureGates feature_gates = 6
     */
    featureGates?: FeatureGates;
    /**
     * @generated from protobuf field: resources.clientconfig.Game game = 7
     */
    game?: Game;
    /**
     * @generated from protobuf field: resources.clientconfig.System system = 8
     */
    system?: System;
}
/**
 * @generated from protobuf message resources.clientconfig.LoginConfig
 */
export interface LoginConfig {
    /**
     * @generated from protobuf field: bool signup_enabled = 1
     */
    signupEnabled: boolean;
    /**
     * @generated from protobuf field: bool last_char_lock = 2
     */
    lastCharLock: boolean;
    /**
     * @generated from protobuf field: repeated resources.clientconfig.ProviderConfig providers = 3
     */
    providers: ProviderConfig[];
}
/**
 * @generated from protobuf message resources.clientconfig.ProviderConfig
 */
export interface ProviderConfig {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: string label = 2
     */
    label: string;
    /**
     * @generated from protobuf field: optional string icon = 3
     */
    icon?: string;
    /**
     * @generated from protobuf field: string homepage = 4
     */
    homepage: string;
}
/**
 * @generated from protobuf message resources.clientconfig.Discord
 */
export interface Discord {
    /**
     * @generated from protobuf field: bool bot_enabled = 1
     */
    botEnabled: boolean;
}
/**
 * @generated from protobuf message resources.clientconfig.Website
 */
export interface Website {
    /**
     * @generated from protobuf field: resources.clientconfig.Links links = 1
     */
    links?: Links;
    /**
     * @generated from protobuf field: bool stats_page = 2
     */
    statsPage: boolean;
}
/**
 * @generated from protobuf message resources.clientconfig.Links
 */
export interface Links {
    /**
     * @generated from protobuf field: optional string imprint = 1
     */
    imprint?: string;
    /**
     * @generated from protobuf field: optional string privacy_policy = 2
     */
    privacyPolicy?: string;
}
/**
 * @generated from protobuf message resources.clientconfig.FeatureGates
 */
export interface FeatureGates {
    /**
     * @generated from protobuf field: bool image_proxy = 1
     */
    imageProxy: boolean;
}
/**
 * @generated from protobuf message resources.clientconfig.Game
 */
export interface Game {
    /**
     * @generated from protobuf field: string unemployed_job_name = 1
     */
    unemployedJobName: string;
    /**
     * @generated from protobuf field: int32 start_job_grade = 2
     */
    startJobGrade: number;
}
/**
 * @generated from protobuf message resources.clientconfig.System
 */
export interface System {
    /**
     * @generated from protobuf field: bool banner_message_enabled = 1
     */
    bannerMessageEnabled: boolean;
    /**
     * @generated from protobuf field: optional resources.settings.BannerMessage banner_message = 2
     */
    bannerMessage?: BannerMessage;
    /**
     * @generated from protobuf field: resources.clientconfig.OTLPFrontend otlp = 3
     */
    otlp?: OTLPFrontend;
}
/**
 * @generated from protobuf message resources.clientconfig.OTLPFrontend
 */
export interface OTLPFrontend {
    /**
     * @generated from protobuf field: bool enabled = 1
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: string url = 2
     */
    url: string;
    /**
     * @generated from protobuf field: map<string, string> headers = 3
     */
    headers: {
        [key: string]: string;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientConfig$Type extends MessageType<ClientConfig> {
    constructor() {
        super("resources.clientconfig.ClientConfig", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "default_locale", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "login", kind: "message", T: () => LoginConfig },
            { no: 4, name: "discord", kind: "message", T: () => Discord },
            { no: 5, name: "website", kind: "message", T: () => Website },
            { no: 6, name: "feature_gates", kind: "message", T: () => FeatureGates },
            { no: 7, name: "game", kind: "message", T: () => Game },
            { no: 8, name: "system", kind: "message", T: () => System }
        ]);
    }
    create(value?: PartialMessage<ClientConfig>): ClientConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.defaultLocale = "";
        if (value !== undefined)
            reflectionMergePartial<ClientConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientConfig): ClientConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string default_locale */ 2:
                    message.defaultLocale = reader.string();
                    break;
                case /* resources.clientconfig.LoginConfig login */ 3:
                    message.login = LoginConfig.internalBinaryRead(reader, reader.uint32(), options, message.login);
                    break;
                case /* resources.clientconfig.Discord discord */ 4:
                    message.discord = Discord.internalBinaryRead(reader, reader.uint32(), options, message.discord);
                    break;
                case /* resources.clientconfig.Website website */ 5:
                    message.website = Website.internalBinaryRead(reader, reader.uint32(), options, message.website);
                    break;
                case /* resources.clientconfig.FeatureGates feature_gates */ 6:
                    message.featureGates = FeatureGates.internalBinaryRead(reader, reader.uint32(), options, message.featureGates);
                    break;
                case /* resources.clientconfig.Game game */ 7:
                    message.game = Game.internalBinaryRead(reader, reader.uint32(), options, message.game);
                    break;
                case /* resources.clientconfig.System system */ 8:
                    message.system = System.internalBinaryRead(reader, reader.uint32(), options, message.system);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string default_locale = 2; */
        if (message.defaultLocale !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.defaultLocale);
        /* resources.clientconfig.LoginConfig login = 3; */
        if (message.login)
            LoginConfig.internalBinaryWrite(message.login, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.clientconfig.Discord discord = 4; */
        if (message.discord)
            Discord.internalBinaryWrite(message.discord, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.clientconfig.Website website = 5; */
        if (message.website)
            Website.internalBinaryWrite(message.website, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* resources.clientconfig.FeatureGates feature_gates = 6; */
        if (message.featureGates)
            FeatureGates.internalBinaryWrite(message.featureGates, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.clientconfig.Game game = 7; */
        if (message.game)
            Game.internalBinaryWrite(message.game, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* resources.clientconfig.System system = 8; */
        if (message.system)
            System.internalBinaryWrite(message.system, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.ClientConfig
 */
export const ClientConfig = new ClientConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginConfig$Type extends MessageType<LoginConfig> {
    constructor() {
        super("resources.clientconfig.LoginConfig", [
            { no: 1, name: "signup_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "last_char_lock", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "providers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ProviderConfig }
        ]);
    }
    create(value?: PartialMessage<LoginConfig>): LoginConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signupEnabled = false;
        message.lastCharLock = false;
        message.providers = [];
        if (value !== undefined)
            reflectionMergePartial<LoginConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginConfig): LoginConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool signup_enabled */ 1:
                    message.signupEnabled = reader.bool();
                    break;
                case /* bool last_char_lock */ 2:
                    message.lastCharLock = reader.bool();
                    break;
                case /* repeated resources.clientconfig.ProviderConfig providers */ 3:
                    message.providers.push(ProviderConfig.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool signup_enabled = 1; */
        if (message.signupEnabled !== false)
            writer.tag(1, WireType.Varint).bool(message.signupEnabled);
        /* bool last_char_lock = 2; */
        if (message.lastCharLock !== false)
            writer.tag(2, WireType.Varint).bool(message.lastCharLock);
        /* repeated resources.clientconfig.ProviderConfig providers = 3; */
        for (let i = 0; i < message.providers.length; i++)
            ProviderConfig.internalBinaryWrite(message.providers[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.LoginConfig
 */
export const LoginConfig = new LoginConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ProviderConfig$Type extends MessageType<ProviderConfig> {
    constructor() {
        super("resources.clientconfig.ProviderConfig", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "homepage", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ProviderConfig>): ProviderConfig {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.label = "";
        message.homepage = "";
        if (value !== undefined)
            reflectionMergePartial<ProviderConfig>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProviderConfig): ProviderConfig {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string label */ 2:
                    message.label = reader.string();
                    break;
                case /* optional string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* string homepage */ 4:
                    message.homepage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ProviderConfig, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string label = 2; */
        if (message.label !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.label);
        /* optional string icon = 3; */
        if (message.icon !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* string homepage = 4; */
        if (message.homepage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.homepage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.ProviderConfig
 */
export const ProviderConfig = new ProviderConfig$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Discord$Type extends MessageType<Discord> {
    constructor() {
        super("resources.clientconfig.Discord", [
            { no: 1, name: "bot_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Discord>): Discord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.botEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<Discord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Discord): Discord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool bot_enabled */ 1:
                    message.botEnabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Discord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool bot_enabled = 1; */
        if (message.botEnabled !== false)
            writer.tag(1, WireType.Varint).bool(message.botEnabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.Discord
 */
export const Discord = new Discord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Website$Type extends MessageType<Website> {
    constructor() {
        super("resources.clientconfig.Website", [
            { no: 1, name: "links", kind: "message", T: () => Links },
            { no: 2, name: "stats_page", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Website>): Website {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statsPage = false;
        if (value !== undefined)
            reflectionMergePartial<Website>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Website): Website {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.clientconfig.Links links */ 1:
                    message.links = Links.internalBinaryRead(reader, reader.uint32(), options, message.links);
                    break;
                case /* bool stats_page */ 2:
                    message.statsPage = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Website, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.clientconfig.Links links = 1; */
        if (message.links)
            Links.internalBinaryWrite(message.links, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool stats_page = 2; */
        if (message.statsPage !== false)
            writer.tag(2, WireType.Varint).bool(message.statsPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.Website
 */
export const Website = new Website$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Links$Type extends MessageType<Links> {
    constructor() {
        super("resources.clientconfig.Links", [
            { no: 1, name: "imprint", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "privacy_policy", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Links>): Links {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Links>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Links): Links {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string imprint */ 1:
                    message.imprint = reader.string();
                    break;
                case /* optional string privacy_policy */ 2:
                    message.privacyPolicy = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Links, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string imprint = 1; */
        if (message.imprint !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.imprint);
        /* optional string privacy_policy = 2; */
        if (message.privacyPolicy !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.privacyPolicy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.Links
 */
export const Links = new Links$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FeatureGates$Type extends MessageType<FeatureGates> {
    constructor() {
        super("resources.clientconfig.FeatureGates", [
            { no: 1, name: "image_proxy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FeatureGates>): FeatureGates {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.imageProxy = false;
        if (value !== undefined)
            reflectionMergePartial<FeatureGates>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeatureGates): FeatureGates {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool image_proxy */ 1:
                    message.imageProxy = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FeatureGates, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool image_proxy = 1; */
        if (message.imageProxy !== false)
            writer.tag(1, WireType.Varint).bool(message.imageProxy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.FeatureGates
 */
export const FeatureGates = new FeatureGates$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Game$Type extends MessageType<Game> {
    constructor() {
        super("resources.clientconfig.Game", [
            { no: 1, name: "unemployed_job_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "start_job_grade", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Game>): Game {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unemployedJobName = "";
        message.startJobGrade = 0;
        if (value !== undefined)
            reflectionMergePartial<Game>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Game): Game {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string unemployed_job_name */ 1:
                    message.unemployedJobName = reader.string();
                    break;
                case /* int32 start_job_grade */ 2:
                    message.startJobGrade = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Game, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string unemployed_job_name = 1; */
        if (message.unemployedJobName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.unemployedJobName);
        /* int32 start_job_grade = 2; */
        if (message.startJobGrade !== 0)
            writer.tag(2, WireType.Varint).int32(message.startJobGrade);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.Game
 */
export const Game = new Game$Type();
// @generated message type with reflection information, may provide speed optimized methods
class System$Type extends MessageType<System> {
    constructor() {
        super("resources.clientconfig.System", [
            { no: 1, name: "banner_message_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "banner_message", kind: "message", T: () => BannerMessage },
            { no: 3, name: "otlp", kind: "message", T: () => OTLPFrontend }
        ]);
    }
    create(value?: PartialMessage<System>): System {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bannerMessageEnabled = false;
        if (value !== undefined)
            reflectionMergePartial<System>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: System): System {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool banner_message_enabled */ 1:
                    message.bannerMessageEnabled = reader.bool();
                    break;
                case /* optional resources.settings.BannerMessage banner_message */ 2:
                    message.bannerMessage = BannerMessage.internalBinaryRead(reader, reader.uint32(), options, message.bannerMessage);
                    break;
                case /* resources.clientconfig.OTLPFrontend otlp */ 3:
                    message.otlp = OTLPFrontend.internalBinaryRead(reader, reader.uint32(), options, message.otlp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: System, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool banner_message_enabled = 1; */
        if (message.bannerMessageEnabled !== false)
            writer.tag(1, WireType.Varint).bool(message.bannerMessageEnabled);
        /* optional resources.settings.BannerMessage banner_message = 2; */
        if (message.bannerMessage)
            BannerMessage.internalBinaryWrite(message.bannerMessage, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.clientconfig.OTLPFrontend otlp = 3; */
        if (message.otlp)
            OTLPFrontend.internalBinaryWrite(message.otlp, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.System
 */
export const System = new System$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OTLPFrontend$Type extends MessageType<OTLPFrontend> {
    constructor() {
        super("resources.clientconfig.OTLPFrontend", [
            { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "headers", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<OTLPFrontend>): OTLPFrontend {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        message.url = "";
        message.headers = {};
        if (value !== undefined)
            reflectionMergePartial<OTLPFrontend>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OTLPFrontend): OTLPFrontend {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enabled */ 1:
                    message.enabled = reader.bool();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* map<string, string> headers */ 3:
                    this.binaryReadMap3(message.headers, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: OTLPFrontend["headers"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof OTLPFrontend["headers"] | undefined, val: OTLPFrontend["headers"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for resources.clientconfig.OTLPFrontend.headers");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: OTLPFrontend, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enabled = 1; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* map<string, string> headers = 3; */
        for (let k of globalThis.Object.keys(message.headers))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.headers[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.clientconfig.OTLPFrontend
 */
export const OTLPFrontend = new OTLPFrontend$Type();
