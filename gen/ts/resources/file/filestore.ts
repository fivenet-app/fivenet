// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/file/filestore.proto" (package "resources.file", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { File } from "./file";
/**
 * @generated from protobuf message resources.file.UploadFileRequest
 */
export interface UploadFileRequest {
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "meta";
        /**
         * @generated from protobuf field: resources.file.UploadMeta meta = 1
         */
        meta: UploadMeta;
    } | {
        oneofKind: "data";
        /**
         * Raw bytes <= 128 KiB each, browsers should only read 64 KiB at a time, but this is a buffer just in case
         *
         * @generated from protobuf field: bytes data = 2
         */
        data: Uint8Array;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.file.UploadMeta
 */
export interface UploadMeta {
    /**
     * @generated from protobuf field: int64 parent_id = 1
     */
    parentId: number;
    /**
     * @generated from protobuf field: string namespace = 2
     */
    namespace: string; // "documents", "wiki", â€¦
    /**
     * @generated from protobuf field: string original_name = 3
     */
    originalName: string;
    /**
     * @generated from protobuf field: string content_type = 4
     */
    contentType: string; // optional - server re-validates
    /**
     * @generated from protobuf field: int64 size = 5
     */
    size: number; // Size in bytes
    /**
     * @sanitize
     *
     * @generated from protobuf field: string reason = 6
     */
    reason: string;
}
/**
 * @generated from protobuf message resources.file.UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number; // Unique ID for the uploaded file
    /**
     * @generated from protobuf field: string url = 2
     */
    url: string; // URL to the uploaded file
    /**
     * @generated from protobuf field: resources.file.File file = 3
     */
    file?: File; // File info
}
/**
 * @generated from protobuf message resources.file.DeleteFileRequest
 */
export interface DeleteFileRequest {
    /**
     * @generated from protobuf field: int64 parent_id = 1
     */
    parentId: number;
    /**
     * @generated from protobuf field: int64 file_id = 2
     */
    fileId: number;
}
/**
 * @generated from protobuf message resources.file.DeleteFileResponse
 */
export interface DeleteFileResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class UploadFileRequest$Type extends MessageType<UploadFileRequest> {
    constructor() {
        super("resources.file.UploadFileRequest", [
            { no: 1, name: "meta", kind: "message", oneof: "payload", T: () => UploadMeta },
            { no: 2, name: "data", kind: "scalar", oneof: "payload", T: 12 /*ScalarType.BYTES*/, options: { "buf.validate.field": { bytes: { maxLen: "131072" } } } }
        ]);
    }
    create(value?: PartialMessage<UploadFileRequest>): UploadFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<UploadFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadFileRequest): UploadFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.file.UploadMeta meta */ 1:
                    message.payload = {
                        oneofKind: "meta",
                        meta: UploadMeta.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).meta)
                    };
                    break;
                case /* bytes data */ 2:
                    message.payload = {
                        oneofKind: "data",
                        data: reader.bytes()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.file.UploadMeta meta = 1; */
        if (message.payload.oneofKind === "meta")
            UploadMeta.internalBinaryWrite(message.payload.meta, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bytes data = 2; */
        if (message.payload.oneofKind === "data")
            writer.tag(2, WireType.LengthDelimited).bytes(message.payload.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.UploadFileRequest
 */
export const UploadFileRequest = new UploadFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadMeta$Type extends MessageType<UploadMeta> {
    constructor() {
        super("resources.file.UploadMeta", [
            { no: 1, name: "parent_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "namespace", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "original_name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } },
            { no: 4, name: "content_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 6, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { ignore: "IGNORE_IF_ZERO_VALUE", string: { minLen: "3", maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<UploadMeta>): UploadMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.parentId = 0;
        message.namespace = "";
        message.originalName = "";
        message.contentType = "";
        message.size = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<UploadMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadMeta): UploadMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 parent_id */ 1:
                    message.parentId = reader.int64().toNumber();
                    break;
                case /* string namespace */ 2:
                    message.namespace = reader.string();
                    break;
                case /* string original_name */ 3:
                    message.originalName = reader.string();
                    break;
                case /* string content_type */ 4:
                    message.contentType = reader.string();
                    break;
                case /* int64 size */ 5:
                    message.size = reader.int64().toNumber();
                    break;
                case /* string reason */ 6:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 parent_id = 1; */
        if (message.parentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.parentId);
        /* string namespace = 2; */
        if (message.namespace !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.namespace);
        /* string original_name = 3; */
        if (message.originalName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.originalName);
        /* string content_type = 4; */
        if (message.contentType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.contentType);
        /* int64 size = 5; */
        if (message.size !== 0)
            writer.tag(5, WireType.Varint).int64(message.size);
        /* string reason = 6; */
        if (message.reason !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.UploadMeta
 */
export const UploadMeta = new UploadMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadFileResponse$Type extends MessageType<UploadFileResponse> {
    constructor() {
        super("resources.file.UploadFileResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "file", kind: "message", T: () => File }
        ]);
    }
    create(value?: PartialMessage<UploadFileResponse>): UploadFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<UploadFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadFileResponse): UploadFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* resources.file.File file */ 3:
                    message.file = File.internalBinaryRead(reader, reader.uint32(), options, message.file);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* resources.file.File file = 3; */
        if (message.file)
            File.internalBinaryWrite(message.file, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.UploadFileResponse
 */
export const UploadFileResponse = new UploadFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileRequest$Type extends MessageType<DeleteFileRequest> {
    constructor() {
        super("resources.file.DeleteFileRequest", [
            { no: 1, name: "parent_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "file_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteFileRequest>): DeleteFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.parentId = 0;
        message.fileId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileRequest): DeleteFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 parent_id */ 1:
                    message.parentId = reader.int64().toNumber();
                    break;
                case /* int64 file_id */ 2:
                    message.fileId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 parent_id = 1; */
        if (message.parentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.parentId);
        /* int64 file_id = 2; */
        if (message.fileId !== 0)
            writer.tag(2, WireType.Varint).int64(message.fileId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.DeleteFileRequest
 */
export const DeleteFileRequest = new DeleteFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFileResponse$Type extends MessageType<DeleteFileResponse> {
    constructor() {
        super("resources.file.DeleteFileResponse", []);
    }
    create(value?: PartialMessage<DeleteFileResponse>): DeleteFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFileResponse): DeleteFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.DeleteFileResponse
 */
export const DeleteFileResponse = new DeleteFileResponse$Type();
