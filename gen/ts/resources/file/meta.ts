// @generated by protobuf-ts 2.11.1 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/file/meta.proto" (package "resources.file", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.file.FileMeta
 */
export interface FileMeta {
    /**
     * @generated from protobuf oneof: meta
     */
    meta: {
        oneofKind: "image";
        /**
         * @generated from protobuf field: resources.file.ImageMeta image = 1
         */
        image: ImageMeta;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.file.ImageMeta
 */
export interface ImageMeta {
    /**
     * @generated from protobuf field: int64 width = 1
     */
    width: number;
    /**
     * @generated from protobuf field: int64 height = 2
     */
    height: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FileMeta$Type extends MessageType<FileMeta> {
    constructor() {
        super("resources.file.FileMeta", [
            { no: 1, name: "image", kind: "message", oneof: "meta", T: () => ImageMeta }
        ]);
    }
    create(value?: PartialMessage<FileMeta>): FileMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.meta = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<FileMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FileMeta): FileMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.file.ImageMeta image */ 1:
                    message.meta = {
                        oneofKind: "image",
                        image: ImageMeta.internalBinaryRead(reader, reader.uint32(), options, (message.meta as any).image)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FileMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.file.ImageMeta image = 1; */
        if (message.meta.oneofKind === "image")
            ImageMeta.internalBinaryWrite(message.meta.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.FileMeta
 */
export const FileMeta = new FileMeta$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageMeta$Type extends MessageType<ImageMeta> {
    constructor() {
        super("resources.file.ImageMeta", [
            { no: 1, name: "width", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "height", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ImageMeta>): ImageMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.width = 0;
        message.height = 0;
        if (value !== undefined)
            reflectionMergePartial<ImageMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageMeta): ImageMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 width */ 1:
                    message.width = reader.int64().toNumber();
                    break;
                case /* int64 height */ 2:
                    message.height = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 width = 1; */
        if (message.width !== 0)
            writer.tag(1, WireType.Varint).int64(message.width);
        /* int64 height = 2; */
        if (message.height !== 0)
            writer.tag(2, WireType.Varint).int64(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.file.ImageMeta
 */
export const ImageMeta = new ImageMeta$Type();
