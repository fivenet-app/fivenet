// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/common/database/database.proto" (package "resources.common.database", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../timestamp/timestamp";
/**
 * Pagination for requests to the server
 *
 * @generated from protobuf message resources.common.database.PaginationRequest
 */
export interface PaginationRequest {
    /**
     * @generated from protobuf field: int64 offset = 1
     */
    offset: number;
    /**
     * @generated from protobuf field: optional int64 page_size = 2
     */
    pageSize?: number;
}
/**
 * Server Pagination Response
 *
 * @generated from protobuf message resources.common.database.PaginationResponse
 */
export interface PaginationResponse {
    /**
     * @generated from protobuf field: int64 total_count = 1
     */
    totalCount: number;
    /**
     * @generated from protobuf field: int64 offset = 2
     */
    offset: number;
    /**
     * @generated from protobuf field: int64 end = 3
     */
    end: number;
    /**
     * @generated from protobuf field: int64 page_size = 4
     */
    pageSize: number;
}
/**
 * @generated from protobuf message resources.common.database.Sort
 */
export interface Sort {
    /**
     * @generated from protobuf field: repeated resources.common.database.SortByColumn columns = 1
     */
    columns: SortByColumn[];
}
/**
 * SortByColumn sort by column and direction
 *
 * @generated from protobuf message resources.common.database.SortByColumn
 */
export interface SortByColumn {
    /**
     * ID is the column name.
     *
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * Desc if true sorts descending, ascending otherwise.
     *
     * @generated from protobuf field: bool desc = 2
     */
    desc: boolean;
}
/**
 *
 * DateRange represents a datetime range (uses Timestamp underneath)
 * It depends on the API method if it will use date or date + time.
 *
 * @generated from protobuf message resources.common.database.DateRange
 */
export interface DateRange {
    /**
     * Start time
     *
     * @generated from protobuf field: resources.timestamp.Timestamp start = 1
     */
    start?: Timestamp;
    /**
     * End time
     *
     * @generated from protobuf field: resources.timestamp.Timestamp end = 2
     */
    end?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class PaginationRequest$Type extends MessageType<PaginationRequest> {
    constructor() {
        super("resources.common.database.PaginationRequest", [
            { no: 1, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gte: "0" } } } },
            { no: 2, name: "page_size", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gte: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<PaginationRequest>): PaginationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<PaginationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationRequest): PaginationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 offset */ 1:
                    message.offset = reader.int64().toNumber();
                    break;
                case /* optional int64 page_size */ 2:
                    message.pageSize = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 offset = 1; */
        if (message.offset !== 0)
            writer.tag(1, WireType.Varint).int64(message.offset);
        /* optional int64 page_size = 2; */
        if (message.pageSize !== undefined)
            writer.tag(2, WireType.Varint).int64(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.database.PaginationRequest
 */
export const PaginationRequest = new PaginationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PaginationResponse$Type extends MessageType<PaginationResponse> {
    constructor() {
        super("resources.common.database.PaginationResponse", [
            { no: 1, name: "total_count", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "offset", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "end", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "page_size", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PaginationResponse>): PaginationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.totalCount = 0;
        message.offset = 0;
        message.end = 0;
        message.pageSize = 0;
        if (value !== undefined)
            reflectionMergePartial<PaginationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaginationResponse): PaginationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 total_count */ 1:
                    message.totalCount = reader.int64().toNumber();
                    break;
                case /* int64 offset */ 2:
                    message.offset = reader.int64().toNumber();
                    break;
                case /* int64 end */ 3:
                    message.end = reader.int64().toNumber();
                    break;
                case /* int64 page_size */ 4:
                    message.pageSize = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PaginationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 total_count = 1; */
        if (message.totalCount !== 0)
            writer.tag(1, WireType.Varint).int64(message.totalCount);
        /* int64 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int64(message.offset);
        /* int64 end = 3; */
        if (message.end !== 0)
            writer.tag(3, WireType.Varint).int64(message.end);
        /* int64 page_size = 4; */
        if (message.pageSize !== 0)
            writer.tag(4, WireType.Varint).int64(message.pageSize);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.database.PaginationResponse
 */
export const PaginationResponse = new PaginationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Sort$Type extends MessageType<Sort> {
    constructor() {
        super("resources.common.database.Sort", [
            { no: 1, name: "columns", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SortByColumn }
        ]);
    }
    create(value?: PartialMessage<Sort>): Sort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.columns = [];
        if (value !== undefined)
            reflectionMergePartial<Sort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Sort): Sort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.common.database.SortByColumn columns */ 1:
                    message.columns.push(SortByColumn.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Sort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.common.database.SortByColumn columns = 1; */
        for (let i = 0; i < message.columns.length; i++)
            SortByColumn.internalBinaryWrite(message.columns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.database.Sort
 */
export const Sort = new Sort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SortByColumn$Type extends MessageType<SortByColumn> {
    constructor() {
        super("resources.common.database.SortByColumn", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1", maxLen: "64" } } } },
            { no: 2, name: "desc", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SortByColumn>): SortByColumn {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.desc = false;
        if (value !== undefined)
            reflectionMergePartial<SortByColumn>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SortByColumn): SortByColumn {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bool desc */ 2:
                    message.desc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SortByColumn, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bool desc = 2; */
        if (message.desc !== false)
            writer.tag(2, WireType.Varint).bool(message.desc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.database.SortByColumn
 */
export const SortByColumn = new SortByColumn$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DateRange$Type extends MessageType<DateRange> {
    constructor() {
        super("resources.common.database.DateRange", [
            { no: 1, name: "start", kind: "message", T: () => Timestamp },
            { no: 2, name: "end", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DateRange>): DateRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DateRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DateRange): DateRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp start */ 1:
                    message.start = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* resources.timestamp.Timestamp end */ 2:
                    message.end = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DateRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp start = 1; */
        if (message.start)
            Timestamp.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.timestamp.Timestamp end = 2; */
        if (message.end)
            Timestamp.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.database.DateRange
 */
export const DateRange = new DateRange$Type();
