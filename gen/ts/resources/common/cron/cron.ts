// @generated by protobuf-ts 2.9.6 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/common/cron/cron.proto" (package "resources.common.cron", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Any } from "../../../google/protobuf/any";
import { Duration } from "../../../google/protobuf/duration";
import { Timestamp } from "../../timestamp/timestamp";
/**
 * @generated from protobuf message resources.common.cron.Cronjob
 */
export interface Cronjob {
    /**
     * Cronjob name
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     *
     * Cron schedule expression
     * For available valid expressions, see [adhocore/gronx - Cron Expressions Documentation](https://github.com/adhocore/gronx/blob/fea40e3e90e70476877cfb9b50fac10c7de41c5c/README.md#cron-expression).
     *
     * To generate Cronjob schedule expressions, you can also use web tools like https://crontab.guru/.
     *
     * @generated from protobuf field: string schedule = 2;
     */
    schedule: string;
    /**
     * Cronjob state
     *
     * @generated from protobuf field: resources.common.cron.CronjobState state = 3;
     */
    state: CronjobState;
    /**
     * Next time the cronjob should be run
     *
     * @generated from protobuf field: resources.timestamp.Timestamp next_schedule_time = 4;
     */
    nextScheduleTime?: Timestamp;
    /**
     * Last attempted start time of Cronjob
     *
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_attempt_time = 5;
     */
    lastAttemptTime?: Timestamp;
    /**
     * Time current cronjob was started
     *
     * @generated from protobuf field: optional resources.timestamp.Timestamp started_time = 6;
     */
    startedTime?: Timestamp;
    /**
     * Optional timeout for cronjob execution
     *
     * @generated from protobuf field: optional google.protobuf.Duration timeout = 7;
     */
    timeout?: Duration;
    /**
     * Cronjob data
     *
     * @generated from protobuf field: resources.common.cron.CronjobData data = 8;
     */
    data?: CronjobData;
    /**
     * Last event info to ease debugging and tracking
     *
     * @generated from protobuf field: optional resources.common.cron.CronjobCompletedEvent last_completed_event = 9;
     */
    lastCompletedEvent?: CronjobCompletedEvent;
}
/**
 * @generated from protobuf message resources.common.cron.CronjobData
 */
export interface CronjobData {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp updated_at = 1;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional google.protobuf.Any data = 2;
     */
    data?: Any;
}
/**
 * @generated from protobuf message resources.common.cron.CronjobLockOwnerState
 */
export interface CronjobLockOwnerState {
    /**
     * Hostname of the agent the cronjob is running on
     *
     * @generated from protobuf field: string hostname = 1;
     */
    hostname: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp updated_at = 2;
     */
    updatedAt?: Timestamp;
}
/**
 * @generated from protobuf message resources.common.cron.CronjobSchedulerEvent
 */
export interface CronjobSchedulerEvent {
    /**
     * Full Cronjob spec
     *
     * @generated from protobuf field: resources.common.cron.Cronjob cronjob = 1;
     */
    cronjob?: Cronjob;
}
/**
 * @generated from protobuf message resources.common.cron.CronjobCompletedEvent
 */
export interface CronjobCompletedEvent {
    /**
     * Cronjob name
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Cronjob execution success status
     *
     * @generated from protobuf field: bool sucess = 2;
     */
    sucess: boolean;
    /**
     * Cronjob end time
     *
     * @generated from protobuf field: resources.timestamp.Timestamp endDate = 3;
     */
    endDate?: Timestamp;
    /**
     * Cronjob execution time/elapsed time
     *
     * @generated from protobuf field: google.protobuf.Duration elapsed = 4;
     */
    elapsed?: Duration;
    /**
     * Cronjob data (can be empty if not touched by the Cronjob handler)
     *
     * @generated from protobuf field: optional resources.common.cron.CronjobData data = 5;
     */
    data?: CronjobData;
}
/**
 * @generated from protobuf message resources.common.cron.GenericCronData
 */
export interface GenericCronData {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: map<string, string> attributes = 1;
     */
    attributes: {
        [key: string]: string;
    };
}
/**
 * States of Cronjbo
 *
 * @generated from protobuf enum resources.common.cron.CronjobState
 */
export enum CronjobState {
    /**
     * @generated from protobuf enum value: CRONJOB_STATE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CRONJOB_STATE_WAITING = 1;
     */
    WAITING = 1,
    /**
     * @generated from protobuf enum value: CRONJOB_STATE_PENDING = 2;
     */
    PENDING = 2,
    /**
     * @generated from protobuf enum value: CRONJOB_STATE_RUNNING = 3;
     */
    RUNNING = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Cronjob$Type extends MessageType<Cronjob> {
    constructor() {
        super("resources.common.cron.Cronjob", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "schedule", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state", kind: "enum", T: () => ["resources.common.cron.CronjobState", CronjobState, "CRONJOB_STATE_"] },
            { no: 4, name: "next_schedule_time", kind: "message", T: () => Timestamp },
            { no: 5, name: "last_attempt_time", kind: "message", T: () => Timestamp },
            { no: 6, name: "started_time", kind: "message", T: () => Timestamp },
            { no: 7, name: "timeout", kind: "message", T: () => Duration },
            { no: 8, name: "data", kind: "message", T: () => CronjobData },
            { no: 9, name: "last_completed_event", kind: "message", T: () => CronjobCompletedEvent }
        ]);
    }
    create(value?: PartialMessage<Cronjob>): Cronjob {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.schedule = "";
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<Cronjob>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cronjob): Cronjob {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string schedule */ 2:
                    message.schedule = reader.string();
                    break;
                case /* resources.common.cron.CronjobState state */ 3:
                    message.state = reader.int32();
                    break;
                case /* resources.timestamp.Timestamp next_schedule_time */ 4:
                    message.nextScheduleTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.nextScheduleTime);
                    break;
                case /* optional resources.timestamp.Timestamp last_attempt_time */ 5:
                    message.lastAttemptTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastAttemptTime);
                    break;
                case /* optional resources.timestamp.Timestamp started_time */ 6:
                    message.startedTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedTime);
                    break;
                case /* optional google.protobuf.Duration timeout */ 7:
                    message.timeout = Duration.internalBinaryRead(reader, reader.uint32(), options, message.timeout);
                    break;
                case /* resources.common.cron.CronjobData data */ 8:
                    message.data = CronjobData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* optional resources.common.cron.CronjobCompletedEvent last_completed_event */ 9:
                    message.lastCompletedEvent = CronjobCompletedEvent.internalBinaryRead(reader, reader.uint32(), options, message.lastCompletedEvent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Cronjob, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string schedule = 2; */
        if (message.schedule !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.schedule);
        /* resources.common.cron.CronjobState state = 3; */
        if (message.state !== 0)
            writer.tag(3, WireType.Varint).int32(message.state);
        /* resources.timestamp.Timestamp next_schedule_time = 4; */
        if (message.nextScheduleTime)
            Timestamp.internalBinaryWrite(message.nextScheduleTime, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp last_attempt_time = 5; */
        if (message.lastAttemptTime)
            Timestamp.internalBinaryWrite(message.lastAttemptTime, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp started_time = 6; */
        if (message.startedTime)
            Timestamp.internalBinaryWrite(message.startedTime, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Duration timeout = 7; */
        if (message.timeout)
            Duration.internalBinaryWrite(message.timeout, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* resources.common.cron.CronjobData data = 8; */
        if (message.data)
            CronjobData.internalBinaryWrite(message.data, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.cron.CronjobCompletedEvent last_completed_event = 9; */
        if (message.lastCompletedEvent)
            CronjobCompletedEvent.internalBinaryWrite(message.lastCompletedEvent, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.cron.Cronjob
 */
export const Cronjob = new Cronjob$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CronjobData$Type extends MessageType<CronjobData> {
    constructor() {
        super("resources.common.cron.CronjobData", [
            { no: 1, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "data", kind: "message", T: () => Any }
        ]);
    }
    create(value?: PartialMessage<CronjobData>): CronjobData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CronjobData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CronjobData): CronjobData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp updated_at */ 1:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional google.protobuf.Any data */ 2:
                    message.data = Any.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CronjobData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp updated_at = 1; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional google.protobuf.Any data = 2; */
        if (message.data)
            Any.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.cron.CronjobData
 */
export const CronjobData = new CronjobData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CronjobLockOwnerState$Type extends MessageType<CronjobLockOwnerState> {
    constructor() {
        super("resources.common.cron.CronjobLockOwnerState", [
            { no: 1, name: "hostname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<CronjobLockOwnerState>): CronjobLockOwnerState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hostname = "";
        if (value !== undefined)
            reflectionMergePartial<CronjobLockOwnerState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CronjobLockOwnerState): CronjobLockOwnerState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hostname */ 1:
                    message.hostname = reader.string();
                    break;
                case /* resources.timestamp.Timestamp updated_at */ 2:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CronjobLockOwnerState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hostname = 1; */
        if (message.hostname !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hostname);
        /* resources.timestamp.Timestamp updated_at = 2; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.cron.CronjobLockOwnerState
 */
export const CronjobLockOwnerState = new CronjobLockOwnerState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CronjobSchedulerEvent$Type extends MessageType<CronjobSchedulerEvent> {
    constructor() {
        super("resources.common.cron.CronjobSchedulerEvent", [
            { no: 1, name: "cronjob", kind: "message", T: () => Cronjob }
        ]);
    }
    create(value?: PartialMessage<CronjobSchedulerEvent>): CronjobSchedulerEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CronjobSchedulerEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CronjobSchedulerEvent): CronjobSchedulerEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.cron.Cronjob cronjob */ 1:
                    message.cronjob = Cronjob.internalBinaryRead(reader, reader.uint32(), options, message.cronjob);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CronjobSchedulerEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.cron.Cronjob cronjob = 1; */
        if (message.cronjob)
            Cronjob.internalBinaryWrite(message.cronjob, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.cron.CronjobSchedulerEvent
 */
export const CronjobSchedulerEvent = new CronjobSchedulerEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CronjobCompletedEvent$Type extends MessageType<CronjobCompletedEvent> {
    constructor() {
        super("resources.common.cron.CronjobCompletedEvent", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sucess", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "endDate", kind: "message", T: () => Timestamp },
            { no: 4, name: "elapsed", kind: "message", T: () => Duration },
            { no: 5, name: "data", kind: "message", T: () => CronjobData }
        ]);
    }
    create(value?: PartialMessage<CronjobCompletedEvent>): CronjobCompletedEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sucess = false;
        if (value !== undefined)
            reflectionMergePartial<CronjobCompletedEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CronjobCompletedEvent): CronjobCompletedEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* bool sucess */ 2:
                    message.sucess = reader.bool();
                    break;
                case /* resources.timestamp.Timestamp endDate */ 3:
                    message.endDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endDate);
                    break;
                case /* google.protobuf.Duration elapsed */ 4:
                    message.elapsed = Duration.internalBinaryRead(reader, reader.uint32(), options, message.elapsed);
                    break;
                case /* optional resources.common.cron.CronjobData data */ 5:
                    message.data = CronjobData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CronjobCompletedEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* bool sucess = 2; */
        if (message.sucess !== false)
            writer.tag(2, WireType.Varint).bool(message.sucess);
        /* resources.timestamp.Timestamp endDate = 3; */
        if (message.endDate)
            Timestamp.internalBinaryWrite(message.endDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Duration elapsed = 4; */
        if (message.elapsed)
            Duration.internalBinaryWrite(message.elapsed, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.cron.CronjobData data = 5; */
        if (message.data)
            CronjobData.internalBinaryWrite(message.data, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.cron.CronjobCompletedEvent
 */
export const CronjobCompletedEvent = new CronjobCompletedEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenericCronData$Type extends MessageType<GenericCronData> {
    constructor() {
        super("resources.common.cron.GenericCronData", [
            { no: 1, name: "attributes", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ]);
    }
    create(value?: PartialMessage<GenericCronData>): GenericCronData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.attributes = {};
        if (value !== undefined)
            reflectionMergePartial<GenericCronData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenericCronData): GenericCronData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> attributes */ 1:
                    this.binaryReadMap1(message.attributes, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GenericCronData["attributes"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GenericCronData["attributes"] | undefined, val: GenericCronData["attributes"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field resources.common.cron.GenericCronData.attributes");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: GenericCronData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> attributes = 1; */
        for (let k of globalThis.Object.keys(message.attributes))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.attributes[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.common.cron.GenericCronData
 */
export const GenericCronData = new GenericCronData$Type();
