// @generated by protobuf-ts 2.11.1 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/livemap/user_marker.proto" (package "resources.livemap", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Unit } from "../centrum/units";
import { Colleague } from "../jobs/colleagues";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.livemap.UserMarker
 */
export interface UserMarker {
    /**
     * @generated from protobuf field: int32 user_id = 1
     */
    userId: number;
    /**
     * @generated from protobuf field: double x = 2
     */
    x: number;
    /**
     * @generated from protobuf field: double y = 3
     */
    y: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 4
     */
    updatedAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string postal = 5
     */
    postal?: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string color = 6
     */
    color?: string;
    /**
     * @generated from protobuf field: string job = 7
     */
    job: string;
    /**
     * @generated from protobuf field: string job_label = 8
     */
    jobLabel: string;
    /**
     * @generated from protobuf field: optional int32 job_grade = 13
     */
    jobGrade?: number;
    /**
     * @generated from protobuf field: resources.jobs.Colleague user = 9
     */
    user?: Colleague; // @gotags: alias:"user"
    /**
     * @generated from protobuf field: optional uint64 unit_id = 10
     */
    unitId?: number;
    /**
     * @generated from protobuf field: optional resources.centrum.Unit unit = 11
     */
    unit?: Unit;
    /**
     * @generated from protobuf field: bool hidden = 12
     */
    hidden: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class UserMarker$Type extends MessageType<UserMarker> {
    constructor() {
        super("resources.livemap.UserMarker", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 2, name: "x", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 3, name: "y", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "postal", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "48" } } } },
            { no: 6, name: "color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { len: "7", pattern: "^#[A-Fa-f0-9]{6}$" } } } },
            { no: 7, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 8, name: "job_label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "job_grade", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "user", kind: "message", T: () => Colleague },
            { no: 10, name: "unit_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 11, name: "unit", kind: "message", T: () => Unit },
            { no: 12, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UserMarker>): UserMarker {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.x = 0;
        message.y = 0;
        message.job = "";
        message.jobLabel = "";
        message.hidden = false;
        if (value !== undefined)
            reflectionMergePartial<UserMarker>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserMarker): UserMarker {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* double x */ 2:
                    message.x = reader.double();
                    break;
                case /* double y */ 3:
                    message.y = reader.double();
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional string postal */ 5:
                    message.postal = reader.string();
                    break;
                case /* optional string color */ 6:
                    message.color = reader.string();
                    break;
                case /* string job */ 7:
                    message.job = reader.string();
                    break;
                case /* string job_label */ 8:
                    message.jobLabel = reader.string();
                    break;
                case /* optional int32 job_grade */ 13:
                    message.jobGrade = reader.int32();
                    break;
                case /* resources.jobs.Colleague user */ 9:
                    message.user = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional uint64 unit_id */ 10:
                    message.unitId = reader.uint64().toNumber();
                    break;
                case /* optional resources.centrum.Unit unit */ 11:
                    message.unit = Unit.internalBinaryRead(reader, reader.uint32(), options, message.unit);
                    break;
                case /* bool hidden */ 12:
                    message.hidden = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserMarker, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* double x = 2; */
        if (message.x !== 0)
            writer.tag(2, WireType.Bit64).double(message.x);
        /* double y = 3; */
        if (message.y !== 0)
            writer.tag(3, WireType.Bit64).double(message.y);
        /* optional resources.timestamp.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string postal = 5; */
        if (message.postal !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.postal);
        /* optional string color = 6; */
        if (message.color !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.color);
        /* string job = 7; */
        if (message.job !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.job);
        /* string job_label = 8; */
        if (message.jobLabel !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.jobLabel);
        /* resources.jobs.Colleague user = 9; */
        if (message.user)
            Colleague.internalBinaryWrite(message.user, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 unit_id = 10; */
        if (message.unitId !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.unitId);
        /* optional resources.centrum.Unit unit = 11; */
        if (message.unit)
            Unit.internalBinaryWrite(message.unit, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* bool hidden = 12; */
        if (message.hidden !== false)
            writer.tag(12, WireType.Varint).bool(message.hidden);
        /* optional int32 job_grade = 13; */
        if (message.jobGrade !== undefined)
            writer.tag(13, WireType.Varint).int32(message.jobGrade);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.livemap.UserMarker
 */
export const UserMarker = new UserMarker$Type();
