// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/mailer/settings.proto" (package "resources.mailer", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message resources.mailer.EmailSettings
 */
export interface EmailSettings {
    /**
     * @generated from protobuf field: uint64 email_id = 1
     */
    emailId: number;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string signature = 2
     */
    signature?: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: repeated string blocked_emails = 3
     */
    blockedEmails: string[];
}
// @generated message type with reflection information, may provide speed optimized methods
class EmailSettings$Type extends MessageType<EmailSettings> {
    constructor() {
        super("resources.mailer.EmailSettings", [
            { no: 1, name: "email_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "1024" } } } },
            { no: 3, name: "blocked_emails", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { repeated: { maxItems: "25" } } } }
        ]);
    }
    create(value?: PartialMessage<EmailSettings>): EmailSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.emailId = 0;
        message.blockedEmails = [];
        if (value !== undefined)
            reflectionMergePartial<EmailSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EmailSettings): EmailSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 email_id */ 1:
                    message.emailId = reader.uint64().toNumber();
                    break;
                case /* optional string signature */ 2:
                    message.signature = reader.string();
                    break;
                case /* repeated string blocked_emails */ 3:
                    message.blockedEmails.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EmailSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 email_id = 1; */
        if (message.emailId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.emailId);
        /* optional string signature = 2; */
        if (message.signature !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.signature);
        /* repeated string blocked_emails = 3; */
        for (let i = 0; i < message.blockedEmails.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.blockedEmails[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.mailer.EmailSettings
 */
export const EmailSettings = new EmailSettings$Type();
