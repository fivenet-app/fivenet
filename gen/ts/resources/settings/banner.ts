// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/settings/banner.proto" (package "resources.settings", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.settings.BannerMessage
 */
export interface BannerMessage {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @sanitize: method
     *
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string icon = 3
     */
    icon?: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string color = 4
     */
    color?: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 5
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp expires_at = 6
     */
    expiresAt?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class BannerMessage$Type extends MessageType<BannerMessage> {
    constructor() {
        super("resources.settings.BannerMessage", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "64" } } } },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3", maxLen: "512" } } } },
            { no: 3, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "128", suffix: "Icon" } } } },
            { no: 4, name: "color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "12" } } } },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "expires_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<BannerMessage>): BannerMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<BannerMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BannerMessage): BannerMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* optional string icon */ 3:
                    message.icon = reader.string();
                    break;
                case /* optional string color */ 4:
                    message.color = reader.string();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp expires_at */ 6:
                    message.expiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiresAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BannerMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* optional string icon = 3; */
        if (message.icon !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.icon);
        /* optional string color = 4; */
        if (message.color !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.color);
        /* resources.timestamp.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp expires_at = 6; */
        if (message.expiresAt)
            Timestamp.internalBinaryWrite(message.expiresAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.BannerMessage
 */
export const BannerMessage = new BannerMessage$Type();
