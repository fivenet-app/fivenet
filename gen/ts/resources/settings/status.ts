// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/settings/status.proto" (package "resources.settings", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.settings.SystemStatus
 */
export interface SystemStatus {
    /**
     * @generated from protobuf field: resources.settings.Database database = 1
     */
    database?: Database;
    /**
     * @generated from protobuf field: resources.settings.Nats nats = 2
     */
    nats?: Nats;
    /**
     * @generated from protobuf field: resources.settings.DBSyncStatus dbsync = 3
     */
    dbsync?: DBSyncStatus;
    /**
     * @generated from protobuf field: resources.settings.VersionStatus version = 4
     */
    version?: VersionStatus;
}
/**
 * @generated from protobuf message resources.settings.Nats
 */
export interface Nats {
    /**
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: bool connected = 2
     */
    connected: boolean;
}
/**
 * @generated from protobuf message resources.settings.Database
 */
export interface Database {
    /**
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: bool connected = 2
     */
    connected: boolean;
    /**
     * @generated from protobuf field: uint64 migration_version = 3
     */
    migrationVersion: number;
    /**
     * @generated from protobuf field: bool migration_dirty = 4
     */
    migrationDirty: boolean;
    /**
     * @generated from protobuf field: string db_charset = 5
     */
    dbCharset: string;
    /**
     * @generated from protobuf field: string db_collation = 6
     */
    dbCollation: string;
    /**
     * @generated from protobuf field: bool tables_ok = 7
     */
    tablesOk: boolean;
}
/**
 * @generated from protobuf message resources.settings.DBSyncStatus
 */
export interface DBSyncStatus {
    /**
     * @generated from protobuf field: bool enabled = 1
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_synced_data = 2
     */
    lastSyncedData?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_synced_activity = 3
     */
    lastSyncedActivity?: Timestamp;
    /**
     * @generated from protobuf field: optional string last_dbsync_version = 4
     */
    lastDbsyncVersion?: string;
}
/**
 * @generated from protobuf message resources.settings.VersionStatus
 */
export interface VersionStatus {
    /**
     * @generated from protobuf field: string current = 1
     */
    current: string;
    /**
     * @generated from protobuf field: optional resources.settings.NewVersionInfo new_version = 2
     */
    newVersion?: NewVersionInfo;
}
/**
 * @generated from protobuf message resources.settings.NewVersionInfo
 */
export interface NewVersionInfo {
    /**
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: string url = 2
     */
    url: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp release_date = 3
     */
    releaseDate?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class SystemStatus$Type extends MessageType<SystemStatus> {
    constructor() {
        super("resources.settings.SystemStatus", [
            { no: 1, name: "database", kind: "message", T: () => Database },
            { no: 2, name: "nats", kind: "message", T: () => Nats },
            { no: 3, name: "dbsync", kind: "message", T: () => DBSyncStatus },
            { no: 4, name: "version", kind: "message", T: () => VersionStatus }
        ]);
    }
    create(value?: PartialMessage<SystemStatus>): SystemStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SystemStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SystemStatus): SystemStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.settings.Database database */ 1:
                    message.database = Database.internalBinaryRead(reader, reader.uint32(), options, message.database);
                    break;
                case /* resources.settings.Nats nats */ 2:
                    message.nats = Nats.internalBinaryRead(reader, reader.uint32(), options, message.nats);
                    break;
                case /* resources.settings.DBSyncStatus dbsync */ 3:
                    message.dbsync = DBSyncStatus.internalBinaryRead(reader, reader.uint32(), options, message.dbsync);
                    break;
                case /* resources.settings.VersionStatus version */ 4:
                    message.version = VersionStatus.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SystemStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.settings.Database database = 1; */
        if (message.database)
            Database.internalBinaryWrite(message.database, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.settings.Nats nats = 2; */
        if (message.nats)
            Nats.internalBinaryWrite(message.nats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.settings.DBSyncStatus dbsync = 3; */
        if (message.dbsync)
            DBSyncStatus.internalBinaryWrite(message.dbsync, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.settings.VersionStatus version = 4; */
        if (message.version)
            VersionStatus.internalBinaryWrite(message.version, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.SystemStatus
 */
export const SystemStatus = new SystemStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Nats$Type extends MessageType<Nats> {
    constructor() {
        super("resources.settings.Nats", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Nats>): Nats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.connected = false;
        if (value !== undefined)
            reflectionMergePartial<Nats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Nats): Nats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* bool connected */ 2:
                    message.connected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Nats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* bool connected = 2; */
        if (message.connected !== false)
            writer.tag(2, WireType.Varint).bool(message.connected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.Nats
 */
export const Nats = new Nats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Database$Type extends MessageType<Database> {
    constructor() {
        super("resources.settings.Database", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "migration_version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "migration_dirty", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "db_charset", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 6, name: "db_collation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 7, name: "tables_ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Database>): Database {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.connected = false;
        message.migrationVersion = 0;
        message.migrationDirty = false;
        message.dbCharset = "";
        message.dbCollation = "";
        message.tablesOk = false;
        if (value !== undefined)
            reflectionMergePartial<Database>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Database): Database {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* bool connected */ 2:
                    message.connected = reader.bool();
                    break;
                case /* uint64 migration_version */ 3:
                    message.migrationVersion = reader.uint64().toNumber();
                    break;
                case /* bool migration_dirty */ 4:
                    message.migrationDirty = reader.bool();
                    break;
                case /* string db_charset */ 5:
                    message.dbCharset = reader.string();
                    break;
                case /* string db_collation */ 6:
                    message.dbCollation = reader.string();
                    break;
                case /* bool tables_ok */ 7:
                    message.tablesOk = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Database, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* bool connected = 2; */
        if (message.connected !== false)
            writer.tag(2, WireType.Varint).bool(message.connected);
        /* uint64 migration_version = 3; */
        if (message.migrationVersion !== 0)
            writer.tag(3, WireType.Varint).uint64(message.migrationVersion);
        /* bool migration_dirty = 4; */
        if (message.migrationDirty !== false)
            writer.tag(4, WireType.Varint).bool(message.migrationDirty);
        /* string db_charset = 5; */
        if (message.dbCharset !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.dbCharset);
        /* string db_collation = 6; */
        if (message.dbCollation !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.dbCollation);
        /* bool tables_ok = 7; */
        if (message.tablesOk !== false)
            writer.tag(7, WireType.Varint).bool(message.tablesOk);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.Database
 */
export const Database = new Database$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DBSyncStatus$Type extends MessageType<DBSyncStatus> {
    constructor() {
        super("resources.settings.DBSyncStatus", [
            { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "last_synced_data", kind: "message", T: () => Timestamp },
            { no: 3, name: "last_synced_activity", kind: "message", T: () => Timestamp },
            { no: 4, name: "last_dbsync_version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } }
        ]);
    }
    create(value?: PartialMessage<DBSyncStatus>): DBSyncStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        if (value !== undefined)
            reflectionMergePartial<DBSyncStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DBSyncStatus): DBSyncStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enabled */ 1:
                    message.enabled = reader.bool();
                    break;
                case /* optional resources.timestamp.Timestamp last_synced_data */ 2:
                    message.lastSyncedData = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastSyncedData);
                    break;
                case /* optional resources.timestamp.Timestamp last_synced_activity */ 3:
                    message.lastSyncedActivity = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastSyncedActivity);
                    break;
                case /* optional string last_dbsync_version */ 4:
                    message.lastDbsyncVersion = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DBSyncStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enabled = 1; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* optional resources.timestamp.Timestamp last_synced_data = 2; */
        if (message.lastSyncedData)
            Timestamp.internalBinaryWrite(message.lastSyncedData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp last_synced_activity = 3; */
        if (message.lastSyncedActivity)
            Timestamp.internalBinaryWrite(message.lastSyncedActivity, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional string last_dbsync_version = 4; */
        if (message.lastDbsyncVersion !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.lastDbsyncVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.DBSyncStatus
 */
export const DBSyncStatus = new DBSyncStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VersionStatus$Type extends MessageType<VersionStatus> {
    constructor() {
        super("resources.settings.VersionStatus", [
            { no: 1, name: "current", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "new_version", kind: "message", T: () => NewVersionInfo }
        ]);
    }
    create(value?: PartialMessage<VersionStatus>): VersionStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.current = "";
        if (value !== undefined)
            reflectionMergePartial<VersionStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VersionStatus): VersionStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string current */ 1:
                    message.current = reader.string();
                    break;
                case /* optional resources.settings.NewVersionInfo new_version */ 2:
                    message.newVersion = NewVersionInfo.internalBinaryRead(reader, reader.uint32(), options, message.newVersion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VersionStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string current = 1; */
        if (message.current !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.current);
        /* optional resources.settings.NewVersionInfo new_version = 2; */
        if (message.newVersion)
            NewVersionInfo.internalBinaryWrite(message.newVersion, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.VersionStatus
 */
export const VersionStatus = new VersionStatus$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewVersionInfo$Type extends MessageType<NewVersionInfo> {
    constructor() {
        super("resources.settings.NewVersionInfo", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "url", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "256" } } } },
            { no: 3, name: "release_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<NewVersionInfo>): NewVersionInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.url = "";
        if (value !== undefined)
            reflectionMergePartial<NewVersionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewVersionInfo): NewVersionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* string url */ 2:
                    message.url = reader.string();
                    break;
                case /* optional resources.timestamp.Timestamp release_date */ 3:
                    message.releaseDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.releaseDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewVersionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* string url = 2; */
        if (message.url !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.url);
        /* optional resources.timestamp.Timestamp release_date = 3; */
        if (message.releaseDate)
            Timestamp.internalBinaryWrite(message.releaseDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.NewVersionInfo
 */
export const NewVersionInfo = new NewVersionInfo$Type();
