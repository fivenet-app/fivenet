// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/settings/perms.proto" (package "resources.settings", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RoleAttribute } from "../permissions/attributes";
import { PermItem } from "../permissions/permissions";
/**
 * @generated from protobuf message resources.settings.PermsUpdate
 */
export interface PermsUpdate {
    /**
     * @generated from protobuf field: repeated resources.permissions.PermItem to_update = 1
     */
    toUpdate: PermItem[];
    /**
     * @generated from protobuf field: repeated resources.permissions.PermItem to_remove = 2
     */
    toRemove: PermItem[];
}
/**
 * @generated from protobuf message resources.settings.AttrsUpdate
 */
export interface AttrsUpdate {
    /**
     * @generated from protobuf field: repeated resources.permissions.RoleAttribute to_update = 1
     */
    toUpdate: RoleAttribute[];
    /**
     * @generated from protobuf field: repeated resources.permissions.RoleAttribute to_remove = 2
     */
    toRemove: RoleAttribute[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PermsUpdate$Type extends MessageType<PermsUpdate> {
    constructor() {
        super("resources.settings.PermsUpdate", [
            { no: 1, name: "to_update", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PermItem },
            { no: 2, name: "to_remove", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PermItem }
        ]);
    }
    create(value?: PartialMessage<PermsUpdate>): PermsUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toUpdate = [];
        message.toRemove = [];
        if (value !== undefined)
            reflectionMergePartial<PermsUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PermsUpdate): PermsUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.permissions.PermItem to_update */ 1:
                    message.toUpdate.push(PermItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.permissions.PermItem to_remove */ 2:
                    message.toRemove.push(PermItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PermsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.permissions.PermItem to_update = 1; */
        for (let i = 0; i < message.toUpdate.length; i++)
            PermItem.internalBinaryWrite(message.toUpdate[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.permissions.PermItem to_remove = 2; */
        for (let i = 0; i < message.toRemove.length; i++)
            PermItem.internalBinaryWrite(message.toRemove[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.PermsUpdate
 */
export const PermsUpdate = new PermsUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttrsUpdate$Type extends MessageType<AttrsUpdate> {
    constructor() {
        super("resources.settings.AttrsUpdate", [
            { no: 1, name: "to_update", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoleAttribute },
            { no: 2, name: "to_remove", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoleAttribute }
        ]);
    }
    create(value?: PartialMessage<AttrsUpdate>): AttrsUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toUpdate = [];
        message.toRemove = [];
        if (value !== undefined)
            reflectionMergePartial<AttrsUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttrsUpdate): AttrsUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.permissions.RoleAttribute to_update */ 1:
                    message.toUpdate.push(RoleAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.permissions.RoleAttribute to_remove */ 2:
                    message.toRemove.push(RoleAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttrsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.permissions.RoleAttribute to_update = 1; */
        for (let i = 0; i < message.toUpdate.length; i++)
            RoleAttribute.internalBinaryWrite(message.toUpdate[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.permissions.RoleAttribute to_remove = 2; */
        for (let i = 0; i < message.toRemove.length; i++)
            RoleAttribute.internalBinaryWrite(message.toRemove[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.settings.AttrsUpdate
 */
export const AttrsUpdate = new AttrsUpdate$Type();
