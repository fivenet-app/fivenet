// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/qualifications/qualifications.proto" (package "resources.qualifications", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../google/protobuf/duration";
import { File } from "../file/file";
import { ExamQuestions } from "./exam";
import { QualificationAccess } from "./access";
import { UserShort } from "../users/users";
import { Content } from "../common/content/content";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.qualifications.Qualification
 */
export interface Qualification {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 5
     */
    job: string;
    /**
     * @generated from protobuf field: uint32 weight = 6
     */
    weight: number;
    /**
     * @generated from protobuf field: bool closed = 7
     */
    closed: boolean;
    /**
     * @generated from protobuf field: bool draft = 8
     */
    draft: boolean;
    /**
     * @generated from protobuf field: bool public = 9
     */
    public: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string abbreviation = 10
     */
    abbreviation: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 11
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 12
     */
    description?: string;
    /**
     * @generated from protobuf field: resources.common.content.Content content = 13
     */
    content?: Content;
    /**
     * @generated from protobuf field: optional int32 creator_id = 14
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 15
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 16
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: resources.qualifications.QualificationAccess access = 17
     */
    access?: QualificationAccess;
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationRequirement requirements = 18
     */
    requirements: QualificationRequirement[];
    /**
     * @generated from protobuf field: bool discord_sync_enabled = 19
     */
    discordSyncEnabled: boolean;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationDiscordSettings discord_settings = 20
     */
    discordSettings?: QualificationDiscordSettings;
    /**
     * @generated from protobuf field: resources.qualifications.QualificationExamMode exam_mode = 21
     */
    examMode: QualificationExamMode;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationExamSettings exam_settings = 22
     */
    examSettings?: QualificationExamSettings;
    /**
     * @generated from protobuf field: optional resources.qualifications.ExamQuestions exam = 23
     */
    exam?: ExamQuestions;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationResult result = 24
     */
    result?: QualificationResult;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationRequest request = 25
     */
    request?: QualificationRequest;
    /**
     * @generated from protobuf field: bool label_sync_enabled = 26
     */
    labelSyncEnabled: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string label_sync_format = 27
     */
    labelSyncFormat?: string;
    /**
     * @generated from protobuf field: repeated resources.file.File files = 28
     */
    files: File[]; // @gotags: alias:"files"
}
/**
 * @generated from protobuf message resources.qualifications.QualificationShort
 */
export interface QualificationShort {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 4
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 5
     */
    job: string;
    /**
     * @generated from protobuf field: uint32 weight = 6
     */
    weight: number;
    /**
     * @generated from protobuf field: bool closed = 7
     */
    closed: boolean;
    /**
     * @generated from protobuf field: bool draft = 8
     */
    draft: boolean;
    /**
     * @generated from protobuf field: bool public = 9
     */
    public: boolean;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string abbreviation = 10
     */
    abbreviation: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 11
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 12
     */
    description?: string;
    /**
     * @generated from protobuf field: optional int32 creator_id = 14
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 15
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 16
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationRequirement requirements = 18
     */
    requirements: QualificationRequirement[];
    /**
     * @generated from protobuf field: resources.qualifications.QualificationExamMode exam_mode = 21
     */
    examMode: QualificationExamMode;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationExamSettings exam_settings = 22
     */
    examSettings?: QualificationExamSettings;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationResult result = 24
     */
    result?: QualificationResult;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationRequirement
 */
export interface QualificationRequirement {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 3
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: uint64 target_qualification_id = 4
     */
    targetQualificationId: number;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationShort target_qualification = 5
     */
    targetQualification?: QualificationShort; // @gotags: alias:"targetqualification.*"
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.qualifications.QualificationDiscordSettings
 */
export interface QualificationDiscordSettings {
    /**
     * @generated from protobuf field: optional string role_name = 1
     */
    roleName?: string;
    /**
     * @generated from protobuf field: optional string role_format = 2
     */
    roleFormat?: string;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.qualifications.QualificationExamSettings
 */
export interface QualificationExamSettings {
    /**
     * @generated from protobuf field: google.protobuf.Duration time = 1
     */
    time?: Duration;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationRequest
 */
export interface QualificationRequest {
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 1
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 2
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 3
     */
    qualificationId: number; // @gotags: sql:"primary_key" alias:"qualification_id"
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationShort qualification = 4
     */
    qualification?: QualificationShort;
    /**
     * @generated from protobuf field: int32 user_id = 5
     */
    userId: number; // @gotags: sql:"primary_key"
    /**
     * @generated from protobuf field: resources.users.UserShort user = 6
     */
    user?: UserShort; // @gotags: alias:"user"
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string user_comment = 7
     */
    userComment?: string;
    /**
     * @generated from protobuf field: optional resources.qualifications.RequestStatus status = 8
     */
    status?: RequestStatus;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp approved_at = 9
     */
    approvedAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string approver_comment = 10
     */
    approverComment?: string;
    /**
     * @generated from protobuf field: optional int32 approver_id = 11
     */
    approverId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort approver = 12
     */
    approver?: UserShort; // @gotags: alias:"approver"
    /**
     * @generated from protobuf field: optional string approver_job = 13
     */
    approverJob?: string;
}
/**
 * @generated from protobuf message resources.qualifications.QualificationResult
 */
export interface QualificationResult {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 3
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 qualification_id = 4
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: optional resources.qualifications.QualificationShort qualification = 5
     */
    qualification?: QualificationShort;
    /**
     * @generated from protobuf field: int32 user_id = 6
     */
    userId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort user = 7
     */
    user?: UserShort; // @gotags: alias:"user"
    /**
     * @generated from protobuf field: resources.qualifications.ResultStatus status = 8
     */
    status: ResultStatus;
    /**
     * @generated from protobuf field: optional float score = 9
     */
    score?: number;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string summary = 10
     */
    summary: string;
    /**
     * @generated from protobuf field: int32 creator_id = 11
     */
    creatorId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort creator = 12
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 13
     */
    creatorJob: string;
}
/**
 * @generated from protobuf enum resources.qualifications.QualificationExamMode
 */
export enum QualificationExamMode {
    /**
     * @generated from protobuf enum value: QUALIFICATION_EXAM_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: QUALIFICATION_EXAM_MODE_DISABLED = 1;
     */
    DISABLED = 1,
    /**
     * @generated from protobuf enum value: QUALIFICATION_EXAM_MODE_REQUEST_NEEDED = 2;
     */
    REQUEST_NEEDED = 2,
    /**
     * @generated from protobuf enum value: QUALIFICATION_EXAM_MODE_ENABLED = 3;
     */
    ENABLED = 3
}
/**
 * @generated from protobuf enum resources.qualifications.RequestStatus
 */
export enum RequestStatus {
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_DENIED = 2;
     */
    DENIED = 2,
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_ACCEPTED = 3;
     */
    ACCEPTED = 3,
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_EXAM_STARTED = 4;
     */
    EXAM_STARTED = 4,
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_EXAM_GRADING = 5;
     */
    EXAM_GRADING = 5,
    /**
     * @generated from protobuf enum value: REQUEST_STATUS_COMPLETED = 6;
     */
    COMPLETED = 6
}
/**
 * @generated from protobuf enum resources.qualifications.ResultStatus
 */
export enum ResultStatus {
    /**
     * @generated from protobuf enum value: RESULT_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: RESULT_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: RESULT_STATUS_FAILED = 2;
     */
    FAILED = 2,
    /**
     * @generated from protobuf enum value: RESULT_STATUS_SUCCESSFUL = 3;
     */
    SUCCESSFUL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Qualification$Type extends MessageType<Qualification> {
    constructor() {
        super("resources.qualifications.Qualification", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 4294967295 } } } },
            { no: 7, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "draft", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "abbreviation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 11, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "1024" } } } },
            { no: 12, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 13, name: "content", kind: "message", T: () => Content },
            { no: 14, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 15, name: "creator", kind: "message", T: () => UserShort },
            { no: 16, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 17, name: "access", kind: "message", T: () => QualificationAccess },
            { no: 18, name: "requirements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QualificationRequirement },
            { no: 19, name: "discord_sync_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 20, name: "discord_settings", kind: "message", T: () => QualificationDiscordSettings },
            { no: 21, name: "exam_mode", kind: "enum", T: () => ["resources.qualifications.QualificationExamMode", QualificationExamMode, "QUALIFICATION_EXAM_MODE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 22, name: "exam_settings", kind: "message", T: () => QualificationExamSettings },
            { no: 23, name: "exam", kind: "message", T: () => ExamQuestions },
            { no: 24, name: "result", kind: "message", T: () => QualificationResult },
            { no: 25, name: "request", kind: "message", T: () => QualificationRequest },
            { no: 26, name: "label_sync_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "label_sync_format", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "128" } } } },
            { no: 28, name: "files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => File }
        ]);
    }
    create(value?: PartialMessage<Qualification>): Qualification {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.weight = 0;
        message.closed = false;
        message.draft = false;
        message.public = false;
        message.abbreviation = "";
        message.title = "";
        message.creatorJob = "";
        message.requirements = [];
        message.discordSyncEnabled = false;
        message.examMode = 0;
        message.labelSyncEnabled = false;
        message.files = [];
        if (value !== undefined)
            reflectionMergePartial<Qualification>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Qualification): Qualification {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* uint32 weight */ 6:
                    message.weight = reader.uint32();
                    break;
                case /* bool closed */ 7:
                    message.closed = reader.bool();
                    break;
                case /* bool draft */ 8:
                    message.draft = reader.bool();
                    break;
                case /* bool public */ 9:
                    message.public = reader.bool();
                    break;
                case /* string abbreviation */ 10:
                    message.abbreviation = reader.string();
                    break;
                case /* string title */ 11:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 12:
                    message.description = reader.string();
                    break;
                case /* resources.common.content.Content content */ 13:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* optional int32 creator_id */ 14:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 15:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 16:
                    message.creatorJob = reader.string();
                    break;
                case /* resources.qualifications.QualificationAccess access */ 17:
                    message.access = QualificationAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                case /* repeated resources.qualifications.QualificationRequirement requirements */ 18:
                    message.requirements.push(QualificationRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool discord_sync_enabled */ 19:
                    message.discordSyncEnabled = reader.bool();
                    break;
                case /* optional resources.qualifications.QualificationDiscordSettings discord_settings */ 20:
                    message.discordSettings = QualificationDiscordSettings.internalBinaryRead(reader, reader.uint32(), options, message.discordSettings);
                    break;
                case /* resources.qualifications.QualificationExamMode exam_mode */ 21:
                    message.examMode = reader.int32();
                    break;
                case /* optional resources.qualifications.QualificationExamSettings exam_settings */ 22:
                    message.examSettings = QualificationExamSettings.internalBinaryRead(reader, reader.uint32(), options, message.examSettings);
                    break;
                case /* optional resources.qualifications.ExamQuestions exam */ 23:
                    message.exam = ExamQuestions.internalBinaryRead(reader, reader.uint32(), options, message.exam);
                    break;
                case /* optional resources.qualifications.QualificationResult result */ 24:
                    message.result = QualificationResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* optional resources.qualifications.QualificationRequest request */ 25:
                    message.request = QualificationRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* bool label_sync_enabled */ 26:
                    message.labelSyncEnabled = reader.bool();
                    break;
                case /* optional string label_sync_format */ 27:
                    message.labelSyncFormat = reader.string();
                    break;
                case /* repeated resources.file.File files */ 28:
                    message.files.push(File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Qualification, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* uint32 weight = 6; */
        if (message.weight !== 0)
            writer.tag(6, WireType.Varint).uint32(message.weight);
        /* bool closed = 7; */
        if (message.closed !== false)
            writer.tag(7, WireType.Varint).bool(message.closed);
        /* bool draft = 8; */
        if (message.draft !== false)
            writer.tag(8, WireType.Varint).bool(message.draft);
        /* bool public = 9; */
        if (message.public !== false)
            writer.tag(9, WireType.Varint).bool(message.public);
        /* string abbreviation = 10; */
        if (message.abbreviation !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.abbreviation);
        /* string title = 11; */
        if (message.title !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.title);
        /* optional string description = 12; */
        if (message.description !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.description);
        /* resources.common.content.Content content = 13; */
        if (message.content)
            Content.internalBinaryWrite(message.content, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 creator_id = 14; */
        if (message.creatorId !== undefined)
            writer.tag(14, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 15; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 16; */
        if (message.creatorJob !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.creatorJob);
        /* resources.qualifications.QualificationAccess access = 17; */
        if (message.access)
            QualificationAccess.internalBinaryWrite(message.access, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.qualifications.QualificationRequirement requirements = 18; */
        for (let i = 0; i < message.requirements.length; i++)
            QualificationRequirement.internalBinaryWrite(message.requirements[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* bool discord_sync_enabled = 19; */
        if (message.discordSyncEnabled !== false)
            writer.tag(19, WireType.Varint).bool(message.discordSyncEnabled);
        /* optional resources.qualifications.QualificationDiscordSettings discord_settings = 20; */
        if (message.discordSettings)
            QualificationDiscordSettings.internalBinaryWrite(message.discordSettings, writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.QualificationExamMode exam_mode = 21; */
        if (message.examMode !== 0)
            writer.tag(21, WireType.Varint).int32(message.examMode);
        /* optional resources.qualifications.QualificationExamSettings exam_settings = 22; */
        if (message.examSettings)
            QualificationExamSettings.internalBinaryWrite(message.examSettings, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.ExamQuestions exam = 23; */
        if (message.exam)
            ExamQuestions.internalBinaryWrite(message.exam, writer.tag(23, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.QualificationResult result = 24; */
        if (message.result)
            QualificationResult.internalBinaryWrite(message.result, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.QualificationRequest request = 25; */
        if (message.request)
            QualificationRequest.internalBinaryWrite(message.request, writer.tag(25, WireType.LengthDelimited).fork(), options).join();
        /* bool label_sync_enabled = 26; */
        if (message.labelSyncEnabled !== false)
            writer.tag(26, WireType.Varint).bool(message.labelSyncEnabled);
        /* optional string label_sync_format = 27; */
        if (message.labelSyncFormat !== undefined)
            writer.tag(27, WireType.LengthDelimited).string(message.labelSyncFormat);
        /* repeated resources.file.File files = 28; */
        for (let i = 0; i < message.files.length; i++)
            File.internalBinaryWrite(message.files[i], writer.tag(28, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.Qualification
 */
export const Qualification = new Qualification$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationShort$Type extends MessageType<QualificationShort> {
    constructor() {
        super("resources.qualifications.QualificationShort", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 6, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "validate.rules": { uint32: { lt: 4294967295 } } } },
            { no: 7, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "draft", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "abbreviation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 11, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "1024" } } } },
            { no: 12, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 14, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 15, name: "creator", kind: "message", T: () => UserShort },
            { no: 16, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 18, name: "requirements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => QualificationRequirement },
            { no: 21, name: "exam_mode", kind: "enum", T: () => ["resources.qualifications.QualificationExamMode", QualificationExamMode, "QUALIFICATION_EXAM_MODE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 22, name: "exam_settings", kind: "message", T: () => QualificationExamSettings },
            { no: 24, name: "result", kind: "message", T: () => QualificationResult }
        ]);
    }
    create(value?: PartialMessage<QualificationShort>): QualificationShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.weight = 0;
        message.closed = false;
        message.draft = false;
        message.public = false;
        message.abbreviation = "";
        message.title = "";
        message.creatorJob = "";
        message.requirements = [];
        message.examMode = 0;
        if (value !== undefined)
            reflectionMergePartial<QualificationShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationShort): QualificationShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 4:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string job */ 5:
                    message.job = reader.string();
                    break;
                case /* uint32 weight */ 6:
                    message.weight = reader.uint32();
                    break;
                case /* bool closed */ 7:
                    message.closed = reader.bool();
                    break;
                case /* bool draft */ 8:
                    message.draft = reader.bool();
                    break;
                case /* bool public */ 9:
                    message.public = reader.bool();
                    break;
                case /* string abbreviation */ 10:
                    message.abbreviation = reader.string();
                    break;
                case /* string title */ 11:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 12:
                    message.description = reader.string();
                    break;
                case /* optional int32 creator_id */ 14:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 15:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 16:
                    message.creatorJob = reader.string();
                    break;
                case /* repeated resources.qualifications.QualificationRequirement requirements */ 18:
                    message.requirements.push(QualificationRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* resources.qualifications.QualificationExamMode exam_mode */ 21:
                    message.examMode = reader.int32();
                    break;
                case /* optional resources.qualifications.QualificationExamSettings exam_settings */ 22:
                    message.examSettings = QualificationExamSettings.internalBinaryRead(reader, reader.uint32(), options, message.examSettings);
                    break;
                case /* optional resources.qualifications.QualificationResult result */ 24:
                    message.result = QualificationResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 4; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string job = 5; */
        if (message.job !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* uint32 weight = 6; */
        if (message.weight !== 0)
            writer.tag(6, WireType.Varint).uint32(message.weight);
        /* bool closed = 7; */
        if (message.closed !== false)
            writer.tag(7, WireType.Varint).bool(message.closed);
        /* bool draft = 8; */
        if (message.draft !== false)
            writer.tag(8, WireType.Varint).bool(message.draft);
        /* bool public = 9; */
        if (message.public !== false)
            writer.tag(9, WireType.Varint).bool(message.public);
        /* string abbreviation = 10; */
        if (message.abbreviation !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.abbreviation);
        /* string title = 11; */
        if (message.title !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.title);
        /* optional string description = 12; */
        if (message.description !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.description);
        /* optional int32 creator_id = 14; */
        if (message.creatorId !== undefined)
            writer.tag(14, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 15; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 16; */
        if (message.creatorJob !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.creatorJob);
        /* repeated resources.qualifications.QualificationRequirement requirements = 18; */
        for (let i = 0; i < message.requirements.length; i++)
            QualificationRequirement.internalBinaryWrite(message.requirements[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.QualificationExamMode exam_mode = 21; */
        if (message.examMode !== 0)
            writer.tag(21, WireType.Varint).int32(message.examMode);
        /* optional resources.qualifications.QualificationExamSettings exam_settings = 22; */
        if (message.examSettings)
            QualificationExamSettings.internalBinaryWrite(message.examSettings, writer.tag(22, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.QualificationResult result = 24; */
        if (message.result)
            QualificationResult.internalBinaryWrite(message.result, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationShort
 */
export const QualificationShort = new QualificationShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationRequirement$Type extends MessageType<QualificationRequirement> {
    constructor() {
        super("resources.qualifications.QualificationRequirement", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "target_qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "target_qualification", kind: "message", T: () => QualificationShort }
        ]);
    }
    create(value?: PartialMessage<QualificationRequirement>): QualificationRequirement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.qualificationId = 0;
        message.targetQualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<QualificationRequirement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationRequirement): QualificationRequirement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 qualification_id */ 3:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* uint64 target_qualification_id */ 4:
                    message.targetQualificationId = reader.uint64().toNumber();
                    break;
                case /* optional resources.qualifications.QualificationShort target_qualification */ 5:
                    message.targetQualification = QualificationShort.internalBinaryRead(reader, reader.uint32(), options, message.targetQualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationRequirement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 3; */
        if (message.qualificationId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* uint64 target_qualification_id = 4; */
        if (message.targetQualificationId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.targetQualificationId);
        /* optional resources.qualifications.QualificationShort target_qualification = 5; */
        if (message.targetQualification)
            QualificationShort.internalBinaryWrite(message.targetQualification, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationRequirement
 */
export const QualificationRequirement = new QualificationRequirement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationDiscordSettings$Type extends MessageType<QualificationDiscordSettings> {
    constructor() {
        super("resources.qualifications.QualificationDiscordSettings", [
            { no: 1, name: "role_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "64" } } } },
            { no: 2, name: "role_format", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "64" } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationDiscordSettings>): QualificationDiscordSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QualificationDiscordSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationDiscordSettings): QualificationDiscordSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string role_name */ 1:
                    message.roleName = reader.string();
                    break;
                case /* optional string role_format */ 2:
                    message.roleFormat = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationDiscordSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string role_name = 1; */
        if (message.roleName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.roleName);
        /* optional string role_format = 2; */
        if (message.roleFormat !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.roleFormat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationDiscordSettings
 */
export const QualificationDiscordSettings = new QualificationDiscordSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationExamSettings$Type extends MessageType<QualificationExamSettings> {
    constructor() {
        super("resources.qualifications.QualificationExamSettings", [
            { no: 1, name: "time", kind: "message", T: () => Duration, options: { "validate.rules": { duration: { required: true, lt: { seconds: "1036800" }, gte: { seconds: "300" } } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationExamSettings>): QualificationExamSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<QualificationExamSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationExamSettings): QualificationExamSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration time */ 1:
                    message.time = Duration.internalBinaryRead(reader, reader.uint32(), options, message.time);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationExamSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration time = 1; */
        if (message.time)
            Duration.internalBinaryWrite(message.time, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationExamSettings
 */
export const QualificationExamSettings = new QualificationExamSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationRequest$Type extends MessageType<QualificationRequest> {
    constructor() {
        super("resources.qualifications.QualificationRequest", [
            { no: 1, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 2, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "qualification", kind: "message", T: () => QualificationShort },
            { no: 5, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } },
            { no: 6, name: "user", kind: "message", T: () => UserShort },
            { no: 7, name: "user_comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 8, name: "status", kind: "enum", opt: true, T: () => ["resources.qualifications.RequestStatus", RequestStatus, "REQUEST_STATUS_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 9, name: "approved_at", kind: "message", T: () => Timestamp },
            { no: 10, name: "approver_comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 11, name: "approver_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 12, name: "approver", kind: "message", T: () => UserShort },
            { no: 13, name: "approver_job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<QualificationRequest>): QualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<QualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationRequest): QualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional resources.timestamp.Timestamp created_at */ 1:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 2:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 qualification_id */ 3:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* optional resources.qualifications.QualificationShort qualification */ 4:
                    message.qualification = QualificationShort.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                case /* int32 user_id */ 5:
                    message.userId = reader.int32();
                    break;
                case /* resources.users.UserShort user */ 6:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional string user_comment */ 7:
                    message.userComment = reader.string();
                    break;
                case /* optional resources.qualifications.RequestStatus status */ 8:
                    message.status = reader.int32();
                    break;
                case /* optional resources.timestamp.Timestamp approved_at */ 9:
                    message.approvedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.approvedAt);
                    break;
                case /* optional string approver_comment */ 10:
                    message.approverComment = reader.string();
                    break;
                case /* optional int32 approver_id */ 11:
                    message.approverId = reader.int32();
                    break;
                case /* optional resources.users.UserShort approver */ 12:
                    message.approver = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.approver);
                    break;
                case /* optional string approver_job */ 13:
                    message.approverJob = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional resources.timestamp.Timestamp created_at = 1; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 2; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 3; */
        if (message.qualificationId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.qualifications.QualificationShort qualification = 4; */
        if (message.qualification)
            QualificationShort.internalBinaryWrite(message.qualification, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 5; */
        if (message.userId !== 0)
            writer.tag(5, WireType.Varint).int32(message.userId);
        /* resources.users.UserShort user = 6; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional string user_comment = 7; */
        if (message.userComment !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.userComment);
        /* optional resources.qualifications.RequestStatus status = 8; */
        if (message.status !== undefined)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* optional resources.timestamp.Timestamp approved_at = 9; */
        if (message.approvedAt)
            Timestamp.internalBinaryWrite(message.approvedAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional string approver_comment = 10; */
        if (message.approverComment !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.approverComment);
        /* optional int32 approver_id = 11; */
        if (message.approverId !== undefined)
            writer.tag(11, WireType.Varint).int32(message.approverId);
        /* optional resources.users.UserShort approver = 12; */
        if (message.approver)
            UserShort.internalBinaryWrite(message.approver, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional string approver_job = 13; */
        if (message.approverJob !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.approverJob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationRequest
 */
export const QualificationRequest = new QualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QualificationResult$Type extends MessageType<QualificationResult> {
    constructor() {
        super("resources.qualifications.QualificationResult", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "qualification", kind: "message", T: () => QualificationShort },
            { no: 6, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } },
            { no: 7, name: "user", kind: "message", T: () => UserShort },
            { no: 8, name: "status", kind: "enum", T: () => ["resources.qualifications.ResultStatus", ResultStatus, "RESULT_STATUS_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 9, name: "score", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/, options: { "validate.rules": { float: { lte: 1000, gte: 0 } } } },
            { no: 10, name: "summary", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } },
            { no: 11, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 12, name: "creator", kind: "message", T: () => UserShort },
            { no: 13, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<QualificationResult>): QualificationResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.qualificationId = 0;
        message.userId = 0;
        message.status = 0;
        message.summary = "";
        message.creatorId = 0;
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<QualificationResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualificationResult): QualificationResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 3:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* uint64 qualification_id */ 4:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* optional resources.qualifications.QualificationShort qualification */ 5:
                    message.qualification = QualificationShort.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                case /* int32 user_id */ 6:
                    message.userId = reader.int32();
                    break;
                case /* resources.users.UserShort user */ 7:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* resources.qualifications.ResultStatus status */ 8:
                    message.status = reader.int32();
                    break;
                case /* optional float score */ 9:
                    message.score = reader.float();
                    break;
                case /* string summary */ 10:
                    message.summary = reader.string();
                    break;
                case /* int32 creator_id */ 11:
                    message.creatorId = reader.int32();
                    break;
                case /* resources.users.UserShort creator */ 12:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 13:
                    message.creatorJob = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QualificationResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 3; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* uint64 qualification_id = 4; */
        if (message.qualificationId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.qualifications.QualificationShort qualification = 5; */
        if (message.qualification)
            QualificationShort.internalBinaryWrite(message.qualification, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 6; */
        if (message.userId !== 0)
            writer.tag(6, WireType.Varint).int32(message.userId);
        /* resources.users.UserShort user = 7; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ResultStatus status = 8; */
        if (message.status !== 0)
            writer.tag(8, WireType.Varint).int32(message.status);
        /* optional float score = 9; */
        if (message.score !== undefined)
            writer.tag(9, WireType.Bit32).float(message.score);
        /* string summary = 10; */
        if (message.summary !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.summary);
        /* int32 creator_id = 11; */
        if (message.creatorId !== 0)
            writer.tag(11, WireType.Varint).int32(message.creatorId);
        /* resources.users.UserShort creator = 12; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 13; */
        if (message.creatorJob !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.creatorJob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.QualificationResult
 */
export const QualificationResult = new QualificationResult$Type();
