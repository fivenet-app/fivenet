// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/qualifications/exam.proto" (package "resources.qualifications", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { File } from "../filestore/file";
import { Timestamp } from "../timestamp/timestamp";
// Exam / Questions

/**
 * @generated from protobuf message resources.qualifications.ExamQuestions
 */
export interface ExamQuestions {
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamQuestion questions = 1;
     */
    questions: ExamQuestion[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestion
 */
export interface ExamQuestion {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: uint64 qualification_id = 2;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 4;
     */
    updatedAt?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string title = 5;
     */
    title: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string description = 6;
     */
    description?: string;
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestionData data = 7;
     */
    data?: ExamQuestionData;
    /**
     * @generated from protobuf field: optional resources.qualifications.ExamQuestionAnswerData answer = 8;
     */
    answer?: ExamQuestionAnswerData;
    /**
     * @generated from protobuf field: optional int32 points = 9;
     */
    points?: number;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.qualifications.ExamQuestionData
 */
export interface ExamQuestionData {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionSeparator separator = 1;
         */
        separator: ExamQuestionSeparator;
    } | {
        oneofKind: "image";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionImage image = 6;
         */
        image: ExamQuestionImage;
    } | {
        oneofKind: "yesno";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionYesNo yesno = 2;
         */
        yesno: ExamQuestionYesNo;
    } | {
        oneofKind: "freeText";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionText free_text = 3;
         */
        freeText: ExamQuestionText;
    } | {
        oneofKind: "singleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionSingleChoice single_choice = 4;
         */
        singleChoice: ExamQuestionSingleChoice;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamQuestionMultipleChoice multiple_choice = 5;
         */
        multipleChoice: ExamQuestionMultipleChoice;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionSeparator
 */
export interface ExamQuestionSeparator {
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionImage
 */
export interface ExamQuestionImage {
    /**
     * @generated from protobuf field: resources.filestore.File image = 1;
     */
    image?: File;
    /**
     * @generated from protobuf field: optional string alt = 2;
     */
    alt?: string;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionYesNo
 */
export interface ExamQuestionYesNo {
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionText
 */
export interface ExamQuestionText {
    /**
     * @generated from protobuf field: int32 min_length = 1;
     */
    minLength: number;
    /**
     * @generated from protobuf field: int32 max_length = 2;
     */
    maxLength: number;
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionSingleChoice
 */
export interface ExamQuestionSingleChoice {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: repeated string choices = 1;
     */
    choices: string[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamQuestionMultipleChoice
 */
export interface ExamQuestionMultipleChoice {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: repeated string choices = 1;
     */
    choices: string[];
    /**
     * @generated from protobuf field: optional int32 limit = 2;
     */
    limit?: number;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.qualifications.ExamQuestionAnswerData
 */
export interface ExamQuestionAnswerData {
    /**
     * @generated from protobuf field: string answer_key = 1;
     */
    answerKey: string;
}
// User Response

/**
 * @generated from protobuf message resources.qualifications.ExamUser
 */
export interface ExamUser {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 3;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp started_at = 4;
     */
    startedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp ends_at = 5;
     */
    endsAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp ended_at = 6;
     */
    endedAt?: Timestamp;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.qualifications.ExamResponses
 */
export interface ExamResponses {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamResponse responses = 3;
     */
    responses: ExamResponse[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponse
 */
export interface ExamResponse {
    /**
     * @generated from protobuf field: uint64 question_id = 1;
     */
    questionId: number;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestion question = 3;
     */
    question?: ExamQuestion;
    /**
     * @generated from protobuf field: resources.qualifications.ExamResponseData response = 4;
     */
    response?: ExamResponseData;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseData
 */
export interface ExamResponseData {
    /**
     * @generated from protobuf oneof: response
     */
    response: {
        oneofKind: "separator";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseSeparator separator = 3;
         */
        separator: ExamResponseSeparator;
    } | {
        oneofKind: "yesno";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseYesNo yesno = 4;
         */
        yesno: ExamResponseYesNo;
    } | {
        oneofKind: "freeText";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseText free_text = 5;
         */
        freeText: ExamResponseText;
    } | {
        oneofKind: "singleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseSingleChoice single_choice = 6;
         */
        singleChoice: ExamResponseSingleChoice;
    } | {
        oneofKind: "multipleChoice";
        /**
         * @generated from protobuf field: resources.qualifications.ExamResponseMultipleChoice multiple_choice = 7;
         */
        multipleChoice: ExamResponseMultipleChoice;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseSeparator
 */
export interface ExamResponseSeparator {
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseYesNo
 */
export interface ExamResponseYesNo {
    /**
     * @generated from protobuf field: bool value = 1;
     */
    value: boolean;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseText
 */
export interface ExamResponseText {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string text = 1;
     */
    text: string; // 0.5 Megabyte
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseSingleChoice
 */
export interface ExamResponseSingleChoice {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string choice = 1;
     */
    choice: string;
}
/**
 * @generated from protobuf message resources.qualifications.ExamResponseMultipleChoice
 */
export interface ExamResponseMultipleChoice {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: repeated string choices = 1;
     */
    choices: string[];
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.qualifications.ExamGrading
 */
export interface ExamGrading {
    /**
     * @generated from protobuf field: repeated resources.qualifications.ExamGradingResponse responses = 1;
     */
    responses: ExamGradingResponse[];
}
/**
 * @generated from protobuf message resources.qualifications.ExamGradingResponse
 */
export interface ExamGradingResponse {
    /**
     * @generated from protobuf field: uint64 question_id = 1;
     */
    questionId: number;
    /**
     * @generated from protobuf field: float points = 2;
     */
    points: number;
    /**
     * @generated from protobuf field: optional bool checked = 3;
     */
    checked?: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestions$Type extends MessageType<ExamQuestions> {
    constructor() {
        super("resources.qualifications.ExamQuestions", [
            { no: 1, name: "questions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamQuestion, options: { "validate.rules": { repeated: { maxItems: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestions>): ExamQuestions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questions = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestions): ExamQuestions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.ExamQuestion questions */ 1:
                    message.questions.push(ExamQuestion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.ExamQuestion questions = 1; */
        for (let i = 0; i < message.questions.length; i++)
            ExamQuestion.internalBinaryWrite(message.questions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestions
 */
export const ExamQuestions = new ExamQuestions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestion$Type extends MessageType<ExamQuestion> {
    constructor() {
        super("resources.qualifications.ExamQuestion", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "512" } } } },
            { no: 6, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "1024" } } } },
            { no: 7, name: "data", kind: "message", T: () => ExamQuestionData, options: { "validate.rules": { message: { required: true } } } },
            { no: 8, name: "answer", kind: "message", T: () => ExamQuestionAnswerData },
            { no: 9, name: "points", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestion>): ExamQuestion {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.qualificationId = 0;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<ExamQuestion>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestion): ExamQuestion {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* uint64 qualification_id */ 2:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 4:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string title */ 5:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 6:
                    message.description = reader.string();
                    break;
                case /* resources.qualifications.ExamQuestionData data */ 7:
                    message.data = ExamQuestionData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* optional resources.qualifications.ExamQuestionAnswerData answer */ 8:
                    message.answer = ExamQuestionAnswerData.internalBinaryRead(reader, reader.uint32(), options, message.answer);
                    break;
                case /* optional int32 points */ 9:
                    message.points = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestion, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* uint64 qualification_id = 2; */
        if (message.qualificationId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.qualificationId);
        /* optional resources.timestamp.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 4; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string title = 5; */
        if (message.title !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.title);
        /* optional string description = 6; */
        if (message.description !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* resources.qualifications.ExamQuestionData data = 7; */
        if (message.data)
            ExamQuestionData.internalBinaryWrite(message.data, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.ExamQuestionAnswerData answer = 8; */
        if (message.answer)
            ExamQuestionAnswerData.internalBinaryWrite(message.answer, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 points = 9; */
        if (message.points !== undefined)
            writer.tag(9, WireType.Varint).int32(message.points);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestion
 */
export const ExamQuestion = new ExamQuestion$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionData$Type extends MessageType<ExamQuestionData> {
    constructor() {
        super("resources.qualifications.ExamQuestionData", [
            { no: 1, name: "separator", kind: "message", oneof: "data", T: () => ExamQuestionSeparator },
            { no: 6, name: "image", kind: "message", oneof: "data", T: () => ExamQuestionImage },
            { no: 2, name: "yesno", kind: "message", oneof: "data", T: () => ExamQuestionYesNo },
            { no: 3, name: "free_text", kind: "message", oneof: "data", T: () => ExamQuestionText },
            { no: 4, name: "single_choice", kind: "message", oneof: "data", T: () => ExamQuestionSingleChoice },
            { no: 5, name: "multiple_choice", kind: "message", oneof: "data", T: () => ExamQuestionMultipleChoice }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionData>): ExamQuestionData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionData): ExamQuestionData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.ExamQuestionSeparator separator */ 1:
                    message.data = {
                        oneofKind: "separator",
                        separator: ExamQuestionSeparator.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).separator)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionImage image */ 6:
                    message.data = {
                        oneofKind: "image",
                        image: ExamQuestionImage.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).image)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionYesNo yesno */ 2:
                    message.data = {
                        oneofKind: "yesno",
                        yesno: ExamQuestionYesNo.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).yesno)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionText free_text */ 3:
                    message.data = {
                        oneofKind: "freeText",
                        freeText: ExamQuestionText.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).freeText)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionSingleChoice single_choice */ 4:
                    message.data = {
                        oneofKind: "singleChoice",
                        singleChoice: ExamQuestionSingleChoice.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).singleChoice)
                    };
                    break;
                case /* resources.qualifications.ExamQuestionMultipleChoice multiple_choice */ 5:
                    message.data = {
                        oneofKind: "multipleChoice",
                        multipleChoice: ExamQuestionMultipleChoice.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).multipleChoice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.ExamQuestionSeparator separator = 1; */
        if (message.data.oneofKind === "separator")
            ExamQuestionSeparator.internalBinaryWrite(message.data.separator, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionImage image = 6; */
        if (message.data.oneofKind === "image")
            ExamQuestionImage.internalBinaryWrite(message.data.image, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionYesNo yesno = 2; */
        if (message.data.oneofKind === "yesno")
            ExamQuestionYesNo.internalBinaryWrite(message.data.yesno, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionText free_text = 3; */
        if (message.data.oneofKind === "freeText")
            ExamQuestionText.internalBinaryWrite(message.data.freeText, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionSingleChoice single_choice = 4; */
        if (message.data.oneofKind === "singleChoice")
            ExamQuestionSingleChoice.internalBinaryWrite(message.data.singleChoice, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamQuestionMultipleChoice multiple_choice = 5; */
        if (message.data.oneofKind === "multipleChoice")
            ExamQuestionMultipleChoice.internalBinaryWrite(message.data.multipleChoice, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionData
 */
export const ExamQuestionData = new ExamQuestionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionSeparator$Type extends MessageType<ExamQuestionSeparator> {
    constructor() {
        super("resources.qualifications.ExamQuestionSeparator", []);
    }
    create(value?: PartialMessage<ExamQuestionSeparator>): ExamQuestionSeparator {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionSeparator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionSeparator): ExamQuestionSeparator {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamQuestionSeparator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionSeparator
 */
export const ExamQuestionSeparator = new ExamQuestionSeparator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionImage$Type extends MessageType<ExamQuestionImage> {
    constructor() {
        super("resources.qualifications.ExamQuestionImage", [
            { no: 1, name: "image", kind: "message", T: () => File },
            { no: 2, name: "alt", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "128" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionImage>): ExamQuestionImage {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionImage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionImage): ExamQuestionImage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.filestore.File image */ 1:
                    message.image = File.internalBinaryRead(reader, reader.uint32(), options, message.image);
                    break;
                case /* optional string alt */ 2:
                    message.alt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.filestore.File image = 1; */
        if (message.image)
            File.internalBinaryWrite(message.image, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string alt = 2; */
        if (message.alt !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.alt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionImage
 */
export const ExamQuestionImage = new ExamQuestionImage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionYesNo$Type extends MessageType<ExamQuestionYesNo> {
    constructor() {
        super("resources.qualifications.ExamQuestionYesNo", []);
    }
    create(value?: PartialMessage<ExamQuestionYesNo>): ExamQuestionYesNo {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionYesNo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionYesNo): ExamQuestionYesNo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamQuestionYesNo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionYesNo
 */
export const ExamQuestionYesNo = new ExamQuestionYesNo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionText$Type extends MessageType<ExamQuestionText> {
    constructor() {
        super("resources.qualifications.ExamQuestionText", [
            { no: 1, name: "min_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "max_length", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionText>): ExamQuestionText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.minLength = 0;
        message.maxLength = 0;
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionText): ExamQuestionText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 min_length */ 1:
                    message.minLength = reader.int32();
                    break;
                case /* int32 max_length */ 2:
                    message.maxLength = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 min_length = 1; */
        if (message.minLength !== 0)
            writer.tag(1, WireType.Varint).int32(message.minLength);
        /* int32 max_length = 2; */
        if (message.maxLength !== 0)
            writer.tag(2, WireType.Varint).int32(message.maxLength);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionText
 */
export const ExamQuestionText = new ExamQuestionText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionSingleChoice$Type extends MessageType<ExamQuestionSingleChoice> {
    constructor() {
        super("resources.qualifications.ExamQuestionSingleChoice", [
            { no: 1, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionSingleChoice>): ExamQuestionSingleChoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionSingleChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionSingleChoice): ExamQuestionSingleChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string choices */ 1:
                    message.choices.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionSingleChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string choices = 1; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.choices[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionSingleChoice
 */
export const ExamQuestionSingleChoice = new ExamQuestionSingleChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionMultipleChoice$Type extends MessageType<ExamQuestionMultipleChoice> {
    constructor() {
        super("resources.qualifications.ExamQuestionMultipleChoice", [
            { no: 1, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } },
            { no: 2, name: "limit", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { lte: 10, gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionMultipleChoice>): ExamQuestionMultipleChoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionMultipleChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionMultipleChoice): ExamQuestionMultipleChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string choices */ 1:
                    message.choices.push(reader.string());
                    break;
                case /* optional int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionMultipleChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string choices = 1; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.choices[i]);
        /* optional int32 limit = 2; */
        if (message.limit !== undefined)
            writer.tag(2, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionMultipleChoice
 */
export const ExamQuestionMultipleChoice = new ExamQuestionMultipleChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamQuestionAnswerData$Type extends MessageType<ExamQuestionAnswerData> {
    constructor() {
        super("resources.qualifications.ExamQuestionAnswerData", [
            { no: 1, name: "answer_key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "1024" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamQuestionAnswerData>): ExamQuestionAnswerData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.answerKey = "";
        if (value !== undefined)
            reflectionMergePartial<ExamQuestionAnswerData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamQuestionAnswerData): ExamQuestionAnswerData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string answer_key */ 1:
                    message.answerKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamQuestionAnswerData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string answer_key = 1; */
        if (message.answerKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.answerKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamQuestionAnswerData
 */
export const ExamQuestionAnswerData = new ExamQuestionAnswerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamUser$Type extends MessageType<ExamUser> {
    constructor() {
        super("resources.qualifications.ExamUser", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "started_at", kind: "message", T: () => Timestamp },
            { no: 5, name: "ends_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "ended_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ExamUser>): ExamUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<ExamUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamUser): ExamUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp started_at */ 4:
                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);
                    break;
                case /* optional resources.timestamp.Timestamp ends_at */ 5:
                    message.endsAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endsAt);
                    break;
                case /* optional resources.timestamp.Timestamp ended_at */ 6:
                    message.endedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.endedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* optional resources.timestamp.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp started_at = 4; */
        if (message.startedAt)
            Timestamp.internalBinaryWrite(message.startedAt, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp ends_at = 5; */
        if (message.endsAt)
            Timestamp.internalBinaryWrite(message.endsAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp ended_at = 6; */
        if (message.endedAt)
            Timestamp.internalBinaryWrite(message.endedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamUser
 */
export const ExamUser = new ExamUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponses$Type extends MessageType<ExamResponses> {
    constructor() {
        super("resources.qualifications.ExamResponses", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamResponse, options: { "validate.rules": { repeated: { maxItems: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponses>): ExamResponses {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        message.userId = 0;
        message.responses = [];
        if (value !== undefined)
            reflectionMergePartial<ExamResponses>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponses): ExamResponses {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* repeated resources.qualifications.ExamResponse responses */ 3:
                    message.responses.push(ExamResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponses, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* repeated resources.qualifications.ExamResponse responses = 3; */
        for (let i = 0; i < message.responses.length; i++)
            ExamResponse.internalBinaryWrite(message.responses[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponses
 */
export const ExamResponses = new ExamResponses$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponse$Type extends MessageType<ExamResponse> {
    constructor() {
        super("resources.qualifications.ExamResponse", [
            { no: 1, name: "question_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "question", kind: "message", T: () => ExamQuestion },
            { no: 4, name: "response", kind: "message", T: () => ExamResponseData }
        ]);
    }
    create(value?: PartialMessage<ExamResponse>): ExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<ExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponse): ExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 question_id */ 1:
                    message.questionId = reader.uint64().toNumber();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* resources.qualifications.ExamQuestion question */ 3:
                    message.question = ExamQuestion.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                case /* resources.qualifications.ExamResponseData response */ 4:
                    message.response = ExamResponseData.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 question_id = 1; */
        if (message.questionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.questionId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* resources.qualifications.ExamQuestion question = 3; */
        if (message.question)
            ExamQuestion.internalBinaryWrite(message.question, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseData response = 4; */
        if (message.response)
            ExamResponseData.internalBinaryWrite(message.response, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponse
 */
export const ExamResponse = new ExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseData$Type extends MessageType<ExamResponseData> {
    constructor() {
        super("resources.qualifications.ExamResponseData", [
            { no: 3, name: "separator", kind: "message", oneof: "response", T: () => ExamResponseSeparator },
            { no: 4, name: "yesno", kind: "message", oneof: "response", T: () => ExamResponseYesNo },
            { no: 5, name: "free_text", kind: "message", oneof: "response", T: () => ExamResponseText },
            { no: 6, name: "single_choice", kind: "message", oneof: "response", T: () => ExamResponseSingleChoice },
            { no: 7, name: "multiple_choice", kind: "message", oneof: "response", T: () => ExamResponseMultipleChoice }
        ]);
    }
    create(value?: PartialMessage<ExamResponseData>): ExamResponseData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExamResponseData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseData): ExamResponseData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.ExamResponseSeparator separator */ 3:
                    message.response = {
                        oneofKind: "separator",
                        separator: ExamResponseSeparator.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).separator)
                    };
                    break;
                case /* resources.qualifications.ExamResponseYesNo yesno */ 4:
                    message.response = {
                        oneofKind: "yesno",
                        yesno: ExamResponseYesNo.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).yesno)
                    };
                    break;
                case /* resources.qualifications.ExamResponseText free_text */ 5:
                    message.response = {
                        oneofKind: "freeText",
                        freeText: ExamResponseText.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).freeText)
                    };
                    break;
                case /* resources.qualifications.ExamResponseSingleChoice single_choice */ 6:
                    message.response = {
                        oneofKind: "singleChoice",
                        singleChoice: ExamResponseSingleChoice.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).singleChoice)
                    };
                    break;
                case /* resources.qualifications.ExamResponseMultipleChoice multiple_choice */ 7:
                    message.response = {
                        oneofKind: "multipleChoice",
                        multipleChoice: ExamResponseMultipleChoice.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).multipleChoice)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.ExamResponseSeparator separator = 3; */
        if (message.response.oneofKind === "separator")
            ExamResponseSeparator.internalBinaryWrite(message.response.separator, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseYesNo yesno = 4; */
        if (message.response.oneofKind === "yesno")
            ExamResponseYesNo.internalBinaryWrite(message.response.yesno, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseText free_text = 5; */
        if (message.response.oneofKind === "freeText")
            ExamResponseText.internalBinaryWrite(message.response.freeText, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseSingleChoice single_choice = 6; */
        if (message.response.oneofKind === "singleChoice")
            ExamResponseSingleChoice.internalBinaryWrite(message.response.singleChoice, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponseMultipleChoice multiple_choice = 7; */
        if (message.response.oneofKind === "multipleChoice")
            ExamResponseMultipleChoice.internalBinaryWrite(message.response.multipleChoice, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseData
 */
export const ExamResponseData = new ExamResponseData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseSeparator$Type extends MessageType<ExamResponseSeparator> {
    constructor() {
        super("resources.qualifications.ExamResponseSeparator", []);
    }
    create(value?: PartialMessage<ExamResponseSeparator>): ExamResponseSeparator {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExamResponseSeparator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseSeparator): ExamResponseSeparator {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ExamResponseSeparator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseSeparator
 */
export const ExamResponseSeparator = new ExamResponseSeparator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseYesNo$Type extends MessageType<ExamResponseYesNo> {
    constructor() {
        super("resources.qualifications.ExamResponseYesNo", [
            { no: 1, name: "value", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExamResponseYesNo>): ExamResponseYesNo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.value = false;
        if (value !== undefined)
            reflectionMergePartial<ExamResponseYesNo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseYesNo): ExamResponseYesNo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool value */ 1:
                    message.value = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseYesNo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool value = 1; */
        if (message.value !== false)
            writer.tag(1, WireType.Varint).bool(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseYesNo
 */
export const ExamResponseYesNo = new ExamResponseYesNo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseText$Type extends MessageType<ExamResponseText> {
    constructor() {
        super("resources.qualifications.ExamResponseText", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxBytes: "500000" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponseText>): ExamResponseText {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<ExamResponseText>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseText): ExamResponseText {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseText, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseText
 */
export const ExamResponseText = new ExamResponseText$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseSingleChoice$Type extends MessageType<ExamResponseSingleChoice> {
    constructor() {
        super("resources.qualifications.ExamResponseSingleChoice", [
            { no: 1, name: "choice", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "512" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponseSingleChoice>): ExamResponseSingleChoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choice = "";
        if (value !== undefined)
            reflectionMergePartial<ExamResponseSingleChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseSingleChoice): ExamResponseSingleChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string choice */ 1:
                    message.choice = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseSingleChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string choice = 1; */
        if (message.choice !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.choice);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseSingleChoice
 */
export const ExamResponseSingleChoice = new ExamResponseSingleChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamResponseMultipleChoice$Type extends MessageType<ExamResponseMultipleChoice> {
    constructor() {
        super("resources.qualifications.ExamResponseMultipleChoice", [
            { no: 1, name: "choices", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamResponseMultipleChoice>): ExamResponseMultipleChoice {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.choices = [];
        if (value !== undefined)
            reflectionMergePartial<ExamResponseMultipleChoice>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamResponseMultipleChoice): ExamResponseMultipleChoice {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string choices */ 1:
                    message.choices.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamResponseMultipleChoice, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string choices = 1; */
        for (let i = 0; i < message.choices.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.choices[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamResponseMultipleChoice
 */
export const ExamResponseMultipleChoice = new ExamResponseMultipleChoice$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamGrading$Type extends MessageType<ExamGrading> {
    constructor() {
        super("resources.qualifications.ExamGrading", [
            { no: 1, name: "responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExamGradingResponse, options: { "validate.rules": { repeated: { maxItems: "50" } } } }
        ]);
    }
    create(value?: PartialMessage<ExamGrading>): ExamGrading {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.responses = [];
        if (value !== undefined)
            reflectionMergePartial<ExamGrading>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamGrading): ExamGrading {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.qualifications.ExamGradingResponse responses */ 1:
                    message.responses.push(ExamGradingResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamGrading, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.qualifications.ExamGradingResponse responses = 1; */
        for (let i = 0; i < message.responses.length; i++)
            ExamGradingResponse.internalBinaryWrite(message.responses[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamGrading
 */
export const ExamGrading = new ExamGrading$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExamGradingResponse$Type extends MessageType<ExamGradingResponse> {
    constructor() {
        super("resources.qualifications.ExamGradingResponse", [
            { no: 1, name: "question_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "points", kind: "scalar", T: 2 /*ScalarType.FLOAT*/, options: { "validate.rules": { float: { lte: 1000, gte: 0 } } } },
            { no: 3, name: "checked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ExamGradingResponse>): ExamGradingResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionId = 0;
        message.points = 0;
        if (value !== undefined)
            reflectionMergePartial<ExamGradingResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExamGradingResponse): ExamGradingResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 question_id */ 1:
                    message.questionId = reader.uint64().toNumber();
                    break;
                case /* float points */ 2:
                    message.points = reader.float();
                    break;
                case /* optional bool checked */ 3:
                    message.checked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExamGradingResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 question_id = 1; */
        if (message.questionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.questionId);
        /* float points = 2; */
        if (message.points !== 0)
            writer.tag(2, WireType.Bit32).float(message.points);
        /* optional bool checked = 3; */
        if (message.checked !== undefined)
            writer.tag(3, WireType.Varint).bool(message.checked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.qualifications.ExamGradingResponse
 */
export const ExamGradingResponse = new ExamGradingResponse$Type();
