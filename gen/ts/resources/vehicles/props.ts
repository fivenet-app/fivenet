// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/vehicles/props.proto" (package "resources.vehicles", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.vehicles.VehicleProps
 */
export interface VehicleProps {
    /**
     * @generated from protobuf field: string plate = 1
     */
    plate: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 2
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional bool wanted = 3
     */
    wanted?: boolean;
    /**
     * @generated from protobuf field: optional string wanted_reason = 4
     */
    wantedReason?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class VehicleProps$Type extends MessageType<VehicleProps> {
    constructor() {
        super("resources.vehicles.VehicleProps", [
            { no: 1, name: "plate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "wanted", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "wanted_reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<VehicleProps>): VehicleProps {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.plate = "";
        if (value !== undefined)
            reflectionMergePartial<VehicleProps>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleProps): VehicleProps {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string plate */ 1:
                    message.plate = reader.string();
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 2:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional bool wanted */ 3:
                    message.wanted = reader.bool();
                    break;
                case /* optional string wanted_reason */ 4:
                    message.wantedReason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleProps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string plate = 1; */
        if (message.plate !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.plate);
        /* optional resources.timestamp.Timestamp updated_at = 2; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool wanted = 3; */
        if (message.wanted !== undefined)
            writer.tag(3, WireType.Varint).bool(message.wanted);
        /* optional string wanted_reason = 4; */
        if (message.wantedReason !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.wantedReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.vehicles.VehicleProps
 */
export const VehicleProps = new VehicleProps$Type();
