// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/vehicles/activity.proto" (package "resources.vehicles", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.vehicles.VehicleActivity
 */
export interface VehicleActivity {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: string plate = 3
     */
    plate: string;
    /**
     * @generated from protobuf field: resources.vehicles.VehicleActivityType activity_type = 4
     */
    activityType: VehicleActivityType;
    /**
     * @generated from protobuf field: optional int32 creator_id = 5
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 6
     */
    creator?: UserShort;
    /**
     * @generated from protobuf field: string creator_job = 7
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: optional string creator_job_label = 8
     */
    creatorJobLabel?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 9
     */
    reason?: string;
    /**
     * @generated from protobuf field: resources.vehicles.VehicleActivityData data = 10
     */
    data?: VehicleActivityData;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.vehicles.VehicleActivityData
 */
export interface VehicleActivityData {
}
/**
 * @generated from protobuf enum resources.vehicles.VehicleActivityType
 */
export enum VehicleActivityType {
    /**
     * @generated from protobuf enum value: VEHICLE_ACTIVITY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Types for `VehicleActivityData`
     *
     * @generated from protobuf enum value: VEHICLE_ACTIVITY_TYPE_WANTED = 1;
     */
    WANTED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class VehicleActivity$Type extends MessageType<VehicleActivity> {
    constructor() {
        super("resources.vehicles.VehicleActivity", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"vehicle_activity.id\"" } },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp, options: { "tagger.tags": "alias:\"user_activity.created_at\"" } },
            { no: 3, name: "plate", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 4, name: "activity_type", kind: "enum", T: () => ["resources.vehicles.VehicleActivityType", VehicleActivityType, "VEHICLE_ACTIVITY_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } }, "tagger.tags": "alias:\"vehicle_activity.type\"" } },
            { no: 5, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gt: 0 } } } },
            { no: 6, name: "creator", kind: "message", T: () => UserShort, options: { "tagger.tags": "alias:\"creator\"" } },
            { no: 7, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 8, name: "creator_job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 9, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } }, "tagger.tags": "alias:\"user_activity.reason\"" } },
            { no: 10, name: "data", kind: "message", T: () => VehicleActivityData }
        ]);
    }
    create(value?: PartialMessage<VehicleActivity>): VehicleActivity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.plate = "";
        message.activityType = 0;
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<VehicleActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleActivity): VehicleActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string plate */ 3:
                    message.plate = reader.string();
                    break;
                case /* resources.vehicles.VehicleActivityType activity_type */ 4:
                    message.activityType = reader.int32();
                    break;
                case /* optional int32 creator_id */ 5:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 6:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 7:
                    message.creatorJob = reader.string();
                    break;
                case /* optional string creator_job_label */ 8:
                    message.creatorJobLabel = reader.string();
                    break;
                case /* optional string reason */ 9:
                    message.reason = reader.string();
                    break;
                case /* resources.vehicles.VehicleActivityData data */ 10:
                    message.data = VehicleActivityData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string plate = 3; */
        if (message.plate !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.plate);
        /* resources.vehicles.VehicleActivityType activity_type = 4; */
        if (message.activityType !== 0)
            writer.tag(4, WireType.Varint).int32(message.activityType);
        /* optional int32 creator_id = 5; */
        if (message.creatorId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 6; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 7; */
        if (message.creatorJob !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.creatorJob);
        /* optional string creator_job_label = 8; */
        if (message.creatorJobLabel !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.creatorJobLabel);
        /* optional string reason = 9; */
        if (message.reason !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.reason);
        /* resources.vehicles.VehicleActivityData data = 10; */
        if (message.data)
            VehicleActivityData.internalBinaryWrite(message.data, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.vehicles.VehicleActivity
 */
export const VehicleActivity = new VehicleActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VehicleActivityData$Type extends MessageType<VehicleActivityData> {
    constructor() {
        super("resources.vehicles.VehicleActivityData", []);
    }
    create(value?: PartialMessage<VehicleActivityData>): VehicleActivityData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VehicleActivityData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VehicleActivityData): VehicleActivityData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VehicleActivityData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.vehicles.VehicleActivityData
 */
export const VehicleActivityData = new VehicleActivityData$Type();
