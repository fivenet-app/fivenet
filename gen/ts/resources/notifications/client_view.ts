// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/notifications/client_view.proto" (package "resources.notifications", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Struct } from "../../google/protobuf/struct";
/**
 * @generated from protobuf message resources.notifications.ClientView
 */
export interface ClientView {
    /**
     * @generated from protobuf field: resources.notifications.ObjectType type = 1
     */
    type: ObjectType;
    /**
     * @generated from protobuf field: optional uint64 id = 2
     */
    id?: number;
}
/**
 * @generated from protobuf message resources.notifications.ObjectEvent
 */
export interface ObjectEvent {
    /**
     * @generated from protobuf field: resources.notifications.ObjectType type = 1
     */
    type: ObjectType;
    /**
     * @generated from protobuf field: optional uint64 id = 2
     */
    id?: number;
    /**
     * @generated from protobuf field: resources.notifications.ObjectEventType event_type = 3
     */
    eventType: ObjectEventType;
    /**
     * @generated from protobuf field: optional int32 user_id = 4
     */
    userId?: number;
    /**
     * @generated from protobuf field: optional string job = 5
     */
    job?: string;
    /**
     * @generated from protobuf field: optional google.protobuf.Struct data = 6
     */
    data?: Struct;
}
/**
 * @generated from protobuf enum resources.notifications.ObjectType
 */
export enum ObjectType {
    /**
     * @generated from protobuf enum value: OBJECT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: OBJECT_TYPE_CITIZEN = 1;
     */
    CITIZEN = 1,
    /**
     * @generated from protobuf enum value: OBJECT_TYPE_DOCUMENT = 2;
     */
    DOCUMENT = 2,
    /**
     * @generated from protobuf enum value: OBJECT_TYPE_WIKI_PAGE = 3;
     */
    WIKI_PAGE = 3,
    /**
     * @generated from protobuf enum value: OBJECT_TYPE_JOBS_COLLEAGUE = 4;
     */
    JOBS_COLLEAGUE = 4,
    /**
     * @generated from protobuf enum value: OBJECT_TYPE_JOBS_CONDUCT = 5;
     */
    JOBS_CONDUCT = 5
}
/**
 * @generated from protobuf enum resources.notifications.ObjectEventType
 */
export enum ObjectEventType {
    /**
     * @generated from protobuf enum value: OBJECT_EVENT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: OBJECT_EVENT_TYPE_UPDATED = 1;
     */
    UPDATED = 1,
    /**
     * @generated from protobuf enum value: OBJECT_EVENT_TYPE_DELETED = 2;
     */
    DELETED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientView$Type extends MessageType<ClientView> {
    constructor() {
        super("resources.notifications.ClientView", [
            { no: 1, name: "type", kind: "enum", T: () => ["resources.notifications.ObjectType", ObjectType, "OBJECT_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ClientView>): ClientView {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<ClientView>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientView): ClientView {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.notifications.ObjectType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional uint64 id */ 2:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.notifications.ObjectType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional uint64 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.notifications.ClientView
 */
export const ClientView = new ClientView$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectEvent$Type extends MessageType<ObjectEvent> {
    constructor() {
        super("resources.notifications.ObjectEvent", [
            { no: 1, name: "type", kind: "enum", T: () => ["resources.notifications.ObjectType", ObjectType, "OBJECT_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "event_type", kind: "enum", T: () => ["resources.notifications.ObjectEventType", ObjectEventType, "OBJECT_EVENT_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 4, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gte: 0 } } } },
            { no: 5, name: "job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 6, name: "data", kind: "message", T: () => Struct }
        ]);
    }
    create(value?: PartialMessage<ObjectEvent>): ObjectEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.eventType = 0;
        if (value !== undefined)
            reflectionMergePartial<ObjectEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjectEvent): ObjectEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.notifications.ObjectType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional uint64 id */ 2:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* resources.notifications.ObjectEventType event_type */ 3:
                    message.eventType = reader.int32();
                    break;
                case /* optional int32 user_id */ 4:
                    message.userId = reader.int32();
                    break;
                case /* optional string job */ 5:
                    message.job = reader.string();
                    break;
                case /* optional google.protobuf.Struct data */ 6:
                    message.data = Struct.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjectEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.notifications.ObjectType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional uint64 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* resources.notifications.ObjectEventType event_type = 3; */
        if (message.eventType !== 0)
            writer.tag(3, WireType.Varint).int32(message.eventType);
        /* optional int32 user_id = 4; */
        if (message.userId !== undefined)
            writer.tag(4, WireType.Varint).int32(message.userId);
        /* optional string job = 5; */
        if (message.job !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.job);
        /* optional google.protobuf.Struct data = 6; */
        if (message.data)
            Struct.internalBinaryWrite(message.data, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.notifications.ObjectEvent
 */
export const ObjectEvent = new ObjectEvent$Type();
