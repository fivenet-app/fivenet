// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/centrum/attributes.proto" (package "resources.centrum", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.centrum.UnitAttributes
 */
export interface UnitAttributes {
    /**
     * @generated from protobuf field: repeated resources.centrum.UnitAttribute list = 1
     */
    list: UnitAttribute[];
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.centrum.DispatchAttributes
 */
export interface DispatchAttributes {
    /**
     * @generated from protobuf field: repeated resources.centrum.DispatchAttribute list = 1
     */
    list: DispatchAttribute[];
}
/**
 * @generated from protobuf enum resources.centrum.UnitAttribute
 */
export enum UnitAttribute {
    /**
     * @generated from protobuf enum value: UNIT_ATTRIBUTE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: UNIT_ATTRIBUTE_STATIC = 1;
     */
    STATIC = 1,
    /**
     * @generated from protobuf enum value: UNIT_ATTRIBUTE_NO_DISPATCH_AUTO_ASSIGN = 2;
     */
    NO_DISPATCH_AUTO_ASSIGN = 2
}
/**
 * @generated from protobuf enum resources.centrum.DispatchAttribute
 */
export enum DispatchAttribute {
    /**
     * @generated from protobuf enum value: DISPATCH_ATTRIBUTE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: DISPATCH_ATTRIBUTE_MULTIPLE = 1;
     */
    MULTIPLE = 1,
    /**
     * @generated from protobuf enum value: DISPATCH_ATTRIBUTE_DUPLICATE = 2;
     */
    DUPLICATE = 2,
    /**
     * @generated from protobuf enum value: DISPATCH_ATTRIBUTE_TOO_OLD = 3;
     */
    TOO_OLD = 3,
    /**
     * @generated from protobuf enum value: DISPATCH_ATTRIBUTE_AUTOMATIC = 4;
     */
    AUTOMATIC = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class UnitAttributes$Type extends MessageType<UnitAttributes> {
    constructor() {
        super("resources.centrum.UnitAttributes", [
            { no: 1, name: "list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.centrum.UnitAttribute", UnitAttribute, "UNIT_ATTRIBUTE_"], options: { "buf.validate.field": { repeated: { items: { enum: { definedOnly: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<UnitAttributes>): UnitAttributes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<UnitAttributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitAttributes): UnitAttributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.centrum.UnitAttribute list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.list.push(reader.int32());
                    else
                        message.list.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnitAttributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.centrum.UnitAttribute list = 1; */
        if (message.list.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.list.length; i++)
                writer.int32(message.list[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.centrum.UnitAttributes
 */
export const UnitAttributes = new UnitAttributes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DispatchAttributes$Type extends MessageType<DispatchAttributes> {
    constructor() {
        super("resources.centrum.DispatchAttributes", [
            { no: 1, name: "list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.centrum.DispatchAttribute", DispatchAttribute, "DISPATCH_ATTRIBUTE_"], options: { "buf.validate.field": { repeated: { items: { enum: { definedOnly: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<DispatchAttributes>): DispatchAttributes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.list = [];
        if (value !== undefined)
            reflectionMergePartial<DispatchAttributes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DispatchAttributes): DispatchAttributes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.centrum.DispatchAttribute list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.list.push(reader.int32());
                    else
                        message.list.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DispatchAttributes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.centrum.DispatchAttribute list = 1; */
        if (message.list.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.list.length; i++)
                writer.int32(message.list[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.centrum.DispatchAttributes
 */
export const DispatchAttributes = new DispatchAttributes$Type();
