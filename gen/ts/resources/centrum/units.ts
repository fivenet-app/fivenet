// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/centrum/units.proto" (package "resources.centrum", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Colleague } from "../jobs/colleagues";
import { UnitAccess } from "./access";
import { UnitAttributes } from "./attributes";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.centrum.Unit
 */
export interface Unit {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 4;
     */
    job: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string name = 5;
     */
    name: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string initials = 6;
     */
    initials: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string color = 7;
     */
    color: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string description = 8;
     */
    description?: string;
    /**
     * @generated from protobuf field: optional resources.centrum.UnitStatus status = 9;
     */
    status?: UnitStatus;
    /**
     * @generated from protobuf field: repeated resources.centrum.UnitAssignment users = 11;
     */
    users: UnitAssignment[];
    /**
     * @generated from protobuf field: optional resources.centrum.UnitAttributes attributes = 12;
     */
    attributes?: UnitAttributes;
    /**
     * @generated from protobuf field: optional string home_postal = 13;
     */
    homePostal?: string;
    /**
     * @generated from protobuf field: resources.centrum.UnitAccess access = 14;
     */
    access?: UnitAccess;
}
/**
 * @generated from protobuf message resources.centrum.UnitAssignments
 */
export interface UnitAssignments {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: number;
    /**
     * @generated from protobuf field: string job = 2;
     */
    job: string;
    /**
     * @generated from protobuf field: repeated resources.centrum.UnitAssignment users = 3;
     */
    users: UnitAssignment[];
}
/**
 * @generated from protobuf message resources.centrum.UnitAssignment
 */
export interface UnitAssignment {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: number; // @gotags: sql:"primary_key" alias:"unit_id"
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number; // @gotags: sql:"primary_key" alias:"user_id"
    /**
     * @generated from protobuf field: optional resources.jobs.Colleague user = 3;
     */
    user?: Colleague;
}
/**
 * @generated from protobuf message resources.centrum.UnitStatus
 */
export interface UnitStatus {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 unit_id = 3;
     */
    unitId: number;
    /**
     * @generated from protobuf field: optional resources.centrum.Unit unit = 4;
     */
    unit?: Unit;
    /**
     * @generated from protobuf field: resources.centrum.StatusUnit status = 5;
     */
    status: StatusUnit;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 6;
     */
    reason?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string code = 7;
     */
    code?: string;
    /**
     * @generated from protobuf field: optional int32 user_id = 8;
     */
    userId?: number;
    /**
     * @generated from protobuf field: optional resources.jobs.Colleague user = 9;
     */
    user?: Colleague;
    /**
     * @generated from protobuf field: optional double x = 10;
     */
    x?: number;
    /**
     * @generated from protobuf field: optional double y = 11;
     */
    y?: number;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string postal = 12;
     */
    postal?: string;
    /**
     * @generated from protobuf field: optional int32 creator_id = 13;
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.jobs.Colleague creator = 14;
     */
    creator?: Colleague;
}
/**
 * @generated from protobuf enum resources.centrum.StatusUnit
 */
export enum StatusUnit {
    /**
     * @generated from protobuf enum value: STATUS_UNIT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_UNKNOWN = 1;
     */
    UNKNOWN = 1,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_USER_ADDED = 2;
     */
    USER_ADDED = 2,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_USER_REMOVED = 3;
     */
    USER_REMOVED = 3,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_UNAVAILABLE = 4;
     */
    UNAVAILABLE = 4,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_AVAILABLE = 5;
     */
    AVAILABLE = 5,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_ON_BREAK = 6;
     */
    ON_BREAK = 6,
    /**
     * @generated from protobuf enum value: STATUS_UNIT_BUSY = 7;
     */
    BUSY = 7
}
// @generated message type with reflection information, may provide speed optimized methods
class Unit$Type extends MessageType<Unit> {
    constructor() {
        super("resources.centrum.Unit", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "24" } } } },
            { no: 6, name: "initials", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "2", maxLen: "4" } } } },
            { no: 7, name: "color", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { len: "7", pattern: "^#[A-Fa-f0-9]{6}$" } } } },
            { no: 8, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 9, name: "status", kind: "message", T: () => UnitStatus },
            { no: 11, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitAssignment },
            { no: 12, name: "attributes", kind: "message", T: () => UnitAttributes },
            { no: 13, name: "home_postal", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "48" } } } },
            { no: 14, name: "access", kind: "message", T: () => UnitAccess }
        ]);
    }
    create(value?: PartialMessage<Unit>): Unit {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.name = "";
        message.initials = "";
        message.color = "";
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<Unit>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Unit): Unit {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string job */ 4:
                    message.job = reader.string();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string initials */ 6:
                    message.initials = reader.string();
                    break;
                case /* string color */ 7:
                    message.color = reader.string();
                    break;
                case /* optional string description */ 8:
                    message.description = reader.string();
                    break;
                case /* optional resources.centrum.UnitStatus status */ 9:
                    message.status = UnitStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                case /* repeated resources.centrum.UnitAssignment users */ 11:
                    message.users.push(UnitAssignment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional resources.centrum.UnitAttributes attributes */ 12:
                    message.attributes = UnitAttributes.internalBinaryRead(reader, reader.uint32(), options, message.attributes);
                    break;
                case /* optional string home_postal */ 13:
                    message.homePostal = reader.string();
                    break;
                case /* resources.centrum.UnitAccess access */ 14:
                    message.access = UnitAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Unit, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string job = 4; */
        if (message.job !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.job);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string initials = 6; */
        if (message.initials !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.initials);
        /* string color = 7; */
        if (message.color !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.color);
        /* optional string description = 8; */
        if (message.description !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* optional resources.centrum.UnitStatus status = 9; */
        if (message.status)
            UnitStatus.internalBinaryWrite(message.status, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.centrum.UnitAssignment users = 11; */
        for (let i = 0; i < message.users.length; i++)
            UnitAssignment.internalBinaryWrite(message.users[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.centrum.UnitAttributes attributes = 12; */
        if (message.attributes)
            UnitAttributes.internalBinaryWrite(message.attributes, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional string home_postal = 13; */
        if (message.homePostal !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.homePostal);
        /* resources.centrum.UnitAccess access = 14; */
        if (message.access)
            UnitAccess.internalBinaryWrite(message.access, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.centrum.Unit
 */
export const Unit = new Unit$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitAssignments$Type extends MessageType<UnitAssignments> {
    constructor() {
        super("resources.centrum.UnitAssignments", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 3, name: "users", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitAssignment }
        ]);
    }
    create(value?: PartialMessage<UnitAssignments>): UnitAssignments {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unitId = 0;
        message.job = "";
        message.users = [];
        if (value !== undefined)
            reflectionMergePartial<UnitAssignments>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitAssignments): UnitAssignments {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 unit_id */ 1:
                    message.unitId = reader.uint64().toNumber();
                    break;
                case /* string job */ 2:
                    message.job = reader.string();
                    break;
                case /* repeated resources.centrum.UnitAssignment users */ 3:
                    message.users.push(UnitAssignment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnitAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 unit_id = 1; */
        if (message.unitId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.unitId);
        /* string job = 2; */
        if (message.job !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.job);
        /* repeated resources.centrum.UnitAssignment users = 3; */
        for (let i = 0; i < message.users.length; i++)
            UnitAssignment.internalBinaryWrite(message.users[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.centrum.UnitAssignments
 */
export const UnitAssignments = new UnitAssignments$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitAssignment$Type extends MessageType<UnitAssignment> {
    constructor() {
        super("resources.centrum.UnitAssignment", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } },
            { no: 3, name: "user", kind: "message", T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<UnitAssignment>): UnitAssignment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unitId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<UnitAssignment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitAssignment): UnitAssignment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 unit_id */ 1:
                    message.unitId = reader.uint64().toNumber();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.jobs.Colleague user */ 3:
                    message.user = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnitAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 unit_id = 1; */
        if (message.unitId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.unitId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        /* optional resources.jobs.Colleague user = 3; */
        if (message.user)
            Colleague.internalBinaryWrite(message.user, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.centrum.UnitAssignment
 */
export const UnitAssignment = new UnitAssignment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnitStatus$Type extends MessageType<UnitStatus> {
    constructor() {
        super("resources.centrum.UnitStatus", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "unit", kind: "message", T: () => Unit },
            { no: 5, name: "status", kind: "enum", T: () => ["resources.centrum.StatusUnit", StatusUnit, "STATUS_UNIT_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 6, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 7, name: "code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 8, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 9, name: "user", kind: "message", T: () => Colleague },
            { no: 10, name: "x", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 11, name: "y", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 12, name: "postal", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "48" } } } },
            { no: 13, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 14, name: "creator", kind: "message", T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<UnitStatus>): UnitStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.unitId = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UnitStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitStatus): UnitStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 unit_id */ 3:
                    message.unitId = reader.uint64().toNumber();
                    break;
                case /* optional resources.centrum.Unit unit */ 4:
                    message.unit = Unit.internalBinaryRead(reader, reader.uint32(), options, message.unit);
                    break;
                case /* resources.centrum.StatusUnit status */ 5:
                    message.status = reader.int32();
                    break;
                case /* optional string reason */ 6:
                    message.reason = reader.string();
                    break;
                case /* optional string code */ 7:
                    message.code = reader.string();
                    break;
                case /* optional int32 user_id */ 8:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.jobs.Colleague user */ 9:
                    message.user = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional double x */ 10:
                    message.x = reader.double();
                    break;
                case /* optional double y */ 11:
                    message.y = reader.double();
                    break;
                case /* optional string postal */ 12:
                    message.postal = reader.string();
                    break;
                case /* optional int32 creator_id */ 13:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.jobs.Colleague creator */ 14:
                    message.creator = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnitStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 unit_id = 3; */
        if (message.unitId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.unitId);
        /* optional resources.centrum.Unit unit = 4; */
        if (message.unit)
            Unit.internalBinaryWrite(message.unit, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.StatusUnit status = 5; */
        if (message.status !== 0)
            writer.tag(5, WireType.Varint).int32(message.status);
        /* optional string reason = 6; */
        if (message.reason !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.reason);
        /* optional string code = 7; */
        if (message.code !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.code);
        /* optional int32 user_id = 8; */
        if (message.userId !== undefined)
            writer.tag(8, WireType.Varint).int32(message.userId);
        /* optional resources.jobs.Colleague user = 9; */
        if (message.user)
            Colleague.internalBinaryWrite(message.user, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional double x = 10; */
        if (message.x !== undefined)
            writer.tag(10, WireType.Bit64).double(message.x);
        /* optional double y = 11; */
        if (message.y !== undefined)
            writer.tag(11, WireType.Bit64).double(message.y);
        /* optional string postal = 12; */
        if (message.postal !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.postal);
        /* optional int32 creator_id = 13; */
        if (message.creatorId !== undefined)
            writer.tag(13, WireType.Varint).int32(message.creatorId);
        /* optional resources.jobs.Colleague creator = 14; */
        if (message.creator)
            Colleague.internalBinaryWrite(message.creator, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.centrum.UnitStatus
 */
export const UnitStatus = new UnitStatus$Type();
