// @generated by protobuf-ts 2.11.1 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/audit/audit.proto" (package "resources.audit", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.audit.AuditEntry
 */
export interface AuditEntry {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number; // @gotags: alias:"id"
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 user_id = 3
     */
    userId: number; // @gotags: alias:"user_id"
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 4
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: string user_job = 5
     */
    userJob: string; // @gotags: alias:"user_job"
    /**
     * @generated from protobuf field: optional int32 target_user_id = 6
     */
    targetUserId?: number; // @gotags: alias:"target_user_id"
    /**
     * @generated from protobuf field: optional resources.users.UserShort target_user = 7
     */
    targetUser?: UserShort;
    /**
     * @generated from protobuf field: optional string target_user_job = 8
     */
    targetUserJob?: string; // @gotags: alias:"target_user_job"
    /**
     * @generated from protobuf field: string service = 9
     */
    service: string; // @gotags: alias:"service"
    /**
     * @generated from protobuf field: string method = 10
     */
    method: string; // @gotags: alias:"method"
    /**
     * @generated from protobuf field: resources.audit.EventType state = 11
     */
    state: EventType; // @gotags: alias:"state"
    /**
     * @generated from protobuf field: optional string data = 12
     */
    data?: string; // @gotags: alias:"data"
}
/**
 * @generated from protobuf enum resources.audit.EventType
 */
export enum EventType {
    /**
     * @generated from protobuf enum value: EVENT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_ERRORED = 1;
     */
    ERRORED = 1,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_VIEWED = 2;
     */
    VIEWED = 2,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_CREATED = 3;
     */
    CREATED = 3,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_UPDATED = 4;
     */
    UPDATED = 4,
    /**
     * @generated from protobuf enum value: EVENT_TYPE_DELETED = 5;
     */
    DELETED = 5
}
// @generated message type with reflection information, may provide speed optimized methods
class AuditEntry$Type extends MessageType<AuditEntry> {
    constructor() {
        super("resources.audit.AuditEntry", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user", kind: "message", T: () => UserShort },
            { no: 5, name: "user_job", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "target_user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "target_user", kind: "message", T: () => UserShort },
            { no: 8, name: "target_user_job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "service", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "state", kind: "enum", T: () => ["resources.audit.EventType", EventType, "EVENT_TYPE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 12, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuditEntry>): AuditEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.userId = 0;
        message.userJob = "";
        message.service = "";
        message.method = "";
        message.state = 0;
        if (value !== undefined)
            reflectionMergePartial<AuditEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuditEntry): AuditEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 4:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string user_job */ 5:
                    message.userJob = reader.string();
                    break;
                case /* optional int32 target_user_id */ 6:
                    message.targetUserId = reader.int32();
                    break;
                case /* optional resources.users.UserShort target_user */ 7:
                    message.targetUser = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.targetUser);
                    break;
                case /* optional string target_user_job */ 8:
                    message.targetUserJob = reader.string();
                    break;
                case /* string service */ 9:
                    message.service = reader.string();
                    break;
                case /* string method */ 10:
                    message.method = reader.string();
                    break;
                case /* resources.audit.EventType state */ 11:
                    message.state = reader.int32();
                    break;
                case /* optional string data */ 12:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuditEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 4; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string user_job = 5; */
        if (message.userJob !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userJob);
        /* optional int32 target_user_id = 6; */
        if (message.targetUserId !== undefined)
            writer.tag(6, WireType.Varint).int32(message.targetUserId);
        /* optional resources.users.UserShort target_user = 7; */
        if (message.targetUser)
            UserShort.internalBinaryWrite(message.targetUser, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional string target_user_job = 8; */
        if (message.targetUserJob !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.targetUserJob);
        /* string service = 9; */
        if (message.service !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.service);
        /* string method = 10; */
        if (message.method !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.method);
        /* resources.audit.EventType state = 11; */
        if (message.state !== 0)
            writer.tag(11, WireType.Varint).int32(message.state);
        /* optional string data = 12; */
        if (message.data !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.audit.AuditEntry
 */
export const AuditEntry = new AuditEntry$Type();
