// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/audit/audit.proto" (package "resources.audit", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.audit.AuditEntry
 */
export interface AuditEntry {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 user_id = 3
     */
    userId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 4
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: string user_job = 5
     */
    userJob: string;
    /**
     * @generated from protobuf field: optional int32 target_user_id = 6
     */
    targetUserId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort target_user = 7
     */
    targetUser?: UserShort;
    /**
     * @generated from protobuf field: optional string target_user_job = 8
     */
    targetUserJob?: string;
    /**
     * @generated from protobuf field: string service = 9
     */
    service: string;
    /**
     * @generated from protobuf field: string method = 10
     */
    method: string;
    /**
     * @generated from protobuf field: resources.audit.EventAction action = 11
     */
    action: EventAction;
    /**
     * @generated from protobuf field: resources.audit.EventResult result = 12
     */
    result: EventResult;
    /**
     * @generated from protobuf field: optional resources.audit.AuditEntryMeta meta = 13
     */
    meta?: AuditEntryMeta;
    /**
     * @generated from protobuf field: optional string data = 14
     */
    data?: string;
}
/**
 * @generated from protobuf message resources.audit.AuditEntryMeta
 */
export interface AuditEntryMeta {
    /**
     * @generated from protobuf field: map<string, string> meta = 1
     */
    meta: {
        [key: string]: string;
    };
}
/**
 * @generated from protobuf enum resources.audit.EventAction
 */
export enum EventAction {
    /**
     * @generated from protobuf enum value: EVENT_ACTION_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * EVENT_ACTION_ERRORED (previously EVENT_TYPE_ERRORED) has been moved to EventResult enum.
     *
     * @generated from protobuf enum value: EVENT_ACTION_VIEWED = 2;
     */
    VIEWED = 2,
    /**
     * @generated from protobuf enum value: EVENT_ACTION_CREATED = 3;
     */
    CREATED = 3,
    /**
     * @generated from protobuf enum value: EVENT_ACTION_UPDATED = 4;
     */
    UPDATED = 4,
    /**
     * @generated from protobuf enum value: EVENT_ACTION_DELETED = 5;
     */
    DELETED = 5
}
/**
 * @generated from protobuf enum resources.audit.EventResult
 */
export enum EventResult {
    /**
     * @generated from protobuf enum value: EVENT_RESULT_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: EVENT_RESULT_SUCCEEDED = 1;
     */
    SUCCEEDED = 1,
    /**
     * @generated from protobuf enum value: EVENT_RESULT_FAILED = 2;
     */
    FAILED = 2,
    /**
     * @generated from protobuf enum value: EVENT_RESULT_ERRORED = 3;
     */
    ERRORED = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class AuditEntry$Type extends MessageType<AuditEntry> {
    constructor() {
        super("resources.audit.AuditEntry", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "user", kind: "message", T: () => UserShort },
            { no: 5, name: "user_job", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "target_user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "target_user", kind: "message", T: () => UserShort },
            { no: 8, name: "target_user_job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "service", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "method", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "action", kind: "enum", T: () => ["resources.audit.EventAction", EventAction, "EVENT_ACTION_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 12, name: "result", kind: "enum", T: () => ["resources.audit.EventResult", EventResult, "EVENT_RESULT_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 13, name: "meta", kind: "message", T: () => AuditEntryMeta },
            { no: 14, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuditEntry>): AuditEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.userId = 0;
        message.userJob = "";
        message.service = "";
        message.method = "";
        message.action = 0;
        message.result = 0;
        if (value !== undefined)
            reflectionMergePartial<AuditEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuditEntry): AuditEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 4:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string user_job */ 5:
                    message.userJob = reader.string();
                    break;
                case /* optional int32 target_user_id */ 6:
                    message.targetUserId = reader.int32();
                    break;
                case /* optional resources.users.UserShort target_user */ 7:
                    message.targetUser = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.targetUser);
                    break;
                case /* optional string target_user_job */ 8:
                    message.targetUserJob = reader.string();
                    break;
                case /* string service */ 9:
                    message.service = reader.string();
                    break;
                case /* string method */ 10:
                    message.method = reader.string();
                    break;
                case /* resources.audit.EventAction action */ 11:
                    message.action = reader.int32();
                    break;
                case /* resources.audit.EventResult result */ 12:
                    message.result = reader.int32();
                    break;
                case /* optional resources.audit.AuditEntryMeta meta */ 13:
                    message.meta = AuditEntryMeta.internalBinaryRead(reader, reader.uint32(), options, message.meta);
                    break;
                case /* optional string data */ 14:
                    message.data = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuditEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 4; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string user_job = 5; */
        if (message.userJob !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.userJob);
        /* optional int32 target_user_id = 6; */
        if (message.targetUserId !== undefined)
            writer.tag(6, WireType.Varint).int32(message.targetUserId);
        /* optional resources.users.UserShort target_user = 7; */
        if (message.targetUser)
            UserShort.internalBinaryWrite(message.targetUser, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional string target_user_job = 8; */
        if (message.targetUserJob !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.targetUserJob);
        /* string service = 9; */
        if (message.service !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.service);
        /* string method = 10; */
        if (message.method !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.method);
        /* resources.audit.EventAction action = 11; */
        if (message.action !== 0)
            writer.tag(11, WireType.Varint).int32(message.action);
        /* resources.audit.EventResult result = 12; */
        if (message.result !== 0)
            writer.tag(12, WireType.Varint).int32(message.result);
        /* optional resources.audit.AuditEntryMeta meta = 13; */
        if (message.meta)
            AuditEntryMeta.internalBinaryWrite(message.meta, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional string data = 14; */
        if (message.data !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.audit.AuditEntry
 */
export const AuditEntry = new AuditEntry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuditEntryMeta$Type extends MessageType<AuditEntryMeta> {
    constructor() {
        super("resources.audit.AuditEntryMeta", [
            { no: 1, name: "meta", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 9 /*ScalarType.STRING*/ } }
        ], { "codegen.dbscanner.dbscanner": { enabled: true } });
    }
    create(value?: PartialMessage<AuditEntryMeta>): AuditEntryMeta {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.meta = {};
        if (value !== undefined)
            reflectionMergePartial<AuditEntryMeta>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuditEntryMeta): AuditEntryMeta {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, string> meta */ 1:
                    this.binaryReadMap1(message.meta, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: AuditEntryMeta["meta"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof AuditEntryMeta["meta"] | undefined, val: AuditEntryMeta["meta"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.string();
                    break;
                default: throw new globalThis.Error("unknown map entry field for resources.audit.AuditEntryMeta.meta");
            }
        }
        map[key ?? ""] = val ?? "";
    }
    internalBinaryWrite(message: AuditEntryMeta, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, string> meta = 1; */
        for (let k of globalThis.Object.keys(message.meta))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.LengthDelimited).string(message.meta[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.audit.AuditEntryMeta
 */
export const AuditEntryMeta = new AuditEntryMeta$Type();
