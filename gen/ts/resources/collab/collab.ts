// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/collab/collab.proto" (package "resources.collab", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message resources.collab.ClientPacket
 */
export interface ClientPacket {
    /**
     * @generated from protobuf oneof: msg
     */
    msg: {
        oneofKind: "hello";
        /**
         * Must be the first message
         *
         * @generated from protobuf field: resources.collab.CollabHello hello = 1;
         */
        hello: CollabHello;
    } | {
        oneofKind: "yjsUpdate";
        /**
         * @generated from protobuf field: resources.collab.YjsUpdate yjs_update = 2;
         */
        yjsUpdate: YjsUpdate;
    } | {
        oneofKind: "awareness";
        /**
         * @generated from protobuf field: resources.collab.AwarenessPing awareness = 3;
         */
        awareness: AwarenessPing;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.collab.CollabHello
 */
export interface CollabHello {
    /**
     * @generated from protobuf field: uint64 target_id = 1;
     */
    targetId: number;
}
/**
 * @generated from protobuf message resources.collab.YjsUpdate
 */
export interface YjsUpdate {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message resources.collab.AwarenessPing
 */
export interface AwarenessPing {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message resources.collab.ServerPacket
 */
export interface ServerPacket {
    /**
     * Who generated this packet (same ID used in awareness)
     *
     * @generated from protobuf field: uint64 sender_id = 1;
     */
    senderId: number;
    /**
     * @generated from protobuf oneof: msg
     */
    msg: {
        oneofKind: "clientId";
        /**
         * @generated from protobuf field: uint64 client_id = 2;
         */
        clientId: number;
    } | {
        oneofKind: "yjsUpdate";
        /**
         * @generated from protobuf field: resources.collab.YjsUpdate yjs_update = 3;
         */
        yjsUpdate: YjsUpdate;
    } | {
        oneofKind: "awareness";
        /**
         * @generated from protobuf field: resources.collab.AwarenessPing awareness = 4;
         */
        awareness: AwarenessPing;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum resources.collab.ClientRole
 */
export enum ClientRole {
    /**
     * @generated from protobuf enum value: CLIENT_ROLE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CLIENT_ROLE_READER = 1;
     */
    READER = 1,
    /**
     * @generated from protobuf enum value: CLIENT_ROLE_WRITER = 2;
     */
    WRITER = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ClientPacket$Type extends MessageType<ClientPacket> {
    constructor() {
        super("resources.collab.ClientPacket", [
            { no: 1, name: "hello", kind: "message", oneof: "msg", T: () => CollabHello },
            { no: 2, name: "yjs_update", kind: "message", oneof: "msg", T: () => YjsUpdate },
            { no: 3, name: "awareness", kind: "message", oneof: "msg", T: () => AwarenessPing }
        ]);
    }
    create(value?: PartialMessage<ClientPacket>): ClientPacket {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.msg = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ClientPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientPacket): ClientPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.collab.CollabHello hello */ 1:
                    message.msg = {
                        oneofKind: "hello",
                        hello: CollabHello.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).hello)
                    };
                    break;
                case /* resources.collab.YjsUpdate yjs_update */ 2:
                    message.msg = {
                        oneofKind: "yjsUpdate",
                        yjsUpdate: YjsUpdate.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).yjsUpdate)
                    };
                    break;
                case /* resources.collab.AwarenessPing awareness */ 3:
                    message.msg = {
                        oneofKind: "awareness",
                        awareness: AwarenessPing.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).awareness)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.collab.CollabHello hello = 1; */
        if (message.msg.oneofKind === "hello")
            CollabHello.internalBinaryWrite(message.msg.hello, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.collab.YjsUpdate yjs_update = 2; */
        if (message.msg.oneofKind === "yjsUpdate")
            YjsUpdate.internalBinaryWrite(message.msg.yjsUpdate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.collab.AwarenessPing awareness = 3; */
        if (message.msg.oneofKind === "awareness")
            AwarenessPing.internalBinaryWrite(message.msg.awareness, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.collab.ClientPacket
 */
export const ClientPacket = new ClientPacket$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CollabHello$Type extends MessageType<CollabHello> {
    constructor() {
        super("resources.collab.CollabHello", [
            { no: 1, name: "target_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { uint64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<CollabHello>): CollabHello {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.targetId = 0;
        if (value !== undefined)
            reflectionMergePartial<CollabHello>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollabHello): CollabHello {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 target_id */ 1:
                    message.targetId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollabHello, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 target_id = 1; */
        if (message.targetId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.targetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.collab.CollabHello
 */
export const CollabHello = new CollabHello$Type();
// @generated message type with reflection information, may provide speed optimized methods
class YjsUpdate$Type extends MessageType<YjsUpdate> {
    constructor() {
        super("resources.collab.YjsUpdate", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<YjsUpdate>): YjsUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<YjsUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: YjsUpdate): YjsUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: YjsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.collab.YjsUpdate
 */
export const YjsUpdate = new YjsUpdate$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AwarenessPing$Type extends MessageType<AwarenessPing> {
    constructor() {
        super("resources.collab.AwarenessPing", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<AwarenessPing>): AwarenessPing {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<AwarenessPing>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AwarenessPing): AwarenessPing {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AwarenessPing, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.collab.AwarenessPing
 */
export const AwarenessPing = new AwarenessPing$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerPacket$Type extends MessageType<ServerPacket> {
    constructor() {
        super("resources.collab.ServerPacket", [
            { no: 1, name: "sender_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { uint64: { gt: "0" } } } },
            { no: 2, name: "client_id", kind: "scalar", oneof: "msg", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "yjs_update", kind: "message", oneof: "msg", T: () => YjsUpdate },
            { no: 4, name: "awareness", kind: "message", oneof: "msg", T: () => AwarenessPing }
        ]);
    }
    create(value?: PartialMessage<ServerPacket>): ServerPacket {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderId = 0;
        message.msg = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ServerPacket>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerPacket): ServerPacket {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 sender_id */ 1:
                    message.senderId = reader.uint64().toNumber();
                    break;
                case /* uint64 client_id */ 2:
                    message.msg = {
                        oneofKind: "clientId",
                        clientId: reader.uint64().toNumber()
                    };
                    break;
                case /* resources.collab.YjsUpdate yjs_update */ 3:
                    message.msg = {
                        oneofKind: "yjsUpdate",
                        yjsUpdate: YjsUpdate.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).yjsUpdate)
                    };
                    break;
                case /* resources.collab.AwarenessPing awareness */ 4:
                    message.msg = {
                        oneofKind: "awareness",
                        awareness: AwarenessPing.internalBinaryRead(reader, reader.uint32(), options, (message.msg as any).awareness)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 sender_id = 1; */
        if (message.senderId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.senderId);
        /* uint64 client_id = 2; */
        if (message.msg.oneofKind === "clientId")
            writer.tag(2, WireType.Varint).uint64(message.msg.clientId);
        /* resources.collab.YjsUpdate yjs_update = 3; */
        if (message.msg.oneofKind === "yjsUpdate")
            YjsUpdate.internalBinaryWrite(message.msg.yjsUpdate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.collab.AwarenessPing awareness = 4; */
        if (message.msg.oneofKind === "awareness")
            AwarenessPing.internalBinaryWrite(message.msg.awareness, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.collab.ServerPacket
 */
export const ServerPacket = new ServerPacket$Type();
