// @generated by protobuf-ts 2.9.6 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/jobs/conduct.proto" (package "resources.jobs", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Colleague } from "./colleagues";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.jobs.ConductEntry
 */
export interface ConductEntry {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number; // @gotags: sql:"primary_key" alias:"id"
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2;
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3;
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: string job = 4;
     */
    job: string;
    /**
     * @generated from protobuf field: resources.jobs.ConductType type = 5;
     */
    type: ConductType;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string message = 6;
     */
    message: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp expires_at = 7;
     */
    expiresAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 target_user_id = 8;
     */
    targetUserId: number;
    /**
     * @generated from protobuf field: optional resources.jobs.Colleague target_user = 9;
     */
    targetUser?: Colleague; // @gotags: alias:"target_user"
    /**
     * @generated from protobuf field: int32 creator_id = 10;
     */
    creatorId: number;
    /**
     * @generated from protobuf field: optional resources.jobs.Colleague creator = 11;
     */
    creator?: Colleague; // @gotags: alias:"creator"
}
/**
 * @generated from protobuf enum resources.jobs.ConductType
 */
export enum ConductType {
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_NEUTRAL = 1;
     */
    NEUTRAL = 1,
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_POSITIVE = 2;
     */
    POSITIVE = 2,
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_NEGATIVE = 3;
     */
    NEGATIVE = 3,
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_WARNING = 4;
     */
    WARNING = 4,
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_SUSPENSION = 5;
     */
    SUSPENSION = 5,
    /**
     * @generated from protobuf enum value: CONDUCT_TYPE_NOTE = 6;
     */
    NOTE = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class ConductEntry$Type extends MessageType<ConductEntry> {
    constructor() {
        super("resources.jobs.ConductEntry", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 5, name: "type", kind: "enum", T: () => ["resources.jobs.ConductType", ConductType, "CONDUCT_TYPE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 6, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "2048" } } } },
            { no: 7, name: "expires_at", kind: "message", T: () => Timestamp },
            { no: 8, name: "target_user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 9, name: "target_user", kind: "message", T: () => Colleague },
            { no: 10, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 11, name: "creator", kind: "message", T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<ConductEntry>): ConductEntry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.type = 0;
        message.message = "";
        message.targetUserId = 0;
        message.creatorId = 0;
        if (value !== undefined)
            reflectionMergePartial<ConductEntry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConductEntry): ConductEntry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* string job */ 4:
                    message.job = reader.string();
                    break;
                case /* resources.jobs.ConductType type */ 5:
                    message.type = reader.int32();
                    break;
                case /* string message */ 6:
                    message.message = reader.string();
                    break;
                case /* optional resources.timestamp.Timestamp expires_at */ 7:
                    message.expiresAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.expiresAt);
                    break;
                case /* int32 target_user_id */ 8:
                    message.targetUserId = reader.int32();
                    break;
                case /* optional resources.jobs.Colleague target_user */ 9:
                    message.targetUser = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.targetUser);
                    break;
                case /* int32 creator_id */ 10:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.jobs.Colleague creator */ 11:
                    message.creator = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConductEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string job = 4; */
        if (message.job !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.job);
        /* resources.jobs.ConductType type = 5; */
        if (message.type !== 0)
            writer.tag(5, WireType.Varint).int32(message.type);
        /* string message = 6; */
        if (message.message !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.message);
        /* optional resources.timestamp.Timestamp expires_at = 7; */
        if (message.expiresAt)
            Timestamp.internalBinaryWrite(message.expiresAt, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* int32 target_user_id = 8; */
        if (message.targetUserId !== 0)
            writer.tag(8, WireType.Varint).int32(message.targetUserId);
        /* optional resources.jobs.Colleague target_user = 9; */
        if (message.targetUser)
            Colleague.internalBinaryWrite(message.targetUser, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int32 creator_id = 10; */
        if (message.creatorId !== 0)
            writer.tag(10, WireType.Varint).int32(message.creatorId);
        /* optional resources.jobs.Colleague creator = 11; */
        if (message.creator)
            Colleague.internalBinaryWrite(message.creator, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.ConductEntry
 */
export const ConductEntry = new ConductEntry$Type();
