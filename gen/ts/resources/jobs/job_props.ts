// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/jobs/job_props.proto" (package "resources.jobs", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { JobSettings } from "./job_settings";
import { File } from "../file/file";
import { DiscordSyncChanges } from "./job_settings";
import { DiscordSyncSettings } from "./job_settings";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.jobs.JobProps
 */
export interface JobProps {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 2
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 3
     */
    deletedAt?: Timestamp;
    /**
     * @generated from protobuf field: string livemap_marker_color = 4
     */
    livemapMarkerColor: string;
    /**
     * @generated from protobuf field: resources.jobs.QuickButtons quick_buttons = 5
     */
    quickButtons?: QuickButtons;
    /**
     * @generated from protobuf field: optional string radio_frequency = 6
     */
    radioFrequency?: string;
    /**
     * @generated from protobuf field: optional string discord_guild_id = 7
     */
    discordGuildId?: string;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp discord_last_sync = 8
     */
    discordLastSync?: Timestamp;
    /**
     * @generated from protobuf field: resources.jobs.DiscordSyncSettings discord_sync_settings = 9
     */
    discordSyncSettings?: DiscordSyncSettings;
    /**
     * @generated from protobuf field: optional resources.jobs.DiscordSyncChanges discord_sync_changes = 10
     */
    discordSyncChanges?: DiscordSyncChanges;
    /**
     * @generated from protobuf field: optional string motd = 11
     */
    motd?: string;
    /**
     * @generated from protobuf field: optional uint64 logo_file_id = 12
     */
    logoFileId?: number;
    /**
     * @generated from protobuf field: optional resources.file.File logo_file = 13
     */
    logoFile?: File;
    /**
     * @generated from protobuf field: resources.jobs.JobSettings settings = 14
     */
    settings?: JobSettings;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.jobs.QuickButtons
 */
export interface QuickButtons {
    /**
     * @generated from protobuf field: bool penalty_calculator = 1
     */
    penaltyCalculator: boolean;
    /**
     * @generated from protobuf field: bool math_calculator = 3
     */
    mathCalculator: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class JobProps$Type extends MessageType<JobProps> {
    constructor() {
        super("resources.jobs.JobProps", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 2, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 3, name: "deleted_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "livemap_marker_color", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { len: "7", pattern: "^#[A-Fa-f0-9]{6}$" } } } },
            { no: 5, name: "quick_buttons", kind: "message", T: () => QuickButtons },
            { no: 6, name: "radio_frequency", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "24" } } } },
            { no: 7, name: "discord_guild_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "discord_last_sync", kind: "message", T: () => Timestamp },
            { no: 9, name: "discord_sync_settings", kind: "message", T: () => DiscordSyncSettings },
            { no: 10, name: "discord_sync_changes", kind: "message", T: () => DiscordSyncChanges },
            { no: 11, name: "motd", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "1024" } } } },
            { no: 12, name: "logo_file_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 13, name: "logo_file", kind: "message", T: () => File, options: { "tagger.tags": "alias:\"logo_file\"" } },
            { no: 14, name: "settings", kind: "message", T: () => JobSettings }
        ]);
    }
    create(value?: PartialMessage<JobProps>): JobProps {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        message.livemapMarkerColor = "";
        if (value !== undefined)
            reflectionMergePartial<JobProps>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JobProps): JobProps {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 2:
                    message.jobLabel = reader.string();
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 3:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                case /* string livemap_marker_color */ 4:
                    message.livemapMarkerColor = reader.string();
                    break;
                case /* resources.jobs.QuickButtons quick_buttons */ 5:
                    message.quickButtons = QuickButtons.internalBinaryRead(reader, reader.uint32(), options, message.quickButtons);
                    break;
                case /* optional string radio_frequency */ 6:
                    message.radioFrequency = reader.string();
                    break;
                case /* optional string discord_guild_id */ 7:
                    message.discordGuildId = reader.string();
                    break;
                case /* optional resources.timestamp.Timestamp discord_last_sync */ 8:
                    message.discordLastSync = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.discordLastSync);
                    break;
                case /* resources.jobs.DiscordSyncSettings discord_sync_settings */ 9:
                    message.discordSyncSettings = DiscordSyncSettings.internalBinaryRead(reader, reader.uint32(), options, message.discordSyncSettings);
                    break;
                case /* optional resources.jobs.DiscordSyncChanges discord_sync_changes */ 10:
                    message.discordSyncChanges = DiscordSyncChanges.internalBinaryRead(reader, reader.uint32(), options, message.discordSyncChanges);
                    break;
                case /* optional string motd */ 11:
                    message.motd = reader.string();
                    break;
                case /* optional uint64 logo_file_id */ 12:
                    message.logoFileId = reader.uint64().toNumber();
                    break;
                case /* optional resources.file.File logo_file */ 13:
                    message.logoFile = File.internalBinaryRead(reader, reader.uint32(), options, message.logoFile);
                    break;
                case /* resources.jobs.JobSettings settings */ 14:
                    message.settings = JobSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JobProps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 2; */
        if (message.jobLabel !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.jobLabel);
        /* optional resources.timestamp.Timestamp deleted_at = 3; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* string livemap_marker_color = 4; */
        if (message.livemapMarkerColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.livemapMarkerColor);
        /* resources.jobs.QuickButtons quick_buttons = 5; */
        if (message.quickButtons)
            QuickButtons.internalBinaryWrite(message.quickButtons, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional string radio_frequency = 6; */
        if (message.radioFrequency !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.radioFrequency);
        /* optional string discord_guild_id = 7; */
        if (message.discordGuildId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.discordGuildId);
        /* optional resources.timestamp.Timestamp discord_last_sync = 8; */
        if (message.discordLastSync)
            Timestamp.internalBinaryWrite(message.discordLastSync, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* resources.jobs.DiscordSyncSettings discord_sync_settings = 9; */
        if (message.discordSyncSettings)
            DiscordSyncSettings.internalBinaryWrite(message.discordSyncSettings, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.jobs.DiscordSyncChanges discord_sync_changes = 10; */
        if (message.discordSyncChanges)
            DiscordSyncChanges.internalBinaryWrite(message.discordSyncChanges, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional string motd = 11; */
        if (message.motd !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.motd);
        /* optional uint64 logo_file_id = 12; */
        if (message.logoFileId !== undefined)
            writer.tag(12, WireType.Varint).uint64(message.logoFileId);
        /* optional resources.file.File logo_file = 13; */
        if (message.logoFile)
            File.internalBinaryWrite(message.logoFile, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* resources.jobs.JobSettings settings = 14; */
        if (message.settings)
            JobSettings.internalBinaryWrite(message.settings, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.JobProps
 */
export const JobProps = new JobProps$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickButtons$Type extends MessageType<QuickButtons> {
    constructor() {
        super("resources.jobs.QuickButtons", [
            { no: 1, name: "penalty_calculator", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "math_calculator", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<QuickButtons>): QuickButtons {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.penaltyCalculator = false;
        message.mathCalculator = false;
        if (value !== undefined)
            reflectionMergePartial<QuickButtons>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuickButtons): QuickButtons {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool penalty_calculator */ 1:
                    message.penaltyCalculator = reader.bool();
                    break;
                case /* bool math_calculator */ 3:
                    message.mathCalculator = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QuickButtons, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool penalty_calculator = 1; */
        if (message.penaltyCalculator !== false)
            writer.tag(1, WireType.Varint).bool(message.penaltyCalculator);
        /* bool math_calculator = 3; */
        if (message.mathCalculator !== false)
            writer.tag(3, WireType.Varint).bool(message.mathCalculator);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.jobs.QuickButtons
 */
export const QuickButtons = new QuickButtons$Type();
