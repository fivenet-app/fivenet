// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/documents/signing.proto" (package "resources.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DocumentShort } from "./documents";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.documents.SignatureTypes
 */
export interface SignatureTypes {
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureType types = 1
     */
    types: SignatureType[];
}
/**
 * @generated from protobuf message resources.documents.SignaturePolicy
 */
export interface SignaturePolicy {
    /**
     * @generated from protobuf field: int64 document_id = 3
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 4
     */
    snapshotDate?: Timestamp;
    /**
     * @generated from protobuf field: resources.documents.SignatureBindingMode binding_mode = 5
     */
    bindingMode: SignatureBindingMode;
    /**
     * @generated from protobuf field: resources.documents.SignatureRuleKind rule_kind = 6
     */
    ruleKind: SignatureRuleKind;
    /**
     * @generated from protobuf field: optional int32 required_count = 7
     */
    requiredCount?: number;
    /**
     * @generated from protobuf field: resources.documents.SignatureTypes allowed_types = 8
     */
    allowedTypes?: SignatureTypes;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp due_at = 9
     */
    dueAt?: Timestamp;
    /**
     * @generated from protobuf field: int32 assigned_count = 10
     */
    assignedCount: number;
    /**
     * @generated from protobuf field: int32 approved_count = 11
     */
    approvedCount: number;
    /**
     * @generated from protobuf field: int32 declined_count = 12
     */
    declinedCount: number;
    /**
     * @generated from protobuf field: int32 pending_count = 13
     */
    pendingCount: number;
    /**
     * @generated from protobuf field: bool any_declined = 14
     */
    anyDeclined: boolean;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp started_at = 15
     */
    startedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp completed_at = 16
     */
    completedAt?: Timestamp;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 17
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 18
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp deleted_at = 19
     */
    deletedAt?: Timestamp;
}
/**
 * @generated from protobuf message resources.documents.SignatureTask
 */
export interface SignatureTask {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: int64 document_id = 3
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 4
     */
    snapshotDate?: Timestamp;
    /**
     * Who is the task for? 1=USER, 2=JOB
     *
     * @generated from protobuf field: resources.documents.SignatureAssigneeKind assignee_kind = 5
     */
    assigneeKind: SignatureAssigneeKind;
    /**
     * USER assignment
     *
     * @generated from protobuf field: optional int32 user_id = 6
     */
    userId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 7
     */
    user?: UserShort;
    /**
     * JOB assignment (claimable by any eligible user)
     *
     * @generated from protobuf field: optional string job = 8
     */
    job?: string;
    /**
     * @generated from protobuf field: optional string job_label = 9
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: optional int32 minimum_grade = 10
     */
    minimumGrade?: number;
    /**
     * @generated from protobuf field: optional string job_grade_label = 11
     */
    jobGradeLabel?: string;
    /**
     * "Leadership", "Counterparty Rep"
     *
     * @generated from protobuf field: optional string label = 12
     */
    label?: string;
    /**
     * >=1; meaningful only for Job tasks; always 1 for User
     *
     * @generated from protobuf field: int32 slot_no = 13
     */
    slotNo: number;
    /**
     * @generated from protobuf field: resources.documents.SignatureTaskStatus status = 14
     */
    status: SignatureTaskStatus;
    /**
     * @generated from protobuf field: optional string comment = 15
     */
    comment?: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 16
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp completed_at = 17
     */
    completedAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp due_at = 18
     */
    dueAt?: Timestamp;
    /**
     * @generated from protobuf field: optional int64 signature_id = 19
     */
    signatureId?: number;
    /**
     * @generated from protobuf field: int32 creator_id = 20
     */
    creatorId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 21
     */
    creator?: UserShort;
    /**
     * @generated from protobuf field: string creator_job = 22
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: optional string creator_job_label = 23
     */
    creatorJobLabel?: string;
    /**
     * @generated from protobuf field: optional resources.documents.DocumentShort document = 24
     */
    document?: DocumentShort;
}
/**
 * @generated from protobuf message resources.documents.Signature
 */
export interface Signature {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: int64 document_id = 3
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 4
     */
    snapshotDate?: Timestamp;
    /**
     * Link to originating task (if any)
     *
     * @generated from protobuf field: optional int64 task_id = 5
     */
    taskId?: number;
    /**
     * @generated from protobuf field: optional int32 user_id = 6
     */
    userId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 7
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: optional string user_job = 8
     */
    userJob?: string;
    /**
     * @generated from protobuf field: optional string user_job_label = 9
     */
    userJobLabel?: string;
    /**
     * @generated from protobuf field: optional int32 user_grade = 10
     */
    userGrade?: number;
    /**
     * @generated from protobuf field: optional string user_grade_label = 11
     */
    userGradeLabel?: string;
    /**
     * @generated from protobuf field: resources.documents.SignatureType type = 12
     */
    type: SignatureType;
    /**
     * SVG path, typed preview, stamp fill, etc.
     *
     * @generated from protobuf field: string payload_svg = 13
     */
    payloadSvg: string;
    /**
     * If type == STAMP
     *
     * @generated from protobuf field: optional int64 stamp_id = 14
     */
    stampId?: number;
    /**
     * @generated from protobuf field: resources.documents.SignatureStatus status = 15
     */
    status: SignatureStatus;
    /**
     * @generated from protobuf field: optional string comment = 16
     */
    comment?: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 17
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp revoked_at = 18
     */
    revokedAt?: Timestamp;
}
/**
 * @generated from protobuf enum resources.documents.SignatureBindingMode
 */
export enum SignatureBindingMode {
    /**
     * @generated from protobuf enum value: SIGNATURE_BINDING_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Stays but marked 'signed on X'
     *
     * @generated from protobuf enum value: SIGNATURE_BINDING_MODE_NONBINDING = 1;
     */
    NONBINDING = 1,
    /**
     * Invalidates on content edits
     *
     * @generated from protobuf enum value: SIGNATURE_BINDING_MODE_BINDING = 2;
     */
    BINDING = 2
}
/**
 * @generated from protobuf enum resources.documents.SignatureRuleKind
 */
export enum SignatureRuleKind {
    /**
     * @generated from protobuf enum value: SIGNATURE_RULE_KIND_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_RULE_KIND_REQUIRE_ALL = 1;
     */
    REQUIRE_ALL = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_RULE_KIND_QUORUM_ANY = 2;
     */
    QUORUM_ANY = 2
}
/**
 * @generated from protobuf enum resources.documents.SignatureType
 */
export enum SignatureType {
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_FREEHAND = 1;
     */
    FREEHAND = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_TYPED = 2;
     */
    TYPED = 2,
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_STAMP = 3;
     */
    STAMP = 3
}
/**
 * @generated from protobuf enum resources.documents.SignatureAssigneeKind
 */
export enum SignatureAssigneeKind {
    /**
     * @generated from protobuf enum value: SIGNATURE_ASSIGNEE_KIND_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_ASSIGNEE_KIND_USER = 1;
     */
    USER = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_ASSIGNEE_KIND_JOB_GRADE = 2;
     */
    JOB_GRADE = 2
}
/**
 * @generated from protobuf enum resources.documents.SignatureTaskStatus
 */
export enum SignatureTaskStatus {
    /**
     * @generated from protobuf enum value: SIGNATURE_TASK_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_TASK_STATUS_PENDING = 1;
     */
    PENDING = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_TASK_STATUS_SIGNED = 2;
     */
    SIGNED = 2,
    /**
     * @generated from protobuf enum value: SIGNATURE_TASK_STATUS_DECLINED = 3;
     */
    DECLINED = 3,
    /**
     * @generated from protobuf enum value: SIGNATURE_TASK_STATUS_EXPIRED = 4;
     */
    EXPIRED = 4,
    /**
     * @generated from protobuf enum value: SIGNATURE_TASK_STATUS_COMPLETED = 5;
     */
    COMPLETED = 5
}
/**
 * @generated from protobuf enum resources.documents.SignatureStatus
 */
export enum SignatureStatus {
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_VALID = 1;
     */
    VALID = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_DECLINED = 2;
     */
    DECLINED = 2,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_REVOKED = 3;
     */
    REVOKED = 3,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_INVALID = 4;
     */
    INVALID = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class SignatureTypes$Type extends MessageType<SignatureTypes> {
    constructor() {
        super("resources.documents.SignatureTypes", [
            { no: 1, name: "types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"], options: { "buf.validate.field": { repeated: { maxItems: "3", items: { enum: { definedOnly: true } } } } } }
        ], { "codegen.dbscanner.dbscanner": { enabled: true } });
    }
    create(value?: PartialMessage<SignatureTypes>): SignatureTypes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.types = [];
        if (value !== undefined)
            reflectionMergePartial<SignatureTypes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureTypes): SignatureTypes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.SignatureType types */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.types.push(reader.int32());
                    else
                        message.types.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureTypes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.SignatureType types = 1; */
        if (message.types.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.types.length; i++)
                writer.int32(message.types[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.SignatureTypes
 */
export const SignatureTypes = new SignatureTypes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignaturePolicy$Type extends MessageType<SignaturePolicy> {
    constructor() {
        super("resources.documents.SignaturePolicy", [
            { no: 3, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "snapshot_date", kind: "message", T: () => Timestamp },
            { no: 5, name: "binding_mode", kind: "enum", T: () => ["resources.documents.SignatureBindingMode", SignatureBindingMode, "SIGNATURE_BINDING_MODE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 6, name: "rule_kind", kind: "enum", T: () => ["resources.documents.SignatureRuleKind", SignatureRuleKind, "SIGNATURE_RULE_KIND_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 7, name: "required_count", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gte: 1 } } } },
            { no: 8, name: "allowed_types", kind: "message", T: () => SignatureTypes },
            { no: 9, name: "due_at", kind: "message", T: () => Timestamp },
            { no: 10, name: "assigned_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "approved_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "declined_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "pending_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "any_declined", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "started_at", kind: "message", T: () => Timestamp },
            { no: 16, name: "completed_at", kind: "message", T: () => Timestamp },
            { no: 17, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 18, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 19, name: "deleted_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<SignaturePolicy>): SignaturePolicy {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.bindingMode = 0;
        message.ruleKind = 0;
        message.assignedCount = 0;
        message.approvedCount = 0;
        message.declinedCount = 0;
        message.pendingCount = 0;
        message.anyDeclined = false;
        if (value !== undefined)
            reflectionMergePartial<SignaturePolicy>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignaturePolicy): SignaturePolicy {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 3:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 4:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                case /* resources.documents.SignatureBindingMode binding_mode */ 5:
                    message.bindingMode = reader.int32();
                    break;
                case /* resources.documents.SignatureRuleKind rule_kind */ 6:
                    message.ruleKind = reader.int32();
                    break;
                case /* optional int32 required_count */ 7:
                    message.requiredCount = reader.int32();
                    break;
                case /* resources.documents.SignatureTypes allowed_types */ 8:
                    message.allowedTypes = SignatureTypes.internalBinaryRead(reader, reader.uint32(), options, message.allowedTypes);
                    break;
                case /* optional resources.timestamp.Timestamp due_at */ 9:
                    message.dueAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dueAt);
                    break;
                case /* int32 assigned_count */ 10:
                    message.assignedCount = reader.int32();
                    break;
                case /* int32 approved_count */ 11:
                    message.approvedCount = reader.int32();
                    break;
                case /* int32 declined_count */ 12:
                    message.declinedCount = reader.int32();
                    break;
                case /* int32 pending_count */ 13:
                    message.pendingCount = reader.int32();
                    break;
                case /* bool any_declined */ 14:
                    message.anyDeclined = reader.bool();
                    break;
                case /* optional resources.timestamp.Timestamp started_at */ 15:
                    message.startedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.startedAt);
                    break;
                case /* optional resources.timestamp.Timestamp completed_at */ 16:
                    message.completedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completedAt);
                    break;
                case /* resources.timestamp.Timestamp created_at */ 17:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 18:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* optional resources.timestamp.Timestamp deleted_at */ 19:
                    message.deletedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.deletedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignaturePolicy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 3; */
        if (message.documentId !== 0)
            writer.tag(3, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 4; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.SignatureBindingMode binding_mode = 5; */
        if (message.bindingMode !== 0)
            writer.tag(5, WireType.Varint).int32(message.bindingMode);
        /* resources.documents.SignatureRuleKind rule_kind = 6; */
        if (message.ruleKind !== 0)
            writer.tag(6, WireType.Varint).int32(message.ruleKind);
        /* optional int32 required_count = 7; */
        if (message.requiredCount !== undefined)
            writer.tag(7, WireType.Varint).int32(message.requiredCount);
        /* resources.documents.SignatureTypes allowed_types = 8; */
        if (message.allowedTypes)
            SignatureTypes.internalBinaryWrite(message.allowedTypes, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp due_at = 9; */
        if (message.dueAt)
            Timestamp.internalBinaryWrite(message.dueAt, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* int32 assigned_count = 10; */
        if (message.assignedCount !== 0)
            writer.tag(10, WireType.Varint).int32(message.assignedCount);
        /* int32 approved_count = 11; */
        if (message.approvedCount !== 0)
            writer.tag(11, WireType.Varint).int32(message.approvedCount);
        /* int32 declined_count = 12; */
        if (message.declinedCount !== 0)
            writer.tag(12, WireType.Varint).int32(message.declinedCount);
        /* int32 pending_count = 13; */
        if (message.pendingCount !== 0)
            writer.tag(13, WireType.Varint).int32(message.pendingCount);
        /* bool any_declined = 14; */
        if (message.anyDeclined !== false)
            writer.tag(14, WireType.Varint).bool(message.anyDeclined);
        /* optional resources.timestamp.Timestamp started_at = 15; */
        if (message.startedAt)
            Timestamp.internalBinaryWrite(message.startedAt, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp completed_at = 16; */
        if (message.completedAt)
            Timestamp.internalBinaryWrite(message.completedAt, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* resources.timestamp.Timestamp created_at = 17; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 18; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp deleted_at = 19; */
        if (message.deletedAt)
            Timestamp.internalBinaryWrite(message.deletedAt, writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.SignaturePolicy
 */
export const SignaturePolicy = new SignaturePolicy$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignatureTask$Type extends MessageType<SignatureTask> {
    constructor() {
        super("resources.documents.SignatureTask", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "snapshot_date", kind: "message", T: () => Timestamp },
            { no: 5, name: "assignee_kind", kind: "enum", T: () => ["resources.documents.SignatureAssigneeKind", SignatureAssigneeKind, "SIGNATURE_ASSIGNEE_KIND_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "user", kind: "message", T: () => UserShort },
            { no: 8, name: "job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 9, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 10, name: "minimum_grade", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "job_grade_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 12, name: "label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "120" } }, "codegen.sanitizer.sanitizer": { enabled: true, method: "StripTags" } } },
            { no: 13, name: "slot_no", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { lte: 5, gte: 1 } } } },
            { no: 14, name: "status", kind: "enum", T: () => ["resources.documents.SignatureTaskStatus", SignatureTaskStatus, "SIGNATURE_TASK_STATUS_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 15, name: "comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } }, "codegen.sanitizer.sanitizer": { enabled: true } } },
            { no: 16, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 17, name: "completed_at", kind: "message", T: () => Timestamp },
            { no: 18, name: "due_at", kind: "message", T: () => Timestamp },
            { no: 19, name: "signature_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 20, name: "creator_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 21, name: "creator", kind: "message", T: () => UserShort },
            { no: 22, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 23, name: "creator_job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "document", kind: "message", T: () => DocumentShort }
        ]);
    }
    create(value?: PartialMessage<SignatureTask>): SignatureTask {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.documentId = 0;
        message.assigneeKind = 0;
        message.slotNo = 0;
        message.status = 0;
        message.creatorId = 0;
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<SignatureTask>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureTask): SignatureTask {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 document_id */ 3:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 4:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                case /* resources.documents.SignatureAssigneeKind assignee_kind */ 5:
                    message.assigneeKind = reader.int32();
                    break;
                case /* optional int32 user_id */ 6:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 7:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional string job */ 8:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 9:
                    message.jobLabel = reader.string();
                    break;
                case /* optional int32 minimum_grade */ 10:
                    message.minimumGrade = reader.int32();
                    break;
                case /* optional string job_grade_label */ 11:
                    message.jobGradeLabel = reader.string();
                    break;
                case /* optional string label */ 12:
                    message.label = reader.string();
                    break;
                case /* int32 slot_no */ 13:
                    message.slotNo = reader.int32();
                    break;
                case /* resources.documents.SignatureTaskStatus status */ 14:
                    message.status = reader.int32();
                    break;
                case /* optional string comment */ 15:
                    message.comment = reader.string();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 16:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp completed_at */ 17:
                    message.completedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.completedAt);
                    break;
                case /* optional resources.timestamp.Timestamp due_at */ 18:
                    message.dueAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dueAt);
                    break;
                case /* optional int64 signature_id */ 19:
                    message.signatureId = reader.int64().toNumber();
                    break;
                case /* int32 creator_id */ 20:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 21:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 22:
                    message.creatorJob = reader.string();
                    break;
                case /* optional string creator_job_label */ 23:
                    message.creatorJobLabel = reader.string();
                    break;
                case /* optional resources.documents.DocumentShort document */ 24:
                    message.document = DocumentShort.internalBinaryRead(reader, reader.uint32(), options, message.document);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureTask, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 document_id = 3; */
        if (message.documentId !== 0)
            writer.tag(3, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 4; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.SignatureAssigneeKind assignee_kind = 5; */
        if (message.assigneeKind !== 0)
            writer.tag(5, WireType.Varint).int32(message.assigneeKind);
        /* optional int32 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 7; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional string job = 8; */
        if (message.job !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 9; */
        if (message.jobLabel !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.jobLabel);
        /* optional int32 minimum_grade = 10; */
        if (message.minimumGrade !== undefined)
            writer.tag(10, WireType.Varint).int32(message.minimumGrade);
        /* optional string job_grade_label = 11; */
        if (message.jobGradeLabel !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.jobGradeLabel);
        /* optional string label = 12; */
        if (message.label !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.label);
        /* int32 slot_no = 13; */
        if (message.slotNo !== 0)
            writer.tag(13, WireType.Varint).int32(message.slotNo);
        /* resources.documents.SignatureTaskStatus status = 14; */
        if (message.status !== 0)
            writer.tag(14, WireType.Varint).int32(message.status);
        /* optional string comment = 15; */
        if (message.comment !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.comment);
        /* resources.timestamp.Timestamp created_at = 16; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp completed_at = 17; */
        if (message.completedAt)
            Timestamp.internalBinaryWrite(message.completedAt, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp due_at = 18; */
        if (message.dueAt)
            Timestamp.internalBinaryWrite(message.dueAt, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 signature_id = 19; */
        if (message.signatureId !== undefined)
            writer.tag(19, WireType.Varint).int64(message.signatureId);
        /* int32 creator_id = 20; */
        if (message.creatorId !== 0)
            writer.tag(20, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 21; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(21, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 22; */
        if (message.creatorJob !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.creatorJob);
        /* optional string creator_job_label = 23; */
        if (message.creatorJobLabel !== undefined)
            writer.tag(23, WireType.LengthDelimited).string(message.creatorJobLabel);
        /* optional resources.documents.DocumentShort document = 24; */
        if (message.document)
            DocumentShort.internalBinaryWrite(message.document, writer.tag(24, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.SignatureTask
 */
export const SignatureTask = new SignatureTask$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("resources.documents.Signature", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "snapshot_date", kind: "message", T: () => Timestamp },
            { no: 5, name: "task_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "user", kind: "message", T: () => UserShort },
            { no: 8, name: "user_job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "user_job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "user_grade", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "user_grade_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "type", kind: "enum", T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 13, name: "payload_svg", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "codegen.sanitizer.sanitizer": { enabled: true, method: "SanitizeSVG" } } },
            { no: 14, name: "stamp_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 15, name: "status", kind: "enum", T: () => ["resources.documents.SignatureStatus", SignatureStatus, "SIGNATURE_STATUS_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 16, name: "comment", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "500" } }, "codegen.sanitizer.sanitizer": { enabled: true } } },
            { no: 17, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 18, name: "revoked_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Signature>): Signature {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.documentId = 0;
        message.type = 0;
        message.payloadSvg = "";
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<Signature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature): Signature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 document_id */ 3:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 4:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                case /* optional int64 task_id */ 5:
                    message.taskId = reader.int64().toNumber();
                    break;
                case /* optional int32 user_id */ 6:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 7:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional string user_job */ 8:
                    message.userJob = reader.string();
                    break;
                case /* optional string user_job_label */ 9:
                    message.userJobLabel = reader.string();
                    break;
                case /* optional int32 user_grade */ 10:
                    message.userGrade = reader.int32();
                    break;
                case /* optional string user_grade_label */ 11:
                    message.userGradeLabel = reader.string();
                    break;
                case /* resources.documents.SignatureType type */ 12:
                    message.type = reader.int32();
                    break;
                case /* string payload_svg */ 13:
                    message.payloadSvg = reader.string();
                    break;
                case /* optional int64 stamp_id */ 14:
                    message.stampId = reader.int64().toNumber();
                    break;
                case /* resources.documents.SignatureStatus status */ 15:
                    message.status = reader.int32();
                    break;
                case /* optional string comment */ 16:
                    message.comment = reader.string();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 17:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp revoked_at */ 18:
                    message.revokedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.revokedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 document_id = 3; */
        if (message.documentId !== 0)
            writer.tag(3, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 4; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 task_id = 5; */
        if (message.taskId !== undefined)
            writer.tag(5, WireType.Varint).int64(message.taskId);
        /* optional int32 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 7; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional string user_job = 8; */
        if (message.userJob !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.userJob);
        /* optional string user_job_label = 9; */
        if (message.userJobLabel !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.userJobLabel);
        /* optional int32 user_grade = 10; */
        if (message.userGrade !== undefined)
            writer.tag(10, WireType.Varint).int32(message.userGrade);
        /* optional string user_grade_label = 11; */
        if (message.userGradeLabel !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.userGradeLabel);
        /* resources.documents.SignatureType type = 12; */
        if (message.type !== 0)
            writer.tag(12, WireType.Varint).int32(message.type);
        /* string payload_svg = 13; */
        if (message.payloadSvg !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.payloadSvg);
        /* optional int64 stamp_id = 14; */
        if (message.stampId !== undefined)
            writer.tag(14, WireType.Varint).int64(message.stampId);
        /* resources.documents.SignatureStatus status = 15; */
        if (message.status !== 0)
            writer.tag(15, WireType.Varint).int32(message.status);
        /* optional string comment = 16; */
        if (message.comment !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.comment);
        /* resources.timestamp.Timestamp created_at = 17; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp revoked_at = 18; */
        if (message.revokedAt)
            Timestamp.internalBinaryWrite(message.revokedAt, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.Signature
 */
export const Signature = new Signature$Type();
