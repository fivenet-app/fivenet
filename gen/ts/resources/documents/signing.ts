// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/documents/signing.proto" (package "resources.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { UserShort } from "../users/users";
import { PartySelector } from "./approval";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.documents.SignatureRequirement
 */
export interface SignatureRequirement {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: int64 document_id = 2
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 3
     */
    createdAt?: Timestamp;
    /**
     * NULL/0 => any-order
     *
     * @generated from protobuf field: int32 sequence_order = 4
     */
    sequenceOrder: number;
    /**
     * @generated from protobuf field: bool required = 5
     */
    required: boolean;
    /**
     * "Leader", "Counterparty Rep"
     *
     * @generated from protobuf field: string label = 6
     */
    label: string;
    /**
     * @generated from protobuf field: resources.documents.PartySelector selector = 7
     */
    selector?: PartySelector;
    /**
     * @generated from protobuf field: resources.documents.BindingMode binding_mode = 8
     */
    bindingMode: BindingMode;
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureType allowed_types = 9
     */
    allowedTypes: SignatureType[];
}
/**
 * @generated from protobuf message resources.documents.Signature
 */
export interface Signature {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: int64 document_id = 2
     */
    documentId: number;
    /**
     * version_id whose hash was shown
     *
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 3
     */
    snapshotDate?: Timestamp;
    /**
     * Null/Empty for optional acknowledgements
     *
     * @generated from protobuf field: int64 requirement_id = 4
     */
    requirementId: number;
    /**
     * @generated from protobuf field: int32 user_id = 5
     */
    userId: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort user = 6
     */
    user?: UserShort;
    /**
     * @generated from protobuf field: string job = 7
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 8
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: resources.documents.SignatureType type = 9
     */
    type: SignatureType;
    /**
     * SVG path, typed preview, stamp fill, etc.
     *
     * @generated from protobuf field: string payload_json = 10
     */
    payloadJson: string;
    /**
     * if type == STAMP
     *
     * @generated from protobuf field: int64 stamp_id = 11
     */
    stampId: number;
    /**
     * @generated from protobuf field: resources.documents.SignatureStatus status = 12
     */
    status: SignatureStatus;
    /**
     * Revoke/Invalid reason
     *
     * @generated from protobuf field: string reason = 13
     */
    reason: string;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 14
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp revoked_at = 15
     */
    revokedAt?: Timestamp;
}
/**
 * @generated from protobuf message resources.documents.Stamp
 */
export interface Stamp {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string job = 2
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 3
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: int32 owner_id = 4
     */
    ownerId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 5
     */
    createdAt?: Timestamp;
    /**
     * Parameterized SVG with slots
     *
     * @generated from protobuf field: string svg_template = 6
     */
    svgTemplate: string;
    /**
     * @generated from protobuf field: resources.documents.StampAccess access = 7
     */
    access?: StampAccess;
}
/**
 * @generated from protobuf message resources.documents.StampAccess
 */
export interface StampAccess {
    /**
     * @generated from protobuf field: repeated resources.documents.StampJobAccess jobs = 1
     */
    jobs: StampJobAccess[];
}
/**
 * @generated from protobuf message resources.documents.StampJobAccess
 */
export interface StampJobAccess {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: int64 target_id = 3
     */
    targetId: number;
    /**
     * @generated from protobuf field: string job = 4
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 5
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: int32 minimum_grade = 6
     */
    minimumGrade: number;
    /**
     * @generated from protobuf field: optional string job_grade_label = 7
     */
    jobGradeLabel?: string;
    /**
     * @generated from protobuf field: resources.documents.StampAccessLevel access = 8
     */
    access: StampAccessLevel;
}
/**
 * @generated from protobuf enum resources.documents.BindingMode
 */
export enum BindingMode {
    /**
     * @generated from protobuf enum value: BINDING_MODE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Invalidates on content edits
     *
     * @generated from protobuf enum value: BINDING_MODE_BINDING = 1;
     */
    BINDING = 1,
    /**
     * Stays but marked 'signed on vX'
     *
     * @generated from protobuf enum value: BINDING_MODE_NONBINDING = 2;
     */
    NONBINDING = 2
}
/**
 * @generated from protobuf enum resources.documents.SignatureType
 */
export enum SignatureType {
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_FREEHAND = 1;
     */
    FREEHAND = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_TYPED = 2;
     */
    TYPED = 2,
    /**
     * @generated from protobuf enum value: SIGNATURE_TYPE_STAMP = 3;
     */
    STAMP = 3
}
/**
 * @generated from protobuf enum resources.documents.SignatureStatus
 */
export enum SignatureStatus {
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_VALID = 1;
     */
    VALID = 1,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_REVOKED = 2;
     */
    REVOKED = 2,
    /**
     * @generated from protobuf enum value: SIGNATURE_STATUS_INVALID_PRIOR_VERSION = 3;
     */
    INVALID_PRIOR_VERSION = 3
}
/**
 * Stamps
 *
 * @generated from protobuf enum resources.documents.StampAccessLevel
 */
export enum StampAccessLevel {
    /**
     * @generated from protobuf enum value: STAMP_ACCESS_LEVEL_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: STAMP_ACCESS_LEVEL_BLOCKED = 1;
     */
    BLOCKED = 1,
    /**
     * @generated from protobuf enum value: STAMP_ACCESS_LEVEL_USE = 2;
     */
    USE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class SignatureRequirement$Type extends MessageType<SignatureRequirement> {
    constructor() {
        super("resources.documents.SignatureRequirement", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "sequence_order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "label", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "selector", kind: "message", T: () => PartySelector },
            { no: 8, name: "binding_mode", kind: "enum", T: () => ["resources.documents.BindingMode", BindingMode, "BINDING_MODE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 9, name: "allowed_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"], options: { "buf.validate.field": { repeated: { maxItems: "3", items: { enum: { definedOnly: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<SignatureRequirement>): SignatureRequirement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.documentId = 0;
        message.sequenceOrder = 0;
        message.required = false;
        message.label = "";
        message.bindingMode = 0;
        message.allowedTypes = [];
        if (value !== undefined)
            reflectionMergePartial<SignatureRequirement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignatureRequirement): SignatureRequirement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 3:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* int32 sequence_order */ 4:
                    message.sequenceOrder = reader.int32();
                    break;
                case /* bool required */ 5:
                    message.required = reader.bool();
                    break;
                case /* string label */ 6:
                    message.label = reader.string();
                    break;
                case /* resources.documents.PartySelector selector */ 7:
                    message.selector = PartySelector.internalBinaryRead(reader, reader.uint32(), options, message.selector);
                    break;
                case /* resources.documents.BindingMode binding_mode */ 8:
                    message.bindingMode = reader.int32();
                    break;
                case /* repeated resources.documents.SignatureType allowed_types */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.allowedTypes.push(reader.int32());
                    else
                        message.allowedTypes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignatureRequirement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp created_at = 3; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 sequence_order = 4; */
        if (message.sequenceOrder !== 0)
            writer.tag(4, WireType.Varint).int32(message.sequenceOrder);
        /* bool required = 5; */
        if (message.required !== false)
            writer.tag(5, WireType.Varint).bool(message.required);
        /* string label = 6; */
        if (message.label !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.label);
        /* resources.documents.PartySelector selector = 7; */
        if (message.selector)
            PartySelector.internalBinaryWrite(message.selector, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.BindingMode binding_mode = 8; */
        if (message.bindingMode !== 0)
            writer.tag(8, WireType.Varint).int32(message.bindingMode);
        /* repeated resources.documents.SignatureType allowed_types = 9; */
        if (message.allowedTypes.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.allowedTypes.length; i++)
                writer.int32(message.allowedTypes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.SignatureRequirement
 */
export const SignatureRequirement = new SignatureRequirement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("resources.documents.Signature", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "snapshot_date", kind: "message", T: () => Timestamp },
            { no: 4, name: "requirement_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "user", kind: "message", T: () => UserShort },
            { no: 7, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 8, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 9, name: "type", kind: "enum", T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 10, name: "payload_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "stamp_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 12, name: "status", kind: "enum", T: () => ["resources.documents.SignatureStatus", SignatureStatus, "SIGNATURE_STATUS_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 13, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 15, name: "revoked_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Signature>): Signature {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.documentId = 0;
        message.requirementId = 0;
        message.userId = 0;
        message.job = "";
        message.type = 0;
        message.payloadJson = "";
        message.stampId = 0;
        message.status = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<Signature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature): Signature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 3:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                case /* int64 requirement_id */ 4:
                    message.requirementId = reader.int64().toNumber();
                    break;
                case /* int32 user_id */ 5:
                    message.userId = reader.int32();
                    break;
                case /* optional resources.users.UserShort user */ 6:
                    message.user = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string job */ 7:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 8:
                    message.jobLabel = reader.string();
                    break;
                case /* resources.documents.SignatureType type */ 9:
                    message.type = reader.int32();
                    break;
                case /* string payload_json */ 10:
                    message.payloadJson = reader.string();
                    break;
                case /* int64 stamp_id */ 11:
                    message.stampId = reader.int64().toNumber();
                    break;
                case /* resources.documents.SignatureStatus status */ 12:
                    message.status = reader.int32();
                    break;
                case /* string reason */ 13:
                    message.reason = reader.string();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 14:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp revoked_at */ 15:
                    message.revokedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.revokedAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 3; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int64 requirement_id = 4; */
        if (message.requirementId !== 0)
            writer.tag(4, WireType.Varint).int64(message.requirementId);
        /* int32 user_id = 5; */
        if (message.userId !== 0)
            writer.tag(5, WireType.Varint).int32(message.userId);
        /* optional resources.users.UserShort user = 6; */
        if (message.user)
            UserShort.internalBinaryWrite(message.user, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string job = 7; */
        if (message.job !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 8; */
        if (message.jobLabel !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.jobLabel);
        /* resources.documents.SignatureType type = 9; */
        if (message.type !== 0)
            writer.tag(9, WireType.Varint).int32(message.type);
        /* string payload_json = 10; */
        if (message.payloadJson !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.payloadJson);
        /* int64 stamp_id = 11; */
        if (message.stampId !== 0)
            writer.tag(11, WireType.Varint).int64(message.stampId);
        /* resources.documents.SignatureStatus status = 12; */
        if (message.status !== 0)
            writer.tag(12, WireType.Varint).int32(message.status);
        /* string reason = 13; */
        if (message.reason !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.reason);
        /* resources.timestamp.Timestamp created_at = 14; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp revoked_at = 15; */
        if (message.revokedAt)
            Timestamp.internalBinaryWrite(message.revokedAt, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.Signature
 */
export const Signature = new Signature$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Stamp$Type extends MessageType<Stamp> {
    constructor() {
        super("resources.documents.Stamp", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 3, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "owner_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "svg_template", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "access", kind: "message", T: () => StampAccess }
        ]);
    }
    create(value?: PartialMessage<Stamp>): Stamp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.job = "";
        message.ownerId = 0;
        message.svgTemplate = "";
        if (value !== undefined)
            reflectionMergePartial<Stamp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Stamp): Stamp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* string job */ 2:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 3:
                    message.jobLabel = reader.string();
                    break;
                case /* int32 owner_id */ 4:
                    message.ownerId = reader.int32();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 5:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* string svg_template */ 6:
                    message.svgTemplate = reader.string();
                    break;
                case /* resources.documents.StampAccess access */ 7:
                    message.access = StampAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Stamp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* string job = 2; */
        if (message.job !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 3; */
        if (message.jobLabel !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.jobLabel);
        /* int32 owner_id = 4; */
        if (message.ownerId !== 0)
            writer.tag(4, WireType.Varint).int32(message.ownerId);
        /* resources.timestamp.Timestamp created_at = 5; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string svg_template = 6; */
        if (message.svgTemplate !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.svgTemplate);
        /* resources.documents.StampAccess access = 7; */
        if (message.access)
            StampAccess.internalBinaryWrite(message.access, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.Stamp
 */
export const Stamp = new Stamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StampAccess$Type extends MessageType<StampAccess> {
    constructor() {
        super("resources.documents.StampAccess", [
            { no: 1, name: "jobs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => StampJobAccess, options: { "buf.validate.field": { repeated: { maxItems: "20" } }, "tagger.tags": "alias:\"job_access\"" } }
        ]);
    }
    create(value?: PartialMessage<StampAccess>): StampAccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobs = [];
        if (value !== undefined)
            reflectionMergePartial<StampAccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StampAccess): StampAccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.StampJobAccess jobs */ 1:
                    message.jobs.push(StampJobAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StampAccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.StampJobAccess jobs = 1; */
        for (let i = 0; i < message.jobs.length; i++)
            StampJobAccess.internalBinaryWrite(message.jobs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.StampAccess
 */
export const StampAccess = new StampAccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StampJobAccess$Type extends MessageType<StampJobAccess> {
    constructor() {
        super("resources.documents.StampJobAccess", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "target_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 5, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 6, name: "minimum_grade", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gte: 0 } } } },
            { no: 7, name: "job_grade_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 8, name: "access", kind: "enum", T: () => ["resources.documents.StampAccessLevel", StampAccessLevel, "STAMP_ACCESS_LEVEL_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<StampJobAccess>): StampJobAccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.targetId = 0;
        message.job = "";
        message.minimumGrade = 0;
        message.access = 0;
        if (value !== undefined)
            reflectionMergePartial<StampJobAccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StampJobAccess): StampJobAccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* int64 target_id */ 3:
                    message.targetId = reader.int64().toNumber();
                    break;
                case /* string job */ 4:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 5:
                    message.jobLabel = reader.string();
                    break;
                case /* int32 minimum_grade */ 6:
                    message.minimumGrade = reader.int32();
                    break;
                case /* optional string job_grade_label */ 7:
                    message.jobGradeLabel = reader.string();
                    break;
                case /* resources.documents.StampAccessLevel access */ 8:
                    message.access = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StampJobAccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 target_id = 3; */
        if (message.targetId !== 0)
            writer.tag(3, WireType.Varint).int64(message.targetId);
        /* string job = 4; */
        if (message.job !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 5; */
        if (message.jobLabel !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.jobLabel);
        /* int32 minimum_grade = 6; */
        if (message.minimumGrade !== 0)
            writer.tag(6, WireType.Varint).int32(message.minimumGrade);
        /* optional string job_grade_label = 7; */
        if (message.jobGradeLabel !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.jobGradeLabel);
        /* resources.documents.StampAccessLevel access = 8; */
        if (message.access !== 0)
            writer.tag(8, WireType.Varint).int32(message.access);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.StampJobAccess
 */
export const StampJobAccess = new StampJobAccess$Type();
