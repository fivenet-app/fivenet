// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/documents/activity.proto" (package "resources.documents", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DocumentUserAccess } from "./access";
import { DocumentJobAccess } from "./access";
import { AccessLevel } from "./access";
import { UserShort } from "../users/users";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.documents.DocActivity
 */
export interface DocActivity {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 document_id = 3
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.documents.DocActivityType activity_type = 4
     */
    activityType: DocActivityType;
    /**
     * @generated from protobuf field: optional int32 creator_id = 5
     */
    creatorId?: number;
    /**
     * @generated from protobuf field: optional resources.users.UserShort creator = 6
     */
    creator?: UserShort; // @gotags: alias:"creator"
    /**
     * @generated from protobuf field: string creator_job = 7
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: optional string creator_job_label = 8
     */
    creatorJobLabel?: string;
    /**
     * @generated from protobuf field: optional string reason = 9
     */
    reason?: string;
    /**
     * @generated from protobuf field: resources.documents.DocActivityData data = 10
     */
    data?: DocActivityData;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.documents.DocActivityData
 */
export interface DocActivityData {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "updated";
        /**
         * @generated from protobuf field: resources.documents.DocUpdated updated = 1
         */
        updated: DocUpdated;
    } | {
        oneofKind: "ownerChanged";
        /**
         * @generated from protobuf field: resources.documents.DocOwnerChanged owner_changed = 2
         */
        ownerChanged: DocOwnerChanged;
    } | {
        oneofKind: "accessUpdated";
        /**
         * @generated from protobuf field: resources.documents.DocAccessUpdated access_updated = 4
         */
        accessUpdated: DocAccessUpdated;
    } | {
        oneofKind: "accessRequested";
        /**
         * @generated from protobuf field: resources.documents.DocAccessRequested access_requested = 5
         */
        accessRequested: DocAccessRequested;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message resources.documents.DocUpdated
 */
export interface DocUpdated {
    /**
     * @generated from protobuf field: optional string title_diff = 1
     */
    titleDiff?: string;
    /**
     * @generated from protobuf field: optional string content_diff = 2
     */
    contentDiff?: string;
    /**
     * @generated from protobuf field: optional string state_diff = 3
     */
    stateDiff?: string;
}
/**
 * @generated from protobuf message resources.documents.DocOwnerChanged
 */
export interface DocOwnerChanged {
    /**
     * @generated from protobuf field: int32 new_owner_id = 1
     */
    newOwnerId: number;
    /**
     * @generated from protobuf field: resources.users.UserShort new_owner = 2
     */
    newOwner?: UserShort;
}
/**
 * @generated from protobuf message resources.documents.DocAccessRequested
 */
export interface DocAccessRequested {
    /**
     * @generated from protobuf field: resources.documents.AccessLevel level = 1
     */
    level: AccessLevel;
}
/**
 * @generated from protobuf message resources.documents.DocAccessUpdated
 */
export interface DocAccessUpdated {
    /**
     * @generated from protobuf field: resources.documents.DocAccessJobsDiff jobs = 1
     */
    jobs?: DocAccessJobsDiff;
    /**
     * @generated from protobuf field: resources.documents.DocAccessUsersDiff users = 2
     */
    users?: DocAccessUsersDiff;
}
/**
 * @generated from protobuf message resources.documents.DocAccessJobsDiff
 */
export interface DocAccessJobsDiff {
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentJobAccess to_create = 1
     */
    toCreate: DocumentJobAccess[];
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentJobAccess to_update = 2
     */
    toUpdate: DocumentJobAccess[];
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentJobAccess to_delete = 3
     */
    toDelete: DocumentJobAccess[];
}
/**
 * @generated from protobuf message resources.documents.DocAccessUsersDiff
 */
export interface DocAccessUsersDiff {
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentUserAccess to_create = 1
     */
    toCreate: DocumentUserAccess[];
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentUserAccess to_update = 2
     */
    toUpdate: DocumentUserAccess[];
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentUserAccess to_delete = 3
     */
    toDelete: DocumentUserAccess[];
}
/**
 * @generated from protobuf enum resources.documents.DocActivityType
 */
export enum DocActivityType {
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * Base
     *
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_CREATED = 1;
     */
    CREATED = 1,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_STATUS_OPEN = 2;
     */
    STATUS_OPEN = 2,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_STATUS_CLOSED = 3;
     */
    STATUS_CLOSED = 3,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_UPDATED = 4;
     */
    UPDATED = 4,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_RELATIONS_UPDATED = 5;
     */
    RELATIONS_UPDATED = 5,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REFERENCES_UPDATED = 6;
     */
    REFERENCES_UPDATED = 6,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_ACCESS_UPDATED = 7;
     */
    ACCESS_UPDATED = 7,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_OWNER_CHANGED = 8;
     */
    OWNER_CHANGED = 8,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_DELETED = 9;
     */
    DELETED = 9,
    /**
     * Comments
     *
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_COMMENT_ADDED = 10;
     */
    COMMENT_ADDED = 10,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_COMMENT_UPDATED = 11;
     */
    COMMENT_UPDATED = 11,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_COMMENT_DELETED = 12;
     */
    COMMENT_DELETED = 12,
    /**
     * Requests
     *
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REQUESTED_ACCESS = 13;
     */
    REQUESTED_ACCESS = 13,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REQUESTED_CLOSURE = 14;
     */
    REQUESTED_CLOSURE = 14,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REQUESTED_OPENING = 15;
     */
    REQUESTED_OPENING = 15,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REQUESTED_UPDATE = 16;
     */
    REQUESTED_UPDATE = 16,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REQUESTED_OWNER_CHANGE = 17;
     */
    REQUESTED_OWNER_CHANGE = 17,
    /**
     * @generated from protobuf enum value: DOC_ACTIVITY_TYPE_REQUESTED_DELETION = 18;
     */
    REQUESTED_DELETION = 18
}
// @generated message type with reflection information, may provide speed optimized methods
class DocActivity$Type extends MessageType<DocActivity> {
    constructor() {
        super("resources.documents.DocActivity", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "activity_type", kind: "enum", T: () => ["resources.documents.DocActivityType", DocActivityType, "DOC_ACTIVITY_TYPE_"] },
            { no: 5, name: "creator_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gt: 0 } } } },
            { no: 6, name: "creator", kind: "message", T: () => UserShort },
            { no: 7, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } },
            { no: 8, name: "creator_job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "50" } } } },
            { no: 9, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 10, name: "data", kind: "message", T: () => DocActivityData }
        ]);
    }
    create(value?: PartialMessage<DocActivity>): DocActivity {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.documentId = 0;
        message.activityType = 0;
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<DocActivity>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocActivity): DocActivity {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 document_id */ 3:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* resources.documents.DocActivityType activity_type */ 4:
                    message.activityType = reader.int32();
                    break;
                case /* optional int32 creator_id */ 5:
                    message.creatorId = reader.int32();
                    break;
                case /* optional resources.users.UserShort creator */ 6:
                    message.creator = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.creator);
                    break;
                case /* string creator_job */ 7:
                    message.creatorJob = reader.string();
                    break;
                case /* optional string creator_job_label */ 8:
                    message.creatorJobLabel = reader.string();
                    break;
                case /* optional string reason */ 9:
                    message.reason = reader.string();
                    break;
                case /* resources.documents.DocActivityData data */ 10:
                    message.data = DocActivityData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocActivity, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 document_id = 3; */
        if (message.documentId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.documentId);
        /* resources.documents.DocActivityType activity_type = 4; */
        if (message.activityType !== 0)
            writer.tag(4, WireType.Varint).int32(message.activityType);
        /* optional int32 creator_id = 5; */
        if (message.creatorId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.creatorId);
        /* optional resources.users.UserShort creator = 6; */
        if (message.creator)
            UserShort.internalBinaryWrite(message.creator, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 7; */
        if (message.creatorJob !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.creatorJob);
        /* optional string creator_job_label = 8; */
        if (message.creatorJobLabel !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.creatorJobLabel);
        /* optional string reason = 9; */
        if (message.reason !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.reason);
        /* resources.documents.DocActivityData data = 10; */
        if (message.data)
            DocActivityData.internalBinaryWrite(message.data, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocActivity
 */
export const DocActivity = new DocActivity$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocActivityData$Type extends MessageType<DocActivityData> {
    constructor() {
        super("resources.documents.DocActivityData", [
            { no: 1, name: "updated", kind: "message", oneof: "data", T: () => DocUpdated },
            { no: 2, name: "owner_changed", kind: "message", oneof: "data", T: () => DocOwnerChanged },
            { no: 4, name: "access_updated", kind: "message", oneof: "data", T: () => DocAccessUpdated },
            { no: 5, name: "access_requested", kind: "message", oneof: "data", T: () => DocAccessRequested }
        ]);
    }
    create(value?: PartialMessage<DocActivityData>): DocActivityData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DocActivityData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocActivityData): DocActivityData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocUpdated updated */ 1:
                    message.data = {
                        oneofKind: "updated",
                        updated: DocUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).updated)
                    };
                    break;
                case /* resources.documents.DocOwnerChanged owner_changed */ 2:
                    message.data = {
                        oneofKind: "ownerChanged",
                        ownerChanged: DocOwnerChanged.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).ownerChanged)
                    };
                    break;
                case /* resources.documents.DocAccessUpdated access_updated */ 4:
                    message.data = {
                        oneofKind: "accessUpdated",
                        accessUpdated: DocAccessUpdated.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).accessUpdated)
                    };
                    break;
                case /* resources.documents.DocAccessRequested access_requested */ 5:
                    message.data = {
                        oneofKind: "accessRequested",
                        accessRequested: DocAccessRequested.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).accessRequested)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocActivityData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocUpdated updated = 1; */
        if (message.data.oneofKind === "updated")
            DocUpdated.internalBinaryWrite(message.data.updated, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.DocOwnerChanged owner_changed = 2; */
        if (message.data.oneofKind === "ownerChanged")
            DocOwnerChanged.internalBinaryWrite(message.data.ownerChanged, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.DocAccessUpdated access_updated = 4; */
        if (message.data.oneofKind === "accessUpdated")
            DocAccessUpdated.internalBinaryWrite(message.data.accessUpdated, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.DocAccessRequested access_requested = 5; */
        if (message.data.oneofKind === "accessRequested")
            DocAccessRequested.internalBinaryWrite(message.data.accessRequested, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocActivityData
 */
export const DocActivityData = new DocActivityData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocUpdated$Type extends MessageType<DocUpdated> {
    constructor() {
        super("resources.documents.DocUpdated", [
            { no: 1, name: "title_diff", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content_diff", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "state_diff", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DocUpdated>): DocUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DocUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocUpdated): DocUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string title_diff */ 1:
                    message.titleDiff = reader.string();
                    break;
                case /* optional string content_diff */ 2:
                    message.contentDiff = reader.string();
                    break;
                case /* optional string state_diff */ 3:
                    message.stateDiff = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string title_diff = 1; */
        if (message.titleDiff !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.titleDiff);
        /* optional string content_diff = 2; */
        if (message.contentDiff !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.contentDiff);
        /* optional string state_diff = 3; */
        if (message.stateDiff !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.stateDiff);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocUpdated
 */
export const DocUpdated = new DocUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocOwnerChanged$Type extends MessageType<DocOwnerChanged> {
    constructor() {
        super("resources.documents.DocOwnerChanged", [
            { no: 1, name: "new_owner_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "new_owner", kind: "message", T: () => UserShort }
        ]);
    }
    create(value?: PartialMessage<DocOwnerChanged>): DocOwnerChanged {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.newOwnerId = 0;
        if (value !== undefined)
            reflectionMergePartial<DocOwnerChanged>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocOwnerChanged): DocOwnerChanged {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 new_owner_id */ 1:
                    message.newOwnerId = reader.int32();
                    break;
                case /* resources.users.UserShort new_owner */ 2:
                    message.newOwner = UserShort.internalBinaryRead(reader, reader.uint32(), options, message.newOwner);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocOwnerChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 new_owner_id = 1; */
        if (message.newOwnerId !== 0)
            writer.tag(1, WireType.Varint).int32(message.newOwnerId);
        /* resources.users.UserShort new_owner = 2; */
        if (message.newOwner)
            UserShort.internalBinaryWrite(message.newOwner, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocOwnerChanged
 */
export const DocOwnerChanged = new DocOwnerChanged$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocAccessRequested$Type extends MessageType<DocAccessRequested> {
    constructor() {
        super("resources.documents.DocAccessRequested", [
            { no: 1, name: "level", kind: "enum", T: () => ["resources.documents.AccessLevel", AccessLevel, "ACCESS_LEVEL_"], options: { "validate.rules": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<DocAccessRequested>): DocAccessRequested {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.level = 0;
        if (value !== undefined)
            reflectionMergePartial<DocAccessRequested>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocAccessRequested): DocAccessRequested {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.AccessLevel level */ 1:
                    message.level = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocAccessRequested, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.AccessLevel level = 1; */
        if (message.level !== 0)
            writer.tag(1, WireType.Varint).int32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocAccessRequested
 */
export const DocAccessRequested = new DocAccessRequested$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocAccessUpdated$Type extends MessageType<DocAccessUpdated> {
    constructor() {
        super("resources.documents.DocAccessUpdated", [
            { no: 1, name: "jobs", kind: "message", T: () => DocAccessJobsDiff },
            { no: 2, name: "users", kind: "message", T: () => DocAccessUsersDiff }
        ]);
    }
    create(value?: PartialMessage<DocAccessUpdated>): DocAccessUpdated {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DocAccessUpdated>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocAccessUpdated): DocAccessUpdated {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocAccessJobsDiff jobs */ 1:
                    message.jobs = DocAccessJobsDiff.internalBinaryRead(reader, reader.uint32(), options, message.jobs);
                    break;
                case /* resources.documents.DocAccessUsersDiff users */ 2:
                    message.users = DocAccessUsersDiff.internalBinaryRead(reader, reader.uint32(), options, message.users);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocAccessUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocAccessJobsDiff jobs = 1; */
        if (message.jobs)
            DocAccessJobsDiff.internalBinaryWrite(message.jobs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.DocAccessUsersDiff users = 2; */
        if (message.users)
            DocAccessUsersDiff.internalBinaryWrite(message.users, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocAccessUpdated
 */
export const DocAccessUpdated = new DocAccessUpdated$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocAccessJobsDiff$Type extends MessageType<DocAccessJobsDiff> {
    constructor() {
        super("resources.documents.DocAccessJobsDiff", [
            { no: 1, name: "to_create", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentJobAccess, options: { "validate.rules": { repeated: { maxItems: "20" } } } },
            { no: 2, name: "to_update", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentJobAccess, options: { "validate.rules": { repeated: { maxItems: "20" } } } },
            { no: 3, name: "to_delete", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentJobAccess, options: { "validate.rules": { repeated: { maxItems: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<DocAccessJobsDiff>): DocAccessJobsDiff {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toCreate = [];
        message.toUpdate = [];
        message.toDelete = [];
        if (value !== undefined)
            reflectionMergePartial<DocAccessJobsDiff>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocAccessJobsDiff): DocAccessJobsDiff {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.DocumentJobAccess to_create */ 1:
                    message.toCreate.push(DocumentJobAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.documents.DocumentJobAccess to_update */ 2:
                    message.toUpdate.push(DocumentJobAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.documents.DocumentJobAccess to_delete */ 3:
                    message.toDelete.push(DocumentJobAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocAccessJobsDiff, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.DocumentJobAccess to_create = 1; */
        for (let i = 0; i < message.toCreate.length; i++)
            DocumentJobAccess.internalBinaryWrite(message.toCreate[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentJobAccess to_update = 2; */
        for (let i = 0; i < message.toUpdate.length; i++)
            DocumentJobAccess.internalBinaryWrite(message.toUpdate[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentJobAccess to_delete = 3; */
        for (let i = 0; i < message.toDelete.length; i++)
            DocumentJobAccess.internalBinaryWrite(message.toDelete[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocAccessJobsDiff
 */
export const DocAccessJobsDiff = new DocAccessJobsDiff$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DocAccessUsersDiff$Type extends MessageType<DocAccessUsersDiff> {
    constructor() {
        super("resources.documents.DocAccessUsersDiff", [
            { no: 1, name: "to_create", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentUserAccess, options: { "validate.rules": { repeated: { maxItems: "20" } } } },
            { no: 2, name: "to_update", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentUserAccess, options: { "validate.rules": { repeated: { maxItems: "20" } } } },
            { no: 3, name: "to_delete", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentUserAccess, options: { "validate.rules": { repeated: { maxItems: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<DocAccessUsersDiff>): DocAccessUsersDiff {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toCreate = [];
        message.toUpdate = [];
        message.toDelete = [];
        if (value !== undefined)
            reflectionMergePartial<DocAccessUsersDiff>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DocAccessUsersDiff): DocAccessUsersDiff {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.DocumentUserAccess to_create */ 1:
                    message.toCreate.push(DocumentUserAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.documents.DocumentUserAccess to_update */ 2:
                    message.toUpdate.push(DocumentUserAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.documents.DocumentUserAccess to_delete */ 3:
                    message.toDelete.push(DocumentUserAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DocAccessUsersDiff, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.DocumentUserAccess to_create = 1; */
        for (let i = 0; i < message.toCreate.length; i++)
            DocumentUserAccess.internalBinaryWrite(message.toCreate[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentUserAccess to_update = 2; */
        for (let i = 0; i < message.toUpdate.length; i++)
            DocumentUserAccess.internalBinaryWrite(message.toUpdate[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentUserAccess to_delete = 3; */
        for (let i = 0; i < message.toDelete.length; i++)
            DocumentUserAccess.internalBinaryWrite(message.toDelete[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.DocAccessUsersDiff
 */
export const DocAccessUsersDiff = new DocAccessUsersDiff$Type();
