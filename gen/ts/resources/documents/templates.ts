// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "resources/documents/templates.proto" (package "resources.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AccessLevel } from "./access";
import { Vehicle } from "../vehicles/vehicles";
import { UserShort } from "../users/users";
import { DocumentShort } from "./documents";
import { User } from "../users/users";
import { Workflow } from "./workflow";
import { DocumentAccess } from "./access";
import { Category } from "./category";
import { Timestamp } from "../timestamp/timestamp";
/**
 * @generated from protobuf message resources.documents.Template
 */
export interface Template {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: resources.documents.Category category = 4
     */
    category?: Category;
    /**
     * @generated from protobuf field: uint32 weight = 5
     */
    weight: number;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 6
     */
    title: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string description = 7
     */
    description: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string color = 8
     */
    color?: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string icon = 9
     */
    icon?: string;
    /**
     * @generated from protobuf field: string content_title = 10
     */
    contentTitle: string;
    /**
     * @generated from protobuf field: string content = 11
     */
    content: string;
    /**
     * @generated from protobuf field: string state = 12
     */
    state: string;
    /**
     * @generated from protobuf field: resources.documents.TemplateSchema schema = 13
     */
    schema?: TemplateSchema;
    /**
     * @generated from protobuf field: string creator_job = 14
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: optional string creator_job_label = 15
     */
    creatorJobLabel?: string;
    /**
     * @generated from protobuf field: repeated resources.documents.TemplateJobAccess job_access = 16
     */
    jobAccess: TemplateJobAccess[];
    /**
     * @generated from protobuf field: resources.documents.DocumentAccess content_access = 17
     */
    contentAccess?: DocumentAccess;
    /**
     * @generated from protobuf field: optional resources.documents.Workflow workflow = 18
     */
    workflow?: Workflow;
}
/**
 * @generated from protobuf message resources.documents.TemplateShort
 */
export interface TemplateShort {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp updated_at = 3
     */
    updatedAt?: Timestamp;
    /**
     * @generated from protobuf field: resources.documents.Category category = 4
     */
    category?: Category;
    /**
     * @generated from protobuf field: uint32 weight = 5
     */
    weight: number;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string title = 6
     */
    title: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string description = 7
     */
    description: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string color = 8
     */
    color?: string;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string icon = 9
     */
    icon?: string;
    /**
     * @generated from protobuf field: resources.documents.TemplateSchema schema = 10
     */
    schema?: TemplateSchema;
    /**
     * @generated from protobuf field: string creator_job = 11
     */
    creatorJob: string;
    /**
     * @generated from protobuf field: optional string creator_job_label = 12
     */
    creatorJobLabel?: string;
    /**
     * @generated from protobuf field: optional resources.documents.Workflow workflow = 18
     */
    workflow?: Workflow;
}
/**
 * @dbscanner: json
 *
 * @generated from protobuf message resources.documents.TemplateSchema
 */
export interface TemplateSchema {
    /**
     * @generated from protobuf field: resources.documents.TemplateRequirements requirements = 1
     */
    requirements?: TemplateRequirements;
}
/**
 * @generated from protobuf message resources.documents.TemplateRequirements
 */
export interface TemplateRequirements {
    /**
     * @generated from protobuf field: optional resources.documents.ObjectSpecs documents = 1
     */
    documents?: ObjectSpecs;
    /**
     * @generated from protobuf field: optional resources.documents.ObjectSpecs users = 2
     */
    users?: ObjectSpecs;
    /**
     * @generated from protobuf field: optional resources.documents.ObjectSpecs vehicles = 3
     */
    vehicles?: ObjectSpecs;
}
/**
 * @generated from protobuf message resources.documents.ObjectSpecs
 */
export interface ObjectSpecs {
    /**
     * @generated from protobuf field: optional bool required = 1
     */
    required?: boolean;
    /**
     * @generated from protobuf field: optional int32 min = 2
     */
    min?: number;
    /**
     * @generated from protobuf field: optional int32 max = 3
     */
    max?: number;
}
/**
 * @generated from protobuf message resources.documents.TemplateData
 */
export interface TemplateData {
    /**
     * @generated from protobuf field: resources.users.User active_char = 1
     */
    activeChar?: User;
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentShort documents = 2
     */
    documents: DocumentShort[];
    /**
     * @generated from protobuf field: repeated resources.users.UserShort users = 3
     */
    users: UserShort[];
    /**
     * @generated from protobuf field: repeated resources.vehicles.Vehicle vehicles = 4
     */
    vehicles: Vehicle[];
}
/**
 * @generated from protobuf message resources.documents.TemplateJobAccess
 */
export interface TemplateJobAccess {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp created_at = 2
     */
    createdAt?: Timestamp;
    /**
     * @generated from protobuf field: uint64 target_id = 3
     */
    targetId: number;
    /**
     * @generated from protobuf field: string job = 4
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 5
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: int32 minimum_grade = 6
     */
    minimumGrade: number;
    /**
     * @generated from protobuf field: optional string job_grade_label = 7
     */
    jobGradeLabel?: string;
    /**
     * @generated from protobuf field: resources.documents.AccessLevel access = 8
     */
    access: AccessLevel;
}
/**
 * Dummy - DO NOT USE!
 *
 * @generated from protobuf message resources.documents.TemplateUserAccess
 */
export interface TemplateUserAccess {
}
// @generated message type with reflection information, may provide speed optimized methods
class Template$Type extends MessageType<Template> {
    constructor() {
        super("resources.documents.Template", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"id\"" } },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "category", kind: "message", T: () => Category, options: { "tagger.tags": "alias:\"category\"" } },
            { no: 5, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "buf.validate.field": { uint32: { lt: 4294967295 } } } },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3" } } } },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } },
            { no: 8, name: "color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3", maxLen: "7" } } } },
            { no: 9, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "128", suffix: "Icon" } } } },
            { no: 10, name: "content_title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3", maxBytes: "10240" } }, "tagger.tags": "alias:\"content_title\"" } },
            { no: 11, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "0", maxBytes: "2000000" } }, "tagger.tags": "alias:\"content\"" } },
            { no: 12, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "512" } }, "tagger.tags": "alias:\"state\"" } },
            { no: 13, name: "schema", kind: "message", T: () => TemplateSchema, options: { "tagger.tags": "alias:\"schema\"" } },
            { no: 14, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 15, name: "creator_job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 16, name: "job_access", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TemplateJobAccess, options: { "buf.validate.field": { repeated: { maxItems: "20" } } } },
            { no: 17, name: "content_access", kind: "message", T: () => DocumentAccess, options: { "tagger.tags": "alias:\"access\"" } },
            { no: 18, name: "workflow", kind: "message", T: () => Workflow }
        ]);
    }
    create(value?: PartialMessage<Template>): Template {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.weight = 0;
        message.title = "";
        message.description = "";
        message.contentTitle = "";
        message.content = "";
        message.state = "";
        message.creatorJob = "";
        message.jobAccess = [];
        if (value !== undefined)
            reflectionMergePartial<Template>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Template): Template {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* resources.documents.Category category */ 4:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                case /* uint32 weight */ 5:
                    message.weight = reader.uint32();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                case /* optional string color */ 8:
                    message.color = reader.string();
                    break;
                case /* optional string icon */ 9:
                    message.icon = reader.string();
                    break;
                case /* string content_title */ 10:
                    message.contentTitle = reader.string();
                    break;
                case /* string content */ 11:
                    message.content = reader.string();
                    break;
                case /* string state */ 12:
                    message.state = reader.string();
                    break;
                case /* resources.documents.TemplateSchema schema */ 13:
                    message.schema = TemplateSchema.internalBinaryRead(reader, reader.uint32(), options, message.schema);
                    break;
                case /* string creator_job */ 14:
                    message.creatorJob = reader.string();
                    break;
                case /* optional string creator_job_label */ 15:
                    message.creatorJobLabel = reader.string();
                    break;
                case /* repeated resources.documents.TemplateJobAccess job_access */ 16:
                    message.jobAccess.push(TemplateJobAccess.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* resources.documents.DocumentAccess content_access */ 17:
                    message.contentAccess = DocumentAccess.internalBinaryRead(reader, reader.uint32(), options, message.contentAccess);
                    break;
                case /* optional resources.documents.Workflow workflow */ 18:
                    message.workflow = Workflow.internalBinaryRead(reader, reader.uint32(), options, message.workflow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Template, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.Category category = 4; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint32 weight = 5; */
        if (message.weight !== 0)
            writer.tag(5, WireType.Varint).uint32(message.weight);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* optional string color = 8; */
        if (message.color !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.color);
        /* optional string icon = 9; */
        if (message.icon !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.icon);
        /* string content_title = 10; */
        if (message.contentTitle !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.contentTitle);
        /* string content = 11; */
        if (message.content !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.content);
        /* string state = 12; */
        if (message.state !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.state);
        /* resources.documents.TemplateSchema schema = 13; */
        if (message.schema)
            TemplateSchema.internalBinaryWrite(message.schema, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 14; */
        if (message.creatorJob !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.creatorJob);
        /* optional string creator_job_label = 15; */
        if (message.creatorJobLabel !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.creatorJobLabel);
        /* repeated resources.documents.TemplateJobAccess job_access = 16; */
        for (let i = 0; i < message.jobAccess.length; i++)
            TemplateJobAccess.internalBinaryWrite(message.jobAccess[i], writer.tag(16, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.DocumentAccess content_access = 17; */
        if (message.contentAccess)
            DocumentAccess.internalBinaryWrite(message.contentAccess, writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.documents.Workflow workflow = 18; */
        if (message.workflow)
            Workflow.internalBinaryWrite(message.workflow, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.Template
 */
export const Template = new Template$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateShort$Type extends MessageType<TemplateShort> {
    constructor() {
        super("resources.documents.TemplateShort", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"id\"" } },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "updated_at", kind: "message", T: () => Timestamp },
            { no: 4, name: "category", kind: "message", T: () => Category, options: { "tagger.tags": "alias:\"category\"" } },
            { no: 5, name: "weight", kind: "scalar", T: 13 /*ScalarType.UINT32*/, options: { "buf.validate.field": { uint32: { lt: 4294967295 } } } },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3" } } } },
            { no: 7, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } },
            { no: 8, name: "color", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3", maxLen: "7" } } } },
            { no: 9, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "128", suffix: "Icon" } } } },
            { no: 10, name: "schema", kind: "message", T: () => TemplateSchema, options: { "tagger.tags": "alias:\"schema\"" } },
            { no: 11, name: "creator_job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 12, name: "creator_job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 18, name: "workflow", kind: "message", T: () => Workflow }
        ]);
    }
    create(value?: PartialMessage<TemplateShort>): TemplateShort {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.weight = 0;
        message.title = "";
        message.description = "";
        message.creatorJob = "";
        if (value !== undefined)
            reflectionMergePartial<TemplateShort>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateShort): TemplateShort {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* optional resources.timestamp.Timestamp updated_at */ 3:
                    message.updatedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.updatedAt);
                    break;
                case /* resources.documents.Category category */ 4:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                case /* uint32 weight */ 5:
                    message.weight = reader.uint32();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* string description */ 7:
                    message.description = reader.string();
                    break;
                case /* optional string color */ 8:
                    message.color = reader.string();
                    break;
                case /* optional string icon */ 9:
                    message.icon = reader.string();
                    break;
                case /* resources.documents.TemplateSchema schema */ 10:
                    message.schema = TemplateSchema.internalBinaryRead(reader, reader.uint32(), options, message.schema);
                    break;
                case /* string creator_job */ 11:
                    message.creatorJob = reader.string();
                    break;
                case /* optional string creator_job_label */ 12:
                    message.creatorJobLabel = reader.string();
                    break;
                case /* optional resources.documents.Workflow workflow */ 18:
                    message.workflow = Workflow.internalBinaryRead(reader, reader.uint32(), options, message.workflow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateShort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp updated_at = 3; */
        if (message.updatedAt)
            Timestamp.internalBinaryWrite(message.updatedAt, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.Category category = 4; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint32 weight = 5; */
        if (message.weight !== 0)
            writer.tag(5, WireType.Varint).uint32(message.weight);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* string description = 7; */
        if (message.description !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        /* optional string color = 8; */
        if (message.color !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.color);
        /* optional string icon = 9; */
        if (message.icon !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.icon);
        /* resources.documents.TemplateSchema schema = 10; */
        if (message.schema)
            TemplateSchema.internalBinaryWrite(message.schema, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* string creator_job = 11; */
        if (message.creatorJob !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.creatorJob);
        /* optional string creator_job_label = 12; */
        if (message.creatorJobLabel !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.creatorJobLabel);
        /* optional resources.documents.Workflow workflow = 18; */
        if (message.workflow)
            Workflow.internalBinaryWrite(message.workflow, writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.TemplateShort
 */
export const TemplateShort = new TemplateShort$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateSchema$Type extends MessageType<TemplateSchema> {
    constructor() {
        super("resources.documents.TemplateSchema", [
            { no: 1, name: "requirements", kind: "message", T: () => TemplateRequirements }
        ]);
    }
    create(value?: PartialMessage<TemplateSchema>): TemplateSchema {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TemplateSchema>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateSchema): TemplateSchema {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.TemplateRequirements requirements */ 1:
                    message.requirements = TemplateRequirements.internalBinaryRead(reader, reader.uint32(), options, message.requirements);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateSchema, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.TemplateRequirements requirements = 1; */
        if (message.requirements)
            TemplateRequirements.internalBinaryWrite(message.requirements, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.TemplateSchema
 */
export const TemplateSchema = new TemplateSchema$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateRequirements$Type extends MessageType<TemplateRequirements> {
    constructor() {
        super("resources.documents.TemplateRequirements", [
            { no: 1, name: "documents", kind: "message", T: () => ObjectSpecs },
            { no: 2, name: "users", kind: "message", T: () => ObjectSpecs },
            { no: 3, name: "vehicles", kind: "message", T: () => ObjectSpecs }
        ]);
    }
    create(value?: PartialMessage<TemplateRequirements>): TemplateRequirements {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TemplateRequirements>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateRequirements): TemplateRequirements {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional resources.documents.ObjectSpecs documents */ 1:
                    message.documents = ObjectSpecs.internalBinaryRead(reader, reader.uint32(), options, message.documents);
                    break;
                case /* optional resources.documents.ObjectSpecs users */ 2:
                    message.users = ObjectSpecs.internalBinaryRead(reader, reader.uint32(), options, message.users);
                    break;
                case /* optional resources.documents.ObjectSpecs vehicles */ 3:
                    message.vehicles = ObjectSpecs.internalBinaryRead(reader, reader.uint32(), options, message.vehicles);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateRequirements, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional resources.documents.ObjectSpecs documents = 1; */
        if (message.documents)
            ObjectSpecs.internalBinaryWrite(message.documents, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.documents.ObjectSpecs users = 2; */
        if (message.users)
            ObjectSpecs.internalBinaryWrite(message.users, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.documents.ObjectSpecs vehicles = 3; */
        if (message.vehicles)
            ObjectSpecs.internalBinaryWrite(message.vehicles, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.TemplateRequirements
 */
export const TemplateRequirements = new TemplateRequirements$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObjectSpecs$Type extends MessageType<ObjectSpecs> {
    constructor() {
        super("resources.documents.ObjectSpecs", [
            { no: 1, name: "required", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "min", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "max", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ObjectSpecs>): ObjectSpecs {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ObjectSpecs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObjectSpecs): ObjectSpecs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool required */ 1:
                    message.required = reader.bool();
                    break;
                case /* optional int32 min */ 2:
                    message.min = reader.int32();
                    break;
                case /* optional int32 max */ 3:
                    message.max = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObjectSpecs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool required = 1; */
        if (message.required !== undefined)
            writer.tag(1, WireType.Varint).bool(message.required);
        /* optional int32 min = 2; */
        if (message.min !== undefined)
            writer.tag(2, WireType.Varint).int32(message.min);
        /* optional int32 max = 3; */
        if (message.max !== undefined)
            writer.tag(3, WireType.Varint).int32(message.max);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.ObjectSpecs
 */
export const ObjectSpecs = new ObjectSpecs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateData$Type extends MessageType<TemplateData> {
    constructor() {
        super("resources.documents.TemplateData", [
            { no: 1, name: "active_char", kind: "message", T: () => User, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "documents", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentShort, options: { "buf.validate.field": { repeated: { maxItems: "12" } } } },
            { no: 3, name: "users", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UserShort, options: { "buf.validate.field": { repeated: { maxItems: "12" } } } },
            { no: 4, name: "vehicles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Vehicle, options: { "buf.validate.field": { repeated: { maxItems: "12" } } } }
        ]);
    }
    create(value?: PartialMessage<TemplateData>): TemplateData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documents = [];
        message.users = [];
        message.vehicles = [];
        if (value !== undefined)
            reflectionMergePartial<TemplateData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateData): TemplateData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.users.User active_char */ 1:
                    message.activeChar = User.internalBinaryRead(reader, reader.uint32(), options, message.activeChar);
                    break;
                case /* repeated resources.documents.DocumentShort documents */ 2:
                    message.documents.push(DocumentShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.users.UserShort users */ 3:
                    message.users.push(UserShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.vehicles.Vehicle vehicles */ 4:
                    message.vehicles.push(Vehicle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.users.User active_char = 1; */
        if (message.activeChar)
            User.internalBinaryWrite(message.activeChar, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentShort documents = 2; */
        for (let i = 0; i < message.documents.length; i++)
            DocumentShort.internalBinaryWrite(message.documents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.users.UserShort users = 3; */
        for (let i = 0; i < message.users.length; i++)
            UserShort.internalBinaryWrite(message.users[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.vehicles.Vehicle vehicles = 4; */
        for (let i = 0; i < message.vehicles.length; i++)
            Vehicle.internalBinaryWrite(message.vehicles[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.TemplateData
 */
export const TemplateData = new TemplateData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateJobAccess$Type extends MessageType<TemplateJobAccess> {
    constructor() {
        super("resources.documents.TemplateJobAccess", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"id\"" } },
            { no: 2, name: "created_at", kind: "message", T: () => Timestamp },
            { no: 3, name: "target_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"template_id\"" } },
            { no: 4, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 5, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 6, name: "minimum_grade", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gte: 0 } } } },
            { no: 7, name: "job_grade_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "50" } } } },
            { no: 8, name: "access", kind: "enum", T: () => ["resources.documents.AccessLevel", AccessLevel, "ACCESS_LEVEL_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } }
        ]);
    }
    create(value?: PartialMessage<TemplateJobAccess>): TemplateJobAccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.targetId = 0;
        message.job = "";
        message.minimumGrade = 0;
        message.access = 0;
        if (value !== undefined)
            reflectionMergePartial<TemplateJobAccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateJobAccess): TemplateJobAccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp created_at */ 2:
                    message.createdAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.createdAt);
                    break;
                case /* uint64 target_id */ 3:
                    message.targetId = reader.uint64().toNumber();
                    break;
                case /* string job */ 4:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 5:
                    message.jobLabel = reader.string();
                    break;
                case /* int32 minimum_grade */ 6:
                    message.minimumGrade = reader.int32();
                    break;
                case /* optional string job_grade_label */ 7:
                    message.jobGradeLabel = reader.string();
                    break;
                case /* resources.documents.AccessLevel access */ 8:
                    message.access = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateJobAccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* optional resources.timestamp.Timestamp created_at = 2; */
        if (message.createdAt)
            Timestamp.internalBinaryWrite(message.createdAt, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 target_id = 3; */
        if (message.targetId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.targetId);
        /* string job = 4; */
        if (message.job !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 5; */
        if (message.jobLabel !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.jobLabel);
        /* int32 minimum_grade = 6; */
        if (message.minimumGrade !== 0)
            writer.tag(6, WireType.Varint).int32(message.minimumGrade);
        /* optional string job_grade_label = 7; */
        if (message.jobGradeLabel !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.jobGradeLabel);
        /* resources.documents.AccessLevel access = 8; */
        if (message.access !== 0)
            writer.tag(8, WireType.Varint).int32(message.access);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.TemplateJobAccess
 */
export const TemplateJobAccess = new TemplateJobAccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TemplateUserAccess$Type extends MessageType<TemplateUserAccess> {
    constructor() {
        super("resources.documents.TemplateUserAccess", []);
    }
    create(value?: PartialMessage<TemplateUserAccess>): TemplateUserAccess {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TemplateUserAccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TemplateUserAccess): TemplateUserAccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TemplateUserAccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.documents.TemplateUserAccess
 */
export const TemplateUserAccess = new TemplateUserAccess$Type();
