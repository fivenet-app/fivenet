// @generated by protobuf-ts 2.11.1 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "resources/internet/search.proto" (package "resources.internet", syntax proto3)
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Domain } from "./domain";
/**
 * @generated from protobuf message resources.internet.SearchResult
 */
export interface SearchResult {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string title = 2
     */
    title: string;
    /**
     * @generated from protobuf field: string description = 3
     */
    description: string;
    /**
     * @generated from protobuf field: uint64 domain_id = 4
     */
    domainId: number;
    /**
     * @generated from protobuf field: optional resources.internet.Domain domain = 5
     */
    domain?: Domain;
    /**
     * @generated from protobuf field: string path = 6
     */
    path: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class SearchResult$Type extends MessageType<SearchResult> {
    constructor() {
        super("resources.internet.SearchResult", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "domain_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "domain", kind: "message", T: () => Domain },
            { no: 6, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchResult>): SearchResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.title = "";
        message.description = "";
        message.domainId = 0;
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<SearchResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchResult): SearchResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                case /* string title */ 2:
                    message.title = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* uint64 domain_id */ 4:
                    message.domainId = reader.uint64().toNumber();
                    break;
                case /* optional resources.internet.Domain domain */ 5:
                    message.domain = Domain.internalBinaryRead(reader, reader.uint32(), options, message.domain);
                    break;
                case /* string path */ 6:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        /* string title = 2; */
        if (message.title !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* uint64 domain_id = 4; */
        if (message.domainId !== 0)
            writer.tag(4, WireType.Varint).uint64(message.domainId);
        /* optional resources.internet.Domain domain = 5; */
        if (message.domain)
            Domain.internalBinaryWrite(message.domain, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* string path = 6; */
        if (message.path !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message resources.internet.SearchResult
 */
export const SearchResult = new SearchResult$Type();
