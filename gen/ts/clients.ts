// Code generated by protoc-gen-fronthelper. DO NOT EDIT.

import type { RpcTransport } from '@protobuf-ts/runtime-rpc';
import { AuthServiceClient as authAuthServiceClient } from '~~/gen/ts/services/auth/auth.client';
import { CalendarServiceClient as calendarCalendarServiceClient } from '~~/gen/ts/services/calendar/calendar.client';
import { CentrumServiceClient as centrumCentrumServiceClient } from '~~/gen/ts/services/centrum/centrum.client';
import { CitizensServiceClient as citizensCitizensServiceClient } from '~~/gen/ts/services/citizens/citizens.client';
import { CompletorServiceClient as completorCompletorServiceClient } from '~~/gen/ts/services/completor/completor.client';
import { CollabServiceClient as documentsCollabServiceClient } from '~~/gen/ts/services/documents/collab.client';
import { DocumentsServiceClient as documentsDocumentsServiceClient } from '~~/gen/ts/services/documents/documents.client';
import { FilestoreServiceClient as filestoreFilestoreServiceClient } from '~~/gen/ts/services/filestore/filestore.client';
import { AdsServiceClient as internetAdsServiceClient } from '~~/gen/ts/services/internet/ads.client';
import { DomainServiceClient as internetDomainServiceClient } from '~~/gen/ts/services/internet/domain.client';
import { InternetServiceClient as internetInternetServiceClient } from '~~/gen/ts/services/internet/internet.client';
import { ConductServiceClient as jobsConductServiceClient } from '~~/gen/ts/services/jobs/conduct.client';
import { JobsServiceClient as jobsJobsServiceClient } from '~~/gen/ts/services/jobs/jobs.client';
import { TimeclockServiceClient as jobsTimeclockServiceClient } from '~~/gen/ts/services/jobs/timeclock.client';
import { LivemapServiceClient as livemapLivemapServiceClient } from '~~/gen/ts/services/livemap/livemap.client';
import { MailerServiceClient as mailerMailerServiceClient } from '~~/gen/ts/services/mailer/mailer.client';
import { NotificatorServiceClient as notificatorNotificatorServiceClient } from '~~/gen/ts/services/notificator/notificator.client';
import { QualificationsServiceClient as qualificationsQualificationsServiceClient } from '~~/gen/ts/services/qualifications/qualifications.client';
import { AccountsServiceClient as settingsAccountsServiceClient } from '~~/gen/ts/services/settings/accounts.client';
import { ConfigServiceClient as settingsConfigServiceClient } from '~~/gen/ts/services/settings/config.client';
import { CronServiceClient as settingsCronServiceClient } from '~~/gen/ts/services/settings/cron.client';
import { LawsServiceClient as settingsLawsServiceClient } from '~~/gen/ts/services/settings/laws.client';
import { SettingsServiceClient as settingsSettingsServiceClient } from '~~/gen/ts/services/settings/settings.client';
import { StatsServiceClient as statsStatsServiceClient } from '~~/gen/ts/services/stats/stats.client';
import { SyncServiceClient as syncSyncServiceClient } from '~~/gen/ts/services/sync/sync.client';
import { VehiclesServiceClient as vehiclesVehiclesServiceClient } from '~~/gen/ts/services/vehicles/vehicles.client';
import { CollabServiceClient as wikiCollabServiceClient } from '~~/gen/ts/services/wiki/collab.client';
import { WikiServiceClient as wikiWikiServiceClient } from '~~/gen/ts/services/wiki/wiki.client';

export class GRPCClients {
    public auth: {
        auth: authAuthServiceClient;
    };
    public calendar: {
        calendar: calendarCalendarServiceClient;
    };
    public centrum: {
        centrum: centrumCentrumServiceClient;
    };
    public citizens: {
        citizens: citizensCitizensServiceClient;
    };
    public completor: {
        completor: completorCompletorServiceClient;
    };
    public documents: {
        collab: documentsCollabServiceClient;
        documents: documentsDocumentsServiceClient;
    };
    public filestore: {
        filestore: filestoreFilestoreServiceClient;
    };
    public internet: {
        ads: internetAdsServiceClient;
        domain: internetDomainServiceClient;
        internet: internetInternetServiceClient;
    };
    public jobs: {
        conduct: jobsConductServiceClient;
        jobs: jobsJobsServiceClient;
        timeclock: jobsTimeclockServiceClient;
    };
    public livemap: {
        livemap: livemapLivemapServiceClient;
    };
    public mailer: {
        mailer: mailerMailerServiceClient;
    };
    public notificator: {
        notificator: notificatorNotificatorServiceClient;
    };
    public qualifications: {
        qualifications: qualificationsQualificationsServiceClient;
    };
    public settings: {
        accounts: settingsAccountsServiceClient;
        config: settingsConfigServiceClient;
        cron: settingsCronServiceClient;
        laws: settingsLawsServiceClient;
        settings: settingsSettingsServiceClient;
    };
    public stats: {
        stats: statsStatsServiceClient;
    };
    public sync: {
        sync: syncSyncServiceClient;
    };
    public vehicles: {
        vehicles: vehiclesVehiclesServiceClient;
    };
    public wiki: {
        collab: wikiCollabServiceClient;
        wiki: wikiWikiServiceClient;
    };

    constructor(transport: RpcTransport) {
        this.auth = {
            auth: new authAuthServiceClient(transport),
        };
        this.calendar = {
            calendar: new calendarCalendarServiceClient(transport),
        };
        this.centrum = {
            centrum: new centrumCentrumServiceClient(transport),
        };
        this.citizens = {
            citizens: new citizensCitizensServiceClient(transport),
        };
        this.completor = {
            completor: new completorCompletorServiceClient(transport),
        };
        this.documents = {
            collab: new documentsCollabServiceClient(transport),
            documents: new documentsDocumentsServiceClient(transport),
        };
        this.filestore = {
            filestore: new filestoreFilestoreServiceClient(transport),
        };
        this.internet = {
            ads: new internetAdsServiceClient(transport),
            domain: new internetDomainServiceClient(transport),
            internet: new internetInternetServiceClient(transport),
        };
        this.jobs = {
            conduct: new jobsConductServiceClient(transport),
            jobs: new jobsJobsServiceClient(transport),
            timeclock: new jobsTimeclockServiceClient(transport),
        };
        this.livemap = {
            livemap: new livemapLivemapServiceClient(transport),
        };
        this.mailer = {
            mailer: new mailerMailerServiceClient(transport),
        };
        this.notificator = {
            notificator: new notificatorNotificatorServiceClient(transport),
        };
        this.qualifications = {
            qualifications: new qualificationsQualificationsServiceClient(transport),
        };
        this.settings = {
            accounts: new settingsAccountsServiceClient(transport),
            config: new settingsConfigServiceClient(transport),
            cron: new settingsCronServiceClient(transport),
            laws: new settingsLawsServiceClient(transport),
            settings: new settingsSettingsServiceClient(transport),
        };
        this.stats = {
            stats: new statsStatsServiceClient(transport),
        };
        this.sync = {
            sync: new syncSyncServiceClient(transport),
        };
        this.vehicles = {
            vehicles: new vehiclesVehiclesServiceClient(transport),
        };
        this.wiki = {
            collab: new wikiCollabServiceClient(transport),
            wiki: new wikiWikiServiceClient(transport),
        };
    }
};
