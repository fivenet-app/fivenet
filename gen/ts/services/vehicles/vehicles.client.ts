// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/vehicles/vehicles.proto" (package "services.vehicles", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { VehiclesService } from "./vehicles";
import type { SetVehiclePropsResponse } from "./vehicles";
import type { SetVehiclePropsRequest } from "./vehicles";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListVehiclesResponse } from "./vehicles";
import type { ListVehiclesRequest } from "./vehicles";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.vehicles.VehiclesService
 */
export interface IVehiclesServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListVehicles
     */
    listVehicles(input: ListVehiclesRequest, options?: RpcOptions): UnaryCall<ListVehiclesRequest, ListVehiclesResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: SetVehicleProps
     */
    setVehicleProps(input: SetVehiclePropsRequest, options?: RpcOptions): UnaryCall<SetVehiclePropsRequest, SetVehiclePropsResponse>;
}
/**
 * @generated from protobuf service services.vehicles.VehiclesService
 */
export class VehiclesServiceClient implements IVehiclesServiceClient, ServiceInfo {
    typeName = VehiclesService.typeName;
    methods = VehiclesService.methods;
    options = VehiclesService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListVehicles
     */
    listVehicles(input: ListVehiclesRequest, options?: RpcOptions): UnaryCall<ListVehiclesRequest, ListVehiclesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListVehiclesRequest, ListVehiclesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: SetVehicleProps
     */
    setVehicleProps(input: SetVehiclePropsRequest, options?: RpcOptions): UnaryCall<SetVehiclePropsRequest, SetVehiclePropsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetVehiclePropsRequest, SetVehiclePropsResponse>("unary", this._transport, method, opt, input);
    }
}
