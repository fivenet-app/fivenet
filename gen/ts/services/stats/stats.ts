// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/stats/stats.proto" (package "services.stats", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Stat } from "../../resources/stats/stats";
/**
 * @generated from protobuf message services.stats.GetStatsRequest
 */
export interface GetStatsRequest {
}
/**
 * @generated from protobuf message services.stats.GetStatsResponse
 */
export interface GetStatsResponse {
    /**
     * @generated from protobuf field: map<string, resources.stats.Stat> stats = 1;
     */
    stats: {
        [key: string]: Stat;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GetStatsRequest$Type extends MessageType<GetStatsRequest> {
    constructor() {
        super("services.stats.GetStatsRequest", []);
    }
    create(value?: PartialMessage<GetStatsRequest>): GetStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatsRequest): GetStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.stats.GetStatsRequest
 */
export const GetStatsRequest = new GetStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatsResponse$Type extends MessageType<GetStatsResponse> {
    constructor() {
        super("services.stats.GetStatsResponse", [
            { no: 1, name: "stats", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Stat } }
        ]);
    }
    create(value?: PartialMessage<GetStatsResponse>): GetStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stats = {};
        if (value !== undefined)
            reflectionMergePartial<GetStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatsResponse): GetStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, resources.stats.Stat> stats */ 1:
                    this.binaryReadMap1(message.stats, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GetStatsResponse["stats"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GetStatsResponse["stats"] | undefined, val: GetStatsResponse["stats"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Stat.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field services.stats.GetStatsResponse.stats");
            }
        }
        map[key ?? ""] = val ?? Stat.create();
    }
    internalBinaryWrite(message: GetStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, resources.stats.Stat> stats = 1; */
        for (let k of globalThis.Object.keys(message.stats)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Stat.internalBinaryWrite(message.stats[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.stats.GetStatsResponse
 */
export const GetStatsResponse = new GetStatsResponse$Type();
/**
 * @generated ServiceType for protobuf service services.stats.StatsService
 */
export const StatsService = new ServiceType("services.stats.StatsService", [
    { name: "GetStats", options: {}, I: GetStatsRequest, O: GetStatsResponse }
]);
