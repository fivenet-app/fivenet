// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/documents/collaboration.proto" (package "services.documents", syntax proto3)
// @ts-nocheck
import type { DuplexStreamingCall, RpcOptions, RpcTransport, ServiceInfo } from '@protobuf-ts/runtime-rpc';
import { stackIntercept } from '@protobuf-ts/runtime-rpc';
import type { CollabMessage } from './collaboration';
import { CollabService } from './collaboration';
/**
 * @generated from protobuf service services.documents.CollabService
 */
export interface ICollabServiceClient {
    /**
     * @generated from protobuf rpc: JoinDocument(stream services.documents.CollabMessage) returns (stream services.documents.CollabMessage);
     */
    joinRoom(options?: RpcOptions): DuplexStreamingCall<CollabMessage, CollabMessage>;
}
/**
 * @generated from protobuf service services.documents.CollabService
 */
export class CollabServiceClient implements ICollabServiceClient, ServiceInfo {
    typeName = CollabService.typeName;
    methods = CollabService.methods;
    options = CollabService.options;
    constructor(private readonly _transport: RpcTransport) {}
    /**
     * @generated from protobuf rpc: JoinDocument(stream services.documents.CollabMessage) returns (stream services.documents.CollabMessage);
     */
    joinRoom(options?: RpcOptions): DuplexStreamingCall<CollabMessage, CollabMessage> {
        const method = this.methods[0],
            opt = this._transport.mergeOptions(options);
        return stackIntercept<CollabMessage, CollabMessage>('duplex', this._transport, method, opt);
    }
}
