// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/documents.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import { UploadResponse } from "../../resources/file/filestore";
import { UploadPacket } from "../../resources/file/filestore";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DocumentPin } from "../../resources/documents/pins";
import { Category } from "../../resources/documents/category";
import { DocRelation } from "../../resources/documents/documents";
import { DocActivityData } from "../../resources/documents/activity";
import { DocRequest } from "../../resources/documents/requests";
import { DocActivity } from "../../resources/documents/activity";
import { DocActivityType } from "../../resources/documents/activity";
import { File } from "../../resources/file/file";
import { Content } from "../../resources/common/content/content";
import { ContentType } from "../../resources/common/content/content";
import { Comment } from "../../resources/documents/comment";
import { DocumentRelation } from "../../resources/documents/documents";
import { DocumentReference } from "../../resources/documents/documents";
import { DocumentAccess } from "../../resources/documents/access";
import { Document } from "../../resources/documents/documents";
import { DocumentShort } from "../../resources/documents/documents";
import { PaginationResponse } from "../../resources/common/database/database";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { Sort } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
import { Template } from "../../resources/documents/templates";
import { TemplateData } from "../../resources/documents/templates";
import { TemplateShort } from "../../resources/documents/templates";
// Templates ==================================================================

/**
 * @generated from protobuf message services.documents.ListTemplatesRequest
 */
export interface ListTemplatesRequest {
}
/**
 * @generated from protobuf message services.documents.ListTemplatesResponse
 */
export interface ListTemplatesResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.TemplateShort templates = 1
     */
    templates: TemplateShort[];
}
/**
 * @generated from protobuf message services.documents.GetTemplateRequest
 */
export interface GetTemplateRequest {
    /**
     * @generated from protobuf field: uint64 template_id = 1
     */
    templateId: number;
    /**
     * @generated from protobuf field: optional resources.documents.TemplateData data = 2
     */
    data?: TemplateData;
    /**
     * @generated from protobuf field: optional bool render = 3
     */
    render?: boolean;
}
/**
 * @generated from protobuf message services.documents.GetTemplateResponse
 */
export interface GetTemplateResponse {
    /**
     * @generated from protobuf field: resources.documents.Template template = 1
     */
    template?: Template;
    /**
     * @generated from protobuf field: bool rendered = 2
     */
    rendered: boolean;
}
/**
 * @generated from protobuf message services.documents.CreateTemplateRequest
 */
export interface CreateTemplateRequest {
    /**
     * @generated from protobuf field: resources.documents.Template template = 1
     */
    template?: Template;
}
/**
 * @generated from protobuf message services.documents.CreateTemplateResponse
 */
export interface CreateTemplateResponse {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.UpdateTemplateRequest
 */
export interface UpdateTemplateRequest {
    /**
     * @generated from protobuf field: resources.documents.Template template = 1
     */
    template?: Template;
}
/**
 * @generated from protobuf message services.documents.UpdateTemplateResponse
 */
export interface UpdateTemplateResponse {
    /**
     * @generated from protobuf field: resources.documents.Template template = 1
     */
    template?: Template;
}
/**
 * @generated from protobuf message services.documents.DeleteTemplateRequest
 */
export interface DeleteTemplateRequest {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.DeleteTemplateResponse
 */
export interface DeleteTemplateResponse {
}
// Documents ==================================================================

/**
 * @generated from protobuf message services.documents.ListDocumentsRequest
 */
export interface ListDocumentsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: optional string search = 3
     */
    search?: string;
    /**
     * @generated from protobuf field: repeated uint64 category_ids = 4
     */
    categoryIds: number[];
    /**
     * @generated from protobuf field: repeated int32 creator_ids = 5
     */
    creatorIds: number[];
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp from = 6
     */
    from?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp to = 7
     */
    to?: Timestamp;
    /**
     * @generated from protobuf field: optional bool closed = 8
     */
    closed?: boolean;
    /**
     * @generated from protobuf field: repeated uint64 document_ids = 9
     */
    documentIds: number[];
    /**
     * Controls inclusion of drafts in the result:
     * - unset/null: include all documents (drafts and non-drafts)
     * - false: only non-draft documents
     * - true: only draft documents
     *
     * @generated from protobuf field: optional bool only_drafts = 10
     */
    onlyDrafts?: boolean;
}
/**
 * @generated from protobuf message services.documents.ListDocumentsResponse
 */
export interface ListDocumentsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentShort documents = 2
     */
    documents: DocumentShort[];
}
/**
 * @generated from protobuf message services.documents.GetDocumentRequest
 */
export interface GetDocumentRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: optional bool info_only = 2
     */
    infoOnly?: boolean;
}
/**
 * @generated from protobuf message services.documents.GetDocumentResponse
 */
export interface GetDocumentResponse {
    /**
     * @generated from protobuf field: resources.documents.Document document = 1
     */
    document?: Document;
    /**
     * @generated from protobuf field: resources.documents.DocumentAccess access = 2
     */
    access?: DocumentAccess;
}
/**
 * @generated from protobuf message services.documents.GetDocumentReferencesRequest
 */
export interface GetDocumentReferencesRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.GetDocumentReferencesResponse
 */
export interface GetDocumentReferencesResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentReference references = 1
     */
    references: DocumentReference[];
}
/**
 * @generated from protobuf message services.documents.GetDocumentRelationsRequest
 */
export interface GetDocumentRelationsRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.GetDocumentRelationsResponse
 */
export interface GetDocumentRelationsResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentRelation relations = 1
     */
    relations: DocumentRelation[];
}
/**
 * @generated from protobuf message services.documents.AddDocumentReferenceRequest
 */
export interface AddDocumentReferenceRequest {
    /**
     * @generated from protobuf field: resources.documents.DocumentReference reference = 1
     */
    reference?: DocumentReference;
}
/**
 * @generated from protobuf message services.documents.AddDocumentReferenceResponse
 */
export interface AddDocumentReferenceResponse {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.RemoveDocumentReferenceRequest
 */
export interface RemoveDocumentReferenceRequest {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.RemoveDocumentReferenceResponse
 */
export interface RemoveDocumentReferenceResponse {
}
/**
 * @generated from protobuf message services.documents.AddDocumentRelationRequest
 */
export interface AddDocumentRelationRequest {
    /**
     * @generated from protobuf field: resources.documents.DocumentRelation relation = 1
     */
    relation?: DocumentRelation;
}
/**
 * @generated from protobuf message services.documents.AddDocumentRelationResponse
 */
export interface AddDocumentRelationResponse {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.RemoveDocumentRelationRequest
 */
export interface RemoveDocumentRelationRequest {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.RemoveDocumentRelationResponse
 */
export interface RemoveDocumentRelationResponse {
}
// Comments ===============================================================

/**
 * @generated from protobuf message services.documents.GetCommentsRequest
 */
export interface GetCommentsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 document_id = 2
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.GetCommentsResponse
 */
export interface GetCommentsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.Comment comments = 2
     */
    comments: Comment[];
}
/**
 * @generated from protobuf message services.documents.PostCommentRequest
 */
export interface PostCommentRequest {
    /**
     * @generated from protobuf field: resources.documents.Comment comment = 1
     */
    comment?: Comment;
}
/**
 * @generated from protobuf message services.documents.PostCommentResponse
 */
export interface PostCommentResponse {
    /**
     * @generated from protobuf field: resources.documents.Comment comment = 1
     */
    comment?: Comment;
}
/**
 * @generated from protobuf message services.documents.EditCommentRequest
 */
export interface EditCommentRequest {
    /**
     * @generated from protobuf field: resources.documents.Comment comment = 1
     */
    comment?: Comment;
}
/**
 * @generated from protobuf message services.documents.EditCommentResponse
 */
export interface EditCommentResponse {
    /**
     * @generated from protobuf field: resources.documents.Comment comment = 1
     */
    comment?: Comment;
}
/**
 * @generated from protobuf message services.documents.DeleteCommentRequest
 */
export interface DeleteCommentRequest {
    /**
     * @generated from protobuf field: uint64 comment_id = 1
     */
    commentId: number;
}
/**
 * @generated from protobuf message services.documents.DeleteCommentResponse
 */
export interface DeleteCommentResponse {
}
/**
 * @generated from protobuf message services.documents.UpdateDocumentResponse
 */
export interface UpdateDocumentResponse {
    /**
     * @generated from protobuf field: resources.documents.Document document = 1
     */
    document?: Document;
}
/**
 * @generated from protobuf message services.documents.DeleteDocumentRequest
 */
export interface DeleteDocumentRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string reason = 2
     */
    reason?: string;
}
/**
 * @generated from protobuf message services.documents.DeleteDocumentResponse
 */
export interface DeleteDocumentResponse {
}
/**
 * @generated from protobuf message services.documents.ToggleDocumentRequest
 */
export interface ToggleDocumentRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: bool closed = 2
     */
    closed: boolean;
}
/**
 * @generated from protobuf message services.documents.ToggleDocumentResponse
 */
export interface ToggleDocumentResponse {
}
/**
 * @generated from protobuf message services.documents.ChangeDocumentOwnerRequest
 */
export interface ChangeDocumentOwnerRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: optional int32 new_user_id = 2
     */
    newUserId?: number;
}
/**
 * @generated from protobuf message services.documents.ChangeDocumentOwnerResponse
 */
export interface ChangeDocumentOwnerResponse {
}
/**
 * @generated from protobuf message services.documents.CreateDocumentRequest
 */
export interface CreateDocumentRequest {
    /**
     * @generated from protobuf field: resources.common.content.ContentType content_type = 1
     */
    contentType: ContentType;
    /**
     * @generated from protobuf field: optional uint64 template_id = 2
     */
    templateId?: number;
    /**
     * @generated from protobuf field: optional resources.documents.TemplateData template_data = 3
     */
    templateData?: TemplateData;
}
/**
 * @generated from protobuf message services.documents.CreateDocumentResponse
 */
export interface CreateDocumentResponse {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.UpdateDocumentRequest
 */
export interface UpdateDocumentRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: optional uint64 category_id = 2
     */
    categoryId?: number;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string title = 3
     */
    title: string;
    /**
     * @generated from protobuf field: resources.common.content.Content content = 4
     */
    content?: Content;
    /**
     * @generated from protobuf field: resources.common.content.ContentType content_type = 5
     */
    contentType: ContentType;
    /**
     * @generated from protobuf field: optional string data = 6
     */
    data?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string state = 7
     */
    state: string;
    /**
     * @generated from protobuf field: bool closed = 8
     */
    closed: boolean;
    /**
     * @generated from protobuf field: bool draft = 9
     */
    draft: boolean;
    /**
     * @generated from protobuf field: bool public = 10
     */
    public: boolean;
    /**
     * @generated from protobuf field: optional resources.documents.DocumentAccess access = 11
     */
    access?: DocumentAccess;
    /**
     * @generated from protobuf field: repeated resources.file.File files = 12
     */
    files: File[];
}
// Document Activity and Requests =============================================

/**
 * @generated from protobuf message services.documents.ListDocumentActivityRequest
 */
export interface ListDocumentActivityRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 document_id = 2
     */
    documentId: number;
    /**
     * Search params
     *
     * @generated from protobuf field: repeated resources.documents.DocActivityType activity_types = 3
     */
    activityTypes: DocActivityType[];
}
/**
 * @generated from protobuf message services.documents.ListDocumentActivityResponse
 */
export interface ListDocumentActivityResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.DocActivity activity = 2
     */
    activity: DocActivity[];
}
/**
 * @generated from protobuf message services.documents.ListDocumentReqsRequest
 */
export interface ListDocumentReqsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 document_id = 2
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.ListDocumentReqsResponse
 */
export interface ListDocumentReqsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.DocRequest requests = 2
     */
    requests: DocRequest[];
}
/**
 * @generated from protobuf message services.documents.CreateDocumentReqRequest
 */
export interface CreateDocumentReqRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.documents.DocActivityType request_type = 2
     */
    requestType: DocActivityType;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 3
     */
    reason?: string;
    /**
     * @generated from protobuf field: optional resources.documents.DocActivityData data = 4
     */
    data?: DocActivityData;
}
/**
 * @generated from protobuf message services.documents.CreateDocumentReqResponse
 */
export interface CreateDocumentReqResponse {
    /**
     * @generated from protobuf field: resources.documents.DocRequest request = 1
     */
    request?: DocRequest;
}
/**
 * @generated from protobuf message services.documents.UpdateDocumentReqRequest
 */
export interface UpdateDocumentReqRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: uint64 request_id = 2
     */
    requestId: number;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 3
     */
    reason?: string;
    /**
     * @generated from protobuf field: optional resources.documents.DocActivityData data = 4
     */
    data?: DocActivityData;
    /**
     * @generated from protobuf field: bool accepted = 5
     */
    accepted: boolean;
}
/**
 * @generated from protobuf message services.documents.UpdateDocumentReqResponse
 */
export interface UpdateDocumentReqResponse {
    /**
     * @generated from protobuf field: resources.documents.DocRequest request = 1
     */
    request?: DocRequest;
}
/**
 * @generated from protobuf message services.documents.DeleteDocumentReqRequest
 */
export interface DeleteDocumentReqRequest {
    /**
     * @generated from protobuf field: uint64 request_id = 1
     */
    requestId: number;
}
/**
 * @generated from protobuf message services.documents.DeleteDocumentReqResponse
 */
export interface DeleteDocumentReqResponse {
}
// Access =====================================================================

/**
 * @generated from protobuf message services.documents.GetDocumentAccessRequest
 */
export interface GetDocumentAccessRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.GetDocumentAccessResponse
 */
export interface GetDocumentAccessResponse {
    /**
     * @generated from protobuf field: resources.documents.DocumentAccess access = 1
     */
    access?: DocumentAccess;
}
/**
 * @generated from protobuf message services.documents.SetDocumentAccessRequest
 */
export interface SetDocumentAccessRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.documents.DocumentAccess access = 2
     */
    access?: DocumentAccess;
}
/**
 * @generated from protobuf message services.documents.SetDocumentAccessResponse
 */
export interface SetDocumentAccessResponse {
}
/**
 * @generated from protobuf message services.documents.ListUserDocumentsRequest
 */
export interface ListUserDocumentsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2
     */
    sort?: Sort;
    /**
     * @generated from protobuf field: int32 user_id = 3
     */
    userId: number;
    /**
     * @generated from protobuf field: repeated resources.documents.DocRelation relations = 4
     */
    relations: DocRelation[];
    /**
     * @generated from protobuf field: optional bool closed = 5
     */
    closed?: boolean;
}
/**
 * @generated from protobuf message services.documents.ListUserDocumentsResponse
 */
export interface ListUserDocumentsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentRelation relations = 2
     */
    relations: DocumentRelation[];
}
// Categories =================================================================

/**
 * @generated from protobuf message services.documents.ListCategoriesRequest
 */
export interface ListCategoriesRequest {
}
/**
 * @generated from protobuf message services.documents.ListCategoriesResponse
 */
export interface ListCategoriesResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.Category categories = 1
     */
    categories: Category[];
}
/**
 * @generated from protobuf message services.documents.CreateOrUpdateCategoryRequest
 */
export interface CreateOrUpdateCategoryRequest {
    /**
     * @generated from protobuf field: resources.documents.Category category = 1
     */
    category?: Category;
}
/**
 * @generated from protobuf message services.documents.CreateOrUpdateCategoryResponse
 */
export interface CreateOrUpdateCategoryResponse {
    /**
     * @generated from protobuf field: resources.documents.Category category = 1
     */
    category?: Category;
}
/**
 * @generated from protobuf message services.documents.DeleteCategoryRequest
 */
export interface DeleteCategoryRequest {
    /**
     * @generated from protobuf field: uint64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.DeleteCategoryResponse
 */
export interface DeleteCategoryResponse {
}
// Pins =======================================================================

/**
 * @generated from protobuf message services.documents.ListDocumentPinsRequest
 */
export interface ListDocumentPinsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * Search params
     * If true, only personal pins are returned
     *
     * @generated from protobuf field: optional bool personal = 2
     */
    personal?: boolean;
}
/**
 * @generated from protobuf message services.documents.ListDocumentPinsResponse
 */
export interface ListDocumentPinsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.DocumentShort documents = 2
     */
    documents: DocumentShort[];
}
/**
 * @generated from protobuf message services.documents.ToggleDocumentPinRequest
 */
export interface ToggleDocumentPinRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: bool state = 2
     */
    state: boolean;
    /**
     * If true, the pin is personal and not shared with other job members
     *
     * @generated from protobuf field: optional bool personal = 3
     */
    personal?: boolean;
}
/**
 * @generated from protobuf message services.documents.ToggleDocumentPinResponse
 */
export interface ToggleDocumentPinResponse {
    /**
     * @generated from protobuf field: optional resources.documents.DocumentPin pin = 1
     */
    pin?: DocumentPin;
}
// Reminders ==================================================================

/**
 * @generated from protobuf message services.documents.SetDocumentReminderRequest
 */
export interface SetDocumentReminderRequest {
    /**
     * @generated from protobuf field: uint64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp reminder_time = 2
     */
    reminderTime?: Timestamp;
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: optional string message = 3
     */
    message?: string;
}
/**
 * @generated from protobuf message services.documents.SetDocumentReminderResponse
 */
export interface SetDocumentReminderResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListTemplatesRequest$Type extends MessageType<ListTemplatesRequest> {
    constructor() {
        super("services.documents.ListTemplatesRequest", []);
    }
    create(value?: PartialMessage<ListTemplatesRequest>): ListTemplatesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListTemplatesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTemplatesRequest): ListTemplatesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTemplatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListTemplatesRequest
 */
export const ListTemplatesRequest = new ListTemplatesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTemplatesResponse$Type extends MessageType<ListTemplatesResponse> {
    constructor() {
        super("services.documents.ListTemplatesResponse", [
            { no: 1, name: "templates", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TemplateShort }
        ]);
    }
    create(value?: PartialMessage<ListTemplatesResponse>): ListTemplatesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.templates = [];
        if (value !== undefined)
            reflectionMergePartial<ListTemplatesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTemplatesResponse): ListTemplatesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.TemplateShort templates */ 1:
                    message.templates.push(TemplateShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTemplatesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.TemplateShort templates = 1; */
        for (let i = 0; i < message.templates.length; i++)
            TemplateShort.internalBinaryWrite(message.templates[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListTemplatesResponse
 */
export const ListTemplatesResponse = new ListTemplatesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTemplateRequest$Type extends MessageType<GetTemplateRequest> {
    constructor() {
        super("services.documents.GetTemplateRequest", [
            { no: 1, name: "template_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "data", kind: "message", T: () => TemplateData },
            { no: 3, name: "render", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetTemplateRequest>): GetTemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.templateId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTemplateRequest): GetTemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 template_id */ 1:
                    message.templateId = reader.uint64().toNumber();
                    break;
                case /* optional resources.documents.TemplateData data */ 2:
                    message.data = TemplateData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* optional bool render */ 3:
                    message.render = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 template_id = 1; */
        if (message.templateId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.templateId);
        /* optional resources.documents.TemplateData data = 2; */
        if (message.data)
            TemplateData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional bool render = 3; */
        if (message.render !== undefined)
            writer.tag(3, WireType.Varint).bool(message.render);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetTemplateRequest
 */
export const GetTemplateRequest = new GetTemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTemplateResponse$Type extends MessageType<GetTemplateResponse> {
    constructor() {
        super("services.documents.GetTemplateResponse", [
            { no: 1, name: "template", kind: "message", T: () => Template },
            { no: 2, name: "rendered", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetTemplateResponse>): GetTemplateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.rendered = false;
        if (value !== undefined)
            reflectionMergePartial<GetTemplateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTemplateResponse): GetTemplateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Template template */ 1:
                    message.template = Template.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                case /* bool rendered */ 2:
                    message.rendered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTemplateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Template template = 1; */
        if (message.template)
            Template.internalBinaryWrite(message.template, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool rendered = 2; */
        if (message.rendered !== false)
            writer.tag(2, WireType.Varint).bool(message.rendered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetTemplateResponse
 */
export const GetTemplateResponse = new GetTemplateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTemplateRequest$Type extends MessageType<CreateTemplateRequest> {
    constructor() {
        super("services.documents.CreateTemplateRequest", [
            { no: 1, name: "template", kind: "message", T: () => Template, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<CreateTemplateRequest>): CreateTemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateTemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTemplateRequest): CreateTemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Template template */ 1:
                    message.template = Template.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Template template = 1; */
        if (message.template)
            Template.internalBinaryWrite(message.template, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateTemplateRequest
 */
export const CreateTemplateRequest = new CreateTemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTemplateResponse$Type extends MessageType<CreateTemplateResponse> {
    constructor() {
        super("services.documents.CreateTemplateResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTemplateResponse>): CreateTemplateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateTemplateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTemplateResponse): CreateTemplateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTemplateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateTemplateResponse
 */
export const CreateTemplateResponse = new CreateTemplateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTemplateRequest$Type extends MessageType<UpdateTemplateRequest> {
    constructor() {
        super("services.documents.UpdateTemplateRequest", [
            { no: 1, name: "template", kind: "message", T: () => Template, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<UpdateTemplateRequest>): UpdateTemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateTemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTemplateRequest): UpdateTemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Template template */ 1:
                    message.template = Template.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Template template = 1; */
        if (message.template)
            Template.internalBinaryWrite(message.template, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpdateTemplateRequest
 */
export const UpdateTemplateRequest = new UpdateTemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateTemplateResponse$Type extends MessageType<UpdateTemplateResponse> {
    constructor() {
        super("services.documents.UpdateTemplateResponse", [
            { no: 1, name: "template", kind: "message", T: () => Template }
        ]);
    }
    create(value?: PartialMessage<UpdateTemplateResponse>): UpdateTemplateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateTemplateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateTemplateResponse): UpdateTemplateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Template template */ 1:
                    message.template = Template.internalBinaryRead(reader, reader.uint32(), options, message.template);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateTemplateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Template template = 1; */
        if (message.template)
            Template.internalBinaryWrite(message.template, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpdateTemplateResponse
 */
export const UpdateTemplateResponse = new UpdateTemplateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTemplateRequest$Type extends MessageType<DeleteTemplateRequest> {
    constructor() {
        super("services.documents.DeleteTemplateRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteTemplateRequest>): DeleteTemplateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteTemplateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTemplateRequest): DeleteTemplateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTemplateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteTemplateRequest
 */
export const DeleteTemplateRequest = new DeleteTemplateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteTemplateResponse$Type extends MessageType<DeleteTemplateResponse> {
    constructor() {
        super("services.documents.DeleteTemplateResponse", []);
    }
    create(value?: PartialMessage<DeleteTemplateResponse>): DeleteTemplateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteTemplateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteTemplateResponse): DeleteTemplateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteTemplateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteTemplateResponse
 */
export const DeleteTemplateResponse = new DeleteTemplateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentsRequest$Type extends MessageType<ListDocumentsRequest> {
    constructor() {
        super("services.documents.ListDocumentsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "64" } } } },
            { no: 4, name: "category_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { repeated: { maxItems: "5" } } } },
            { no: 5, name: "creator_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { repeated: { maxItems: "5" } } } },
            { no: 6, name: "from", kind: "message", T: () => Timestamp },
            { no: 7, name: "to", kind: "message", T: () => Timestamp },
            { no: 8, name: "closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "document_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { repeated: { maxItems: "5" } } } },
            { no: 10, name: "only_drafts", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListDocumentsRequest>): ListDocumentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categoryIds = [];
        message.creatorIds = [];
        message.documentIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListDocumentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentsRequest): ListDocumentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* optional string search */ 3:
                    message.search = reader.string();
                    break;
                case /* repeated uint64 category_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.categoryIds.push(reader.uint64().toNumber());
                    else
                        message.categoryIds.push(reader.uint64().toNumber());
                    break;
                case /* repeated int32 creator_ids */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.creatorIds.push(reader.int32());
                    else
                        message.creatorIds.push(reader.int32());
                    break;
                case /* optional resources.timestamp.Timestamp from */ 6:
                    message.from = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.from);
                    break;
                case /* optional resources.timestamp.Timestamp to */ 7:
                    message.to = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.to);
                    break;
                case /* optional bool closed */ 8:
                    message.closed = reader.bool();
                    break;
                case /* repeated uint64 document_ids */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.documentIds.push(reader.uint64().toNumber());
                    else
                        message.documentIds.push(reader.uint64().toNumber());
                    break;
                case /* optional bool only_drafts */ 10:
                    message.onlyDrafts = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string search = 3; */
        if (message.search !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.search);
        /* repeated uint64 category_ids = 4; */
        if (message.categoryIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.categoryIds.length; i++)
                writer.uint64(message.categoryIds[i]);
            writer.join();
        }
        /* repeated int32 creator_ids = 5; */
        if (message.creatorIds.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.creatorIds.length; i++)
                writer.int32(message.creatorIds[i]);
            writer.join();
        }
        /* optional resources.timestamp.Timestamp from = 6; */
        if (message.from)
            Timestamp.internalBinaryWrite(message.from, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp to = 7; */
        if (message.to)
            Timestamp.internalBinaryWrite(message.to, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional bool closed = 8; */
        if (message.closed !== undefined)
            writer.tag(8, WireType.Varint).bool(message.closed);
        /* repeated uint64 document_ids = 9; */
        if (message.documentIds.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.documentIds.length; i++)
                writer.uint64(message.documentIds[i]);
            writer.join();
        }
        /* optional bool only_drafts = 10; */
        if (message.onlyDrafts !== undefined)
            writer.tag(10, WireType.Varint).bool(message.onlyDrafts);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentsRequest
 */
export const ListDocumentsRequest = new ListDocumentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentsResponse$Type extends MessageType<ListDocumentsResponse> {
    constructor() {
        super("services.documents.ListDocumentsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "documents", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentShort }
        ]);
    }
    create(value?: PartialMessage<ListDocumentsResponse>): ListDocumentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documents = [];
        if (value !== undefined)
            reflectionMergePartial<ListDocumentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentsResponse): ListDocumentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.DocumentShort documents */ 2:
                    message.documents.push(DocumentShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentShort documents = 2; */
        for (let i = 0; i < message.documents.length; i++)
            DocumentShort.internalBinaryWrite(message.documents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentsResponse
 */
export const ListDocumentsResponse = new ListDocumentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentRequest$Type extends MessageType<GetDocumentRequest> {
    constructor() {
        super("services.documents.GetDocumentRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "info_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetDocumentRequest>): GetDocumentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentRequest): GetDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* optional bool info_only */ 2:
                    message.infoOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* optional bool info_only = 2; */
        if (message.infoOnly !== undefined)
            writer.tag(2, WireType.Varint).bool(message.infoOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentRequest
 */
export const GetDocumentRequest = new GetDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentResponse$Type extends MessageType<GetDocumentResponse> {
    constructor() {
        super("services.documents.GetDocumentResponse", [
            { no: 1, name: "document", kind: "message", T: () => Document },
            { no: 2, name: "access", kind: "message", T: () => DocumentAccess }
        ]);
    }
    create(value?: PartialMessage<GetDocumentResponse>): GetDocumentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentResponse): GetDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Document document */ 1:
                    message.document = Document.internalBinaryRead(reader, reader.uint32(), options, message.document);
                    break;
                case /* resources.documents.DocumentAccess access */ 2:
                    message.access = DocumentAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Document document = 1; */
        if (message.document)
            Document.internalBinaryWrite(message.document, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.DocumentAccess access = 2; */
        if (message.access)
            DocumentAccess.internalBinaryWrite(message.access, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentResponse
 */
export const GetDocumentResponse = new GetDocumentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentReferencesRequest$Type extends MessageType<GetDocumentReferencesRequest> {
    constructor() {
        super("services.documents.GetDocumentReferencesRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetDocumentReferencesRequest>): GetDocumentReferencesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDocumentReferencesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentReferencesRequest): GetDocumentReferencesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentReferencesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentReferencesRequest
 */
export const GetDocumentReferencesRequest = new GetDocumentReferencesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentReferencesResponse$Type extends MessageType<GetDocumentReferencesResponse> {
    constructor() {
        super("services.documents.GetDocumentReferencesResponse", [
            { no: 1, name: "references", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentReference, options: { "tagger.tags": "alias:\"reference\"" } }
        ]);
    }
    create(value?: PartialMessage<GetDocumentReferencesResponse>): GetDocumentReferencesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.references = [];
        if (value !== undefined)
            reflectionMergePartial<GetDocumentReferencesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentReferencesResponse): GetDocumentReferencesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.DocumentReference references */ 1:
                    message.references.push(DocumentReference.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentReferencesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.DocumentReference references = 1; */
        for (let i = 0; i < message.references.length; i++)
            DocumentReference.internalBinaryWrite(message.references[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentReferencesResponse
 */
export const GetDocumentReferencesResponse = new GetDocumentReferencesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentRelationsRequest$Type extends MessageType<GetDocumentRelationsRequest> {
    constructor() {
        super("services.documents.GetDocumentRelationsRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetDocumentRelationsRequest>): GetDocumentRelationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDocumentRelationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentRelationsRequest): GetDocumentRelationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentRelationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentRelationsRequest
 */
export const GetDocumentRelationsRequest = new GetDocumentRelationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentRelationsResponse$Type extends MessageType<GetDocumentRelationsResponse> {
    constructor() {
        super("services.documents.GetDocumentRelationsResponse", [
            { no: 1, name: "relations", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentRelation, options: { "tagger.tags": "alias:\"relation\"" } }
        ]);
    }
    create(value?: PartialMessage<GetDocumentRelationsResponse>): GetDocumentRelationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.relations = [];
        if (value !== undefined)
            reflectionMergePartial<GetDocumentRelationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentRelationsResponse): GetDocumentRelationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.DocumentRelation relations */ 1:
                    message.relations.push(DocumentRelation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentRelationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.DocumentRelation relations = 1; */
        for (let i = 0; i < message.relations.length; i++)
            DocumentRelation.internalBinaryWrite(message.relations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentRelationsResponse
 */
export const GetDocumentRelationsResponse = new GetDocumentRelationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDocumentReferenceRequest$Type extends MessageType<AddDocumentReferenceRequest> {
    constructor() {
        super("services.documents.AddDocumentReferenceRequest", [
            { no: 1, name: "reference", kind: "message", T: () => DocumentReference, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<AddDocumentReferenceRequest>): AddDocumentReferenceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddDocumentReferenceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDocumentReferenceRequest): AddDocumentReferenceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocumentReference reference */ 1:
                    message.reference = DocumentReference.internalBinaryRead(reader, reader.uint32(), options, message.reference);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDocumentReferenceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocumentReference reference = 1; */
        if (message.reference)
            DocumentReference.internalBinaryWrite(message.reference, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.AddDocumentReferenceRequest
 */
export const AddDocumentReferenceRequest = new AddDocumentReferenceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDocumentReferenceResponse$Type extends MessageType<AddDocumentReferenceResponse> {
    constructor() {
        super("services.documents.AddDocumentReferenceResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddDocumentReferenceResponse>): AddDocumentReferenceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<AddDocumentReferenceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDocumentReferenceResponse): AddDocumentReferenceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDocumentReferenceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.AddDocumentReferenceResponse
 */
export const AddDocumentReferenceResponse = new AddDocumentReferenceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDocumentReferenceRequest$Type extends MessageType<RemoveDocumentReferenceRequest> {
    constructor() {
        super("services.documents.RemoveDocumentReferenceRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveDocumentReferenceRequest>): RemoveDocumentReferenceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveDocumentReferenceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDocumentReferenceRequest): RemoveDocumentReferenceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDocumentReferenceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RemoveDocumentReferenceRequest
 */
export const RemoveDocumentReferenceRequest = new RemoveDocumentReferenceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDocumentReferenceResponse$Type extends MessageType<RemoveDocumentReferenceResponse> {
    constructor() {
        super("services.documents.RemoveDocumentReferenceResponse", []);
    }
    create(value?: PartialMessage<RemoveDocumentReferenceResponse>): RemoveDocumentReferenceResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveDocumentReferenceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDocumentReferenceResponse): RemoveDocumentReferenceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDocumentReferenceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RemoveDocumentReferenceResponse
 */
export const RemoveDocumentReferenceResponse = new RemoveDocumentReferenceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDocumentRelationRequest$Type extends MessageType<AddDocumentRelationRequest> {
    constructor() {
        super("services.documents.AddDocumentRelationRequest", [
            { no: 1, name: "relation", kind: "message", T: () => DocumentRelation, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<AddDocumentRelationRequest>): AddDocumentRelationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddDocumentRelationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDocumentRelationRequest): AddDocumentRelationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocumentRelation relation */ 1:
                    message.relation = DocumentRelation.internalBinaryRead(reader, reader.uint32(), options, message.relation);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDocumentRelationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocumentRelation relation = 1; */
        if (message.relation)
            DocumentRelation.internalBinaryWrite(message.relation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.AddDocumentRelationRequest
 */
export const AddDocumentRelationRequest = new AddDocumentRelationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddDocumentRelationResponse$Type extends MessageType<AddDocumentRelationResponse> {
    constructor() {
        super("services.documents.AddDocumentRelationResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddDocumentRelationResponse>): AddDocumentRelationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<AddDocumentRelationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddDocumentRelationResponse): AddDocumentRelationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddDocumentRelationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.AddDocumentRelationResponse
 */
export const AddDocumentRelationResponse = new AddDocumentRelationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDocumentRelationRequest$Type extends MessageType<RemoveDocumentRelationRequest> {
    constructor() {
        super("services.documents.RemoveDocumentRelationRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveDocumentRelationRequest>): RemoveDocumentRelationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<RemoveDocumentRelationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDocumentRelationRequest): RemoveDocumentRelationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDocumentRelationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RemoveDocumentRelationRequest
 */
export const RemoveDocumentRelationRequest = new RemoveDocumentRelationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveDocumentRelationResponse$Type extends MessageType<RemoveDocumentRelationResponse> {
    constructor() {
        super("services.documents.RemoveDocumentRelationResponse", []);
    }
    create(value?: PartialMessage<RemoveDocumentRelationResponse>): RemoveDocumentRelationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveDocumentRelationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveDocumentRelationResponse): RemoveDocumentRelationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveDocumentRelationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RemoveDocumentRelationResponse
 */
export const RemoveDocumentRelationResponse = new RemoveDocumentRelationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsRequest$Type extends MessageType<GetCommentsRequest> {
    constructor() {
        super("services.documents.GetCommentsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetCommentsRequest>): GetCommentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetCommentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsRequest): GetCommentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 document_id */ 2:
                    message.documentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetCommentsRequest
 */
export const GetCommentsRequest = new GetCommentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCommentsResponse$Type extends MessageType<GetCommentsResponse> {
    constructor() {
        super("services.documents.GetCommentsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "comments", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<GetCommentsResponse>): GetCommentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.comments = [];
        if (value !== undefined)
            reflectionMergePartial<GetCommentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCommentsResponse): GetCommentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.Comment comments */ 2:
                    message.comments.push(Comment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCommentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.Comment comments = 2; */
        for (let i = 0; i < message.comments.length; i++)
            Comment.internalBinaryWrite(message.comments[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetCommentsResponse
 */
export const GetCommentsResponse = new GetCommentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostCommentRequest$Type extends MessageType<PostCommentRequest> {
    constructor() {
        super("services.documents.PostCommentRequest", [
            { no: 1, name: "comment", kind: "message", T: () => Comment, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<PostCommentRequest>): PostCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PostCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostCommentRequest): PostCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Comment comment */ 1:
                    message.comment = Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Comment comment = 1; */
        if (message.comment)
            Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.PostCommentRequest
 */
export const PostCommentRequest = new PostCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PostCommentResponse$Type extends MessageType<PostCommentResponse> {
    constructor() {
        super("services.documents.PostCommentResponse", [
            { no: 1, name: "comment", kind: "message", T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<PostCommentResponse>): PostCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PostCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PostCommentResponse): PostCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Comment comment */ 1:
                    message.comment = Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PostCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Comment comment = 1; */
        if (message.comment)
            Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.PostCommentResponse
 */
export const PostCommentResponse = new PostCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditCommentRequest$Type extends MessageType<EditCommentRequest> {
    constructor() {
        super("services.documents.EditCommentRequest", [
            { no: 1, name: "comment", kind: "message", T: () => Comment, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<EditCommentRequest>): EditCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EditCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditCommentRequest): EditCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Comment comment */ 1:
                    message.comment = Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Comment comment = 1; */
        if (message.comment)
            Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.EditCommentRequest
 */
export const EditCommentRequest = new EditCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditCommentResponse$Type extends MessageType<EditCommentResponse> {
    constructor() {
        super("services.documents.EditCommentResponse", [
            { no: 1, name: "comment", kind: "message", T: () => Comment }
        ]);
    }
    create(value?: PartialMessage<EditCommentResponse>): EditCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EditCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditCommentResponse): EditCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Comment comment */ 1:
                    message.comment = Comment.internalBinaryRead(reader, reader.uint32(), options, message.comment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Comment comment = 1; */
        if (message.comment)
            Comment.internalBinaryWrite(message.comment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.EditCommentResponse
 */
export const EditCommentResponse = new EditCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCommentRequest$Type extends MessageType<DeleteCommentRequest> {
    constructor() {
        super("services.documents.DeleteCommentRequest", [
            { no: 1, name: "comment_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCommentRequest>): DeleteCommentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.commentId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteCommentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCommentRequest): DeleteCommentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 comment_id */ 1:
                    message.commentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCommentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 comment_id = 1; */
        if (message.commentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.commentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteCommentRequest
 */
export const DeleteCommentRequest = new DeleteCommentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCommentResponse$Type extends MessageType<DeleteCommentResponse> {
    constructor() {
        super("services.documents.DeleteCommentResponse", []);
    }
    create(value?: PartialMessage<DeleteCommentResponse>): DeleteCommentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteCommentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCommentResponse): DeleteCommentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCommentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteCommentResponse
 */
export const DeleteCommentResponse = new DeleteCommentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDocumentResponse$Type extends MessageType<UpdateDocumentResponse> {
    constructor() {
        super("services.documents.UpdateDocumentResponse", [
            { no: 1, name: "document", kind: "message", T: () => Document }
        ]);
    }
    create(value?: PartialMessage<UpdateDocumentResponse>): UpdateDocumentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDocumentResponse): UpdateDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Document document */ 1:
                    message.document = Document.internalBinaryRead(reader, reader.uint32(), options, message.document);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Document document = 1; */
        if (message.document)
            Document.internalBinaryWrite(message.document, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpdateDocumentResponse
 */
export const UpdateDocumentResponse = new UpdateDocumentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDocumentRequest$Type extends MessageType<DeleteDocumentRequest> {
    constructor() {
        super("services.documents.DeleteDocumentRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"id\"" } },
            { no: 2, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteDocumentRequest>): DeleteDocumentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDocumentRequest): DeleteDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* optional string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* optional string reason = 2; */
        if (message.reason !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteDocumentRequest
 */
export const DeleteDocumentRequest = new DeleteDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDocumentResponse$Type extends MessageType<DeleteDocumentResponse> {
    constructor() {
        super("services.documents.DeleteDocumentResponse", []);
    }
    create(value?: PartialMessage<DeleteDocumentResponse>): DeleteDocumentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDocumentResponse): DeleteDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteDocumentResponse
 */
export const DeleteDocumentResponse = new DeleteDocumentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleDocumentRequest$Type extends MessageType<ToggleDocumentRequest> {
    constructor() {
        super("services.documents.ToggleDocumentRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ToggleDocumentRequest>): ToggleDocumentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.closed = false;
        if (value !== undefined)
            reflectionMergePartial<ToggleDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleDocumentRequest): ToggleDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* bool closed */ 2:
                    message.closed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* bool closed = 2; */
        if (message.closed !== false)
            writer.tag(2, WireType.Varint).bool(message.closed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ToggleDocumentRequest
 */
export const ToggleDocumentRequest = new ToggleDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleDocumentResponse$Type extends MessageType<ToggleDocumentResponse> {
    constructor() {
        super("services.documents.ToggleDocumentResponse", []);
    }
    create(value?: PartialMessage<ToggleDocumentResponse>): ToggleDocumentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ToggleDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleDocumentResponse): ToggleDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ToggleDocumentResponse
 */
export const ToggleDocumentResponse = new ToggleDocumentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeDocumentOwnerRequest$Type extends MessageType<ChangeDocumentOwnerRequest> {
    constructor() {
        super("services.documents.ChangeDocumentOwnerRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "new_user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeDocumentOwnerRequest>): ChangeDocumentOwnerRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<ChangeDocumentOwnerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeDocumentOwnerRequest): ChangeDocumentOwnerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* optional int32 new_user_id */ 2:
                    message.newUserId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeDocumentOwnerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* optional int32 new_user_id = 2; */
        if (message.newUserId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.newUserId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ChangeDocumentOwnerRequest
 */
export const ChangeDocumentOwnerRequest = new ChangeDocumentOwnerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeDocumentOwnerResponse$Type extends MessageType<ChangeDocumentOwnerResponse> {
    constructor() {
        super("services.documents.ChangeDocumentOwnerResponse", []);
    }
    create(value?: PartialMessage<ChangeDocumentOwnerResponse>): ChangeDocumentOwnerResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChangeDocumentOwnerResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeDocumentOwnerResponse): ChangeDocumentOwnerResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeDocumentOwnerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ChangeDocumentOwnerResponse
 */
export const ChangeDocumentOwnerResponse = new ChangeDocumentOwnerResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDocumentRequest$Type extends MessageType<CreateDocumentRequest> {
    constructor() {
        super("services.documents.CreateDocumentRequest", [
            { no: 1, name: "content_type", kind: "enum", T: () => ["resources.common.content.ContentType", ContentType, "CONTENT_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 2, name: "template_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "template_data", kind: "message", T: () => TemplateData }
        ]);
    }
    create(value?: PartialMessage<CreateDocumentRequest>): CreateDocumentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.contentType = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDocumentRequest): CreateDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.content.ContentType content_type */ 1:
                    message.contentType = reader.int32();
                    break;
                case /* optional uint64 template_id */ 2:
                    message.templateId = reader.uint64().toNumber();
                    break;
                case /* optional resources.documents.TemplateData template_data */ 3:
                    message.templateData = TemplateData.internalBinaryRead(reader, reader.uint32(), options, message.templateData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.content.ContentType content_type = 1; */
        if (message.contentType !== 0)
            writer.tag(1, WireType.Varint).int32(message.contentType);
        /* optional uint64 template_id = 2; */
        if (message.templateId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.templateId);
        /* optional resources.documents.TemplateData template_data = 3; */
        if (message.templateData)
            TemplateData.internalBinaryWrite(message.templateData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateDocumentRequest
 */
export const CreateDocumentRequest = new CreateDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDocumentResponse$Type extends MessageType<CreateDocumentResponse> {
    constructor() {
        super("services.documents.CreateDocumentResponse", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDocumentResponse>): CreateDocumentResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateDocumentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDocumentResponse): CreateDocumentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDocumentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateDocumentResponse
 */
export const CreateDocumentResponse = new CreateDocumentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDocumentRequest$Type extends MessageType<UpdateDocumentRequest> {
    constructor() {
        super("services.documents.UpdateDocumentRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "tagger.tags": "alias:\"id\"" } },
            { no: 2, name: "category_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "3", maxLen: "255" } }, "tagger.tags": "alias:\"title\"" } },
            { no: 4, name: "content", kind: "message", T: () => Content },
            { no: 5, name: "content_type", kind: "enum", T: () => ["resources.common.content.ContentType", ContentType, "CONTENT_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 6, name: "data", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxBytes: "1000000" } } } },
            { no: 7, name: "state", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 8, name: "closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "draft", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "public", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "access", kind: "message", T: () => DocumentAccess },
            { no: 12, name: "files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => File, options: { "tagger.tags": "alias:\"files\"" } }
        ]);
    }
    create(value?: PartialMessage<UpdateDocumentRequest>): UpdateDocumentRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.title = "";
        message.contentType = 0;
        message.state = "";
        message.closed = false;
        message.draft = false;
        message.public = false;
        message.files = [];
        if (value !== undefined)
            reflectionMergePartial<UpdateDocumentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDocumentRequest): UpdateDocumentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* optional uint64 category_id */ 2:
                    message.categoryId = reader.uint64().toNumber();
                    break;
                case /* string title */ 3:
                    message.title = reader.string();
                    break;
                case /* resources.common.content.Content content */ 4:
                    message.content = Content.internalBinaryRead(reader, reader.uint32(), options, message.content);
                    break;
                case /* resources.common.content.ContentType content_type */ 5:
                    message.contentType = reader.int32();
                    break;
                case /* optional string data */ 6:
                    message.data = reader.string();
                    break;
                case /* string state */ 7:
                    message.state = reader.string();
                    break;
                case /* bool closed */ 8:
                    message.closed = reader.bool();
                    break;
                case /* bool draft */ 9:
                    message.draft = reader.bool();
                    break;
                case /* bool public */ 10:
                    message.public = reader.bool();
                    break;
                case /* optional resources.documents.DocumentAccess access */ 11:
                    message.access = DocumentAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                case /* repeated resources.file.File files */ 12:
                    message.files.push(File.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDocumentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* optional uint64 category_id = 2; */
        if (message.categoryId !== undefined)
            writer.tag(2, WireType.Varint).uint64(message.categoryId);
        /* string title = 3; */
        if (message.title !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* resources.common.content.Content content = 4; */
        if (message.content)
            Content.internalBinaryWrite(message.content, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.common.content.ContentType content_type = 5; */
        if (message.contentType !== 0)
            writer.tag(5, WireType.Varint).int32(message.contentType);
        /* optional string data = 6; */
        if (message.data !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.data);
        /* string state = 7; */
        if (message.state !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.state);
        /* bool closed = 8; */
        if (message.closed !== false)
            writer.tag(8, WireType.Varint).bool(message.closed);
        /* bool draft = 9; */
        if (message.draft !== false)
            writer.tag(9, WireType.Varint).bool(message.draft);
        /* bool public = 10; */
        if (message.public !== false)
            writer.tag(10, WireType.Varint).bool(message.public);
        /* optional resources.documents.DocumentAccess access = 11; */
        if (message.access)
            DocumentAccess.internalBinaryWrite(message.access, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.file.File files = 12; */
        for (let i = 0; i < message.files.length; i++)
            File.internalBinaryWrite(message.files[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpdateDocumentRequest
 */
export const UpdateDocumentRequest = new UpdateDocumentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentActivityRequest$Type extends MessageType<ListDocumentActivityRequest> {
    constructor() {
        super("services.documents.ListDocumentActivityRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "activity_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.DocActivityType", DocActivityType, "DOC_ACTIVITY_TYPE_"], options: { "buf.validate.field": { repeated: { maxItems: "10", items: { enum: { in: [13, 14, 15, 16, 17, 18] } } } } } }
        ]);
    }
    create(value?: PartialMessage<ListDocumentActivityRequest>): ListDocumentActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.activityTypes = [];
        if (value !== undefined)
            reflectionMergePartial<ListDocumentActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentActivityRequest): ListDocumentActivityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 document_id */ 2:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* repeated resources.documents.DocActivityType activity_types */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityTypes.push(reader.int32());
                    else
                        message.activityTypes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.documentId);
        /* repeated resources.documents.DocActivityType activity_types = 3; */
        if (message.activityTypes.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activityTypes.length; i++)
                writer.int32(message.activityTypes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentActivityRequest
 */
export const ListDocumentActivityRequest = new ListDocumentActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentActivityResponse$Type extends MessageType<ListDocumentActivityResponse> {
    constructor() {
        super("services.documents.ListDocumentActivityResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "activity", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocActivity }
        ]);
    }
    create(value?: PartialMessage<ListDocumentActivityResponse>): ListDocumentActivityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activity = [];
        if (value !== undefined)
            reflectionMergePartial<ListDocumentActivityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentActivityResponse): ListDocumentActivityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.DocActivity activity */ 2:
                    message.activity.push(DocActivity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentActivityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocActivity activity = 2; */
        for (let i = 0; i < message.activity.length; i++)
            DocActivity.internalBinaryWrite(message.activity[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentActivityResponse
 */
export const ListDocumentActivityResponse = new ListDocumentActivityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentReqsRequest$Type extends MessageType<ListDocumentReqsRequest> {
    constructor() {
        super("services.documents.ListDocumentReqsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListDocumentReqsRequest>): ListDocumentReqsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListDocumentReqsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentReqsRequest): ListDocumentReqsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 document_id */ 2:
                    message.documentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentReqsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentReqsRequest
 */
export const ListDocumentReqsRequest = new ListDocumentReqsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentReqsResponse$Type extends MessageType<ListDocumentReqsResponse> {
    constructor() {
        super("services.documents.ListDocumentReqsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "requests", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocRequest }
        ]);
    }
    create(value?: PartialMessage<ListDocumentReqsResponse>): ListDocumentReqsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requests = [];
        if (value !== undefined)
            reflectionMergePartial<ListDocumentReqsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentReqsResponse): ListDocumentReqsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.DocRequest requests */ 2:
                    message.requests.push(DocRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentReqsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocRequest requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            DocRequest.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentReqsResponse
 */
export const ListDocumentReqsResponse = new ListDocumentReqsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDocumentReqRequest$Type extends MessageType<CreateDocumentReqRequest> {
    constructor() {
        super("services.documents.CreateDocumentReqRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "request_type", kind: "enum", T: () => ["resources.documents.DocActivityType", DocActivityType, "DOC_ACTIVITY_TYPE_"], options: { "buf.validate.field": { enum: { in: [13, 14, 15, 16, 17, 18] } } } },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } },
            { no: 4, name: "data", kind: "message", T: () => DocActivityData }
        ]);
    }
    create(value?: PartialMessage<CreateDocumentReqRequest>): CreateDocumentReqRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.requestType = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateDocumentReqRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDocumentReqRequest): CreateDocumentReqRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* resources.documents.DocActivityType request_type */ 2:
                    message.requestType = reader.int32();
                    break;
                case /* optional string reason */ 3:
                    message.reason = reader.string();
                    break;
                case /* optional resources.documents.DocActivityData data */ 4:
                    message.data = DocActivityData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDocumentReqRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* resources.documents.DocActivityType request_type = 2; */
        if (message.requestType !== 0)
            writer.tag(2, WireType.Varint).int32(message.requestType);
        /* optional string reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        /* optional resources.documents.DocActivityData data = 4; */
        if (message.data)
            DocActivityData.internalBinaryWrite(message.data, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateDocumentReqRequest
 */
export const CreateDocumentReqRequest = new CreateDocumentReqRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDocumentReqResponse$Type extends MessageType<CreateDocumentReqResponse> {
    constructor() {
        super("services.documents.CreateDocumentReqResponse", [
            { no: 1, name: "request", kind: "message", T: () => DocRequest }
        ]);
    }
    create(value?: PartialMessage<CreateDocumentReqResponse>): CreateDocumentReqResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateDocumentReqResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDocumentReqResponse): CreateDocumentReqResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocRequest request */ 1:
                    message.request = DocRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDocumentReqResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocRequest request = 1; */
        if (message.request)
            DocRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateDocumentReqResponse
 */
export const CreateDocumentReqResponse = new CreateDocumentReqResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDocumentReqRequest$Type extends MessageType<UpdateDocumentReqRequest> {
    constructor() {
        super("services.documents.UpdateDocumentReqRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "request_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } },
            { no: 4, name: "data", kind: "message", T: () => DocActivityData },
            { no: 5, name: "accepted", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDocumentReqRequest>): UpdateDocumentReqRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.requestId = 0;
        message.accepted = false;
        if (value !== undefined)
            reflectionMergePartial<UpdateDocumentReqRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDocumentReqRequest): UpdateDocumentReqRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* uint64 request_id */ 2:
                    message.requestId = reader.uint64().toNumber();
                    break;
                case /* optional string reason */ 3:
                    message.reason = reader.string();
                    break;
                case /* optional resources.documents.DocActivityData data */ 4:
                    message.data = DocActivityData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                case /* bool accepted */ 5:
                    message.accepted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDocumentReqRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* uint64 request_id = 2; */
        if (message.requestId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.requestId);
        /* optional string reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        /* optional resources.documents.DocActivityData data = 4; */
        if (message.data)
            DocActivityData.internalBinaryWrite(message.data, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool accepted = 5; */
        if (message.accepted !== false)
            writer.tag(5, WireType.Varint).bool(message.accepted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpdateDocumentReqRequest
 */
export const UpdateDocumentReqRequest = new UpdateDocumentReqRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDocumentReqResponse$Type extends MessageType<UpdateDocumentReqResponse> {
    constructor() {
        super("services.documents.UpdateDocumentReqResponse", [
            { no: 1, name: "request", kind: "message", T: () => DocRequest }
        ]);
    }
    create(value?: PartialMessage<UpdateDocumentReqResponse>): UpdateDocumentReqResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDocumentReqResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDocumentReqResponse): UpdateDocumentReqResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocRequest request */ 1:
                    message.request = DocRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDocumentReqResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocRequest request = 1; */
        if (message.request)
            DocRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpdateDocumentReqResponse
 */
export const UpdateDocumentReqResponse = new UpdateDocumentReqResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDocumentReqRequest$Type extends MessageType<DeleteDocumentReqRequest> {
    constructor() {
        super("services.documents.DeleteDocumentReqRequest", [
            { no: 1, name: "request_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteDocumentReqRequest>): DeleteDocumentReqRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteDocumentReqRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDocumentReqRequest): DeleteDocumentReqRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 request_id */ 1:
                    message.requestId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDocumentReqRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 request_id = 1; */
        if (message.requestId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.requestId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteDocumentReqRequest
 */
export const DeleteDocumentReqRequest = new DeleteDocumentReqRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDocumentReqResponse$Type extends MessageType<DeleteDocumentReqResponse> {
    constructor() {
        super("services.documents.DeleteDocumentReqResponse", []);
    }
    create(value?: PartialMessage<DeleteDocumentReqResponse>): DeleteDocumentReqResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteDocumentReqResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDocumentReqResponse): DeleteDocumentReqResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDocumentReqResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteDocumentReqResponse
 */
export const DeleteDocumentReqResponse = new DeleteDocumentReqResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentAccessRequest$Type extends MessageType<GetDocumentAccessRequest> {
    constructor() {
        super("services.documents.GetDocumentAccessRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetDocumentAccessRequest>): GetDocumentAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDocumentAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentAccessRequest): GetDocumentAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentAccessRequest
 */
export const GetDocumentAccessRequest = new GetDocumentAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDocumentAccessResponse$Type extends MessageType<GetDocumentAccessResponse> {
    constructor() {
        super("services.documents.GetDocumentAccessResponse", [
            { no: 1, name: "access", kind: "message", T: () => DocumentAccess, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<GetDocumentAccessResponse>): GetDocumentAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetDocumentAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDocumentAccessResponse): GetDocumentAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.DocumentAccess access */ 1:
                    message.access = DocumentAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDocumentAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.DocumentAccess access = 1; */
        if (message.access)
            DocumentAccess.internalBinaryWrite(message.access, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetDocumentAccessResponse
 */
export const GetDocumentAccessResponse = new GetDocumentAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDocumentAccessRequest$Type extends MessageType<SetDocumentAccessRequest> {
    constructor() {
        super("services.documents.SetDocumentAccessRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "access", kind: "message", T: () => DocumentAccess, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<SetDocumentAccessRequest>): SetDocumentAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<SetDocumentAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDocumentAccessRequest): SetDocumentAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* resources.documents.DocumentAccess access */ 2:
                    message.access = DocumentAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDocumentAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* resources.documents.DocumentAccess access = 2; */
        if (message.access)
            DocumentAccess.internalBinaryWrite(message.access, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.SetDocumentAccessRequest
 */
export const SetDocumentAccessRequest = new SetDocumentAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDocumentAccessResponse$Type extends MessageType<SetDocumentAccessResponse> {
    constructor() {
        super("services.documents.SetDocumentAccessResponse", []);
    }
    create(value?: PartialMessage<SetDocumentAccessResponse>): SetDocumentAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetDocumentAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDocumentAccessResponse): SetDocumentAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDocumentAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.SetDocumentAccessResponse
 */
export const SetDocumentAccessResponse = new SetDocumentAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserDocumentsRequest$Type extends MessageType<ListUserDocumentsRequest> {
    constructor() {
        super("services.documents.ListUserDocumentsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gt: 0 } } } },
            { no: 4, name: "relations", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.DocRelation", DocRelation, "DOC_RELATION_"], options: { "buf.validate.field": { repeated: { maxItems: "3" } } } },
            { no: 5, name: "closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListUserDocumentsRequest>): ListUserDocumentsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        message.relations = [];
        if (value !== undefined)
            reflectionMergePartial<ListUserDocumentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserDocumentsRequest): ListUserDocumentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* int32 user_id */ 3:
                    message.userId = reader.int32();
                    break;
                case /* repeated resources.documents.DocRelation relations */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.relations.push(reader.int32());
                    else
                        message.relations.push(reader.int32());
                    break;
                case /* optional bool closed */ 5:
                    message.closed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserDocumentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).int32(message.userId);
        /* repeated resources.documents.DocRelation relations = 4; */
        if (message.relations.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.relations.length; i++)
                writer.int32(message.relations[i]);
            writer.join();
        }
        /* optional bool closed = 5; */
        if (message.closed !== undefined)
            writer.tag(5, WireType.Varint).bool(message.closed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUserDocumentsRequest
 */
export const ListUserDocumentsRequest = new ListUserDocumentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUserDocumentsResponse$Type extends MessageType<ListUserDocumentsResponse> {
    constructor() {
        super("services.documents.ListUserDocumentsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "relations", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentRelation }
        ]);
    }
    create(value?: PartialMessage<ListUserDocumentsResponse>): ListUserDocumentsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.relations = [];
        if (value !== undefined)
            reflectionMergePartial<ListUserDocumentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUserDocumentsResponse): ListUserDocumentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.DocumentRelation relations */ 2:
                    message.relations.push(DocumentRelation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUserDocumentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentRelation relations = 2; */
        for (let i = 0; i < message.relations.length; i++)
            DocumentRelation.internalBinaryWrite(message.relations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUserDocumentsResponse
 */
export const ListUserDocumentsResponse = new ListUserDocumentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCategoriesRequest$Type extends MessageType<ListCategoriesRequest> {
    constructor() {
        super("services.documents.ListCategoriesRequest", []);
    }
    create(value?: PartialMessage<ListCategoriesRequest>): ListCategoriesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListCategoriesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCategoriesRequest): ListCategoriesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCategoriesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListCategoriesRequest
 */
export const ListCategoriesRequest = new ListCategoriesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCategoriesResponse$Type extends MessageType<ListCategoriesResponse> {
    constructor() {
        super("services.documents.ListCategoriesResponse", [
            { no: 1, name: "categories", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Category }
        ]);
    }
    create(value?: PartialMessage<ListCategoriesResponse>): ListCategoriesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.categories = [];
        if (value !== undefined)
            reflectionMergePartial<ListCategoriesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCategoriesResponse): ListCategoriesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.Category categories */ 1:
                    message.categories.push(Category.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCategoriesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.Category categories = 1; */
        for (let i = 0; i < message.categories.length; i++)
            Category.internalBinaryWrite(message.categories[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListCategoriesResponse
 */
export const ListCategoriesResponse = new ListCategoriesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCategoryRequest$Type extends MessageType<CreateOrUpdateCategoryRequest> {
    constructor() {
        super("services.documents.CreateOrUpdateCategoryRequest", [
            { no: 1, name: "category", kind: "message", T: () => Category, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCategoryRequest>): CreateOrUpdateCategoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCategoryRequest): CreateOrUpdateCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Category category */ 1:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Category category = 1; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateOrUpdateCategoryRequest
 */
export const CreateOrUpdateCategoryRequest = new CreateOrUpdateCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateCategoryResponse$Type extends MessageType<CreateOrUpdateCategoryResponse> {
    constructor() {
        super("services.documents.CreateOrUpdateCategoryResponse", [
            { no: 1, name: "category", kind: "message", T: () => Category, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateCategoryResponse>): CreateOrUpdateCategoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateCategoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateCategoryResponse): CreateOrUpdateCategoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Category category */ 1:
                    message.category = Category.internalBinaryRead(reader, reader.uint32(), options, message.category);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateCategoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Category category = 1; */
        if (message.category)
            Category.internalBinaryWrite(message.category, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CreateOrUpdateCategoryResponse
 */
export const CreateOrUpdateCategoryResponse = new CreateOrUpdateCategoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCategoryRequest$Type extends MessageType<DeleteCategoryRequest> {
    constructor() {
        super("services.documents.DeleteCategoryRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteCategoryRequest>): DeleteCategoryRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteCategoryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCategoryRequest): DeleteCategoryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCategoryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteCategoryRequest
 */
export const DeleteCategoryRequest = new DeleteCategoryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteCategoryResponse$Type extends MessageType<DeleteCategoryResponse> {
    constructor() {
        super("services.documents.DeleteCategoryResponse", []);
    }
    create(value?: PartialMessage<DeleteCategoryResponse>): DeleteCategoryResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteCategoryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteCategoryResponse): DeleteCategoryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteCategoryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteCategoryResponse
 */
export const DeleteCategoryResponse = new DeleteCategoryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentPinsRequest$Type extends MessageType<ListDocumentPinsRequest> {
    constructor() {
        super("services.documents.ListDocumentPinsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "personal", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ListDocumentPinsRequest>): ListDocumentPinsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListDocumentPinsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentPinsRequest): ListDocumentPinsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional bool personal */ 2:
                    message.personal = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentPinsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional bool personal = 2; */
        if (message.personal !== undefined)
            writer.tag(2, WireType.Varint).bool(message.personal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentPinsRequest
 */
export const ListDocumentPinsRequest = new ListDocumentPinsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDocumentPinsResponse$Type extends MessageType<ListDocumentPinsResponse> {
    constructor() {
        super("services.documents.ListDocumentPinsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "documents", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DocumentShort }
        ]);
    }
    create(value?: PartialMessage<ListDocumentPinsResponse>): ListDocumentPinsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documents = [];
        if (value !== undefined)
            reflectionMergePartial<ListDocumentPinsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDocumentPinsResponse): ListDocumentPinsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.DocumentShort documents */ 2:
                    message.documents.push(DocumentShort.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDocumentPinsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.DocumentShort documents = 2; */
        for (let i = 0; i < message.documents.length; i++)
            DocumentShort.internalBinaryWrite(message.documents[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListDocumentPinsResponse
 */
export const ListDocumentPinsResponse = new ListDocumentPinsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleDocumentPinRequest$Type extends MessageType<ToggleDocumentPinRequest> {
    constructor() {
        super("services.documents.ToggleDocumentPinRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "state", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "personal", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ToggleDocumentPinRequest>): ToggleDocumentPinRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.state = false;
        if (value !== undefined)
            reflectionMergePartial<ToggleDocumentPinRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleDocumentPinRequest): ToggleDocumentPinRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* bool state */ 2:
                    message.state = reader.bool();
                    break;
                case /* optional bool personal */ 3:
                    message.personal = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleDocumentPinRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* bool state = 2; */
        if (message.state !== false)
            writer.tag(2, WireType.Varint).bool(message.state);
        /* optional bool personal = 3; */
        if (message.personal !== undefined)
            writer.tag(3, WireType.Varint).bool(message.personal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ToggleDocumentPinRequest
 */
export const ToggleDocumentPinRequest = new ToggleDocumentPinRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleDocumentPinResponse$Type extends MessageType<ToggleDocumentPinResponse> {
    constructor() {
        super("services.documents.ToggleDocumentPinResponse", [
            { no: 1, name: "pin", kind: "message", T: () => DocumentPin, options: { "tagger.tags": "alias:\"pin\"" } }
        ]);
    }
    create(value?: PartialMessage<ToggleDocumentPinResponse>): ToggleDocumentPinResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ToggleDocumentPinResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleDocumentPinResponse): ToggleDocumentPinResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional resources.documents.DocumentPin pin */ 1:
                    message.pin = DocumentPin.internalBinaryRead(reader, reader.uint32(), options, message.pin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleDocumentPinResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional resources.documents.DocumentPin pin = 1; */
        if (message.pin)
            DocumentPin.internalBinaryWrite(message.pin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ToggleDocumentPinResponse
 */
export const ToggleDocumentPinResponse = new ToggleDocumentPinResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDocumentReminderRequest$Type extends MessageType<SetDocumentReminderRequest> {
    constructor() {
        super("services.documents.SetDocumentReminderRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "reminder_time", kind: "message", T: () => Timestamp },
            { no: 3, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxBytes: "1024" } } } }
        ]);
    }
    create(value?: PartialMessage<SetDocumentReminderRequest>): SetDocumentReminderRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<SetDocumentReminderRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDocumentReminderRequest): SetDocumentReminderRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 document_id */ 1:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp reminder_time */ 2:
                    message.reminderTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.reminderTime);
                    break;
                case /* optional string message */ 3:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDocumentReminderRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.documentId);
        /* optional resources.timestamp.Timestamp reminder_time = 2; */
        if (message.reminderTime)
            Timestamp.internalBinaryWrite(message.reminderTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string message = 3; */
        if (message.message !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.SetDocumentReminderRequest
 */
export const SetDocumentReminderRequest = new SetDocumentReminderRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetDocumentReminderResponse$Type extends MessageType<SetDocumentReminderResponse> {
    constructor() {
        super("services.documents.SetDocumentReminderResponse", []);
    }
    create(value?: PartialMessage<SetDocumentReminderResponse>): SetDocumentReminderResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetDocumentReminderResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetDocumentReminderResponse): SetDocumentReminderResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetDocumentReminderResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.SetDocumentReminderResponse
 */
export const SetDocumentReminderResponse = new SetDocumentReminderResponse$Type();
/**
 * @generated ServiceType for protobuf service services.documents.DocumentsService
 */
export const DocumentsService = new ServiceType("services.documents.DocumentsService", [
    { name: "ListTemplates", options: {}, I: ListTemplatesRequest, O: ListTemplatesResponse },
    { name: "GetTemplate", options: {}, I: GetTemplateRequest, O: GetTemplateResponse },
    { name: "CreateTemplate", options: {}, I: CreateTemplateRequest, O: CreateTemplateResponse },
    { name: "UpdateTemplate", options: {}, I: UpdateTemplateRequest, O: UpdateTemplateResponse },
    { name: "DeleteTemplate", options: {}, I: DeleteTemplateRequest, O: DeleteTemplateResponse },
    { name: "ListDocuments", options: {}, I: ListDocumentsRequest, O: ListDocumentsResponse },
    { name: "GetDocument", options: {}, I: GetDocumentRequest, O: GetDocumentResponse },
    { name: "CreateDocument", options: {}, I: CreateDocumentRequest, O: CreateDocumentResponse },
    { name: "UpdateDocument", options: {}, I: UpdateDocumentRequest, O: UpdateDocumentResponse },
    { name: "DeleteDocument", options: {}, I: DeleteDocumentRequest, O: DeleteDocumentResponse },
    { name: "ToggleDocument", options: {}, I: ToggleDocumentRequest, O: ToggleDocumentResponse },
    { name: "ChangeDocumentOwner", options: {}, I: ChangeDocumentOwnerRequest, O: ChangeDocumentOwnerResponse },
    { name: "GetDocumentReferences", options: {}, I: GetDocumentReferencesRequest, O: GetDocumentReferencesResponse },
    { name: "GetDocumentRelations", options: {}, I: GetDocumentRelationsRequest, O: GetDocumentRelationsResponse },
    { name: "AddDocumentReference", options: {}, I: AddDocumentReferenceRequest, O: AddDocumentReferenceResponse },
    { name: "RemoveDocumentReference", options: {}, I: RemoveDocumentReferenceRequest, O: RemoveDocumentReferenceResponse },
    { name: "AddDocumentRelation", options: {}, I: AddDocumentRelationRequest, O: AddDocumentRelationResponse },
    { name: "RemoveDocumentRelation", options: {}, I: RemoveDocumentRelationRequest, O: RemoveDocumentRelationResponse },
    { name: "GetComments", options: {}, I: GetCommentsRequest, O: GetCommentsResponse },
    { name: "PostComment", options: {}, I: PostCommentRequest, O: PostCommentResponse },
    { name: "EditComment", options: {}, I: EditCommentRequest, O: EditCommentResponse },
    { name: "DeleteComment", options: {}, I: DeleteCommentRequest, O: DeleteCommentResponse },
    { name: "GetDocumentAccess", options: {}, I: GetDocumentAccessRequest, O: GetDocumentAccessResponse },
    { name: "SetDocumentAccess", options: {}, I: SetDocumentAccessRequest, O: SetDocumentAccessResponse },
    { name: "ListDocumentActivity", options: {}, I: ListDocumentActivityRequest, O: ListDocumentActivityResponse },
    { name: "ListDocumentReqs", options: {}, I: ListDocumentReqsRequest, O: ListDocumentReqsResponse },
    { name: "CreateDocumentReq", options: {}, I: CreateDocumentReqRequest, O: CreateDocumentReqResponse },
    { name: "UpdateDocumentReq", options: {}, I: UpdateDocumentReqRequest, O: UpdateDocumentReqResponse },
    { name: "DeleteDocumentReq", options: {}, I: DeleteDocumentReqRequest, O: DeleteDocumentReqResponse },
    { name: "ListUserDocuments", options: {}, I: ListUserDocumentsRequest, O: ListUserDocumentsResponse },
    { name: "ListCategories", options: {}, I: ListCategoriesRequest, O: ListCategoriesResponse },
    { name: "CreateOrUpdateCategory", options: {}, I: CreateOrUpdateCategoryRequest, O: CreateOrUpdateCategoryResponse },
    { name: "DeleteCategory", options: {}, I: DeleteCategoryRequest, O: DeleteCategoryResponse },
    { name: "ListDocumentPins", options: {}, I: ListDocumentPinsRequest, O: ListDocumentPinsResponse },
    { name: "ToggleDocumentPin", options: {}, I: ToggleDocumentPinRequest, O: ToggleDocumentPinResponse },
    { name: "SetDocumentReminder", options: {}, I: SetDocumentReminderRequest, O: SetDocumentReminderResponse },
    { name: "UploadFile", clientStreaming: true, options: {}, I: UploadPacket, O: UploadResponse }
]);
