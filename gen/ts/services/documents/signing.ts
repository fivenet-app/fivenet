// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/signing.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Stamp } from "../../resources/documents/signing";
import { PaginationResponse } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
import { BindingMode } from "../../resources/documents/signing";
import { PartySelector } from "../../resources/documents/approval";
import { SignatureType } from "../../resources/documents/signing";
import { Signature } from "../../resources/documents/signing";
import { SignatureRequirement } from "../../resources/documents/signing";
/**
 * @generated from protobuf message services.documents.SignaturePanelSnapshot
 */
export interface SignaturePanelSnapshot {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureRequirement requirements = 2
     */
    requirements: SignatureRequirement[];
    /**
     * Includes optional acknowledgements
     *
     * @generated from protobuf field: repeated resources.documents.Signature collected = 3
     */
    collected: Signature[];
    /**
     * @generated from protobuf field: bool all_required_collected = 4
     */
    allRequiredCollected: boolean;
}
/**
 * @generated from protobuf message services.documents.PrepareSignatureRequirementsRequest
 */
export interface PrepareSignatureRequirementsRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.PrepareSignatureRequirementsResponse
 */
export interface PrepareSignatureRequirementsResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureRequirement requirements = 1
     */
    requirements: SignatureRequirement[];
}
/**
 * @generated from protobuf message services.documents.GetSignaturePanelRequest
 */
export interface GetSignaturePanelRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.GetSignaturePanelResponse
 */
export interface GetSignaturePanelResponse {
    /**
     * @generated from protobuf field: services.documents.SignaturePanelSnapshot panel = 1
     */
    panel?: SignaturePanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.ApplySignatureRequest
 */
export interface ApplySignatureRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * empty => optional/ack
     *
     * @generated from protobuf field: int64 requirement_id = 2
     */
    requirementId: number;
    /**
     * @generated from protobuf field: resources.documents.SignatureType type = 3
     */
    type: SignatureType;
    /**
     * @generated from protobuf field: string payload_json = 4
     */
    payloadJson: string;
    /**
     * If STAMP
     *
     * @generated from protobuf field: int64 stamp_id = 5
     */
    stampId: number;
    /**
     * Client-computed from snapshot_json
     *
     * @generated from protobuf field: string snapshot_hash = 6
     */
    snapshotHash: string;
}
/**
 * @generated from protobuf message services.documents.ApplySignatureResponse
 */
export interface ApplySignatureResponse {
    /**
     * @generated from protobuf field: resources.documents.Signature signature = 1
     */
    signature?: Signature;
    /**
     * @generated from protobuf field: services.documents.SignaturePanelSnapshot panel = 2
     */
    panel?: SignaturePanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.RevokeSignatureRequest
 */
export interface RevokeSignatureRequest {
    /**
     * @generated from protobuf field: int64 signature_id = 1
     */
    signatureId: number;
    /**
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
}
/**
 * @generated from protobuf message services.documents.RevokeSignatureResponse
 */
export interface RevokeSignatureResponse {
    /**
     * @generated from protobuf field: resources.documents.Signature signature = 1
     */
    signature?: Signature;
    /**
     * @generated from protobuf field: services.documents.SignaturePanelSnapshot panel = 2
     */
    panel?: SignaturePanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.RequestSignaturesRequest
 */
export interface RequestSignaturesRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * Who to ask
     *
     * @generated from protobuf field: resources.documents.PartySelector selector = 2
     */
    selector?: PartySelector;
    /**
     * Signature is required
     *
     * @generated from protobuf field: bool required = 3
     */
    required: boolean;
    /**
     * For created requirements
     *
     * @generated from protobuf field: resources.documents.BindingMode binding_mode = 4
     */
    bindingMode: BindingMode;
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureType allowed_types = 5
     */
    allowedTypes: SignatureType[];
    /**
     * Optional ordering
     *
     * @generated from protobuf field: int32 sequence_order = 6
     */
    sequenceOrder: number;
}
/**
 * @generated from protobuf message services.documents.RequestSignaturesResponse
 */
export interface RequestSignaturesResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureRequirement requirements = 1
     */
    requirements: SignatureRequirement[];
    /**
     * @generated from protobuf field: services.documents.SignaturePanelSnapshot panel = 2
     */
    panel?: SignaturePanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.ListUsableStampsRequest
 */
export interface ListUsableStampsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: int64 document_id = 2
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.ListUsableStampsResponse
 */
export interface ListUsableStampsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.Stamp stamps = 2
     */
    stamps: Stamp[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SignaturePanelSnapshot$Type extends MessageType<SignaturePanelSnapshot> {
    constructor() {
        super("services.documents.SignaturePanelSnapshot", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "requirements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SignatureRequirement },
            { no: 3, name: "collected", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Signature },
            { no: 4, name: "all_required_collected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SignaturePanelSnapshot>): SignaturePanelSnapshot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.requirements = [];
        message.collected = [];
        message.allRequiredCollected = false;
        if (value !== undefined)
            reflectionMergePartial<SignaturePanelSnapshot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignaturePanelSnapshot): SignaturePanelSnapshot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* repeated resources.documents.SignatureRequirement requirements */ 2:
                    message.requirements.push(SignatureRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.documents.Signature collected */ 3:
                    message.collected.push(Signature.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool all_required_collected */ 4:
                    message.allRequiredCollected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignaturePanelSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* repeated resources.documents.SignatureRequirement requirements = 2; */
        for (let i = 0; i < message.requirements.length; i++)
            SignatureRequirement.internalBinaryWrite(message.requirements[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.Signature collected = 3; */
        for (let i = 0; i < message.collected.length; i++)
            Signature.internalBinaryWrite(message.collected[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool all_required_collected = 4; */
        if (message.allRequiredCollected !== false)
            writer.tag(4, WireType.Varint).bool(message.allRequiredCollected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.SignaturePanelSnapshot
 */
export const SignaturePanelSnapshot = new SignaturePanelSnapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrepareSignatureRequirementsRequest$Type extends MessageType<PrepareSignatureRequirementsRequest> {
    constructor() {
        super("services.documents.PrepareSignatureRequirementsRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<PrepareSignatureRequirementsRequest>): PrepareSignatureRequirementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<PrepareSignatureRequirementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrepareSignatureRequirementsRequest): PrepareSignatureRequirementsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrepareSignatureRequirementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.PrepareSignatureRequirementsRequest
 */
export const PrepareSignatureRequirementsRequest = new PrepareSignatureRequirementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PrepareSignatureRequirementsResponse$Type extends MessageType<PrepareSignatureRequirementsResponse> {
    constructor() {
        super("services.documents.PrepareSignatureRequirementsResponse", [
            { no: 1, name: "requirements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SignatureRequirement }
        ]);
    }
    create(value?: PartialMessage<PrepareSignatureRequirementsResponse>): PrepareSignatureRequirementsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requirements = [];
        if (value !== undefined)
            reflectionMergePartial<PrepareSignatureRequirementsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PrepareSignatureRequirementsResponse): PrepareSignatureRequirementsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.SignatureRequirement requirements */ 1:
                    message.requirements.push(SignatureRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PrepareSignatureRequirementsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.SignatureRequirement requirements = 1; */
        for (let i = 0; i < message.requirements.length; i++)
            SignatureRequirement.internalBinaryWrite(message.requirements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.PrepareSignatureRequirementsResponse
 */
export const PrepareSignatureRequirementsResponse = new PrepareSignatureRequirementsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSignaturePanelRequest$Type extends MessageType<GetSignaturePanelRequest> {
    constructor() {
        super("services.documents.GetSignaturePanelRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetSignaturePanelRequest>): GetSignaturePanelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetSignaturePanelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSignaturePanelRequest): GetSignaturePanelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSignaturePanelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetSignaturePanelRequest
 */
export const GetSignaturePanelRequest = new GetSignaturePanelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSignaturePanelResponse$Type extends MessageType<GetSignaturePanelResponse> {
    constructor() {
        super("services.documents.GetSignaturePanelResponse", [
            { no: 1, name: "panel", kind: "message", T: () => SignaturePanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<GetSignaturePanelResponse>): GetSignaturePanelResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSignaturePanelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSignaturePanelResponse): GetSignaturePanelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* services.documents.SignaturePanelSnapshot panel */ 1:
                    message.panel = SignaturePanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSignaturePanelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* services.documents.SignaturePanelSnapshot panel = 1; */
        if (message.panel)
            SignaturePanelSnapshot.internalBinaryWrite(message.panel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetSignaturePanelResponse
 */
export const GetSignaturePanelResponse = new GetSignaturePanelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplySignatureRequest$Type extends MessageType<ApplySignatureRequest> {
    constructor() {
        super("services.documents.ApplySignatureRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "requirement_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"] },
            { no: 4, name: "payload_json", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "stamp_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 6, name: "snapshot_hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ApplySignatureRequest>): ApplySignatureRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.requirementId = 0;
        message.type = 0;
        message.payloadJson = "";
        message.stampId = 0;
        message.snapshotHash = "";
        if (value !== undefined)
            reflectionMergePartial<ApplySignatureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplySignatureRequest): ApplySignatureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* int64 requirement_id */ 2:
                    message.requirementId = reader.int64().toNumber();
                    break;
                case /* resources.documents.SignatureType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* string payload_json */ 4:
                    message.payloadJson = reader.string();
                    break;
                case /* int64 stamp_id */ 5:
                    message.stampId = reader.int64().toNumber();
                    break;
                case /* string snapshot_hash */ 6:
                    message.snapshotHash = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplySignatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* int64 requirement_id = 2; */
        if (message.requirementId !== 0)
            writer.tag(2, WireType.Varint).int64(message.requirementId);
        /* resources.documents.SignatureType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* string payload_json = 4; */
        if (message.payloadJson !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.payloadJson);
        /* int64 stamp_id = 5; */
        if (message.stampId !== 0)
            writer.tag(5, WireType.Varint).int64(message.stampId);
        /* string snapshot_hash = 6; */
        if (message.snapshotHash !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.snapshotHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ApplySignatureRequest
 */
export const ApplySignatureRequest = new ApplySignatureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplySignatureResponse$Type extends MessageType<ApplySignatureResponse> {
    constructor() {
        super("services.documents.ApplySignatureResponse", [
            { no: 1, name: "signature", kind: "message", T: () => Signature },
            { no: 2, name: "panel", kind: "message", T: () => SignaturePanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<ApplySignatureResponse>): ApplySignatureResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ApplySignatureResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplySignatureResponse): ApplySignatureResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Signature signature */ 1:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* services.documents.SignaturePanelSnapshot panel */ 2:
                    message.panel = SignaturePanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplySignatureResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Signature signature = 1; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* services.documents.SignaturePanelSnapshot panel = 2; */
        if (message.panel)
            SignaturePanelSnapshot.internalBinaryWrite(message.panel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ApplySignatureResponse
 */
export const ApplySignatureResponse = new ApplySignatureResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeSignatureRequest$Type extends MessageType<RevokeSignatureRequest> {
    constructor() {
        super("services.documents.RevokeSignatureRequest", [
            { no: 1, name: "signature_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<RevokeSignatureRequest>): RevokeSignatureRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signatureId = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<RevokeSignatureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeSignatureRequest): RevokeSignatureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 signature_id */ 1:
                    message.signatureId = reader.int64().toNumber();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeSignatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 signature_id = 1; */
        if (message.signatureId !== 0)
            writer.tag(1, WireType.Varint).int64(message.signatureId);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RevokeSignatureRequest
 */
export const RevokeSignatureRequest = new RevokeSignatureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeSignatureResponse$Type extends MessageType<RevokeSignatureResponse> {
    constructor() {
        super("services.documents.RevokeSignatureResponse", [
            { no: 1, name: "signature", kind: "message", T: () => Signature },
            { no: 2, name: "panel", kind: "message", T: () => SignaturePanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<RevokeSignatureResponse>): RevokeSignatureResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevokeSignatureResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeSignatureResponse): RevokeSignatureResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Signature signature */ 1:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* services.documents.SignaturePanelSnapshot panel */ 2:
                    message.panel = SignaturePanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeSignatureResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Signature signature = 1; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* services.documents.SignaturePanelSnapshot panel = 2; */
        if (message.panel)
            SignaturePanelSnapshot.internalBinaryWrite(message.panel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RevokeSignatureResponse
 */
export const RevokeSignatureResponse = new RevokeSignatureResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestSignaturesRequest$Type extends MessageType<RequestSignaturesRequest> {
    constructor() {
        super("services.documents.RequestSignaturesRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "selector", kind: "message", T: () => PartySelector },
            { no: 3, name: "required", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "binding_mode", kind: "enum", T: () => ["resources.documents.BindingMode", BindingMode, "BINDING_MODE_"] },
            { no: 5, name: "allowed_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"] },
            { no: 6, name: "sequence_order", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RequestSignaturesRequest>): RequestSignaturesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.required = false;
        message.bindingMode = 0;
        message.allowedTypes = [];
        message.sequenceOrder = 0;
        if (value !== undefined)
            reflectionMergePartial<RequestSignaturesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestSignaturesRequest): RequestSignaturesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.documents.PartySelector selector */ 2:
                    message.selector = PartySelector.internalBinaryRead(reader, reader.uint32(), options, message.selector);
                    break;
                case /* bool required */ 3:
                    message.required = reader.bool();
                    break;
                case /* resources.documents.BindingMode binding_mode */ 4:
                    message.bindingMode = reader.int32();
                    break;
                case /* repeated resources.documents.SignatureType allowed_types */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.allowedTypes.push(reader.int32());
                    else
                        message.allowedTypes.push(reader.int32());
                    break;
                case /* int32 sequence_order */ 6:
                    message.sequenceOrder = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestSignaturesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* resources.documents.PartySelector selector = 2; */
        if (message.selector)
            PartySelector.internalBinaryWrite(message.selector, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool required = 3; */
        if (message.required !== false)
            writer.tag(3, WireType.Varint).bool(message.required);
        /* resources.documents.BindingMode binding_mode = 4; */
        if (message.bindingMode !== 0)
            writer.tag(4, WireType.Varint).int32(message.bindingMode);
        /* repeated resources.documents.SignatureType allowed_types = 5; */
        if (message.allowedTypes.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.allowedTypes.length; i++)
                writer.int32(message.allowedTypes[i]);
            writer.join();
        }
        /* int32 sequence_order = 6; */
        if (message.sequenceOrder !== 0)
            writer.tag(6, WireType.Varint).int32(message.sequenceOrder);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RequestSignaturesRequest
 */
export const RequestSignaturesRequest = new RequestSignaturesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RequestSignaturesResponse$Type extends MessageType<RequestSignaturesResponse> {
    constructor() {
        super("services.documents.RequestSignaturesResponse", [
            { no: 1, name: "requirements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SignatureRequirement },
            { no: 2, name: "panel", kind: "message", T: () => SignaturePanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<RequestSignaturesResponse>): RequestSignaturesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requirements = [];
        if (value !== undefined)
            reflectionMergePartial<RequestSignaturesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestSignaturesResponse): RequestSignaturesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.SignatureRequirement requirements */ 1:
                    message.requirements.push(SignatureRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* services.documents.SignaturePanelSnapshot panel */ 2:
                    message.panel = SignaturePanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestSignaturesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.SignatureRequirement requirements = 1; */
        for (let i = 0; i < message.requirements.length; i++)
            SignatureRequirement.internalBinaryWrite(message.requirements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* services.documents.SignaturePanelSnapshot panel = 2; */
        if (message.panel)
            SignaturePanelSnapshot.internalBinaryWrite(message.panel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RequestSignaturesResponse
 */
export const RequestSignaturesResponse = new RequestSignaturesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsableStampsRequest$Type extends MessageType<ListUsableStampsRequest> {
    constructor() {
        super("services.documents.ListUsableStampsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListUsableStampsRequest>): ListUsableStampsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListUsableStampsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsableStampsRequest): ListUsableStampsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsableStampsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUsableStampsRequest
 */
export const ListUsableStampsRequest = new ListUsableStampsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsableStampsResponse$Type extends MessageType<ListUsableStampsResponse> {
    constructor() {
        super("services.documents.ListUsableStampsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "stamps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Stamp }
        ]);
    }
    create(value?: PartialMessage<ListUsableStampsResponse>): ListUsableStampsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stamps = [];
        if (value !== undefined)
            reflectionMergePartial<ListUsableStampsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsableStampsResponse): ListUsableStampsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.Stamp stamps */ 2:
                    message.stamps.push(Stamp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsableStampsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.Stamp stamps = 2; */
        for (let i = 0; i < message.stamps.length; i++)
            Stamp.internalBinaryWrite(message.stamps[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUsableStampsResponse
 */
export const ListUsableStampsResponse = new ListUsableStampsResponse$Type();
/**
 * @generated ServiceType for protobuf service services.documents.SigningService
 */
export const SigningService = new ServiceType("services.documents.SigningService", [
    { name: "PrepareSignatureRequirements", options: {}, I: PrepareSignatureRequirementsRequest, O: PrepareSignatureRequirementsResponse },
    { name: "GetSignaturePanel", options: {}, I: GetSignaturePanelRequest, O: GetSignaturePanelResponse },
    { name: "ApplySignature", options: {}, I: ApplySignatureRequest, O: ApplySignatureResponse },
    { name: "RevokeSignature", options: {}, I: RevokeSignatureRequest, O: RevokeSignatureResponse },
    { name: "RequestSignatures", options: {}, I: RequestSignaturesRequest, O: RequestSignaturesResponse },
    { name: "ListUsableStamps", options: {}, I: ListUsableStampsRequest, O: ListUsableStampsResponse }
]);
