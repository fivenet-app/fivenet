// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/signing.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Stamp } from "../../resources/documents/signing";
import { SignatureType } from "../../resources/documents/signing";
import { Signature } from "../../resources/documents/signing";
import { SignatureStatus } from "../../resources/documents/signing";
import { SignatureAccess } from "../../resources/documents/signing";
import { SignatureRequirement } from "../../resources/documents/signing";
import { PaginationResponse } from "../../resources/common/database/database";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { PaginationRequest } from "../../resources/common/database/database";
/**
 * @generated from protobuf message services.documents.ListRequirementsRequest
 */
export interface ListRequirementsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: int64 document_id = 2
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 3
     */
    snapshotDate?: Timestamp;
}
/**
 * @generated from protobuf message services.documents.ListRequirementsResponse
 */
export interface ListRequirementsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureRequirement requirements = 2
     */
    requirements: SignatureRequirement[];
}
/**
 * @generated from protobuf message services.documents.UpsertRequirementRequest
 */
export interface UpsertRequirementRequest {
    /**
     * @generated from protobuf field: resources.documents.SignatureRequirement requirement = 1
     */
    requirement?: SignatureRequirement;
}
/**
 * @generated from protobuf message services.documents.UpsertRequirementResponse
 */
export interface UpsertRequirementResponse {
    /**
     * @generated from protobuf field: resources.documents.SignatureRequirement requirement = 1
     */
    requirement?: SignatureRequirement;
}
/**
 * @generated from protobuf message services.documents.DeleteRequirementRequest
 */
export interface DeleteRequirementRequest {
    /**
     * @generated from protobuf field: int64 requirement_id = 1
     */
    requirementId: number;
}
/**
 * @generated from protobuf message services.documents.DeleteRequirementResponse
 */
export interface DeleteRequirementResponse {
}
/**
 * @generated from protobuf message services.documents.ListRequirementAccessRequest
 */
export interface ListRequirementAccessRequest {
    /**
     * @generated from protobuf field: int64 requirement_id = 1
     */
    requirementId: number;
}
/**
 * @generated from protobuf message services.documents.ListRequirementAccessResponse
 */
export interface ListRequirementAccessResponse {
    /**
     * @generated from protobuf field: resources.documents.SignatureAccess access = 1
     */
    access?: SignatureAccess;
}
/**
 * @generated from protobuf message services.documents.UpsertRequirementAccessRequest
 */
export interface UpsertRequirementAccessRequest {
    /**
     * @generated from protobuf field: int64 requirement_id = 1
     */
    requirementId: number;
    /**
     * @generated from protobuf field: resources.documents.SignatureAccess access = 2
     */
    access?: SignatureAccess;
}
/**
 * @generated from protobuf message services.documents.UpsertRequirementAccessResponse
 */
export interface UpsertRequirementAccessResponse {
    /**
     * @generated from protobuf field: resources.documents.SignatureAccess access = 1
     */
    access?: SignatureAccess;
}
/**
 * @generated from protobuf message services.documents.DeleteRequirementAccessRequest
 */
export interface DeleteRequirementAccessRequest {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: number;
}
/**
 * @generated from protobuf message services.documents.DeleteRequirementAccessResponse
 */
export interface DeleteRequirementAccessResponse {
}
/**
 * @generated from protobuf message services.documents.ListSignaturesRequest
 */
export interface ListSignaturesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: int64 document_id = 2
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 3
     */
    snapshotDate?: Timestamp;
    /**
     * @generated from protobuf field: repeated resources.documents.SignatureStatus statuses = 4
     */
    statuses: SignatureStatus[];
}
/**
 * @generated from protobuf message services.documents.ListSignaturesResponse
 */
export interface ListSignaturesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.Signature signatures = 2
     */
    signatures: Signature[];
}
/**
 * @generated from protobuf message services.documents.ApplySignatureRequest
 */
export interface ApplySignatureRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp snapshot_date = 2
     */
    snapshotDate?: Timestamp;
    /**
     * @generated from protobuf field: int64 requirement_id = 3
     */
    requirementId: number; // 0/omit for acknowledgement
    /**
     * @generated from protobuf field: resources.documents.SignatureType type = 4
     */
    type: SignatureType;
    /**
     * @generated from protobuf field: string payload_json = 5
     */
    payloadJson: string;
    /**
     * @generated from protobuf field: int64 stamp_id = 6
     */
    stampId: number; // when type=STAMP
    /**
     * @generated from protobuf field: string idempotency_key = 10
     */
    idempotencyKey: string;
}
/**
 * @generated from protobuf message services.documents.ApplySignatureResponse
 */
export interface ApplySignatureResponse {
    /**
     * @generated from protobuf field: resources.documents.Signature signature = 1
     */
    signature?: Signature;
    /**
     * @generated from protobuf field: bool document_signed = 2
     */
    documentSigned: boolean;
}
/**
 * @generated from protobuf message services.documents.RevokeSignatureRequest
 */
export interface RevokeSignatureRequest {
    /**
     * @generated from protobuf field: int64 signature_id = 1
     */
    signatureId: number;
    /**
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
}
/**
 * @generated from protobuf message services.documents.RevokeSignatureResponse
 */
export interface RevokeSignatureResponse {
    /**
     * @generated from protobuf field: resources.documents.Signature signature = 1
     */
    signature?: Signature;
}
/**
 * @generated from protobuf message services.documents.RecomputeSignatureStatusRequest
 */
export interface RecomputeSignatureStatusRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 2
     */
    snapshotDate?: Timestamp;
}
/**
 * @generated from protobuf message services.documents.RecomputeSignatureStatusResponse
 */
export interface RecomputeSignatureStatusResponse {
    /**
     * @generated from protobuf field: bool document_signed = 1
     */
    documentSigned: boolean;
    /**
     * @generated from protobuf field: int32 required_total = 2
     */
    requiredTotal: number;
    /**
     * @generated from protobuf field: int32 required_remaining = 3
     */
    requiredRemaining: number;
    /**
     * @generated from protobuf field: int32 collected_valid = 4
     */
    collectedValid: number;
}
/**
 * Stamps listing â€” your example wired in as a method
 *
 * @generated from protobuf message services.documents.ListUsableStampsRequest
 */
export interface ListUsableStampsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: int64 document_id = 2
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.ListUsableStampsResponse
 */
export interface ListUsableStampsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.Stamp stamps = 2
     */
    stamps: Stamp[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRequirementsRequest$Type extends MessageType<ListRequirementsRequest> {
    constructor() {
        super("services.documents.ListRequirementsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 3, name: "snapshot_date", kind: "message", T: () => Timestamp, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<ListRequirementsRequest>): ListRequirementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListRequirementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequirementsRequest): ListRequirementsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 3:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequirementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 3; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListRequirementsRequest
 */
export const ListRequirementsRequest = new ListRequirementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequirementsResponse$Type extends MessageType<ListRequirementsResponse> {
    constructor() {
        super("services.documents.ListRequirementsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "requirements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SignatureRequirement, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<ListRequirementsResponse>): ListRequirementsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requirements = [];
        if (value !== undefined)
            reflectionMergePartial<ListRequirementsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequirementsResponse): ListRequirementsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.SignatureRequirement requirements */ 2:
                    message.requirements.push(SignatureRequirement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequirementsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.SignatureRequirement requirements = 2; */
        for (let i = 0; i < message.requirements.length; i++)
            SignatureRequirement.internalBinaryWrite(message.requirements[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListRequirementsResponse
 */
export const ListRequirementsResponse = new ListRequirementsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertRequirementRequest$Type extends MessageType<UpsertRequirementRequest> {
    constructor() {
        super("services.documents.UpsertRequirementRequest", [
            { no: 1, name: "requirement", kind: "message", T: () => SignatureRequirement, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<UpsertRequirementRequest>): UpsertRequirementRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpsertRequirementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertRequirementRequest): UpsertRequirementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.SignatureRequirement requirement */ 1:
                    message.requirement = SignatureRequirement.internalBinaryRead(reader, reader.uint32(), options, message.requirement);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertRequirementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.SignatureRequirement requirement = 1; */
        if (message.requirement)
            SignatureRequirement.internalBinaryWrite(message.requirement, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertRequirementRequest
 */
export const UpsertRequirementRequest = new UpsertRequirementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertRequirementResponse$Type extends MessageType<UpsertRequirementResponse> {
    constructor() {
        super("services.documents.UpsertRequirementResponse", [
            { no: 1, name: "requirement", kind: "message", T: () => SignatureRequirement }
        ]);
    }
    create(value?: PartialMessage<UpsertRequirementResponse>): UpsertRequirementResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpsertRequirementResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertRequirementResponse): UpsertRequirementResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.SignatureRequirement requirement */ 1:
                    message.requirement = SignatureRequirement.internalBinaryRead(reader, reader.uint32(), options, message.requirement);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertRequirementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.SignatureRequirement requirement = 1; */
        if (message.requirement)
            SignatureRequirement.internalBinaryWrite(message.requirement, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertRequirementResponse
 */
export const UpsertRequirementResponse = new UpsertRequirementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequirementRequest$Type extends MessageType<DeleteRequirementRequest> {
    constructor() {
        super("services.documents.DeleteRequirementRequest", [
            { no: 1, name: "requirement_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteRequirementRequest>): DeleteRequirementRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requirementId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteRequirementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequirementRequest): DeleteRequirementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 requirement_id */ 1:
                    message.requirementId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequirementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 requirement_id = 1; */
        if (message.requirementId !== 0)
            writer.tag(1, WireType.Varint).int64(message.requirementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteRequirementRequest
 */
export const DeleteRequirementRequest = new DeleteRequirementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequirementResponse$Type extends MessageType<DeleteRequirementResponse> {
    constructor() {
        super("services.documents.DeleteRequirementResponse", []);
    }
    create(value?: PartialMessage<DeleteRequirementResponse>): DeleteRequirementResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteRequirementResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequirementResponse): DeleteRequirementResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequirementResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteRequirementResponse
 */
export const DeleteRequirementResponse = new DeleteRequirementResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequirementAccessRequest$Type extends MessageType<ListRequirementAccessRequest> {
    constructor() {
        super("services.documents.ListRequirementAccessRequest", [
            { no: 1, name: "requirement_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<ListRequirementAccessRequest>): ListRequirementAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requirementId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListRequirementAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequirementAccessRequest): ListRequirementAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 requirement_id */ 1:
                    message.requirementId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequirementAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 requirement_id = 1; */
        if (message.requirementId !== 0)
            writer.tag(1, WireType.Varint).int64(message.requirementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListRequirementAccessRequest
 */
export const ListRequirementAccessRequest = new ListRequirementAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListRequirementAccessResponse$Type extends MessageType<ListRequirementAccessResponse> {
    constructor() {
        super("services.documents.ListRequirementAccessResponse", [
            { no: 1, name: "access", kind: "message", T: () => SignatureAccess }
        ]);
    }
    create(value?: PartialMessage<ListRequirementAccessResponse>): ListRequirementAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListRequirementAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequirementAccessResponse): ListRequirementAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.SignatureAccess access */ 1:
                    message.access = SignatureAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequirementAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.SignatureAccess access = 1; */
        if (message.access)
            SignatureAccess.internalBinaryWrite(message.access, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListRequirementAccessResponse
 */
export const ListRequirementAccessResponse = new ListRequirementAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertRequirementAccessRequest$Type extends MessageType<UpsertRequirementAccessRequest> {
    constructor() {
        super("services.documents.UpsertRequirementAccessRequest", [
            { no: 1, name: "requirement_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "access", kind: "message", T: () => SignatureAccess, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<UpsertRequirementAccessRequest>): UpsertRequirementAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requirementId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpsertRequirementAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertRequirementAccessRequest): UpsertRequirementAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 requirement_id */ 1:
                    message.requirementId = reader.int64().toNumber();
                    break;
                case /* resources.documents.SignatureAccess access */ 2:
                    message.access = SignatureAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertRequirementAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 requirement_id = 1; */
        if (message.requirementId !== 0)
            writer.tag(1, WireType.Varint).int64(message.requirementId);
        /* resources.documents.SignatureAccess access = 2; */
        if (message.access)
            SignatureAccess.internalBinaryWrite(message.access, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertRequirementAccessRequest
 */
export const UpsertRequirementAccessRequest = new UpsertRequirementAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertRequirementAccessResponse$Type extends MessageType<UpsertRequirementAccessResponse> {
    constructor() {
        super("services.documents.UpsertRequirementAccessResponse", [
            { no: 1, name: "access", kind: "message", T: () => SignatureAccess }
        ]);
    }
    create(value?: PartialMessage<UpsertRequirementAccessResponse>): UpsertRequirementAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpsertRequirementAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertRequirementAccessResponse): UpsertRequirementAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.SignatureAccess access */ 1:
                    message.access = SignatureAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertRequirementAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.SignatureAccess access = 1; */
        if (message.access)
            SignatureAccess.internalBinaryWrite(message.access, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertRequirementAccessResponse
 */
export const UpsertRequirementAccessResponse = new UpsertRequirementAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequirementAccessRequest$Type extends MessageType<DeleteRequirementAccessRequest> {
    constructor() {
        super("services.documents.DeleteRequirementAccessRequest", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteRequirementAccessRequest>): DeleteRequirementAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteRequirementAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequirementAccessRequest): DeleteRequirementAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequirementAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteRequirementAccessRequest
 */
export const DeleteRequirementAccessRequest = new DeleteRequirementAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequirementAccessResponse$Type extends MessageType<DeleteRequirementAccessResponse> {
    constructor() {
        super("services.documents.DeleteRequirementAccessResponse", []);
    }
    create(value?: PartialMessage<DeleteRequirementAccessResponse>): DeleteRequirementAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteRequirementAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequirementAccessResponse): DeleteRequirementAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequirementAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteRequirementAccessResponse
 */
export const DeleteRequirementAccessResponse = new DeleteRequirementAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSignaturesRequest$Type extends MessageType<ListSignaturesRequest> {
    constructor() {
        super("services.documents.ListSignaturesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 3, name: "snapshot_date", kind: "message", T: () => Timestamp, options: { "buf.validate.field": { required: true } } },
            { no: 4, name: "statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.SignatureStatus", SignatureStatus, "SIGNATURE_STATUS_"], options: { "buf.validate.field": { repeated: { maxItems: "4" } } } }
        ]);
    }
    create(value?: PartialMessage<ListSignaturesRequest>): ListSignaturesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.statuses = [];
        if (value !== undefined)
            reflectionMergePartial<ListSignaturesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSignaturesRequest): ListSignaturesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 3:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                case /* repeated resources.documents.SignatureStatus statuses */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statuses.push(reader.int32());
                    else
                        message.statuses.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSignaturesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 3; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.SignatureStatus statuses = 4; */
        if (message.statuses.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statuses.length; i++)
                writer.int32(message.statuses[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListSignaturesRequest
 */
export const ListSignaturesRequest = new ListSignaturesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListSignaturesResponse$Type extends MessageType<ListSignaturesResponse> {
    constructor() {
        super("services.documents.ListSignaturesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "signatures", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Signature, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<ListSignaturesResponse>): ListSignaturesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signatures = [];
        if (value !== undefined)
            reflectionMergePartial<ListSignaturesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListSignaturesResponse): ListSignaturesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.Signature signatures */ 2:
                    message.signatures.push(Signature.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListSignaturesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.Signature signatures = 2; */
        for (let i = 0; i < message.signatures.length; i++)
            Signature.internalBinaryWrite(message.signatures[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListSignaturesResponse
 */
export const ListSignaturesResponse = new ListSignaturesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplySignatureRequest$Type extends MessageType<ApplySignatureRequest> {
    constructor() {
        super("services.documents.ApplySignatureRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "snapshot_date", kind: "message", T: () => Timestamp, options: { "buf.validate.field": { required: true } } },
            { no: 3, name: "requirement_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "type", kind: "enum", T: () => ["resources.documents.SignatureType", SignatureType, "SIGNATURE_TYPE_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 5, name: "payload_json", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { minLen: "1" } } } },
            { no: 6, name: "stamp_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "idempotency_key", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "64" } } } }
        ]);
    }
    create(value?: PartialMessage<ApplySignatureRequest>): ApplySignatureRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.requirementId = 0;
        message.type = 0;
        message.payloadJson = "";
        message.stampId = 0;
        message.idempotencyKey = "";
        if (value !== undefined)
            reflectionMergePartial<ApplySignatureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplySignatureRequest): ApplySignatureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* optional resources.timestamp.Timestamp snapshot_date */ 2:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                case /* int64 requirement_id */ 3:
                    message.requirementId = reader.int64().toNumber();
                    break;
                case /* resources.documents.SignatureType type */ 4:
                    message.type = reader.int32();
                    break;
                case /* string payload_json */ 5:
                    message.payloadJson = reader.string();
                    break;
                case /* int64 stamp_id */ 6:
                    message.stampId = reader.int64().toNumber();
                    break;
                case /* string idempotency_key */ 10:
                    message.idempotencyKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplySignatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* optional resources.timestamp.Timestamp snapshot_date = 2; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 requirement_id = 3; */
        if (message.requirementId !== 0)
            writer.tag(3, WireType.Varint).int64(message.requirementId);
        /* resources.documents.SignatureType type = 4; */
        if (message.type !== 0)
            writer.tag(4, WireType.Varint).int32(message.type);
        /* string payload_json = 5; */
        if (message.payloadJson !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.payloadJson);
        /* int64 stamp_id = 6; */
        if (message.stampId !== 0)
            writer.tag(6, WireType.Varint).int64(message.stampId);
        /* string idempotency_key = 10; */
        if (message.idempotencyKey !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.idempotencyKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ApplySignatureRequest
 */
export const ApplySignatureRequest = new ApplySignatureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ApplySignatureResponse$Type extends MessageType<ApplySignatureResponse> {
    constructor() {
        super("services.documents.ApplySignatureResponse", [
            { no: 1, name: "signature", kind: "message", T: () => Signature },
            { no: 2, name: "document_signed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ApplySignatureResponse>): ApplySignatureResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentSigned = false;
        if (value !== undefined)
            reflectionMergePartial<ApplySignatureResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApplySignatureResponse): ApplySignatureResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Signature signature */ 1:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                case /* bool document_signed */ 2:
                    message.documentSigned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApplySignatureResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Signature signature = 1; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool document_signed = 2; */
        if (message.documentSigned !== false)
            writer.tag(2, WireType.Varint).bool(message.documentSigned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ApplySignatureResponse
 */
export const ApplySignatureResponse = new ApplySignatureResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeSignatureRequest$Type extends MessageType<RevokeSignatureRequest> {
    constructor() {
        super("services.documents.RevokeSignatureRequest", [
            { no: 1, name: "signature_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<RevokeSignatureRequest>): RevokeSignatureRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signatureId = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<RevokeSignatureRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeSignatureRequest): RevokeSignatureRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 signature_id */ 1:
                    message.signatureId = reader.int64().toNumber();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeSignatureRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 signature_id = 1; */
        if (message.signatureId !== 0)
            writer.tag(1, WireType.Varint).int64(message.signatureId);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RevokeSignatureRequest
 */
export const RevokeSignatureRequest = new RevokeSignatureRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RevokeSignatureResponse$Type extends MessageType<RevokeSignatureResponse> {
    constructor() {
        super("services.documents.RevokeSignatureResponse", [
            { no: 1, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<RevokeSignatureResponse>): RevokeSignatureResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RevokeSignatureResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RevokeSignatureResponse): RevokeSignatureResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Signature signature */ 1:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RevokeSignatureResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Signature signature = 1; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RevokeSignatureResponse
 */
export const RevokeSignatureResponse = new RevokeSignatureResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecomputeSignatureStatusRequest$Type extends MessageType<RecomputeSignatureStatusRequest> {
    constructor() {
        super("services.documents.RecomputeSignatureStatusRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "snapshot_date", kind: "message", T: () => Timestamp, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<RecomputeSignatureStatusRequest>): RecomputeSignatureStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<RecomputeSignatureStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecomputeSignatureStatusRequest): RecomputeSignatureStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 2:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecomputeSignatureStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 2; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RecomputeSignatureStatusRequest
 */
export const RecomputeSignatureStatusRequest = new RecomputeSignatureStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecomputeSignatureStatusResponse$Type extends MessageType<RecomputeSignatureStatusResponse> {
    constructor() {
        super("services.documents.RecomputeSignatureStatusResponse", [
            { no: 1, name: "document_signed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "required_total", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "required_remaining", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "collected_valid", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<RecomputeSignatureStatusResponse>): RecomputeSignatureStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentSigned = false;
        message.requiredTotal = 0;
        message.requiredRemaining = 0;
        message.collectedValid = 0;
        if (value !== undefined)
            reflectionMergePartial<RecomputeSignatureStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecomputeSignatureStatusResponse): RecomputeSignatureStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool document_signed */ 1:
                    message.documentSigned = reader.bool();
                    break;
                case /* int32 required_total */ 2:
                    message.requiredTotal = reader.int32();
                    break;
                case /* int32 required_remaining */ 3:
                    message.requiredRemaining = reader.int32();
                    break;
                case /* int32 collected_valid */ 4:
                    message.collectedValid = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecomputeSignatureStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool document_signed = 1; */
        if (message.documentSigned !== false)
            writer.tag(1, WireType.Varint).bool(message.documentSigned);
        /* int32 required_total = 2; */
        if (message.requiredTotal !== 0)
            writer.tag(2, WireType.Varint).int32(message.requiredTotal);
        /* int32 required_remaining = 3; */
        if (message.requiredRemaining !== 0)
            writer.tag(3, WireType.Varint).int32(message.requiredRemaining);
        /* int32 collected_valid = 4; */
        if (message.collectedValid !== 0)
            writer.tag(4, WireType.Varint).int32(message.collectedValid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RecomputeSignatureStatusResponse
 */
export const RecomputeSignatureStatusResponse = new RecomputeSignatureStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsableStampsRequest$Type extends MessageType<ListUsableStampsRequest> {
    constructor() {
        super("services.documents.ListUsableStampsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListUsableStampsRequest>): ListUsableStampsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<ListUsableStampsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsableStampsRequest): ListUsableStampsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsableStampsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUsableStampsRequest
 */
export const ListUsableStampsRequest = new ListUsableStampsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsableStampsResponse$Type extends MessageType<ListUsableStampsResponse> {
    constructor() {
        super("services.documents.ListUsableStampsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "stamps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Stamp, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<ListUsableStampsResponse>): ListUsableStampsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stamps = [];
        if (value !== undefined)
            reflectionMergePartial<ListUsableStampsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsableStampsResponse): ListUsableStampsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.Stamp stamps */ 2:
                    message.stamps.push(Stamp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsableStampsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.Stamp stamps = 2; */
        for (let i = 0; i < message.stamps.length; i++)
            Stamp.internalBinaryWrite(message.stamps[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUsableStampsResponse
 */
export const ListUsableStampsResponse = new ListUsableStampsResponse$Type();
/**
 * @generated ServiceType for protobuf service services.documents.SigningService
 */
export const SigningService = new ServiceType("services.documents.SigningService", [
    { name: "ListRequirements", options: { "codegen.perms.perms": { enabled: true, service: "DocumentsService", name: "ListDocuments" } }, I: ListRequirementsRequest, O: ListRequirementsResponse },
    { name: "UpsertRequirement", options: { "codegen.perms.perms": { enabled: true } }, I: UpsertRequirementRequest, O: UpsertRequirementResponse },
    { name: "DeleteRequirement", options: { "codegen.perms.perms": { enabled: true } }, I: DeleteRequirementRequest, O: DeleteRequirementResponse },
    { name: "ListRequirementAccess", options: { "codegen.perms.perms": { enabled: true, service: "DocumentsService", name: "ListDocuments" } }, I: ListRequirementAccessRequest, O: ListRequirementAccessResponse },
    { name: "UpsertRequirementAccess", options: { "codegen.perms.perms": { enabled: true, name: "UpsertRequirement" } }, I: UpsertRequirementAccessRequest, O: UpsertRequirementAccessResponse },
    { name: "DeleteRequirementAccess", options: { "codegen.perms.perms": { enabled: true, name: "UpsertRequirement" } }, I: DeleteRequirementAccessRequest, O: DeleteRequirementAccessResponse },
    { name: "ListSignatures", options: { "codegen.perms.perms": { enabled: true, service: "DocumentsService", name: "ListDocuments" } }, I: ListSignaturesRequest, O: ListSignaturesResponse },
    { name: "ApplySignature", options: { "codegen.perms.perms": { enabled: true, service: "DocumentsService", name: "ListDocuments" } }, I: ApplySignatureRequest, O: ApplySignatureResponse },
    { name: "RevokeSignature", options: { "codegen.perms.perms": { enabled: true, name: "DeleteRequirement" } }, I: RevokeSignatureRequest, O: RevokeSignatureResponse },
    { name: "RecomputeSignatureStatus", options: { "codegen.perms.perms": { enabled: true, name: "DeleteRequirement" } }, I: RecomputeSignatureStatusRequest, O: RecomputeSignatureStatusResponse },
    { name: "ListUsableStamps", options: { "codegen.perms.perms": { enabled: true, service: "DocumentsService", name: "ListDocuments" } }, I: ListUsableStampsRequest, O: ListUsableStampsResponse }
]);
