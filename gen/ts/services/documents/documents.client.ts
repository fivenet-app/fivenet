// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/documents.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DocumentsService } from "./documents";
import type { UploadResponse } from "../../resources/file/filestore";
import type { UploadPacket } from "../../resources/file/filestore";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { SetDocumentReminderResponse } from "./documents";
import type { SetDocumentReminderRequest } from "./documents";
import type { ToggleDocumentPinResponse } from "./documents";
import type { ToggleDocumentPinRequest } from "./documents";
import type { ListDocumentPinsResponse } from "./documents";
import type { ListDocumentPinsRequest } from "./documents";
import type { DeleteCategoryResponse } from "./documents";
import type { DeleteCategoryRequest } from "./documents";
import type { CreateOrUpdateCategoryResponse } from "./documents";
import type { CreateOrUpdateCategoryRequest } from "./documents";
import type { ListCategoriesResponse } from "./documents";
import type { ListCategoriesRequest } from "./documents";
import type { ListUserDocumentsResponse } from "./documents";
import type { ListUserDocumentsRequest } from "./documents";
import type { DeleteDocumentReqResponse } from "./documents";
import type { DeleteDocumentReqRequest } from "./documents";
import type { UpdateDocumentReqResponse } from "./documents";
import type { UpdateDocumentReqRequest } from "./documents";
import type { CreateDocumentReqResponse } from "./documents";
import type { CreateDocumentReqRequest } from "./documents";
import type { ListDocumentReqsResponse } from "./documents";
import type { ListDocumentReqsRequest } from "./documents";
import type { ListDocumentActivityResponse } from "./documents";
import type { ListDocumentActivityRequest } from "./documents";
import type { SetDocumentAccessResponse } from "./documents";
import type { SetDocumentAccessRequest } from "./documents";
import type { GetDocumentAccessResponse } from "./documents";
import type { GetDocumentAccessRequest } from "./documents";
import type { DeleteCommentResponse } from "./documents";
import type { DeleteCommentRequest } from "./documents";
import type { EditCommentResponse } from "./documents";
import type { EditCommentRequest } from "./documents";
import type { PostCommentResponse } from "./documents";
import type { PostCommentRequest } from "./documents";
import type { GetCommentsResponse } from "./documents";
import type { GetCommentsRequest } from "./documents";
import type { RemoveDocumentRelationResponse } from "./documents";
import type { RemoveDocumentRelationRequest } from "./documents";
import type { AddDocumentRelationResponse } from "./documents";
import type { AddDocumentRelationRequest } from "./documents";
import type { RemoveDocumentReferenceResponse } from "./documents";
import type { RemoveDocumentReferenceRequest } from "./documents";
import type { AddDocumentReferenceResponse } from "./documents";
import type { AddDocumentReferenceRequest } from "./documents";
import type { GetDocumentRelationsResponse } from "./documents";
import type { GetDocumentRelationsRequest } from "./documents";
import type { GetDocumentReferencesResponse } from "./documents";
import type { GetDocumentReferencesRequest } from "./documents";
import type { ChangeDocumentOwnerResponse } from "./documents";
import type { ChangeDocumentOwnerRequest } from "./documents";
import type { ToggleDocumentResponse } from "./documents";
import type { ToggleDocumentRequest } from "./documents";
import type { DeleteDocumentResponse } from "./documents";
import type { DeleteDocumentRequest } from "./documents";
import type { UpdateDocumentResponse } from "./documents";
import type { UpdateDocumentRequest } from "./documents";
import type { CreateDocumentResponse } from "./documents";
import type { CreateDocumentRequest } from "./documents";
import type { GetDocumentResponse } from "./documents";
import type { GetDocumentRequest } from "./documents";
import type { ListDocumentsResponse } from "./documents";
import type { ListDocumentsRequest } from "./documents";
import type { DeleteTemplateResponse } from "./documents";
import type { DeleteTemplateRequest } from "./documents";
import type { UpdateTemplateResponse } from "./documents";
import type { UpdateTemplateRequest } from "./documents";
import type { CreateTemplateResponse } from "./documents";
import type { CreateTemplateRequest } from "./documents";
import type { GetTemplateResponse } from "./documents";
import type { GetTemplateRequest } from "./documents";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListTemplatesResponse } from "./documents";
import type { ListTemplatesRequest } from "./documents";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.documents.DocumentsService
 */
export interface IDocumentsServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListTemplates
     */
    listTemplates(input: ListTemplatesRequest, options?: RpcOptions): UnaryCall<ListTemplatesRequest, ListTemplatesResponse>;
    /**
     * @perm: Name=ListTemplates
     *
     * @generated from protobuf rpc: GetTemplate
     */
    getTemplate(input: GetTemplateRequest, options?: RpcOptions): UnaryCall<GetTemplateRequest, GetTemplateResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateTemplate
     */
    createTemplate(input: CreateTemplateRequest, options?: RpcOptions): UnaryCall<CreateTemplateRequest, CreateTemplateResponse>;
    /**
     * @perm: Name=CreateTemplate
     *
     * @generated from protobuf rpc: UpdateTemplate
     */
    updateTemplate(input: UpdateTemplateRequest, options?: RpcOptions): UnaryCall<UpdateTemplateRequest, UpdateTemplateResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteTemplate
     */
    deleteTemplate(input: DeleteTemplateRequest, options?: RpcOptions): UnaryCall<DeleteTemplateRequest, DeleteTemplateResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocuments
     */
    listDocuments(input: ListDocumentsRequest, options?: RpcOptions): UnaryCall<ListDocumentsRequest, ListDocumentsResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocument
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse>;
    /**
     * @perm: Name=UpdateDocument
     *
     * @generated from protobuf rpc: CreateDocument
     */
    createDocument(input: CreateDocumentRequest, options?: RpcOptions): UnaryCall<CreateDocumentRequest, CreateDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: UpdateDocument
     */
    updateDocument(input: UpdateDocumentRequest, options?: RpcOptions): UnaryCall<UpdateDocumentRequest, UpdateDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteDocument
     */
    deleteDocument(input: DeleteDocumentRequest, options?: RpcOptions): UnaryCall<DeleteDocumentRequest, DeleteDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ToggleDocument
     */
    toggleDocument(input: ToggleDocumentRequest, options?: RpcOptions): UnaryCall<ToggleDocumentRequest, ToggleDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ChangeDocumentOwner
     */
    changeDocumentOwner(input: ChangeDocumentOwnerRequest, options?: RpcOptions): UnaryCall<ChangeDocumentOwnerRequest, ChangeDocumentOwnerResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentReferences
     */
    getDocumentReferences(input: GetDocumentReferencesRequest, options?: RpcOptions): UnaryCall<GetDocumentReferencesRequest, GetDocumentReferencesResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentRelations
     */
    getDocumentRelations(input: GetDocumentRelationsRequest, options?: RpcOptions): UnaryCall<GetDocumentRelationsRequest, GetDocumentRelationsResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentReference
     */
    addDocumentReference(input: AddDocumentReferenceRequest, options?: RpcOptions): UnaryCall<AddDocumentReferenceRequest, AddDocumentReferenceResponse>;
    /**
     * @perm: Name=AddDocumentReference
     *
     * @generated from protobuf rpc: RemoveDocumentReference
     */
    removeDocumentReference(input: RemoveDocumentReferenceRequest, options?: RpcOptions): UnaryCall<RemoveDocumentReferenceRequest, RemoveDocumentReferenceResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentRelation
     */
    addDocumentRelation(input: AddDocumentRelationRequest, options?: RpcOptions): UnaryCall<AddDocumentRelationRequest, AddDocumentRelationResponse>;
    /**
     * @perm: Name=AddDocumentRelation
     *
     * @generated from protobuf rpc: RemoveDocumentRelation
     */
    removeDocumentRelation(input: RemoveDocumentRelationRequest, options?: RpcOptions): UnaryCall<RemoveDocumentRelationRequest, RemoveDocumentRelationResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetComments
     */
    getComments(input: GetCommentsRequest, options?: RpcOptions): UnaryCall<GetCommentsRequest, GetCommentsResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: PostComment
     */
    postComment(input: PostCommentRequest, options?: RpcOptions): UnaryCall<PostCommentRequest, PostCommentResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: EditComment
     */
    editComment(input: EditCommentRequest, options?: RpcOptions): UnaryCall<EditCommentRequest, EditCommentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteComment
     */
    deleteComment(input: DeleteCommentRequest, options?: RpcOptions): UnaryCall<DeleteCommentRequest, DeleteCommentResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentAccess
     */
    getDocumentAccess(input: GetDocumentAccessRequest, options?: RpcOptions): UnaryCall<GetDocumentAccessRequest, GetDocumentAccessResponse>;
    /**
     * @perm: Name=UpdateDocument
     *
     * @generated from protobuf rpc: SetDocumentAccess
     */
    setDocumentAccess(input: SetDocumentAccessRequest, options?: RpcOptions): UnaryCall<SetDocumentAccessRequest, SetDocumentAccessResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentActivity
     */
    listDocumentActivity(input: ListDocumentActivityRequest, options?: RpcOptions): UnaryCall<ListDocumentActivityRequest, ListDocumentActivityResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentReqs
     */
    listDocumentReqs(input: ListDocumentReqsRequest, options?: RpcOptions): UnaryCall<ListDocumentReqsRequest, ListDocumentReqsResponse>;
    /**
     * @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
     *
     * @generated from protobuf rpc: CreateDocumentReq
     */
    createDocumentReq(input: CreateDocumentReqRequest, options?: RpcOptions): UnaryCall<CreateDocumentReqRequest, CreateDocumentReqResponse>;
    /**
     * @perm: Name=CreateDocumentReq
     *
     * @generated from protobuf rpc: UpdateDocumentReq
     */
    updateDocumentReq(input: UpdateDocumentReqRequest, options?: RpcOptions): UnaryCall<UpdateDocumentReqRequest, UpdateDocumentReqResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteDocumentReq
     */
    deleteDocumentReq(input: DeleteDocumentReqRequest, options?: RpcOptions): UnaryCall<DeleteDocumentReqRequest, DeleteDocumentReqResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListUserDocuments
     */
    listUserDocuments(input: ListUserDocumentsRequest, options?: RpcOptions): UnaryCall<ListUserDocumentsRequest, ListUserDocumentsResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListCategories
     */
    listCategories(input: ListCategoriesRequest, options?: RpcOptions): UnaryCall<ListCategoriesRequest, ListCategoriesResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateCategory
     */
    createOrUpdateCategory(input: CreateOrUpdateCategoryRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCategoryRequest, CreateOrUpdateCategoryResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCategory
     */
    deleteCategory(input: DeleteCategoryRequest, options?: RpcOptions): UnaryCall<DeleteCategoryRequest, DeleteCategoryResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: ListDocumentPins
     */
    listDocumentPins(input: ListDocumentPinsRequest, options?: RpcOptions): UnaryCall<ListDocumentPinsRequest, ListDocumentPinsResponse>;
    /**
     * @perm: Attrs=Types/StringList:[]string{"JobWide"}
     *
     * @generated from protobuf rpc: ToggleDocumentPin
     */
    toggleDocumentPin(input: ToggleDocumentPinRequest, options?: RpcOptions): UnaryCall<ToggleDocumentPinRequest, ToggleDocumentPinResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: SetDocumentReminder
     */
    setDocumentReminder(input: SetDocumentReminderRequest, options?: RpcOptions): UnaryCall<SetDocumentReminderRequest, SetDocumentReminderResponse>;
    /**
     * @perm: Name=UpdateDocument
     *
     * @generated from protobuf rpc: UploadFile
     */
    uploadFile(options?: RpcOptions): ClientStreamingCall<UploadPacket, UploadResponse>;
}
/**
 * @generated from protobuf service services.documents.DocumentsService
 */
export class DocumentsServiceClient implements IDocumentsServiceClient, ServiceInfo {
    typeName = DocumentsService.typeName;
    methods = DocumentsService.methods;
    options = DocumentsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListTemplates
     */
    listTemplates(input: ListTemplatesRequest, options?: RpcOptions): UnaryCall<ListTemplatesRequest, ListTemplatesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTemplatesRequest, ListTemplatesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListTemplates
     *
     * @generated from protobuf rpc: GetTemplate
     */
    getTemplate(input: GetTemplateRequest, options?: RpcOptions): UnaryCall<GetTemplateRequest, GetTemplateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTemplateRequest, GetTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateTemplate
     */
    createTemplate(input: CreateTemplateRequest, options?: RpcOptions): UnaryCall<CreateTemplateRequest, CreateTemplateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTemplateRequest, CreateTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateTemplate
     *
     * @generated from protobuf rpc: UpdateTemplate
     */
    updateTemplate(input: UpdateTemplateRequest, options?: RpcOptions): UnaryCall<UpdateTemplateRequest, UpdateTemplateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTemplateRequest, UpdateTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteTemplate
     */
    deleteTemplate(input: DeleteTemplateRequest, options?: RpcOptions): UnaryCall<DeleteTemplateRequest, DeleteTemplateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTemplateRequest, DeleteTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocuments
     */
    listDocuments(input: ListDocumentsRequest, options?: RpcOptions): UnaryCall<ListDocumentsRequest, ListDocumentsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentsRequest, ListDocumentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocument
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentRequest, GetDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=UpdateDocument
     *
     * @generated from protobuf rpc: CreateDocument
     */
    createDocument(input: CreateDocumentRequest, options?: RpcOptions): UnaryCall<CreateDocumentRequest, CreateDocumentResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateDocumentRequest, CreateDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: UpdateDocument
     */
    updateDocument(input: UpdateDocumentRequest, options?: RpcOptions): UnaryCall<UpdateDocumentRequest, UpdateDocumentResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDocumentRequest, UpdateDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteDocument
     */
    deleteDocument(input: DeleteDocumentRequest, options?: RpcOptions): UnaryCall<DeleteDocumentRequest, DeleteDocumentResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDocumentRequest, DeleteDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ToggleDocument
     */
    toggleDocument(input: ToggleDocumentRequest, options?: RpcOptions): UnaryCall<ToggleDocumentRequest, ToggleDocumentResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleDocumentRequest, ToggleDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ChangeDocumentOwner
     */
    changeDocumentOwner(input: ChangeDocumentOwnerRequest, options?: RpcOptions): UnaryCall<ChangeDocumentOwnerRequest, ChangeDocumentOwnerResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangeDocumentOwnerRequest, ChangeDocumentOwnerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentReferences
     */
    getDocumentReferences(input: GetDocumentReferencesRequest, options?: RpcOptions): UnaryCall<GetDocumentReferencesRequest, GetDocumentReferencesResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentReferencesRequest, GetDocumentReferencesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentRelations
     */
    getDocumentRelations(input: GetDocumentRelationsRequest, options?: RpcOptions): UnaryCall<GetDocumentRelationsRequest, GetDocumentRelationsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentRelationsRequest, GetDocumentRelationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentReference
     */
    addDocumentReference(input: AddDocumentReferenceRequest, options?: RpcOptions): UnaryCall<AddDocumentReferenceRequest, AddDocumentReferenceResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddDocumentReferenceRequest, AddDocumentReferenceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=AddDocumentReference
     *
     * @generated from protobuf rpc: RemoveDocumentReference
     */
    removeDocumentReference(input: RemoveDocumentReferenceRequest, options?: RpcOptions): UnaryCall<RemoveDocumentReferenceRequest, RemoveDocumentReferenceResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveDocumentReferenceRequest, RemoveDocumentReferenceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentRelation
     */
    addDocumentRelation(input: AddDocumentRelationRequest, options?: RpcOptions): UnaryCall<AddDocumentRelationRequest, AddDocumentRelationResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddDocumentRelationRequest, AddDocumentRelationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=AddDocumentRelation
     *
     * @generated from protobuf rpc: RemoveDocumentRelation
     */
    removeDocumentRelation(input: RemoveDocumentRelationRequest, options?: RpcOptions): UnaryCall<RemoveDocumentRelationRequest, RemoveDocumentRelationResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveDocumentRelationRequest, RemoveDocumentRelationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetComments
     */
    getComments(input: GetCommentsRequest, options?: RpcOptions): UnaryCall<GetCommentsRequest, GetCommentsResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCommentsRequest, GetCommentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: PostComment
     */
    postComment(input: PostCommentRequest, options?: RpcOptions): UnaryCall<PostCommentRequest, PostCommentResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostCommentRequest, PostCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: EditComment
     */
    editComment(input: EditCommentRequest, options?: RpcOptions): UnaryCall<EditCommentRequest, EditCommentResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<EditCommentRequest, EditCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteComment
     */
    deleteComment(input: DeleteCommentRequest, options?: RpcOptions): UnaryCall<DeleteCommentRequest, DeleteCommentResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCommentRequest, DeleteCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentAccess
     */
    getDocumentAccess(input: GetDocumentAccessRequest, options?: RpcOptions): UnaryCall<GetDocumentAccessRequest, GetDocumentAccessResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentAccessRequest, GetDocumentAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=UpdateDocument
     *
     * @generated from protobuf rpc: SetDocumentAccess
     */
    setDocumentAccess(input: SetDocumentAccessRequest, options?: RpcOptions): UnaryCall<SetDocumentAccessRequest, SetDocumentAccessResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetDocumentAccessRequest, SetDocumentAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentActivity
     */
    listDocumentActivity(input: ListDocumentActivityRequest, options?: RpcOptions): UnaryCall<ListDocumentActivityRequest, ListDocumentActivityResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentActivityRequest, ListDocumentActivityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentReqs
     */
    listDocumentReqs(input: ListDocumentReqsRequest, options?: RpcOptions): UnaryCall<ListDocumentReqsRequest, ListDocumentReqsResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentReqsRequest, ListDocumentReqsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
     *
     * @generated from protobuf rpc: CreateDocumentReq
     */
    createDocumentReq(input: CreateDocumentReqRequest, options?: RpcOptions): UnaryCall<CreateDocumentReqRequest, CreateDocumentReqResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateDocumentReqRequest, CreateDocumentReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateDocumentReq
     *
     * @generated from protobuf rpc: UpdateDocumentReq
     */
    updateDocumentReq(input: UpdateDocumentReqRequest, options?: RpcOptions): UnaryCall<UpdateDocumentReqRequest, UpdateDocumentReqResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDocumentReqRequest, UpdateDocumentReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteDocumentReq
     */
    deleteDocumentReq(input: DeleteDocumentReqRequest, options?: RpcOptions): UnaryCall<DeleteDocumentReqRequest, DeleteDocumentReqResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDocumentReqRequest, DeleteDocumentReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListUserDocuments
     */
    listUserDocuments(input: ListUserDocumentsRequest, options?: RpcOptions): UnaryCall<ListUserDocumentsRequest, ListUserDocumentsResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUserDocumentsRequest, ListUserDocumentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListCategories
     */
    listCategories(input: ListCategoriesRequest, options?: RpcOptions): UnaryCall<ListCategoriesRequest, ListCategoriesResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCategoriesRequest, ListCategoriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateOrUpdateCategory
     */
    createOrUpdateCategory(input: CreateOrUpdateCategoryRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCategoryRequest, CreateOrUpdateCategoryResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateCategoryRequest, CreateOrUpdateCategoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCategory
     */
    deleteCategory(input: DeleteCategoryRequest, options?: RpcOptions): UnaryCall<DeleteCategoryRequest, DeleteCategoryResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCategoryRequest, DeleteCategoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: ListDocumentPins
     */
    listDocumentPins(input: ListDocumentPinsRequest, options?: RpcOptions): UnaryCall<ListDocumentPinsRequest, ListDocumentPinsResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentPinsRequest, ListDocumentPinsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Types/StringList:[]string{"JobWide"}
     *
     * @generated from protobuf rpc: ToggleDocumentPin
     */
    toggleDocumentPin(input: ToggleDocumentPinRequest, options?: RpcOptions): UnaryCall<ToggleDocumentPinRequest, ToggleDocumentPinResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleDocumentPinRequest, ToggleDocumentPinResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: SetDocumentReminder
     */
    setDocumentReminder(input: SetDocumentReminderRequest, options?: RpcOptions): UnaryCall<SetDocumentReminderRequest, SetDocumentReminderResponse> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetDocumentReminderRequest, SetDocumentReminderResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=UpdateDocument
     *
     * @generated from protobuf rpc: UploadFile
     */
    uploadFile(options?: RpcOptions): ClientStreamingCall<UploadPacket, UploadResponse> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadPacket, UploadResponse>("clientStreaming", this._transport, method, opt);
    }
}
