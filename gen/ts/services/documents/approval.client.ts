// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/approval.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ApprovalService } from "./approval";
import type { CancelReviewTasksResponse } from "./approval";
import type { CancelReviewTasksRequest } from "./approval";
import type { AddReviewersResponse } from "./approval";
import type { AddReviewersRequest } from "./approval";
import type { DecideApprovalTaskResponse } from "./approval";
import type { DecideApprovalTaskRequest } from "./approval";
import type { ListMyApprovalTasksResponse } from "./approval";
import type { ListMyApprovalTasksRequest } from "./approval";
import type { GetApprovalPanelResponse } from "./approval";
import type { GetApprovalPanelRequest } from "./approval";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StartReviewResponse } from "./approval";
import type { StartReviewRequest } from "./approval";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.documents.ApprovalService
 */
export interface IApprovalServiceClient {
    /**
     * @generated from protobuf rpc: StartReview
     */
    startReview(input: StartReviewRequest, options?: RpcOptions): UnaryCall<StartReviewRequest, StartReviewResponse>;
    /**
     * @generated from protobuf rpc: GetApprovalPanel
     */
    getApprovalPanel(input: GetApprovalPanelRequest, options?: RpcOptions): UnaryCall<GetApprovalPanelRequest, GetApprovalPanelResponse>;
    /**
     * @generated from protobuf rpc: ListMyApprovalTasks
     */
    listMyApprovalTasks(input: ListMyApprovalTasksRequest, options?: RpcOptions): UnaryCall<ListMyApprovalTasksRequest, ListMyApprovalTasksResponse>;
    /**
     * @generated from protobuf rpc: DecideApprovalTask
     */
    decideApprovalTask(input: DecideApprovalTaskRequest, options?: RpcOptions): UnaryCall<DecideApprovalTaskRequest, DecideApprovalTaskResponse>;
    /**
     * Light-weight mutations leaders will need:
     *
     * @generated from protobuf rpc: AddReviewers
     */
    addReviewers(input: AddReviewersRequest, options?: RpcOptions): UnaryCall<AddReviewersRequest, AddReviewersResponse>;
    /**
     * @generated from protobuf rpc: CancelReviewTasks
     */
    cancelReviewTasks(input: CancelReviewTasksRequest, options?: RpcOptions): UnaryCall<CancelReviewTasksRequest, CancelReviewTasksResponse>;
}
/**
 * @generated from protobuf service services.documents.ApprovalService
 */
export class ApprovalServiceClient implements IApprovalServiceClient, ServiceInfo {
    typeName = ApprovalService.typeName;
    methods = ApprovalService.methods;
    options = ApprovalService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StartReview
     */
    startReview(input: StartReviewRequest, options?: RpcOptions): UnaryCall<StartReviewRequest, StartReviewResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartReviewRequest, StartReviewResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetApprovalPanel
     */
    getApprovalPanel(input: GetApprovalPanelRequest, options?: RpcOptions): UnaryCall<GetApprovalPanelRequest, GetApprovalPanelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetApprovalPanelRequest, GetApprovalPanelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListMyApprovalTasks
     */
    listMyApprovalTasks(input: ListMyApprovalTasksRequest, options?: RpcOptions): UnaryCall<ListMyApprovalTasksRequest, ListMyApprovalTasksResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMyApprovalTasksRequest, ListMyApprovalTasksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DecideApprovalTask
     */
    decideApprovalTask(input: DecideApprovalTaskRequest, options?: RpcOptions): UnaryCall<DecideApprovalTaskRequest, DecideApprovalTaskResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DecideApprovalTaskRequest, DecideApprovalTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Light-weight mutations leaders will need:
     *
     * @generated from protobuf rpc: AddReviewers
     */
    addReviewers(input: AddReviewersRequest, options?: RpcOptions): UnaryCall<AddReviewersRequest, AddReviewersResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddReviewersRequest, AddReviewersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CancelReviewTasks
     */
    cancelReviewTasks(input: CancelReviewTasksRequest, options?: RpcOptions): UnaryCall<CancelReviewTasksRequest, CancelReviewTasksResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<CancelReviewTasksRequest, CancelReviewTasksResponse>("unary", this._transport, method, opt, input);
    }
}
