// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/approval.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ApprovalService } from "./approval";
import type { RecomputeApprovalPolicyCountersResponse } from "./approval";
import type { RecomputeApprovalPolicyCountersRequest } from "./approval";
import type { ReopenApprovalTaskResponse } from "./approval";
import type { ReopenApprovalTaskRequest } from "./approval";
import type { DecideApprovalTaskResponse } from "./approval";
import type { DecideApprovalTaskRequest } from "./approval";
import type { ListApprovalTasksResponse } from "./approval";
import type { ListApprovalTasksRequest } from "./approval";
import type { CompleteApprovalRoundResponse } from "./approval";
import type { CompleteApprovalRoundRequest } from "./approval";
import type { StartApprovalRoundResponse } from "./approval";
import type { StartApprovalRoundRequest } from "./approval";
import type { UpsertApprovalPolicyResponse } from "./approval";
import type { UpsertApprovalPolicyRequest } from "./approval";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetApprovalPolicyResponse } from "./approval";
import type { GetApprovalPolicyRequest } from "./approval";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.documents.ApprovalService
 */
export interface IApprovalServiceClient {
    /**
     * Policy
     *
     * @generated from protobuf rpc: GetApprovalPolicy
     */
    getApprovalPolicy(input: GetApprovalPolicyRequest, options?: RpcOptions): UnaryCall<GetApprovalPolicyRequest, GetApprovalPolicyResponse>;
    /**
     * @generated from protobuf rpc: UpsertApprovalPolicy
     */
    upsertApprovalPolicy(input: UpsertApprovalPolicyRequest, options?: RpcOptions): UnaryCall<UpsertApprovalPolicyRequest, UpsertApprovalPolicyResponse>;
    /**
     * @generated from protobuf rpc: StartApprovalRound
     */
    startApprovalRound(input: StartApprovalRoundRequest, options?: RpcOptions): UnaryCall<StartApprovalRoundRequest, StartApprovalRoundResponse>;
    /**
     * @generated from protobuf rpc: CompleteApprovalRound
     */
    completeApprovalRound(input: CompleteApprovalRoundRequest, options?: RpcOptions): UnaryCall<CompleteApprovalRoundRequest, CompleteApprovalRoundResponse>;
    /**
     * Tasks
     *
     * @generated from protobuf rpc: ListApprovalTasks
     */
    listApprovalTasks(input: ListApprovalTasksRequest, options?: RpcOptions): UnaryCall<ListApprovalTasksRequest, ListApprovalTasksResponse>;
    /**
     * @generated from protobuf rpc: DecideApprovalTask
     */
    decideApprovalTask(input: DecideApprovalTaskRequest, options?: RpcOptions): UnaryCall<DecideApprovalTaskRequest, DecideApprovalTaskResponse>;
    /**
     * @generated from protobuf rpc: ReopenApprovalTask
     */
    reopenApprovalTask(input: ReopenApprovalTaskRequest, options?: RpcOptions): UnaryCall<ReopenApprovalTaskRequest, ReopenApprovalTaskResponse>;
    /**
     * Helpers
     *
     * @generated from protobuf rpc: RecomputeApprovalPolicyCounters
     */
    recomputeApprovalPolicyCounters(input: RecomputeApprovalPolicyCountersRequest, options?: RpcOptions): UnaryCall<RecomputeApprovalPolicyCountersRequest, RecomputeApprovalPolicyCountersResponse>;
}
/**
 * @generated from protobuf service services.documents.ApprovalService
 */
export class ApprovalServiceClient implements IApprovalServiceClient, ServiceInfo {
    typeName = ApprovalService.typeName;
    methods = ApprovalService.methods;
    options = ApprovalService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Policy
     *
     * @generated from protobuf rpc: GetApprovalPolicy
     */
    getApprovalPolicy(input: GetApprovalPolicyRequest, options?: RpcOptions): UnaryCall<GetApprovalPolicyRequest, GetApprovalPolicyResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetApprovalPolicyRequest, GetApprovalPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertApprovalPolicy
     */
    upsertApprovalPolicy(input: UpsertApprovalPolicyRequest, options?: RpcOptions): UnaryCall<UpsertApprovalPolicyRequest, UpsertApprovalPolicyResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertApprovalPolicyRequest, UpsertApprovalPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartApprovalRound
     */
    startApprovalRound(input: StartApprovalRoundRequest, options?: RpcOptions): UnaryCall<StartApprovalRoundRequest, StartApprovalRoundResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartApprovalRoundRequest, StartApprovalRoundResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CompleteApprovalRound
     */
    completeApprovalRound(input: CompleteApprovalRoundRequest, options?: RpcOptions): UnaryCall<CompleteApprovalRoundRequest, CompleteApprovalRoundResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompleteApprovalRoundRequest, CompleteApprovalRoundResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Tasks
     *
     * @generated from protobuf rpc: ListApprovalTasks
     */
    listApprovalTasks(input: ListApprovalTasksRequest, options?: RpcOptions): UnaryCall<ListApprovalTasksRequest, ListApprovalTasksResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListApprovalTasksRequest, ListApprovalTasksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DecideApprovalTask
     */
    decideApprovalTask(input: DecideApprovalTaskRequest, options?: RpcOptions): UnaryCall<DecideApprovalTaskRequest, DecideApprovalTaskResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<DecideApprovalTaskRequest, DecideApprovalTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReopenApprovalTask
     */
    reopenApprovalTask(input: ReopenApprovalTaskRequest, options?: RpcOptions): UnaryCall<ReopenApprovalTaskRequest, ReopenApprovalTaskResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReopenApprovalTaskRequest, ReopenApprovalTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Helpers
     *
     * @generated from protobuf rpc: RecomputeApprovalPolicyCounters
     */
    recomputeApprovalPolicyCounters(input: RecomputeApprovalPolicyCountersRequest, options?: RpcOptions): UnaryCall<RecomputeApprovalPolicyCountersRequest, RecomputeApprovalPolicyCountersResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecomputeApprovalPolicyCountersRequest, RecomputeApprovalPolicyCountersResponse>("unary", this._transport, method, opt, input);
    }
}
