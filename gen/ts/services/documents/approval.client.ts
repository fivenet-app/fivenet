// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/approval.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ApprovalService } from "./approval";
import type { ReopenTaskResponse } from "./approval";
import type { ReopenTaskRequest } from "./approval";
import type { DecideTaskResponse } from "./approval";
import type { DecideTaskRequest } from "./approval";
import type { ListTasksResponse } from "./approval";
import type { ListTasksRequest } from "./approval";
import type { DeleteApprovalAccessResponse } from "./approval";
import type { DeleteApprovalAccessRequest } from "./approval";
import type { UpsertApprovalAccessResponse } from "./approval";
import type { UpsertApprovalAccessRequest } from "./approval";
import type { ListApprovalAccessResponse } from "./approval";
import type { ListApprovalAccessRequest } from "./approval";
import type { RecomputePolicyCountersResponse } from "./approval";
import type { RecomputePolicyCountersRequest } from "./approval";
import type { CompleteApprovalRoundResponse } from "./approval";
import type { CompleteApprovalRoundRequest } from "./approval";
import type { StartApprovalRoundResponse } from "./approval";
import type { StartApprovalRoundRequest } from "./approval";
import type { UpsertPolicyResponse } from "./approval";
import type { UpsertPolicyRequest } from "./approval";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetPolicyResponse } from "./approval";
import type { GetPolicyRequest } from "./approval";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.documents.ApprovalService
 */
export interface IApprovalServiceClient {
    /**
     * Policy
     *
     * @generated from protobuf rpc: GetPolicy
     */
    getPolicy(input: GetPolicyRequest, options?: RpcOptions): UnaryCall<GetPolicyRequest, GetPolicyResponse>;
    /**
     * @generated from protobuf rpc: UpsertPolicy
     */
    upsertPolicy(input: UpsertPolicyRequest, options?: RpcOptions): UnaryCall<UpsertPolicyRequest, UpsertPolicyResponse>;
    /**
     * @generated from protobuf rpc: StartApprovalRound
     */
    startApprovalRound(input: StartApprovalRoundRequest, options?: RpcOptions): UnaryCall<StartApprovalRoundRequest, StartApprovalRoundResponse>;
    /**
     * @generated from protobuf rpc: CompleteApprovalRound
     */
    completeApprovalRound(input: CompleteApprovalRoundRequest, options?: RpcOptions): UnaryCall<CompleteApprovalRoundRequest, CompleteApprovalRoundResponse>;
    /**
     * @generated from protobuf rpc: RecomputePolicyCounters
     */
    recomputePolicyCounters(input: RecomputePolicyCountersRequest, options?: RpcOptions): UnaryCall<RecomputePolicyCountersRequest, RecomputePolicyCountersResponse>;
    /**
     * Access (policy-scoped)
     *
     * @generated from protobuf rpc: ListApprovalAccess
     */
    listApprovalAccess(input: ListApprovalAccessRequest, options?: RpcOptions): UnaryCall<ListApprovalAccessRequest, ListApprovalAccessResponse>;
    /**
     * @generated from protobuf rpc: UpsertApprovalAccess
     */
    upsertApprovalAccess(input: UpsertApprovalAccessRequest, options?: RpcOptions): UnaryCall<UpsertApprovalAccessRequest, UpsertApprovalAccessResponse>;
    /**
     * @generated from protobuf rpc: DeleteApprovalAccess
     */
    deleteApprovalAccess(input: DeleteApprovalAccessRequest, options?: RpcOptions): UnaryCall<DeleteApprovalAccessRequest, DeleteApprovalAccessResponse>;
    /**
     * Tasks
     *
     * @generated from protobuf rpc: ListTasks
     */
    listTasks(input: ListTasksRequest, options?: RpcOptions): UnaryCall<ListTasksRequest, ListTasksResponse>;
    /**
     * @generated from protobuf rpc: DecideTask
     */
    decideTask(input: DecideTaskRequest, options?: RpcOptions): UnaryCall<DecideTaskRequest, DecideTaskResponse>;
    /**
     * @generated from protobuf rpc: ReopenTask
     */
    reopenTask(input: ReopenTaskRequest, options?: RpcOptions): UnaryCall<ReopenTaskRequest, ReopenTaskResponse>;
}
/**
 * @generated from protobuf service services.documents.ApprovalService
 */
export class ApprovalServiceClient implements IApprovalServiceClient, ServiceInfo {
    typeName = ApprovalService.typeName;
    methods = ApprovalService.methods;
    options = ApprovalService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Policy
     *
     * @generated from protobuf rpc: GetPolicy
     */
    getPolicy(input: GetPolicyRequest, options?: RpcOptions): UnaryCall<GetPolicyRequest, GetPolicyResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPolicyRequest, GetPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertPolicy
     */
    upsertPolicy(input: UpsertPolicyRequest, options?: RpcOptions): UnaryCall<UpsertPolicyRequest, UpsertPolicyResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertPolicyRequest, UpsertPolicyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartApprovalRound
     */
    startApprovalRound(input: StartApprovalRoundRequest, options?: RpcOptions): UnaryCall<StartApprovalRoundRequest, StartApprovalRoundResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartApprovalRoundRequest, StartApprovalRoundResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CompleteApprovalRound
     */
    completeApprovalRound(input: CompleteApprovalRoundRequest, options?: RpcOptions): UnaryCall<CompleteApprovalRoundRequest, CompleteApprovalRoundResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<CompleteApprovalRoundRequest, CompleteApprovalRoundResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RecomputePolicyCounters
     */
    recomputePolicyCounters(input: RecomputePolicyCountersRequest, options?: RpcOptions): UnaryCall<RecomputePolicyCountersRequest, RecomputePolicyCountersResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RecomputePolicyCountersRequest, RecomputePolicyCountersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Access (policy-scoped)
     *
     * @generated from protobuf rpc: ListApprovalAccess
     */
    listApprovalAccess(input: ListApprovalAccessRequest, options?: RpcOptions): UnaryCall<ListApprovalAccessRequest, ListApprovalAccessResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListApprovalAccessRequest, ListApprovalAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpsertApprovalAccess
     */
    upsertApprovalAccess(input: UpsertApprovalAccessRequest, options?: RpcOptions): UnaryCall<UpsertApprovalAccessRequest, UpsertApprovalAccessResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpsertApprovalAccessRequest, UpsertApprovalAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteApprovalAccess
     */
    deleteApprovalAccess(input: DeleteApprovalAccessRequest, options?: RpcOptions): UnaryCall<DeleteApprovalAccessRequest, DeleteApprovalAccessResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteApprovalAccessRequest, DeleteApprovalAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Tasks
     *
     * @generated from protobuf rpc: ListTasks
     */
    listTasks(input: ListTasksRequest, options?: RpcOptions): UnaryCall<ListTasksRequest, ListTasksResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTasksRequest, ListTasksResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DecideTask
     */
    decideTask(input: DecideTaskRequest, options?: RpcOptions): UnaryCall<DecideTaskRequest, DecideTaskResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DecideTaskRequest, DecideTaskResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReopenTask
     */
    reopenTask(input: ReopenTaskRequest, options?: RpcOptions): UnaryCall<ReopenTaskRequest, ReopenTaskResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReopenTaskRequest, ReopenTaskResponse>("unary", this._transport, method, opt, input);
    }
}
