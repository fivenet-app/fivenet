// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/stamps.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Stamp } from "../../resources/documents/stamp";
import { PaginationResponse } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
/**
 * @generated from protobuf message services.documents.ListUsableStampsRequest
 */
export interface ListUsableStampsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * If set, only stamps usable for signing this document are returned
     *
     * @generated from protobuf field: optional int64 document_id = 2
     */
    documentId?: number;
}
/**
 * @generated from protobuf message services.documents.ListUsableStampsResponse
 */
export interface ListUsableStampsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.Stamp stamps = 2
     */
    stamps: Stamp[];
}
/**
 * @generated from protobuf message services.documents.UpsertStampRequest
 */
export interface UpsertStampRequest {
    /**
     * @generated from protobuf field: resources.documents.Stamp stamp = 1
     */
    stamp?: Stamp;
}
/**
 * @generated from protobuf message services.documents.UpsertStampResponse
 */
export interface UpsertStampResponse {
    /**
     * @generated from protobuf field: resources.documents.Stamp stamp = 1
     */
    stamp?: Stamp;
}
/**
 * @generated from protobuf message services.documents.DeleteStampRequest
 */
export interface DeleteStampRequest {
    /**
     * @generated from protobuf field: int64 stamp_id = 1
     */
    stampId: number;
}
/**
 * @generated from protobuf message services.documents.DeleteStampResponse
 */
export interface DeleteStampResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class ListUsableStampsRequest$Type extends MessageType<ListUsableStampsRequest> {
    constructor() {
        super("services.documents.ListUsableStampsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "document_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListUsableStampsRequest>): ListUsableStampsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListUsableStampsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsableStampsRequest): ListUsableStampsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional int64 document_id */ 2:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsableStampsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional int64 document_id = 2; */
        if (message.documentId !== undefined)
            writer.tag(2, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUsableStampsRequest
 */
export const ListUsableStampsRequest = new ListUsableStampsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUsableStampsResponse$Type extends MessageType<ListUsableStampsResponse> {
    constructor() {
        super("services.documents.ListUsableStampsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "stamps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Stamp, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<ListUsableStampsResponse>): ListUsableStampsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stamps = [];
        if (value !== undefined)
            reflectionMergePartial<ListUsableStampsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUsableStampsResponse): ListUsableStampsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.Stamp stamps */ 2:
                    message.stamps.push(Stamp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUsableStampsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.Stamp stamps = 2; */
        for (let i = 0; i < message.stamps.length; i++)
            Stamp.internalBinaryWrite(message.stamps[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListUsableStampsResponse
 */
export const ListUsableStampsResponse = new ListUsableStampsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertStampRequest$Type extends MessageType<UpsertStampRequest> {
    constructor() {
        super("services.documents.UpsertStampRequest", [
            { no: 1, name: "stamp", kind: "message", T: () => Stamp, options: { "buf.validate.field": { required: true } } }
        ]);
    }
    create(value?: PartialMessage<UpsertStampRequest>): UpsertStampRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpsertStampRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertStampRequest): UpsertStampRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Stamp stamp */ 1:
                    message.stamp = Stamp.internalBinaryRead(reader, reader.uint32(), options, message.stamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertStampRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Stamp stamp = 1; */
        if (message.stamp)
            Stamp.internalBinaryWrite(message.stamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertStampRequest
 */
export const UpsertStampRequest = new UpsertStampRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertStampResponse$Type extends MessageType<UpsertStampResponse> {
    constructor() {
        super("services.documents.UpsertStampResponse", [
            { no: 1, name: "stamp", kind: "message", T: () => Stamp }
        ]);
    }
    create(value?: PartialMessage<UpsertStampResponse>): UpsertStampResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpsertStampResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertStampResponse): UpsertStampResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.Stamp stamp */ 1:
                    message.stamp = Stamp.internalBinaryRead(reader, reader.uint32(), options, message.stamp);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertStampResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.Stamp stamp = 1; */
        if (message.stamp)
            Stamp.internalBinaryWrite(message.stamp, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertStampResponse
 */
export const UpsertStampResponse = new UpsertStampResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteStampRequest$Type extends MessageType<DeleteStampRequest> {
    constructor() {
        super("services.documents.DeleteStampRequest", [
            { no: 1, name: "stamp_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteStampRequest>): DeleteStampRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stampId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteStampRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteStampRequest): DeleteStampRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 stamp_id */ 1:
                    message.stampId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteStampRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 stamp_id = 1; */
        if (message.stampId !== 0)
            writer.tag(1, WireType.Varint).int64(message.stampId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteStampRequest
 */
export const DeleteStampRequest = new DeleteStampRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteStampResponse$Type extends MessageType<DeleteStampResponse> {
    constructor() {
        super("services.documents.DeleteStampResponse", []);
    }
    create(value?: PartialMessage<DeleteStampResponse>): DeleteStampResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteStampResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteStampResponse): DeleteStampResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteStampResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DeleteStampResponse
 */
export const DeleteStampResponse = new DeleteStampResponse$Type();
/**
 * @generated ServiceType for protobuf service services.documents.StampsService
 */
export const StampsService = new ServiceType("services.documents.StampsService", [
    { name: "ListUsableStamps", options: { "codegen.perms.perms": { enabled: true } }, I: ListUsableStampsRequest, O: ListUsableStampsResponse },
    { name: "UpsertStamp", options: { "codegen.perms.perms": { enabled: true } }, I: UpsertStampRequest, O: UpsertStampResponse },
    { name: "DeleteStamp", options: { "codegen.perms.perms": { enabled: true } }, I: DeleteStampRequest, O: DeleteStampResponse }
], { "codegen.perms.perms_svc": { order: 57, icon: "i-mdi-stamper" } });
