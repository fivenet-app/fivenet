// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/approval.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PartySelector } from "../../resources/documents/approval";
import { PaginationResponse } from "../../resources/common/database/database";
import { ApprovalTaskStatus } from "../../resources/documents/approval";
import { PaginationRequest } from "../../resources/common/database/database";
import { OnEditBehavior } from "../../resources/documents/approval";
import { ApprovalTask } from "../../resources/documents/approval";
import { ApprovalStage } from "../../resources/documents/approval";
/**
 * @generated from protobuf message services.documents.ApprovalPanelSnapshot
 */
export interface ApprovalPanelSnapshot {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * Smallest incomplete order
     *
     * @generated from protobuf field: int32 current_order = 2
     */
    currentOrder: number;
    /**
     * With aggregates
     *
     * @generated from protobuf field: repeated resources.documents.ApprovalStage stages = 3
     */
    stages: ApprovalStage[];
    /**
     * @generated from protobuf field: repeated resources.documents.ApprovalTask pending_tasks = 4
     */
    pendingTasks: ApprovalTask[];
    /**
     * @generated from protobuf field: bool all_required_stages_satisfied = 5
     */
    allRequiredStagesSatisfied: boolean;
    /**
     * @generated from protobuf field: bool any_declined = 6
     */
    anyDeclined: boolean;
}
/**
 * @generated from protobuf message services.documents.StartReviewRequest
 */
export interface StartReviewRequest {
    /**
     * @generated from protobuf field: string document_id = 1
     */
    documentId: string;
    /**
     * Optional override
     *
     * @generated from protobuf field: resources.documents.OnEditBehavior on_edit_behavior = 2
     */
    onEditBehavior: OnEditBehavior;
}
/**
 * @generated from protobuf message services.documents.StartReviewResponse
 */
export interface StartReviewResponse {
    /**
     * @generated from protobuf field: string policy_id = 1
     */
    policyId: string;
    /**
     * @generated from protobuf field: services.documents.ApprovalPanelSnapshot panel = 2
     */
    panel?: ApprovalPanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.GetApprovalPanelRequest
 */
export interface GetApprovalPanelRequest {
    /**
     * @generated from protobuf field: string document_id = 1
     */
    documentId: string;
}
/**
 * @generated from protobuf message services.documents.GetApprovalPanelResponse
 */
export interface GetApprovalPanelResponse {
    /**
     * @generated from protobuf field: services.documents.ApprovalPanelSnapshot panel = 1
     */
    panel?: ApprovalPanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.ListMyApprovalTasksRequest
 */
export interface ListMyApprovalTasksRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * Default: PENDING
     *
     * @generated from protobuf field: repeated resources.documents.ApprovalTaskStatus status = 2
     */
    status: ApprovalTaskStatus[];
}
/**
 * @generated from protobuf message services.documents.ListMyApprovalTasksResponse
 */
export interface ListMyApprovalTasksResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.documents.ApprovalTask tasks = 2
     */
    tasks: ApprovalTask[];
}
/**
 * @generated from protobuf message services.documents.DecisionApprove
 */
export interface DecisionApprove {
    /**
     * @generated from protobuf field: string comment = 1
     */
    comment: string;
}
/**
 * @generated from protobuf message services.documents.DecisionDecline
 */
export interface DecisionDecline {
    /**
     * @generated from protobuf field: string reason = 1
     */
    reason: string;
}
/**
 * @generated from protobuf message services.documents.DecideApprovalTaskRequest
 */
export interface DecideApprovalTaskRequest {
    /**
     * @generated from protobuf field: string task_id = 1
     */
    taskId: string;
    /**
     * @generated from protobuf oneof: decision
     */
    decision: {
        oneofKind: "approve";
        /**
         * @generated from protobuf field: services.documents.DecisionApprove approve = 10
         */
        approve: DecisionApprove;
    } | {
        oneofKind: "decline";
        /**
         * @generated from protobuf field: services.documents.DecisionDecline decline = 11
         */
        decline: DecisionDecline;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message services.documents.DecideApprovalTaskResponse
 */
export interface DecideApprovalTaskResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalTask updated = 1
     */
    updated?: ApprovalTask;
    /**
     * @generated from protobuf field: bool stage_completed = 2
     */
    stageCompleted: boolean;
    /**
     * @generated from protobuf field: bool document_now_approved = 3
     */
    documentNowApproved: boolean;
    /**
     * Updated snapshot for optimistic UI
     *
     * @generated from protobuf field: services.documents.ApprovalPanelSnapshot panel = 4
     */
    panel?: ApprovalPanelSnapshot;
}
/**
 * Leader UX: add or cancel reviewer tasks on the fly
 *
 * @generated from protobuf message services.documents.AddReviewersRequest
 */
export interface AddReviewersRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * Who to add
     *
     * @generated from protobuf field: resources.documents.PartySelector selector = 2
     */
    selector?: PartySelector;
    /**
     * Optional: convert to a parallel stage if needed
     *
     * @generated from protobuf field: int32 quorum_any = 3
     */
    quorumAny: number;
    /**
     * Optional: attach to existing stage
     *
     * @generated from protobuf field: int64 stage_id = 4
     */
    stageId: number;
}
/**
 * @generated from protobuf message services.documents.AddReviewersResponse
 */
export interface AddReviewersResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.ApprovalTask created_tasks = 1
     */
    createdTasks: ApprovalTask[];
    /**
     * @generated from protobuf field: services.documents.ApprovalPanelSnapshot panel = 2
     */
    panel?: ApprovalPanelSnapshot;
}
/**
 * @generated from protobuf message services.documents.CancelReviewTasksRequest
 */
export interface CancelReviewTasksRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: repeated string task_ids = 2
     */
    taskIds: string[];
    /**
     * @generated from protobuf field: string reason = 3
     */
    reason: string;
}
/**
 * @generated from protobuf message services.documents.CancelReviewTasksResponse
 */
export interface CancelReviewTasksResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.ApprovalTask cancelled = 1
     */
    cancelled: ApprovalTask[];
    /**
     * @generated from protobuf field: services.documents.ApprovalPanelSnapshot panel = 2
     */
    panel?: ApprovalPanelSnapshot;
}
// @generated message type with reflection information, may provide speed optimized methods
class ApprovalPanelSnapshot$Type extends MessageType<ApprovalPanelSnapshot> {
    constructor() {
        super("services.documents.ApprovalPanelSnapshot", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "current_order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "stages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalStage },
            { no: 4, name: "pending_tasks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalTask },
            { no: 5, name: "all_required_stages_satisfied", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "any_declined", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ApprovalPanelSnapshot>): ApprovalPanelSnapshot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.currentOrder = 0;
        message.stages = [];
        message.pendingTasks = [];
        message.allRequiredStagesSatisfied = false;
        message.anyDeclined = false;
        if (value !== undefined)
            reflectionMergePartial<ApprovalPanelSnapshot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ApprovalPanelSnapshot): ApprovalPanelSnapshot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* int32 current_order */ 2:
                    message.currentOrder = reader.int32();
                    break;
                case /* repeated resources.documents.ApprovalStage stages */ 3:
                    message.stages.push(ApprovalStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.documents.ApprovalTask pending_tasks */ 4:
                    message.pendingTasks.push(ApprovalTask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool all_required_stages_satisfied */ 5:
                    message.allRequiredStagesSatisfied = reader.bool();
                    break;
                case /* bool any_declined */ 6:
                    message.anyDeclined = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ApprovalPanelSnapshot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* int32 current_order = 2; */
        if (message.currentOrder !== 0)
            writer.tag(2, WireType.Varint).int32(message.currentOrder);
        /* repeated resources.documents.ApprovalStage stages = 3; */
        for (let i = 0; i < message.stages.length; i++)
            ApprovalStage.internalBinaryWrite(message.stages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.ApprovalTask pending_tasks = 4; */
        for (let i = 0; i < message.pendingTasks.length; i++)
            ApprovalTask.internalBinaryWrite(message.pendingTasks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool all_required_stages_satisfied = 5; */
        if (message.allRequiredStagesSatisfied !== false)
            writer.tag(5, WireType.Varint).bool(message.allRequiredStagesSatisfied);
        /* bool any_declined = 6; */
        if (message.anyDeclined !== false)
            writer.tag(6, WireType.Varint).bool(message.anyDeclined);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ApprovalPanelSnapshot
 */
export const ApprovalPanelSnapshot = new ApprovalPanelSnapshot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartReviewRequest$Type extends MessageType<StartReviewRequest> {
    constructor() {
        super("services.documents.StartReviewRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "on_edit_behavior", kind: "enum", T: () => ["resources.documents.OnEditBehavior", OnEditBehavior, "ON_EDIT_BEHAVIOR_"] }
        ]);
    }
    create(value?: PartialMessage<StartReviewRequest>): StartReviewRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = "";
        message.onEditBehavior = 0;
        if (value !== undefined)
            reflectionMergePartial<StartReviewRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartReviewRequest): StartReviewRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string document_id */ 1:
                    message.documentId = reader.string();
                    break;
                case /* resources.documents.OnEditBehavior on_edit_behavior */ 2:
                    message.onEditBehavior = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartReviewRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string document_id = 1; */
        if (message.documentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.documentId);
        /* resources.documents.OnEditBehavior on_edit_behavior = 2; */
        if (message.onEditBehavior !== 0)
            writer.tag(2, WireType.Varint).int32(message.onEditBehavior);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.StartReviewRequest
 */
export const StartReviewRequest = new StartReviewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartReviewResponse$Type extends MessageType<StartReviewResponse> {
    constructor() {
        super("services.documents.StartReviewResponse", [
            { no: 1, name: "policy_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "panel", kind: "message", T: () => ApprovalPanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<StartReviewResponse>): StartReviewResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.policyId = "";
        if (value !== undefined)
            reflectionMergePartial<StartReviewResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartReviewResponse): StartReviewResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string policy_id */ 1:
                    message.policyId = reader.string();
                    break;
                case /* services.documents.ApprovalPanelSnapshot panel */ 2:
                    message.panel = ApprovalPanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartReviewResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string policy_id = 1; */
        if (message.policyId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.policyId);
        /* services.documents.ApprovalPanelSnapshot panel = 2; */
        if (message.panel)
            ApprovalPanelSnapshot.internalBinaryWrite(message.panel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.StartReviewResponse
 */
export const StartReviewResponse = new StartReviewResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetApprovalPanelRequest$Type extends MessageType<GetApprovalPanelRequest> {
    constructor() {
        super("services.documents.GetApprovalPanelRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetApprovalPanelRequest>): GetApprovalPanelRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = "";
        if (value !== undefined)
            reflectionMergePartial<GetApprovalPanelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetApprovalPanelRequest): GetApprovalPanelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string document_id */ 1:
                    message.documentId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetApprovalPanelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string document_id = 1; */
        if (message.documentId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetApprovalPanelRequest
 */
export const GetApprovalPanelRequest = new GetApprovalPanelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetApprovalPanelResponse$Type extends MessageType<GetApprovalPanelResponse> {
    constructor() {
        super("services.documents.GetApprovalPanelResponse", [
            { no: 1, name: "panel", kind: "message", T: () => ApprovalPanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<GetApprovalPanelResponse>): GetApprovalPanelResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetApprovalPanelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetApprovalPanelResponse): GetApprovalPanelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* services.documents.ApprovalPanelSnapshot panel */ 1:
                    message.panel = ApprovalPanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetApprovalPanelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* services.documents.ApprovalPanelSnapshot panel = 1; */
        if (message.panel)
            ApprovalPanelSnapshot.internalBinaryWrite(message.panel, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetApprovalPanelResponse
 */
export const GetApprovalPanelResponse = new GetApprovalPanelResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMyApprovalTasksRequest$Type extends MessageType<ListMyApprovalTasksRequest> {
    constructor() {
        super("services.documents.ListMyApprovalTasksRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.ApprovalTaskStatus", ApprovalTaskStatus, "APPROVAL_TASK_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<ListMyApprovalTasksRequest>): ListMyApprovalTasksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = [];
        if (value !== undefined)
            reflectionMergePartial<ListMyApprovalTasksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMyApprovalTasksRequest): ListMyApprovalTasksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.ApprovalTaskStatus status */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.status.push(reader.int32());
                    else
                        message.status.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMyApprovalTasksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.ApprovalTaskStatus status = 2; */
        if (message.status.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.status.length; i++)
                writer.int32(message.status[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListMyApprovalTasksRequest
 */
export const ListMyApprovalTasksRequest = new ListMyApprovalTasksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMyApprovalTasksResponse$Type extends MessageType<ListMyApprovalTasksResponse> {
    constructor() {
        super("services.documents.ListMyApprovalTasksResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "tasks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalTask }
        ]);
    }
    create(value?: PartialMessage<ListMyApprovalTasksResponse>): ListMyApprovalTasksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tasks = [];
        if (value !== undefined)
            reflectionMergePartial<ListMyApprovalTasksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMyApprovalTasksResponse): ListMyApprovalTasksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.documents.ApprovalTask tasks */ 2:
                    message.tasks.push(ApprovalTask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMyApprovalTasksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.ApprovalTask tasks = 2; */
        for (let i = 0; i < message.tasks.length; i++)
            ApprovalTask.internalBinaryWrite(message.tasks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListMyApprovalTasksResponse
 */
export const ListMyApprovalTasksResponse = new ListMyApprovalTasksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecisionApprove$Type extends MessageType<DecisionApprove> {
    constructor() {
        super("services.documents.DecisionApprove", [
            { no: 1, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DecisionApprove>): DecisionApprove {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.comment = "";
        if (value !== undefined)
            reflectionMergePartial<DecisionApprove>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecisionApprove): DecisionApprove {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string comment */ 1:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecisionApprove, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string comment = 1; */
        if (message.comment !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DecisionApprove
 */
export const DecisionApprove = new DecisionApprove$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecisionDecline$Type extends MessageType<DecisionDecline> {
    constructor() {
        super("services.documents.DecisionDecline", [
            { no: 1, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<DecisionDecline>): DecisionDecline {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<DecisionDecline>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecisionDecline): DecisionDecline {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reason */ 1:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecisionDecline, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reason = 1; */
        if (message.reason !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DecisionDecline
 */
export const DecisionDecline = new DecisionDecline$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecideApprovalTaskRequest$Type extends MessageType<DecideApprovalTaskRequest> {
    constructor() {
        super("services.documents.DecideApprovalTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "approve", kind: "message", oneof: "decision", T: () => DecisionApprove },
            { no: 11, name: "decline", kind: "message", oneof: "decision", T: () => DecisionDecline }
        ]);
    }
    create(value?: PartialMessage<DecideApprovalTaskRequest>): DecideApprovalTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = "";
        message.decision = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<DecideApprovalTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecideApprovalTaskRequest): DecideApprovalTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string task_id */ 1:
                    message.taskId = reader.string();
                    break;
                case /* services.documents.DecisionApprove approve */ 10:
                    message.decision = {
                        oneofKind: "approve",
                        approve: DecisionApprove.internalBinaryRead(reader, reader.uint32(), options, (message.decision as any).approve)
                    };
                    break;
                case /* services.documents.DecisionDecline decline */ 11:
                    message.decision = {
                        oneofKind: "decline",
                        decline: DecisionDecline.internalBinaryRead(reader, reader.uint32(), options, (message.decision as any).decline)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecideApprovalTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string task_id = 1; */
        if (message.taskId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.taskId);
        /* services.documents.DecisionApprove approve = 10; */
        if (message.decision.oneofKind === "approve")
            DecisionApprove.internalBinaryWrite(message.decision.approve, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* services.documents.DecisionDecline decline = 11; */
        if (message.decision.oneofKind === "decline")
            DecisionDecline.internalBinaryWrite(message.decision.decline, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DecideApprovalTaskRequest
 */
export const DecideApprovalTaskRequest = new DecideApprovalTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecideApprovalTaskResponse$Type extends MessageType<DecideApprovalTaskResponse> {
    constructor() {
        super("services.documents.DecideApprovalTaskResponse", [
            { no: 1, name: "updated", kind: "message", T: () => ApprovalTask },
            { no: 2, name: "stage_completed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "document_now_approved", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "panel", kind: "message", T: () => ApprovalPanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<DecideApprovalTaskResponse>): DecideApprovalTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stageCompleted = false;
        message.documentNowApproved = false;
        if (value !== undefined)
            reflectionMergePartial<DecideApprovalTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecideApprovalTaskResponse): DecideApprovalTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalTask updated */ 1:
                    message.updated = ApprovalTask.internalBinaryRead(reader, reader.uint32(), options, message.updated);
                    break;
                case /* bool stage_completed */ 2:
                    message.stageCompleted = reader.bool();
                    break;
                case /* bool document_now_approved */ 3:
                    message.documentNowApproved = reader.bool();
                    break;
                case /* services.documents.ApprovalPanelSnapshot panel */ 4:
                    message.panel = ApprovalPanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecideApprovalTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalTask updated = 1; */
        if (message.updated)
            ApprovalTask.internalBinaryWrite(message.updated, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* bool stage_completed = 2; */
        if (message.stageCompleted !== false)
            writer.tag(2, WireType.Varint).bool(message.stageCompleted);
        /* bool document_now_approved = 3; */
        if (message.documentNowApproved !== false)
            writer.tag(3, WireType.Varint).bool(message.documentNowApproved);
        /* services.documents.ApprovalPanelSnapshot panel = 4; */
        if (message.panel)
            ApprovalPanelSnapshot.internalBinaryWrite(message.panel, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DecideApprovalTaskResponse
 */
export const DecideApprovalTaskResponse = new DecideApprovalTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReviewersRequest$Type extends MessageType<AddReviewersRequest> {
    constructor() {
        super("services.documents.AddReviewersRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "selector", kind: "message", T: () => PartySelector },
            { no: 3, name: "quorum_any", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "stage_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<AddReviewersRequest>): AddReviewersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.quorumAny = 0;
        message.stageId = 0;
        if (value !== undefined)
            reflectionMergePartial<AddReviewersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddReviewersRequest): AddReviewersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.documents.PartySelector selector */ 2:
                    message.selector = PartySelector.internalBinaryRead(reader, reader.uint32(), options, message.selector);
                    break;
                case /* int32 quorum_any */ 3:
                    message.quorumAny = reader.int32();
                    break;
                case /* int64 stage_id */ 4:
                    message.stageId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddReviewersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* resources.documents.PartySelector selector = 2; */
        if (message.selector)
            PartySelector.internalBinaryWrite(message.selector, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 quorum_any = 3; */
        if (message.quorumAny !== 0)
            writer.tag(3, WireType.Varint).int32(message.quorumAny);
        /* int64 stage_id = 4; */
        if (message.stageId !== 0)
            writer.tag(4, WireType.Varint).int64(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.AddReviewersRequest
 */
export const AddReviewersRequest = new AddReviewersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddReviewersResponse$Type extends MessageType<AddReviewersResponse> {
    constructor() {
        super("services.documents.AddReviewersResponse", [
            { no: 1, name: "created_tasks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalTask },
            { no: 2, name: "panel", kind: "message", T: () => ApprovalPanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<AddReviewersResponse>): AddReviewersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.createdTasks = [];
        if (value !== undefined)
            reflectionMergePartial<AddReviewersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddReviewersResponse): AddReviewersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.ApprovalTask created_tasks */ 1:
                    message.createdTasks.push(ApprovalTask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* services.documents.ApprovalPanelSnapshot panel */ 2:
                    message.panel = ApprovalPanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddReviewersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.ApprovalTask created_tasks = 1; */
        for (let i = 0; i < message.createdTasks.length; i++)
            ApprovalTask.internalBinaryWrite(message.createdTasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* services.documents.ApprovalPanelSnapshot panel = 2; */
        if (message.panel)
            ApprovalPanelSnapshot.internalBinaryWrite(message.panel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.AddReviewersResponse
 */
export const AddReviewersResponse = new AddReviewersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelReviewTasksRequest$Type extends MessageType<CancelReviewTasksRequest> {
    constructor() {
        super("services.documents.CancelReviewTasksRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "task_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<CancelReviewTasksRequest>): CancelReviewTasksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.taskIds = [];
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<CancelReviewTasksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelReviewTasksRequest): CancelReviewTasksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* repeated string task_ids */ 2:
                    message.taskIds.push(reader.string());
                    break;
                case /* string reason */ 3:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelReviewTasksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* repeated string task_ids = 2; */
        for (let i = 0; i < message.taskIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.taskIds[i]);
        /* string reason = 3; */
        if (message.reason !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CancelReviewTasksRequest
 */
export const CancelReviewTasksRequest = new CancelReviewTasksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CancelReviewTasksResponse$Type extends MessageType<CancelReviewTasksResponse> {
    constructor() {
        super("services.documents.CancelReviewTasksResponse", [
            { no: 1, name: "cancelled", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalTask },
            { no: 2, name: "panel", kind: "message", T: () => ApprovalPanelSnapshot }
        ]);
    }
    create(value?: PartialMessage<CancelReviewTasksResponse>): CancelReviewTasksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.cancelled = [];
        if (value !== undefined)
            reflectionMergePartial<CancelReviewTasksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CancelReviewTasksResponse): CancelReviewTasksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.ApprovalTask cancelled */ 1:
                    message.cancelled.push(ApprovalTask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* services.documents.ApprovalPanelSnapshot panel */ 2:
                    message.panel = ApprovalPanelSnapshot.internalBinaryRead(reader, reader.uint32(), options, message.panel);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CancelReviewTasksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.ApprovalTask cancelled = 1; */
        for (let i = 0; i < message.cancelled.length; i++)
            ApprovalTask.internalBinaryWrite(message.cancelled[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* services.documents.ApprovalPanelSnapshot panel = 2; */
        if (message.panel)
            ApprovalPanelSnapshot.internalBinaryWrite(message.panel, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CancelReviewTasksResponse
 */
export const CancelReviewTasksResponse = new CancelReviewTasksResponse$Type();
/**
 * @generated ServiceType for protobuf service services.documents.ApprovalService
 */
export const ApprovalService = new ServiceType("services.documents.ApprovalService", [
    { name: "StartReview", options: {}, I: StartReviewRequest, O: StartReviewResponse },
    { name: "GetApprovalPanel", options: {}, I: GetApprovalPanelRequest, O: GetApprovalPanelResponse },
    { name: "ListMyApprovalTasks", options: {}, I: ListMyApprovalTasksRequest, O: ListMyApprovalTasksResponse },
    { name: "DecideApprovalTask", options: {}, I: DecideApprovalTaskRequest, O: DecideApprovalTaskResponse },
    { name: "AddReviewers", options: {}, I: AddReviewersRequest, O: AddReviewersResponse },
    { name: "CancelReviewTasks", options: {}, I: CancelReviewTasksRequest, O: CancelReviewTasksResponse }
]);
