// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/approval.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ApprovalTaskStatus } from "../../resources/documents/approval";
import { ApprovalTask } from "../../resources/documents/approval";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { OnEditBehavior } from "../../resources/documents/approval";
import { ApprovalRuleKind } from "../../resources/documents/approval";
import { ApprovalPolicy } from "../../resources/documents/approval";
/**
 * @generated from protobuf message services.documents.GetApprovalPolicyRequest
 */
export interface GetApprovalPolicyRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.GetApprovalPolicyResponse
 */
export interface GetApprovalPolicyResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 1
     */
    policy?: ApprovalPolicy;
}
/**
 * @generated from protobuf message services.documents.UpsertApprovalPolicyRequest
 */
export interface UpsertApprovalPolicyRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: resources.documents.ApprovalRuleKind rule_kind = 2
     */
    ruleKind: ApprovalRuleKind;
    /**
     * Used if rule_kind=QUORUM_ANY
     *
     * @generated from protobuf field: int32 required_count = 3
     */
    requiredCount: number;
    /**
     * @generated from protobuf field: resources.documents.OnEditBehavior on_edit_behavior = 4
     */
    onEditBehavior: OnEditBehavior;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp due_at = 5
     */
    dueAt?: Timestamp;
}
/**
 * @generated from protobuf message services.documents.UpsertApprovalPolicyResponse
 */
export interface UpsertApprovalPolicyResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 1
     */
    policy?: ApprovalPolicy;
}
/**
 * @generated from protobuf message services.documents.StartApprovalRoundRequest
 */
export interface StartApprovalRoundRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * If omitted, server uses now
     *
     * @generated from protobuf field: resources.timestamp.Timestamp snapshot_date = 2
     */
    snapshotDate?: Timestamp;
}
/**
 * @generated from protobuf message services.documents.StartApprovalRoundResponse
 */
export interface StartApprovalRoundResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 1
     */
    policy?: ApprovalPolicy;
    /**
     * @generated from protobuf field: repeated resources.documents.ApprovalTask tasks = 2
     */
    tasks: ApprovalTask[];
}
/**
 * @generated from protobuf message services.documents.CompleteApprovalRoundRequest
 */
export interface CompleteApprovalRoundRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.CompleteApprovalRoundResponse
 */
export interface CompleteApprovalRoundResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 1
     */
    policy?: ApprovalPolicy;
}
/**
 * @generated from protobuf message services.documents.ListApprovalTasksRequest
 */
export interface ListApprovalTasksRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * Search
     *
     * @generated from protobuf field: repeated resources.documents.ApprovalTaskStatus statuses = 2
     */
    statuses: ApprovalTaskStatus[];
}
/**
 * @generated from protobuf message services.documents.ListApprovalTasksResponse
 */
export interface ListApprovalTasksResponse {
    /**
     * @generated from protobuf field: repeated resources.documents.ApprovalTask tasks = 1
     */
    tasks: ApprovalTask[];
}
/**
 * @generated from protobuf message services.documents.DecideApprovalTaskRequest
 */
export interface DecideApprovalTaskRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
    /**
     * @generated from protobuf field: int64 task_id = 2
     */
    taskId: number;
    /**
     * @generated from protobuf field: resources.documents.ApprovalTaskStatus new_status = 3
     */
    newStatus: ApprovalTaskStatus; // APPROVED or DECLINED
    /**
     * @generated from protobuf field: string comment = 4
     */
    comment: string;
}
/**
 * @generated from protobuf message services.documents.DecideApprovalTaskResponse
 */
export interface DecideApprovalTaskResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalTask task = 1
     */
    task?: ApprovalTask;
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 2
     */
    policy?: ApprovalPolicy; // Counters updated
}
/**
 * @generated from protobuf message services.documents.ReopenApprovalTaskRequest
 */
export interface ReopenApprovalTaskRequest {
    /**
     * @generated from protobuf field: int64 task_id = 1
     */
    taskId: number;
    /**
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
}
/**
 * @generated from protobuf message services.documents.ReopenApprovalTaskResponse
 */
export interface ReopenApprovalTaskResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalTask task = 1
     */
    task?: ApprovalTask;
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 2
     */
    policy?: ApprovalPolicy;
}
/**
 * @generated from protobuf message services.documents.RecomputeApprovalPolicyCountersRequest
 */
export interface RecomputeApprovalPolicyCountersRequest {
    /**
     * @generated from protobuf field: int64 document_id = 1
     */
    documentId: number;
}
/**
 * @generated from protobuf message services.documents.RecomputeApprovalPolicyCountersResponse
 */
export interface RecomputeApprovalPolicyCountersResponse {
    /**
     * @generated from protobuf field: resources.documents.ApprovalPolicy policy = 1
     */
    policy?: ApprovalPolicy;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetApprovalPolicyRequest$Type extends MessageType<GetApprovalPolicyRequest> {
    constructor() {
        super("services.documents.GetApprovalPolicyRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<GetApprovalPolicyRequest>): GetApprovalPolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetApprovalPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetApprovalPolicyRequest): GetApprovalPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetApprovalPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetApprovalPolicyRequest
 */
export const GetApprovalPolicyRequest = new GetApprovalPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetApprovalPolicyResponse$Type extends MessageType<GetApprovalPolicyResponse> {
    constructor() {
        super("services.documents.GetApprovalPolicyResponse", [
            { no: 1, name: "policy", kind: "message", T: () => ApprovalPolicy }
        ]);
    }
    create(value?: PartialMessage<GetApprovalPolicyResponse>): GetApprovalPolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetApprovalPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetApprovalPolicyResponse): GetApprovalPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalPolicy policy */ 1:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetApprovalPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalPolicy policy = 1; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.GetApprovalPolicyResponse
 */
export const GetApprovalPolicyResponse = new GetApprovalPolicyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertApprovalPolicyRequest$Type extends MessageType<UpsertApprovalPolicyRequest> {
    constructor() {
        super("services.documents.UpsertApprovalPolicyRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "rule_kind", kind: "enum", T: () => ["resources.documents.ApprovalRuleKind", ApprovalRuleKind, "APPROVAL_RULE_KIND_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 3, name: "required_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "on_edit_behavior", kind: "enum", T: () => ["resources.documents.OnEditBehavior", OnEditBehavior, "ON_EDIT_BEHAVIOR_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 5, name: "due_at", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<UpsertApprovalPolicyRequest>): UpsertApprovalPolicyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.ruleKind = 0;
        message.requiredCount = 0;
        message.onEditBehavior = 0;
        if (value !== undefined)
            reflectionMergePartial<UpsertApprovalPolicyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertApprovalPolicyRequest): UpsertApprovalPolicyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.documents.ApprovalRuleKind rule_kind */ 2:
                    message.ruleKind = reader.int32();
                    break;
                case /* int32 required_count */ 3:
                    message.requiredCount = reader.int32();
                    break;
                case /* resources.documents.OnEditBehavior on_edit_behavior */ 4:
                    message.onEditBehavior = reader.int32();
                    break;
                case /* optional resources.timestamp.Timestamp due_at */ 5:
                    message.dueAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dueAt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertApprovalPolicyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* resources.documents.ApprovalRuleKind rule_kind = 2; */
        if (message.ruleKind !== 0)
            writer.tag(2, WireType.Varint).int32(message.ruleKind);
        /* int32 required_count = 3; */
        if (message.requiredCount !== 0)
            writer.tag(3, WireType.Varint).int32(message.requiredCount);
        /* resources.documents.OnEditBehavior on_edit_behavior = 4; */
        if (message.onEditBehavior !== 0)
            writer.tag(4, WireType.Varint).int32(message.onEditBehavior);
        /* optional resources.timestamp.Timestamp due_at = 5; */
        if (message.dueAt)
            Timestamp.internalBinaryWrite(message.dueAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertApprovalPolicyRequest
 */
export const UpsertApprovalPolicyRequest = new UpsertApprovalPolicyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpsertApprovalPolicyResponse$Type extends MessageType<UpsertApprovalPolicyResponse> {
    constructor() {
        super("services.documents.UpsertApprovalPolicyResponse", [
            { no: 1, name: "policy", kind: "message", T: () => ApprovalPolicy }
        ]);
    }
    create(value?: PartialMessage<UpsertApprovalPolicyResponse>): UpsertApprovalPolicyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpsertApprovalPolicyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpsertApprovalPolicyResponse): UpsertApprovalPolicyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalPolicy policy */ 1:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpsertApprovalPolicyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalPolicy policy = 1; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.UpsertApprovalPolicyResponse
 */
export const UpsertApprovalPolicyResponse = new UpsertApprovalPolicyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartApprovalRoundRequest$Type extends MessageType<StartApprovalRoundRequest> {
    constructor() {
        super("services.documents.StartApprovalRoundRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "snapshot_date", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<StartApprovalRoundRequest>): StartApprovalRoundRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<StartApprovalRoundRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartApprovalRoundRequest): StartApprovalRoundRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* resources.timestamp.Timestamp snapshot_date */ 2:
                    message.snapshotDate = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.snapshotDate);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartApprovalRoundRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* resources.timestamp.Timestamp snapshot_date = 2; */
        if (message.snapshotDate)
            Timestamp.internalBinaryWrite(message.snapshotDate, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.StartApprovalRoundRequest
 */
export const StartApprovalRoundRequest = new StartApprovalRoundRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartApprovalRoundResponse$Type extends MessageType<StartApprovalRoundResponse> {
    constructor() {
        super("services.documents.StartApprovalRoundResponse", [
            { no: 1, name: "policy", kind: "message", T: () => ApprovalPolicy },
            { no: 2, name: "tasks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalTask, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<StartApprovalRoundResponse>): StartApprovalRoundResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tasks = [];
        if (value !== undefined)
            reflectionMergePartial<StartApprovalRoundResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartApprovalRoundResponse): StartApprovalRoundResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalPolicy policy */ 1:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                case /* repeated resources.documents.ApprovalTask tasks */ 2:
                    message.tasks.push(ApprovalTask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartApprovalRoundResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalPolicy policy = 1; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.documents.ApprovalTask tasks = 2; */
        for (let i = 0; i < message.tasks.length; i++)
            ApprovalTask.internalBinaryWrite(message.tasks[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.StartApprovalRoundResponse
 */
export const StartApprovalRoundResponse = new StartApprovalRoundResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompleteApprovalRoundRequest$Type extends MessageType<CompleteApprovalRoundRequest> {
    constructor() {
        super("services.documents.CompleteApprovalRoundRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<CompleteApprovalRoundRequest>): CompleteApprovalRoundRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<CompleteApprovalRoundRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompleteApprovalRoundRequest): CompleteApprovalRoundRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompleteApprovalRoundRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CompleteApprovalRoundRequest
 */
export const CompleteApprovalRoundRequest = new CompleteApprovalRoundRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompleteApprovalRoundResponse$Type extends MessageType<CompleteApprovalRoundResponse> {
    constructor() {
        super("services.documents.CompleteApprovalRoundResponse", [
            { no: 1, name: "policy", kind: "message", T: () => ApprovalPolicy }
        ]);
    }
    create(value?: PartialMessage<CompleteApprovalRoundResponse>): CompleteApprovalRoundResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CompleteApprovalRoundResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompleteApprovalRoundResponse): CompleteApprovalRoundResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalPolicy policy */ 1:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompleteApprovalRoundResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalPolicy policy = 1; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CompleteApprovalRoundResponse
 */
export const CompleteApprovalRoundResponse = new CompleteApprovalRoundResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListApprovalTasksRequest$Type extends MessageType<ListApprovalTasksRequest> {
    constructor() {
        super("services.documents.ListApprovalTasksRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "statuses", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.documents.ApprovalTaskStatus", ApprovalTaskStatus, "APPROVAL_TASK_STATUS_"], options: { "buf.validate.field": { repeated: { maxItems: "4" } } } }
        ]);
    }
    create(value?: PartialMessage<ListApprovalTasksRequest>): ListApprovalTasksRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.statuses = [];
        if (value !== undefined)
            reflectionMergePartial<ListApprovalTasksRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListApprovalTasksRequest): ListApprovalTasksRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* repeated resources.documents.ApprovalTaskStatus statuses */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.statuses.push(reader.int32());
                    else
                        message.statuses.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListApprovalTasksRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* repeated resources.documents.ApprovalTaskStatus statuses = 2; */
        if (message.statuses.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.statuses.length; i++)
                writer.int32(message.statuses[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListApprovalTasksRequest
 */
export const ListApprovalTasksRequest = new ListApprovalTasksRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListApprovalTasksResponse$Type extends MessageType<ListApprovalTasksResponse> {
    constructor() {
        super("services.documents.ListApprovalTasksResponse", [
            { no: 1, name: "tasks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ApprovalTask, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<ListApprovalTasksResponse>): ListApprovalTasksResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tasks = [];
        if (value !== undefined)
            reflectionMergePartial<ListApprovalTasksResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListApprovalTasksResponse): ListApprovalTasksResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.documents.ApprovalTask tasks */ 1:
                    message.tasks.push(ApprovalTask.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListApprovalTasksResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.documents.ApprovalTask tasks = 1; */
        for (let i = 0; i < message.tasks.length; i++)
            ApprovalTask.internalBinaryWrite(message.tasks[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ListApprovalTasksResponse
 */
export const ListApprovalTasksResponse = new ListApprovalTasksResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecideApprovalTaskRequest$Type extends MessageType<DecideApprovalTaskRequest> {
    constructor() {
        super("services.documents.DecideApprovalTaskRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "task_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 3, name: "new_status", kind: "enum", T: () => ["resources.documents.ApprovalTaskStatus", ApprovalTaskStatus, "APPROVAL_TASK_STATUS_"], options: { "buf.validate.field": { enum: { definedOnly: true } } } },
            { no: 4, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "500" } } } }
        ]);
    }
    create(value?: PartialMessage<DecideApprovalTaskRequest>): DecideApprovalTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        message.taskId = 0;
        message.newStatus = 0;
        message.comment = "";
        if (value !== undefined)
            reflectionMergePartial<DecideApprovalTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecideApprovalTaskRequest): DecideApprovalTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                case /* int64 task_id */ 2:
                    message.taskId = reader.int64().toNumber();
                    break;
                case /* resources.documents.ApprovalTaskStatus new_status */ 3:
                    message.newStatus = reader.int32();
                    break;
                case /* string comment */ 4:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecideApprovalTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        /* int64 task_id = 2; */
        if (message.taskId !== 0)
            writer.tag(2, WireType.Varint).int64(message.taskId);
        /* resources.documents.ApprovalTaskStatus new_status = 3; */
        if (message.newStatus !== 0)
            writer.tag(3, WireType.Varint).int32(message.newStatus);
        /* string comment = 4; */
        if (message.comment !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DecideApprovalTaskRequest
 */
export const DecideApprovalTaskRequest = new DecideApprovalTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DecideApprovalTaskResponse$Type extends MessageType<DecideApprovalTaskResponse> {
    constructor() {
        super("services.documents.DecideApprovalTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => ApprovalTask },
            { no: 2, name: "policy", kind: "message", T: () => ApprovalPolicy }
        ]);
    }
    create(value?: PartialMessage<DecideApprovalTaskResponse>): DecideApprovalTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DecideApprovalTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DecideApprovalTaskResponse): DecideApprovalTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalTask task */ 1:
                    message.task = ApprovalTask.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                case /* resources.documents.ApprovalPolicy policy */ 2:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DecideApprovalTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalTask task = 1; */
        if (message.task)
            ApprovalTask.internalBinaryWrite(message.task, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.ApprovalPolicy policy = 2; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.DecideApprovalTaskResponse
 */
export const DecideApprovalTaskResponse = new DecideApprovalTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReopenApprovalTaskRequest$Type extends MessageType<ReopenApprovalTaskRequest> {
    constructor() {
        super("services.documents.ReopenApprovalTaskRequest", [
            { no: 1, name: "task_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<ReopenApprovalTaskRequest>): ReopenApprovalTaskRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.taskId = 0;
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<ReopenApprovalTaskRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReopenApprovalTaskRequest): ReopenApprovalTaskRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 task_id */ 1:
                    message.taskId = reader.int64().toNumber();
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReopenApprovalTaskRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 task_id = 1; */
        if (message.taskId !== 0)
            writer.tag(1, WireType.Varint).int64(message.taskId);
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ReopenApprovalTaskRequest
 */
export const ReopenApprovalTaskRequest = new ReopenApprovalTaskRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReopenApprovalTaskResponse$Type extends MessageType<ReopenApprovalTaskResponse> {
    constructor() {
        super("services.documents.ReopenApprovalTaskResponse", [
            { no: 1, name: "task", kind: "message", T: () => ApprovalTask },
            { no: 2, name: "policy", kind: "message", T: () => ApprovalPolicy }
        ]);
    }
    create(value?: PartialMessage<ReopenApprovalTaskResponse>): ReopenApprovalTaskResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReopenApprovalTaskResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReopenApprovalTaskResponse): ReopenApprovalTaskResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalTask task */ 1:
                    message.task = ApprovalTask.internalBinaryRead(reader, reader.uint32(), options, message.task);
                    break;
                case /* resources.documents.ApprovalPolicy policy */ 2:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReopenApprovalTaskResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalTask task = 1; */
        if (message.task)
            ApprovalTask.internalBinaryWrite(message.task, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.documents.ApprovalPolicy policy = 2; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.ReopenApprovalTaskResponse
 */
export const ReopenApprovalTaskResponse = new ReopenApprovalTaskResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecomputeApprovalPolicyCountersRequest$Type extends MessageType<RecomputeApprovalPolicyCountersRequest> {
    constructor() {
        super("services.documents.RecomputeApprovalPolicyCountersRequest", [
            { no: 1, name: "document_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { int64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<RecomputeApprovalPolicyCountersRequest>): RecomputeApprovalPolicyCountersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.documentId = 0;
        if (value !== undefined)
            reflectionMergePartial<RecomputeApprovalPolicyCountersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecomputeApprovalPolicyCountersRequest): RecomputeApprovalPolicyCountersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 document_id */ 1:
                    message.documentId = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecomputeApprovalPolicyCountersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 document_id = 1; */
        if (message.documentId !== 0)
            writer.tag(1, WireType.Varint).int64(message.documentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RecomputeApprovalPolicyCountersRequest
 */
export const RecomputeApprovalPolicyCountersRequest = new RecomputeApprovalPolicyCountersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RecomputeApprovalPolicyCountersResponse$Type extends MessageType<RecomputeApprovalPolicyCountersResponse> {
    constructor() {
        super("services.documents.RecomputeApprovalPolicyCountersResponse", [
            { no: 1, name: "policy", kind: "message", T: () => ApprovalPolicy }
        ]);
    }
    create(value?: PartialMessage<RecomputeApprovalPolicyCountersResponse>): RecomputeApprovalPolicyCountersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RecomputeApprovalPolicyCountersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RecomputeApprovalPolicyCountersResponse): RecomputeApprovalPolicyCountersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.documents.ApprovalPolicy policy */ 1:
                    message.policy = ApprovalPolicy.internalBinaryRead(reader, reader.uint32(), options, message.policy);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RecomputeApprovalPolicyCountersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.documents.ApprovalPolicy policy = 1; */
        if (message.policy)
            ApprovalPolicy.internalBinaryWrite(message.policy, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.RecomputeApprovalPolicyCountersResponse
 */
export const RecomputeApprovalPolicyCountersResponse = new RecomputeApprovalPolicyCountersResponse$Type();
/**
 * @generated ServiceType for protobuf service services.documents.ApprovalService
 */
export const ApprovalService = new ServiceType("services.documents.ApprovalService", [
    { name: "GetApprovalPolicy", options: { "codegen.perms.perms": { enabled: true, service: "documents.DocumentsService", name: "ListDocuments" } }, I: GetApprovalPolicyRequest, O: GetApprovalPolicyResponse },
    { name: "UpsertApprovalPolicy", options: { "codegen.perms.perms": { enabled: true } }, I: UpsertApprovalPolicyRequest, O: UpsertApprovalPolicyResponse },
    { name: "StartApprovalRound", options: { "codegen.perms.perms": { enabled: true, service: "documents.DocumentsService", name: "ListDocuments" } }, I: StartApprovalRoundRequest, O: StartApprovalRoundResponse },
    { name: "CompleteApprovalRound", options: { "codegen.perms.perms": { enabled: true, service: "documents.DocumentsService", name: "ListDocuments" } }, I: CompleteApprovalRoundRequest, O: CompleteApprovalRoundResponse },
    { name: "ListApprovalTasks", options: { "codegen.perms.perms": { enabled: true, service: "documents.DocumentsService", name: "ListDocuments" } }, I: ListApprovalTasksRequest, O: ListApprovalTasksResponse },
    { name: "DecideApprovalTask", options: { "codegen.perms.perms": { enabled: true, service: "documents.DocumentsService", name: "ListDocuments" } }, I: DecideApprovalTaskRequest, O: DecideApprovalTaskResponse },
    { name: "ReopenApprovalTask", options: { "codegen.perms.perms": { enabled: true } }, I: ReopenApprovalTaskRequest, O: ReopenApprovalTaskResponse },
    { name: "RecomputeApprovalPolicyCounters", options: { "codegen.perms.perms": { enabled: true, name: "UpsertApprovalPolicy" } }, I: RecomputeApprovalPolicyCountersRequest, O: RecomputeApprovalPolicyCountersResponse }
], { "codegen.perms.perms_svc": { order: 52, icon: "i-mdi-approval" } });
