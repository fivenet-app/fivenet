// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/documents/collaboration.proto" (package "services.documents", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message services.documents.CollabMessage
 */
export interface CollabMessage {
    /**
     * @generated from protobuf field: string client_id = 1;
     */
    clientId: string;
    /**
     * @generated from protobuf field: uint64 document_id = 2;
     */
    documentId: number;
    /**
     * @generated from protobuf field: bytes yjs_update = 3;
     */
    yjsUpdate: Uint8Array;
    /**
     * @generated from protobuf field: bytes awareness = 4;
     */
    awareness: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class CollabMessage$Type extends MessageType<CollabMessage> {
    constructor() {
        super("services.documents.CollabMessage", [
            { no: 1, name: "client_id", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "0" } } } },
            { no: 2, name: "document_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { uint64: { gt: "0" } } } },
            { no: 3, name: "yjs_update", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "awareness", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<CollabMessage>): CollabMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.clientId = "";
        message.documentId = 0;
        message.yjsUpdate = new Uint8Array(0);
        message.awareness = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<CollabMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollabMessage): CollabMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string client_id */ 1:
                    message.clientId = reader.string();
                    break;
                case /* uint64 document_id */ 2:
                    message.documentId = reader.uint64().toNumber();
                    break;
                case /* bytes yjs_update */ 3:
                    message.yjsUpdate = reader.bytes();
                    break;
                case /* bytes awareness */ 4:
                    message.awareness = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollabMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string client_id = 1; */
        if (message.clientId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.clientId);
        /* uint64 document_id = 2; */
        if (message.documentId !== 0)
            writer.tag(2, WireType.Varint).uint64(message.documentId);
        /* bytes yjs_update = 3; */
        if (message.yjsUpdate.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.yjsUpdate);
        /* bytes awareness = 4; */
        if (message.awareness.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.awareness);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.documents.CollabMessage
 */
export const CollabMessage = new CollabMessage$Type();
/**
 * @generated ServiceType for protobuf service services.documents.CollabService
 */
export const CollabService = new ServiceType("services.documents.CollabService", [
    { name: "JoinDocument", serverStreaming: true, clientStreaming: true, options: {}, I: CollabMessage, O: CollabMessage }
]);
