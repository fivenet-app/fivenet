// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/documents/signing.proto" (package "services.documents", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SigningService } from "./signing";
import type { ListUsableStampsResponse } from "./signing";
import type { ListUsableStampsRequest } from "./signing";
import type { RequestSignaturesResponse } from "./signing";
import type { RequestSignaturesRequest } from "./signing";
import type { RevokeSignatureResponse } from "./signing";
import type { RevokeSignatureRequest } from "./signing";
import type { ApplySignatureResponse } from "./signing";
import type { ApplySignatureRequest } from "./signing";
import type { GetSignaturePanelResponse } from "./signing";
import type { GetSignaturePanelRequest } from "./signing";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PrepareSignatureRequirementsResponse } from "./signing";
import type { PrepareSignatureRequirementsRequest } from "./signing";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.documents.SigningService
 */
export interface ISigningServiceClient {
    /**
     * @generated from protobuf rpc: PrepareSignatureRequirements
     */
    prepareSignatureRequirements(input: PrepareSignatureRequirementsRequest, options?: RpcOptions): UnaryCall<PrepareSignatureRequirementsRequest, PrepareSignatureRequirementsResponse>;
    /**
     * @generated from protobuf rpc: GetSignaturePanel
     */
    getSignaturePanel(input: GetSignaturePanelRequest, options?: RpcOptions): UnaryCall<GetSignaturePanelRequest, GetSignaturePanelResponse>;
    /**
     * @generated from protobuf rpc: ApplySignature
     */
    applySignature(input: ApplySignatureRequest, options?: RpcOptions): UnaryCall<ApplySignatureRequest, ApplySignatureResponse>;
    /**
     * @generated from protobuf rpc: RevokeSignature
     */
    revokeSignature(input: RevokeSignatureRequest, options?: RpcOptions): UnaryCall<RevokeSignatureRequest, RevokeSignatureResponse>;
    /**
     * Convenience for “request signatures” UX
     *
     * @generated from protobuf rpc: RequestSignatures
     */
    requestSignatures(input: RequestSignaturesRequest, options?: RpcOptions): UnaryCall<RequestSignaturesRequest, RequestSignaturesResponse>;
    /**
     * List stamps the caller can use on this doc/version
     *
     * @generated from protobuf rpc: ListUsableStamps
     */
    listUsableStamps(input: ListUsableStampsRequest, options?: RpcOptions): UnaryCall<ListUsableStampsRequest, ListUsableStampsResponse>;
}
/**
 * @generated from protobuf service services.documents.SigningService
 */
export class SigningServiceClient implements ISigningServiceClient, ServiceInfo {
    typeName = SigningService.typeName;
    methods = SigningService.methods;
    options = SigningService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: PrepareSignatureRequirements
     */
    prepareSignatureRequirements(input: PrepareSignatureRequirementsRequest, options?: RpcOptions): UnaryCall<PrepareSignatureRequirementsRequest, PrepareSignatureRequirementsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PrepareSignatureRequirementsRequest, PrepareSignatureRequirementsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetSignaturePanel
     */
    getSignaturePanel(input: GetSignaturePanelRequest, options?: RpcOptions): UnaryCall<GetSignaturePanelRequest, GetSignaturePanelResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSignaturePanelRequest, GetSignaturePanelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ApplySignature
     */
    applySignature(input: ApplySignatureRequest, options?: RpcOptions): UnaryCall<ApplySignatureRequest, ApplySignatureResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ApplySignatureRequest, ApplySignatureResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RevokeSignature
     */
    revokeSignature(input: RevokeSignatureRequest, options?: RpcOptions): UnaryCall<RevokeSignatureRequest, RevokeSignatureResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RevokeSignatureRequest, RevokeSignatureResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Convenience for “request signatures” UX
     *
     * @generated from protobuf rpc: RequestSignatures
     */
    requestSignatures(input: RequestSignaturesRequest, options?: RpcOptions): UnaryCall<RequestSignaturesRequest, RequestSignaturesResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<RequestSignaturesRequest, RequestSignaturesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * List stamps the caller can use on this doc/version
     *
     * @generated from protobuf rpc: ListUsableStamps
     */
    listUsableStamps(input: ListUsableStampsRequest, options?: RpcOptions): UnaryCall<ListUsableStampsRequest, ListUsableStampsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUsableStampsRequest, ListUsableStampsResponse>("unary", this._transport, method, opt, input);
    }
}
