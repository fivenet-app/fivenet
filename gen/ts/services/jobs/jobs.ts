// @generated by protobuf-ts 2.11.1 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/jobs/jobs.proto" (package "services.jobs", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { LabelCount } from "../../resources/jobs/labels";
import { Label } from "../../resources/jobs/labels";
import { ColleagueProps } from "../../resources/jobs/colleagues";
import { ColleagueActivity } from "../../resources/jobs/activity";
import { ColleagueActivityType } from "../../resources/jobs/activity";
import { Colleague } from "../../resources/jobs/colleagues";
import { PaginationResponse } from "../../resources/common/database/database";
import { Sort } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
// Colleagues

/**
 * @generated from protobuf message services.jobs.ListColleaguesRequest
 */
export interface ListColleaguesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: string search = 3
     */
    search: string;
    /**
     * @generated from protobuf field: repeated int32 user_ids = 4
     */
    userIds: number[];
    /**
     * @generated from protobuf field: optional bool user_only = 5
     */
    userOnly?: boolean;
    /**
     * @generated from protobuf field: optional bool absent = 6
     */
    absent?: boolean;
    /**
     * @generated from protobuf field: repeated uint64 label_ids = 7
     */
    labelIds: number[];
    /**
     * @generated from protobuf field: optional string name_prefix = 8
     */
    namePrefix?: string;
    /**
     * @generated from protobuf field: optional string name_suffix = 9
     */
    nameSuffix?: string;
}
/**
 * @generated from protobuf message services.jobs.ListColleaguesResponse
 */
export interface ListColleaguesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.Colleague colleagues = 2
     */
    colleagues: Colleague[];
}
/**
 * @generated from protobuf message services.jobs.GetSelfRequest
 */
export interface GetSelfRequest {
}
/**
 * @generated from protobuf message services.jobs.GetSelfResponse
 */
export interface GetSelfResponse {
    /**
     * @generated from protobuf field: resources.jobs.Colleague colleague = 1
     */
    colleague?: Colleague;
}
/**
 * @generated from protobuf message services.jobs.GetColleagueRequest
 */
export interface GetColleagueRequest {
    /**
     * @generated from protobuf field: int32 user_id = 1
     */
    userId: number;
    /**
     * @generated from protobuf field: optional bool info_only = 2
     */
    infoOnly?: boolean;
}
/**
 * @generated from protobuf message services.jobs.GetColleagueResponse
 */
export interface GetColleagueResponse {
    /**
     * @generated from protobuf field: resources.jobs.Colleague colleague = 1
     */
    colleague?: Colleague;
}
/**
 * @generated from protobuf message services.jobs.ListColleagueActivityRequest
 */
export interface ListColleagueActivityRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: repeated int32 user_ids = 3
     */
    userIds: number[];
    /**
     * @generated from protobuf field: repeated resources.jobs.ColleagueActivityType activity_types = 4
     */
    activityTypes: ColleagueActivityType[];
}
/**
 * @generated from protobuf message services.jobs.ListColleagueActivityResponse
 */
export interface ListColleagueActivityResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.ColleagueActivity activity = 2
     */
    activity: ColleagueActivity[];
}
/**
 * @generated from protobuf message services.jobs.SetColleaguePropsRequest
 */
export interface SetColleaguePropsRequest {
    /**
     * @generated from protobuf field: resources.jobs.ColleagueProps props = 1
     */
    props?: ColleagueProps;
    /**
     * @sanitize
     *
     * @generated from protobuf field: string reason = 2
     */
    reason: string;
}
/**
 * @generated from protobuf message services.jobs.SetColleaguePropsResponse
 */
export interface SetColleaguePropsResponse {
    /**
     * @generated from protobuf field: resources.jobs.ColleagueProps props = 1
     */
    props?: ColleagueProps;
}
/**
 * @generated from protobuf message services.jobs.GetColleagueLabelsRequest
 */
export interface GetColleagueLabelsRequest {
    /**
     * @generated from protobuf field: optional string search = 1
     */
    search?: string;
}
/**
 * @generated from protobuf message services.jobs.GetColleagueLabelsResponse
 */
export interface GetColleagueLabelsResponse {
    /**
     * @generated from protobuf field: repeated resources.jobs.Label labels = 1
     */
    labels: Label[];
}
/**
 * @generated from protobuf message services.jobs.ManageLabelsRequest
 */
export interface ManageLabelsRequest {
    /**
     * @generated from protobuf field: repeated resources.jobs.Label labels = 1
     */
    labels: Label[];
}
/**
 * @generated from protobuf message services.jobs.ManageLabelsResponse
 */
export interface ManageLabelsResponse {
    /**
     * @generated from protobuf field: repeated resources.jobs.Label labels = 1
     */
    labels: Label[];
}
/**
 * @generated from protobuf message services.jobs.GetColleagueLabelsStatsRequest
 */
export interface GetColleagueLabelsStatsRequest {
    /**
     * @generated from protobuf field: repeated uint64 label_ids = 1
     */
    labelIds: number[];
}
/**
 * @generated from protobuf message services.jobs.GetColleagueLabelsStatsResponse
 */
export interface GetColleagueLabelsStatsResponse {
    /**
     * @generated from protobuf field: repeated resources.jobs.LabelCount count = 1
     */
    count: LabelCount[];
}
// MOTD

/**
 * @generated from protobuf message services.jobs.GetMOTDRequest
 */
export interface GetMOTDRequest {
}
/**
 * @generated from protobuf message services.jobs.GetMOTDResponse
 */
export interface GetMOTDResponse {
    /**
     * @generated from protobuf field: string motd = 1
     */
    motd: string;
}
/**
 * @generated from protobuf message services.jobs.SetMOTDRequest
 */
export interface SetMOTDRequest {
    /**
     * @sanitize: method=StripTags
     *
     * @generated from protobuf field: string motd = 1
     */
    motd: string;
}
/**
 * @generated from protobuf message services.jobs.SetMOTDResponse
 */
export interface SetMOTDResponse {
    /**
     * @generated from protobuf field: string motd = 1
     */
    motd: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListColleaguesRequest$Type extends MessageType<ListColleaguesRequest> {
    constructor() {
        super("services.jobs.ListColleaguesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "search", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "64" } } } },
            { no: 4, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { repeated: { items: { int32: { gte: 0 } } } } } },
            { no: 5, name: "user_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "absent", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "label_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "name_prefix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "12" } } } },
            { no: 9, name: "name_suffix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "12" } } } }
        ]);
    }
    create(value?: PartialMessage<ListColleaguesRequest>): ListColleaguesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.search = "";
        message.userIds = [];
        message.labelIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListColleaguesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListColleaguesRequest): ListColleaguesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* string search */ 3:
                    message.search = reader.string();
                    break;
                case /* repeated int32 user_ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int32());
                    else
                        message.userIds.push(reader.int32());
                    break;
                case /* optional bool user_only */ 5:
                    message.userOnly = reader.bool();
                    break;
                case /* optional bool absent */ 6:
                    message.absent = reader.bool();
                    break;
                case /* repeated uint64 label_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.labelIds.push(reader.uint64().toNumber());
                    else
                        message.labelIds.push(reader.uint64().toNumber());
                    break;
                case /* optional string name_prefix */ 8:
                    message.namePrefix = reader.string();
                    break;
                case /* optional string name_suffix */ 9:
                    message.nameSuffix = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListColleaguesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string search = 3; */
        if (message.search !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.search);
        /* repeated int32 user_ids = 4; */
        if (message.userIds.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int32(message.userIds[i]);
            writer.join();
        }
        /* optional bool user_only = 5; */
        if (message.userOnly !== undefined)
            writer.tag(5, WireType.Varint).bool(message.userOnly);
        /* optional bool absent = 6; */
        if (message.absent !== undefined)
            writer.tag(6, WireType.Varint).bool(message.absent);
        /* repeated uint64 label_ids = 7; */
        if (message.labelIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.labelIds.length; i++)
                writer.uint64(message.labelIds[i]);
            writer.join();
        }
        /* optional string name_prefix = 8; */
        if (message.namePrefix !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.namePrefix);
        /* optional string name_suffix = 9; */
        if (message.nameSuffix !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.nameSuffix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListColleaguesRequest
 */
export const ListColleaguesRequest = new ListColleaguesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListColleaguesResponse$Type extends MessageType<ListColleaguesResponse> {
    constructor() {
        super("services.jobs.ListColleaguesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "colleagues", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<ListColleaguesResponse>): ListColleaguesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.colleagues = [];
        if (value !== undefined)
            reflectionMergePartial<ListColleaguesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListColleaguesResponse): ListColleaguesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.Colleague colleagues */ 2:
                    message.colleagues.push(Colleague.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListColleaguesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.Colleague colleagues = 2; */
        for (let i = 0; i < message.colleagues.length; i++)
            Colleague.internalBinaryWrite(message.colleagues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListColleaguesResponse
 */
export const ListColleaguesResponse = new ListColleaguesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSelfRequest$Type extends MessageType<GetSelfRequest> {
    constructor() {
        super("services.jobs.GetSelfRequest", []);
    }
    create(value?: PartialMessage<GetSelfRequest>): GetSelfRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSelfRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSelfRequest): GetSelfRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSelfRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetSelfRequest
 */
export const GetSelfRequest = new GetSelfRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSelfResponse$Type extends MessageType<GetSelfResponse> {
    constructor() {
        super("services.jobs.GetSelfResponse", [
            { no: 1, name: "colleague", kind: "message", T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<GetSelfResponse>): GetSelfResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSelfResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSelfResponse): GetSelfResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Colleague colleague */ 1:
                    message.colleague = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.colleague);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSelfResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Colleague colleague = 1; */
        if (message.colleague)
            Colleague.internalBinaryWrite(message.colleague, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetSelfResponse
 */
export const GetSelfResponse = new GetSelfResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetColleagueRequest$Type extends MessageType<GetColleagueRequest> {
    constructor() {
        super("services.jobs.GetColleagueRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } },
            { no: 2, name: "info_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetColleagueRequest>): GetColleagueRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetColleagueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetColleagueRequest): GetColleagueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                case /* optional bool info_only */ 2:
                    message.infoOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetColleagueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).int32(message.userId);
        /* optional bool info_only = 2; */
        if (message.infoOnly !== undefined)
            writer.tag(2, WireType.Varint).bool(message.infoOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetColleagueRequest
 */
export const GetColleagueRequest = new GetColleagueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetColleagueResponse$Type extends MessageType<GetColleagueResponse> {
    constructor() {
        super("services.jobs.GetColleagueResponse", [
            { no: 1, name: "colleague", kind: "message", T: () => Colleague }
        ]);
    }
    create(value?: PartialMessage<GetColleagueResponse>): GetColleagueResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetColleagueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetColleagueResponse): GetColleagueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.Colleague colleague */ 1:
                    message.colleague = Colleague.internalBinaryRead(reader, reader.uint32(), options, message.colleague);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetColleagueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.Colleague colleague = 1; */
        if (message.colleague)
            Colleague.internalBinaryWrite(message.colleague, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetColleagueResponse
 */
export const GetColleagueResponse = new GetColleagueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListColleagueActivityRequest$Type extends MessageType<ListColleagueActivityRequest> {
    constructor() {
        super("services.jobs.ListColleagueActivityRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "activity_types", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.jobs.ColleagueActivityType", ColleagueActivityType, "COLLEAGUE_ACTIVITY_TYPE_"], options: { "validate.rules": { repeated: { maxItems: "10" } } } }
        ]);
    }
    create(value?: PartialMessage<ListColleagueActivityRequest>): ListColleagueActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userIds = [];
        message.activityTypes = [];
        if (value !== undefined)
            reflectionMergePartial<ListColleagueActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListColleagueActivityRequest): ListColleagueActivityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* repeated int32 user_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int32());
                    else
                        message.userIds.push(reader.int32());
                    break;
                case /* repeated resources.jobs.ColleagueActivityType activity_types */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityTypes.push(reader.int32());
                    else
                        message.activityTypes.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListColleagueActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 user_ids = 3; */
        if (message.userIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int32(message.userIds[i]);
            writer.join();
        }
        /* repeated resources.jobs.ColleagueActivityType activity_types = 4; */
        if (message.activityTypes.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activityTypes.length; i++)
                writer.int32(message.activityTypes[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListColleagueActivityRequest
 */
export const ListColleagueActivityRequest = new ListColleagueActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListColleagueActivityResponse$Type extends MessageType<ListColleagueActivityResponse> {
    constructor() {
        super("services.jobs.ListColleagueActivityResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "activity", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ColleagueActivity }
        ]);
    }
    create(value?: PartialMessage<ListColleagueActivityResponse>): ListColleagueActivityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activity = [];
        if (value !== undefined)
            reflectionMergePartial<ListColleagueActivityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListColleagueActivityResponse): ListColleagueActivityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.ColleagueActivity activity */ 2:
                    message.activity.push(ColleagueActivity.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListColleagueActivityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.ColleagueActivity activity = 2; */
        for (let i = 0; i < message.activity.length; i++)
            ColleagueActivity.internalBinaryWrite(message.activity[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListColleagueActivityResponse
 */
export const ListColleagueActivityResponse = new ListColleagueActivityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetColleaguePropsRequest$Type extends MessageType<SetColleaguePropsRequest> {
    constructor() {
        super("services.jobs.SetColleaguePropsRequest", [
            { no: 1, name: "props", kind: "message", T: () => ColleagueProps },
            { no: 2, name: "reason", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { minLen: "3", maxLen: "255", ignoreEmpty: true } } } }
        ]);
    }
    create(value?: PartialMessage<SetColleaguePropsRequest>): SetColleaguePropsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reason = "";
        if (value !== undefined)
            reflectionMergePartial<SetColleaguePropsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetColleaguePropsRequest): SetColleaguePropsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.ColleagueProps props */ 1:
                    message.props = ColleagueProps.internalBinaryRead(reader, reader.uint32(), options, message.props);
                    break;
                case /* string reason */ 2:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetColleaguePropsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.ColleagueProps props = 1; */
        if (message.props)
            ColleagueProps.internalBinaryWrite(message.props, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string reason = 2; */
        if (message.reason !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetColleaguePropsRequest
 */
export const SetColleaguePropsRequest = new SetColleaguePropsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetColleaguePropsResponse$Type extends MessageType<SetColleaguePropsResponse> {
    constructor() {
        super("services.jobs.SetColleaguePropsResponse", [
            { no: 1, name: "props", kind: "message", T: () => ColleagueProps }
        ]);
    }
    create(value?: PartialMessage<SetColleaguePropsResponse>): SetColleaguePropsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetColleaguePropsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetColleaguePropsResponse): SetColleaguePropsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.ColleagueProps props */ 1:
                    message.props = ColleagueProps.internalBinaryRead(reader, reader.uint32(), options, message.props);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetColleaguePropsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.ColleagueProps props = 1; */
        if (message.props)
            ColleagueProps.internalBinaryWrite(message.props, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetColleaguePropsResponse
 */
export const SetColleaguePropsResponse = new SetColleaguePropsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetColleagueLabelsRequest$Type extends MessageType<GetColleagueLabelsRequest> {
    constructor() {
        super("services.jobs.GetColleagueLabelsRequest", [
            { no: 1, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "32" } } } }
        ]);
    }
    create(value?: PartialMessage<GetColleagueLabelsRequest>): GetColleagueLabelsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetColleagueLabelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetColleagueLabelsRequest): GetColleagueLabelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string search */ 1:
                    message.search = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetColleagueLabelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string search = 1; */
        if (message.search !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.search);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetColleagueLabelsRequest
 */
export const GetColleagueLabelsRequest = new GetColleagueLabelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetColleagueLabelsResponse$Type extends MessageType<GetColleagueLabelsResponse> {
    constructor() {
        super("services.jobs.GetColleagueLabelsResponse", [
            { no: 1, name: "labels", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Label }
        ]);
    }
    create(value?: PartialMessage<GetColleagueLabelsResponse>): GetColleagueLabelsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.labels = [];
        if (value !== undefined)
            reflectionMergePartial<GetColleagueLabelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetColleagueLabelsResponse): GetColleagueLabelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.jobs.Label labels */ 1:
                    message.labels.push(Label.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetColleagueLabelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.jobs.Label labels = 1; */
        for (let i = 0; i < message.labels.length; i++)
            Label.internalBinaryWrite(message.labels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetColleagueLabelsResponse
 */
export const GetColleagueLabelsResponse = new GetColleagueLabelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManageLabelsRequest$Type extends MessageType<ManageLabelsRequest> {
    constructor() {
        super("services.jobs.ManageLabelsRequest", [
            { no: 1, name: "labels", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Label }
        ]);
    }
    create(value?: PartialMessage<ManageLabelsRequest>): ManageLabelsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.labels = [];
        if (value !== undefined)
            reflectionMergePartial<ManageLabelsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManageLabelsRequest): ManageLabelsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.jobs.Label labels */ 1:
                    message.labels.push(Label.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManageLabelsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.jobs.Label labels = 1; */
        for (let i = 0; i < message.labels.length; i++)
            Label.internalBinaryWrite(message.labels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ManageLabelsRequest
 */
export const ManageLabelsRequest = new ManageLabelsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ManageLabelsResponse$Type extends MessageType<ManageLabelsResponse> {
    constructor() {
        super("services.jobs.ManageLabelsResponse", [
            { no: 1, name: "labels", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Label }
        ]);
    }
    create(value?: PartialMessage<ManageLabelsResponse>): ManageLabelsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.labels = [];
        if (value !== undefined)
            reflectionMergePartial<ManageLabelsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ManageLabelsResponse): ManageLabelsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.jobs.Label labels */ 1:
                    message.labels.push(Label.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ManageLabelsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.jobs.Label labels = 1; */
        for (let i = 0; i < message.labels.length; i++)
            Label.internalBinaryWrite(message.labels[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ManageLabelsResponse
 */
export const ManageLabelsResponse = new ManageLabelsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetColleagueLabelsStatsRequest$Type extends MessageType<GetColleagueLabelsStatsRequest> {
    constructor() {
        super("services.jobs.GetColleagueLabelsStatsRequest", [
            { no: 1, name: "label_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetColleagueLabelsStatsRequest>): GetColleagueLabelsStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.labelIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetColleagueLabelsStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetColleagueLabelsStatsRequest): GetColleagueLabelsStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 label_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.labelIds.push(reader.uint64().toNumber());
                    else
                        message.labelIds.push(reader.uint64().toNumber());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetColleagueLabelsStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 label_ids = 1; */
        if (message.labelIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.labelIds.length; i++)
                writer.uint64(message.labelIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetColleagueLabelsStatsRequest
 */
export const GetColleagueLabelsStatsRequest = new GetColleagueLabelsStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetColleagueLabelsStatsResponse$Type extends MessageType<GetColleagueLabelsStatsResponse> {
    constructor() {
        super("services.jobs.GetColleagueLabelsStatsResponse", [
            { no: 1, name: "count", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => LabelCount }
        ]);
    }
    create(value?: PartialMessage<GetColleagueLabelsStatsResponse>): GetColleagueLabelsStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.count = [];
        if (value !== undefined)
            reflectionMergePartial<GetColleagueLabelsStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetColleagueLabelsStatsResponse): GetColleagueLabelsStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.jobs.LabelCount count */ 1:
                    message.count.push(LabelCount.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetColleagueLabelsStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.jobs.LabelCount count = 1; */
        for (let i = 0; i < message.count.length; i++)
            LabelCount.internalBinaryWrite(message.count[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetColleagueLabelsStatsResponse
 */
export const GetColleagueLabelsStatsResponse = new GetColleagueLabelsStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMOTDRequest$Type extends MessageType<GetMOTDRequest> {
    constructor() {
        super("services.jobs.GetMOTDRequest", []);
    }
    create(value?: PartialMessage<GetMOTDRequest>): GetMOTDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMOTDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMOTDRequest): GetMOTDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMOTDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetMOTDRequest
 */
export const GetMOTDRequest = new GetMOTDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMOTDResponse$Type extends MessageType<GetMOTDResponse> {
    constructor() {
        super("services.jobs.GetMOTDResponse", [
            { no: 1, name: "motd", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetMOTDResponse>): GetMOTDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.motd = "";
        if (value !== undefined)
            reflectionMergePartial<GetMOTDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMOTDResponse): GetMOTDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string motd */ 1:
                    message.motd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMOTDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string motd = 1; */
        if (message.motd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.motd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetMOTDResponse
 */
export const GetMOTDResponse = new GetMOTDResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMOTDRequest$Type extends MessageType<SetMOTDRequest> {
    constructor() {
        super("services.jobs.SetMOTDRequest", [
            { no: 1, name: "motd", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "1024" } } } }
        ]);
    }
    create(value?: PartialMessage<SetMOTDRequest>): SetMOTDRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.motd = "";
        if (value !== undefined)
            reflectionMergePartial<SetMOTDRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMOTDRequest): SetMOTDRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string motd */ 1:
                    message.motd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMOTDRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string motd = 1; */
        if (message.motd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.motd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetMOTDRequest
 */
export const SetMOTDRequest = new SetMOTDRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetMOTDResponse$Type extends MessageType<SetMOTDResponse> {
    constructor() {
        super("services.jobs.SetMOTDResponse", [
            { no: 1, name: "motd", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetMOTDResponse>): SetMOTDResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.motd = "";
        if (value !== undefined)
            reflectionMergePartial<SetMOTDResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetMOTDResponse): SetMOTDResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string motd */ 1:
                    message.motd = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetMOTDResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string motd = 1; */
        if (message.motd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.motd);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.SetMOTDResponse
 */
export const SetMOTDResponse = new SetMOTDResponse$Type();
/**
 * @generated ServiceType for protobuf service services.jobs.JobsService
 */
export const JobsService = new ServiceType("services.jobs.JobsService", [
    { name: "ListColleagues", options: {}, I: ListColleaguesRequest, O: ListColleaguesResponse },
    { name: "GetSelf", options: {}, I: GetSelfRequest, O: GetSelfResponse },
    { name: "GetColleague", options: {}, I: GetColleagueRequest, O: GetColleagueResponse },
    { name: "ListColleagueActivity", options: {}, I: ListColleagueActivityRequest, O: ListColleagueActivityResponse },
    { name: "SetColleagueProps", options: {}, I: SetColleaguePropsRequest, O: SetColleaguePropsResponse },
    { name: "GetColleagueLabels", options: {}, I: GetColleagueLabelsRequest, O: GetColleagueLabelsResponse },
    { name: "ManageLabels", options: {}, I: ManageLabelsRequest, O: ManageLabelsResponse },
    { name: "GetColleagueLabelsStats", options: {}, I: GetColleagueLabelsStatsRequest, O: GetColleagueLabelsStatsResponse },
    { name: "GetMOTD", options: {}, I: GetMOTDRequest, O: GetMOTDResponse },
    { name: "SetMOTD", options: {}, I: SetMOTDRequest, O: SetMOTDResponse }
]);
