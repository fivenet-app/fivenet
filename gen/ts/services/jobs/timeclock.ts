// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/jobs/timeclock.proto" (package "services.jobs", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Colleague } from "../../resources/jobs/colleagues";
import { TimeclockEntry } from "../../resources/jobs/timeclock";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { TimeclockWeeklyStats } from "../../resources/jobs/timeclock";
import { TimeclockStats } from "../../resources/jobs/timeclock";
import { PaginationResponse } from "../../resources/common/database/database";
import { DateRange } from "../../resources/common/database/database";
import { TimeclockMode } from "../../resources/jobs/timeclock";
import { TimeclockViewMode } from "../../resources/jobs/timeclock";
import { Sort } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
// Time Clock

/**
 * @generated from protobuf message services.jobs.ListTimeclockRequest
 */
export interface ListTimeclockRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: resources.jobs.TimeclockViewMode user_mode = 3
     */
    userMode: TimeclockViewMode;
    /**
     * @generated from protobuf field: resources.jobs.TimeclockMode mode = 4
     */
    mode: TimeclockMode;
    /**
     * @generated from protobuf field: optional resources.common.database.DateRange date = 5
     */
    date?: DateRange;
    /**
     * @generated from protobuf field: bool per_day = 6
     */
    perDay: boolean;
    /**
     * @generated from protobuf field: repeated int32 user_ids = 7
     */
    userIds: number[];
}
/**
 * @generated from protobuf message services.jobs.ListTimeclockResponse
 */
export interface ListTimeclockResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: resources.jobs.TimeclockStats stats = 2
     */
    stats?: TimeclockStats;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockWeeklyStats stats_weekly = 3
     */
    statsWeekly: TimeclockWeeklyStats[];
    /**
     * @generated from protobuf oneof: entries
     */
    entries: {
        oneofKind: "daily";
        /**
         * @generated from protobuf field: services.jobs.TimeclockDay daily = 4
         */
        daily: TimeclockDay;
    } | {
        oneofKind: "weekly";
        /**
         * @generated from protobuf field: services.jobs.TimeclockWeekly weekly = 5
         */
        weekly: TimeclockWeekly;
    } | {
        oneofKind: "range";
        /**
         * @generated from protobuf field: services.jobs.TimeclockRange range = 6
         */
        range: TimeclockRange;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message services.jobs.TimeclockDay
 */
export interface TimeclockDay {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp date = 1
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockEntry entries = 2
     */
    entries: TimeclockEntry[];
    /**
     * @generated from protobuf field: int64 sum = 3
     */
    sum: number;
}
/**
 * @generated from protobuf message services.jobs.TimeclockWeekly
 */
export interface TimeclockWeekly {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp date = 1
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockEntry entries = 2
     */
    entries: TimeclockEntry[];
    /**
     * @generated from protobuf field: int64 sum = 3
     */
    sum: number;
}
/**
 * @generated from protobuf message services.jobs.TimeclockRange
 */
export interface TimeclockRange {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp date = 1
     */
    date?: Timestamp;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockEntry entries = 2
     */
    entries: TimeclockEntry[];
    /**
     * @generated from protobuf field: int64 sum = 3
     */
    sum: number;
}
/**
 * @generated from protobuf message services.jobs.GetTimeclockStatsRequest
 */
export interface GetTimeclockStatsRequest {
    /**
     * @generated from protobuf field: optional int32 user_id = 1
     */
    userId?: number;
}
/**
 * @generated from protobuf message services.jobs.GetTimeclockStatsResponse
 */
export interface GetTimeclockStatsResponse {
    /**
     * @generated from protobuf field: resources.jobs.TimeclockStats stats = 1
     */
    stats?: TimeclockStats;
    /**
     * @generated from protobuf field: repeated resources.jobs.TimeclockWeeklyStats weekly = 2
     */
    weekly: TimeclockWeeklyStats[];
}
/**
 * @generated from protobuf message services.jobs.ListInactiveEmployeesRequest
 */
export interface ListInactiveEmployeesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: int32 days = 3
     */
    days: number;
}
/**
 * @generated from protobuf message services.jobs.ListInactiveEmployeesResponse
 */
export interface ListInactiveEmployeesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.jobs.Colleague colleagues = 2
     */
    colleagues: Colleague[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListTimeclockRequest$Type extends MessageType<ListTimeclockRequest> {
    constructor() {
        super("services.jobs.ListTimeclockRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "user_mode", kind: "enum", T: () => ["resources.jobs.TimeclockViewMode", TimeclockViewMode, "TIMECLOCK_VIEW_MODE_"] },
            { no: 4, name: "mode", kind: "enum", T: () => ["resources.jobs.TimeclockMode", TimeclockMode, "TIMECLOCK_MODE_"] },
            { no: 5, name: "date", kind: "message", T: () => DateRange },
            { no: 6, name: "per_day", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { repeated: { maxItems: "15" } } } }
        ]);
    }
    create(value?: PartialMessage<ListTimeclockRequest>): ListTimeclockRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userMode = 0;
        message.mode = 0;
        message.perDay = false;
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<ListTimeclockRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTimeclockRequest): ListTimeclockRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* resources.jobs.TimeclockViewMode user_mode */ 3:
                    message.userMode = reader.int32();
                    break;
                case /* resources.jobs.TimeclockMode mode */ 4:
                    message.mode = reader.int32();
                    break;
                case /* optional resources.common.database.DateRange date */ 5:
                    message.date = DateRange.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* bool per_day */ 6:
                    message.perDay = reader.bool();
                    break;
                case /* repeated int32 user_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int32());
                    else
                        message.userIds.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTimeclockRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.jobs.TimeclockViewMode user_mode = 3; */
        if (message.userMode !== 0)
            writer.tag(3, WireType.Varint).int32(message.userMode);
        /* resources.jobs.TimeclockMode mode = 4; */
        if (message.mode !== 0)
            writer.tag(4, WireType.Varint).int32(message.mode);
        /* optional resources.common.database.DateRange date = 5; */
        if (message.date)
            DateRange.internalBinaryWrite(message.date, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* bool per_day = 6; */
        if (message.perDay !== false)
            writer.tag(6, WireType.Varint).bool(message.perDay);
        /* repeated int32 user_ids = 7; */
        if (message.userIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int32(message.userIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListTimeclockRequest
 */
export const ListTimeclockRequest = new ListTimeclockRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTimeclockResponse$Type extends MessageType<ListTimeclockResponse> {
    constructor() {
        super("services.jobs.ListTimeclockResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "stats", kind: "message", T: () => TimeclockStats },
            { no: 3, name: "stats_weekly", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TimeclockWeeklyStats },
            { no: 4, name: "daily", kind: "message", oneof: "entries", T: () => TimeclockDay },
            { no: 5, name: "weekly", kind: "message", oneof: "entries", T: () => TimeclockWeekly },
            { no: 6, name: "range", kind: "message", oneof: "entries", T: () => TimeclockRange }
        ]);
    }
    create(value?: PartialMessage<ListTimeclockResponse>): ListTimeclockResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.statsWeekly = [];
        message.entries = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ListTimeclockResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTimeclockResponse): ListTimeclockResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* resources.jobs.TimeclockStats stats */ 2:
                    message.stats = TimeclockStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* repeated resources.jobs.TimeclockWeeklyStats stats_weekly */ 3:
                    message.statsWeekly.push(TimeclockWeeklyStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* services.jobs.TimeclockDay daily */ 4:
                    message.entries = {
                        oneofKind: "daily",
                        daily: TimeclockDay.internalBinaryRead(reader, reader.uint32(), options, (message.entries as any).daily)
                    };
                    break;
                case /* services.jobs.TimeclockWeekly weekly */ 5:
                    message.entries = {
                        oneofKind: "weekly",
                        weekly: TimeclockWeekly.internalBinaryRead(reader, reader.uint32(), options, (message.entries as any).weekly)
                    };
                    break;
                case /* services.jobs.TimeclockRange range */ 6:
                    message.entries = {
                        oneofKind: "range",
                        range: TimeclockRange.internalBinaryRead(reader, reader.uint32(), options, (message.entries as any).range)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTimeclockResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.jobs.TimeclockStats stats = 2; */
        if (message.stats)
            TimeclockStats.internalBinaryWrite(message.stats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockWeeklyStats stats_weekly = 3; */
        for (let i = 0; i < message.statsWeekly.length; i++)
            TimeclockWeeklyStats.internalBinaryWrite(message.statsWeekly[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* services.jobs.TimeclockDay daily = 4; */
        if (message.entries.oneofKind === "daily")
            TimeclockDay.internalBinaryWrite(message.entries.daily, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* services.jobs.TimeclockWeekly weekly = 5; */
        if (message.entries.oneofKind === "weekly")
            TimeclockWeekly.internalBinaryWrite(message.entries.weekly, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* services.jobs.TimeclockRange range = 6; */
        if (message.entries.oneofKind === "range")
            TimeclockRange.internalBinaryWrite(message.entries.range, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListTimeclockResponse
 */
export const ListTimeclockResponse = new ListTimeclockResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeclockDay$Type extends MessageType<TimeclockDay> {
    constructor() {
        super("services.jobs.TimeclockDay", [
            { no: 1, name: "date", kind: "message", T: () => Timestamp },
            { no: 2, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TimeclockEntry },
            { no: 3, name: "sum", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TimeclockDay>): TimeclockDay {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        message.sum = 0;
        if (value !== undefined)
            reflectionMergePartial<TimeclockDay>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeclockDay): TimeclockDay {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp date */ 1:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* repeated resources.jobs.TimeclockEntry entries */ 2:
                    message.entries.push(TimeclockEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 sum */ 3:
                    message.sum = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeclockDay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp date = 1; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockEntry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            TimeclockEntry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 sum = 3; */
        if (message.sum !== 0)
            writer.tag(3, WireType.Varint).int64(message.sum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.TimeclockDay
 */
export const TimeclockDay = new TimeclockDay$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeclockWeekly$Type extends MessageType<TimeclockWeekly> {
    constructor() {
        super("services.jobs.TimeclockWeekly", [
            { no: 1, name: "date", kind: "message", T: () => Timestamp, options: { "tagger.tags": "sql:\"primary_key\"" } },
            { no: 2, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TimeclockEntry },
            { no: 3, name: "sum", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TimeclockWeekly>): TimeclockWeekly {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        message.sum = 0;
        if (value !== undefined)
            reflectionMergePartial<TimeclockWeekly>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeclockWeekly): TimeclockWeekly {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp date */ 1:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* repeated resources.jobs.TimeclockEntry entries */ 2:
                    message.entries.push(TimeclockEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 sum */ 3:
                    message.sum = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeclockWeekly, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp date = 1; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockEntry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            TimeclockEntry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 sum = 3; */
        if (message.sum !== 0)
            writer.tag(3, WireType.Varint).int64(message.sum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.TimeclockWeekly
 */
export const TimeclockWeekly = new TimeclockWeekly$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TimeclockRange$Type extends MessageType<TimeclockRange> {
    constructor() {
        super("services.jobs.TimeclockRange", [
            { no: 1, name: "date", kind: "message", T: () => Timestamp, options: { "tagger.tags": "sql:\"primary_key\"" } },
            { no: 2, name: "entries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TimeclockEntry },
            { no: 3, name: "sum", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<TimeclockRange>): TimeclockRange {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.entries = [];
        message.sum = 0;
        if (value !== undefined)
            reflectionMergePartial<TimeclockRange>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TimeclockRange): TimeclockRange {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp date */ 1:
                    message.date = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.date);
                    break;
                case /* repeated resources.jobs.TimeclockEntry entries */ 2:
                    message.entries.push(TimeclockEntry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int64 sum */ 3:
                    message.sum = reader.int64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TimeclockRange, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp date = 1; */
        if (message.date)
            Timestamp.internalBinaryWrite(message.date, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockEntry entries = 2; */
        for (let i = 0; i < message.entries.length; i++)
            TimeclockEntry.internalBinaryWrite(message.entries[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int64 sum = 3; */
        if (message.sum !== 0)
            writer.tag(3, WireType.Varint).int64(message.sum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.TimeclockRange
 */
export const TimeclockRange = new TimeclockRange$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTimeclockStatsRequest$Type extends MessageType<GetTimeclockStatsRequest> {
    constructor() {
        super("services.jobs.GetTimeclockStatsRequest", [
            { no: 1, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<GetTimeclockStatsRequest>): GetTimeclockStatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTimeclockStatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTimeclockStatsRequest): GetTimeclockStatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 user_id */ 1:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTimeclockStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 user_id = 1; */
        if (message.userId !== undefined)
            writer.tag(1, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetTimeclockStatsRequest
 */
export const GetTimeclockStatsRequest = new GetTimeclockStatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTimeclockStatsResponse$Type extends MessageType<GetTimeclockStatsResponse> {
    constructor() {
        super("services.jobs.GetTimeclockStatsResponse", [
            { no: 1, name: "stats", kind: "message", T: () => TimeclockStats },
            { no: 2, name: "weekly", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TimeclockWeeklyStats }
        ]);
    }
    create(value?: PartialMessage<GetTimeclockStatsResponse>): GetTimeclockStatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.weekly = [];
        if (value !== undefined)
            reflectionMergePartial<GetTimeclockStatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTimeclockStatsResponse): GetTimeclockStatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.jobs.TimeclockStats stats */ 1:
                    message.stats = TimeclockStats.internalBinaryRead(reader, reader.uint32(), options, message.stats);
                    break;
                case /* repeated resources.jobs.TimeclockWeeklyStats weekly */ 2:
                    message.weekly.push(TimeclockWeeklyStats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTimeclockStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.jobs.TimeclockStats stats = 1; */
        if (message.stats)
            TimeclockStats.internalBinaryWrite(message.stats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.TimeclockWeeklyStats weekly = 2; */
        for (let i = 0; i < message.weekly.length; i++)
            TimeclockWeeklyStats.internalBinaryWrite(message.weekly[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.GetTimeclockStatsResponse
 */
export const GetTimeclockStatsResponse = new GetTimeclockStatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInactiveEmployeesRequest$Type extends MessageType<ListInactiveEmployeesRequest> {
    constructor() {
        super("services.jobs.ListInactiveEmployeesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "days", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "buf.validate.field": { int32: { gte: 1 } } } }
        ]);
    }
    create(value?: PartialMessage<ListInactiveEmployeesRequest>): ListInactiveEmployeesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.days = 0;
        if (value !== undefined)
            reflectionMergePartial<ListInactiveEmployeesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInactiveEmployeesRequest): ListInactiveEmployeesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* int32 days */ 3:
                    message.days = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInactiveEmployeesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* int32 days = 3; */
        if (message.days !== 0)
            writer.tag(3, WireType.Varint).int32(message.days);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListInactiveEmployeesRequest
 */
export const ListInactiveEmployeesRequest = new ListInactiveEmployeesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListInactiveEmployeesResponse$Type extends MessageType<ListInactiveEmployeesResponse> {
    constructor() {
        super("services.jobs.ListInactiveEmployeesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse, options: { "buf.validate.field": { required: true } } },
            { no: 2, name: "colleagues", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Colleague, options: { "codegen.itemslen.enabled": true } }
        ]);
    }
    create(value?: PartialMessage<ListInactiveEmployeesResponse>): ListInactiveEmployeesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.colleagues = [];
        if (value !== undefined)
            reflectionMergePartial<ListInactiveEmployeesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListInactiveEmployeesResponse): ListInactiveEmployeesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.jobs.Colleague colleagues */ 2:
                    message.colleagues.push(Colleague.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListInactiveEmployeesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.Colleague colleagues = 2; */
        for (let i = 0; i < message.colleagues.length; i++)
            Colleague.internalBinaryWrite(message.colleagues[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.jobs.ListInactiveEmployeesResponse
 */
export const ListInactiveEmployeesResponse = new ListInactiveEmployeesResponse$Type();
/**
 * @generated ServiceType for protobuf service services.jobs.TimeclockService
 */
export const TimeclockService = new ServiceType("services.jobs.TimeclockService", [
    { name: "ListTimeclock", options: { "codegen.perms.perms": { enabled: true, attrs: [{ key: "Access", type: "ATTRIBUTE_TYPE_STRING_LIST", validStringList: ["All"] }] } }, I: ListTimeclockRequest, O: ListTimeclockResponse },
    { name: "GetTimeclockStats", options: { "codegen.perms.perms": { enabled: true, name: "ListTimeclock" } }, I: GetTimeclockStatsRequest, O: GetTimeclockStatsResponse },
    { name: "ListInactiveEmployees", options: { "codegen.perms.perms": { enabled: true } }, I: ListInactiveEmployeesRequest, O: ListInactiveEmployeesResponse }
], { "codegen.perms.perms_svc": { order: 62, icon: "i-mdi-timeline-clock-outline" } });
