// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/jobs/conduct.proto" (package "services.jobs", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ConductService } from "./conduct";
import type { DeleteConductEntryResponse } from "./conduct";
import type { DeleteConductEntryRequest } from "./conduct";
import type { UpdateConductEntryResponse } from "./conduct";
import type { UpdateConductEntryRequest } from "./conduct";
import type { CreateConductEntryResponse } from "./conduct";
import type { CreateConductEntryRequest } from "./conduct";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListConductEntriesResponse } from "./conduct";
import type { ListConductEntriesRequest } from "./conduct";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.jobs.ConductService
 */
export interface IConductServiceClient {
    /**
     * @generated from protobuf rpc: ListConductEntries
     */
    listConductEntries(input: ListConductEntriesRequest, options?: RpcOptions): UnaryCall<ListConductEntriesRequest, ListConductEntriesResponse>;
    /**
     * @generated from protobuf rpc: CreateConductEntry
     */
    createConductEntry(input: CreateConductEntryRequest, options?: RpcOptions): UnaryCall<CreateConductEntryRequest, CreateConductEntryResponse>;
    /**
     * @generated from protobuf rpc: UpdateConductEntry
     */
    updateConductEntry(input: UpdateConductEntryRequest, options?: RpcOptions): UnaryCall<UpdateConductEntryRequest, UpdateConductEntryResponse>;
    /**
     * @generated from protobuf rpc: DeleteConductEntry
     */
    deleteConductEntry(input: DeleteConductEntryRequest, options?: RpcOptions): UnaryCall<DeleteConductEntryRequest, DeleteConductEntryResponse>;
}
/**
 * @generated from protobuf service services.jobs.ConductService
 */
export class ConductServiceClient implements IConductServiceClient, ServiceInfo {
    typeName = ConductService.typeName;
    methods = ConductService.methods;
    options = ConductService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListConductEntries
     */
    listConductEntries(input: ListConductEntriesRequest, options?: RpcOptions): UnaryCall<ListConductEntriesRequest, ListConductEntriesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListConductEntriesRequest, ListConductEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateConductEntry
     */
    createConductEntry(input: CreateConductEntryRequest, options?: RpcOptions): UnaryCall<CreateConductEntryRequest, CreateConductEntryResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateConductEntryRequest, CreateConductEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateConductEntry
     */
    updateConductEntry(input: UpdateConductEntryRequest, options?: RpcOptions): UnaryCall<UpdateConductEntryRequest, UpdateConductEntryResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateConductEntryRequest, UpdateConductEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteConductEntry
     */
    deleteConductEntry(input: DeleteConductEntryRequest, options?: RpcOptions): UnaryCall<DeleteConductEntryRequest, DeleteConductEntryResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteConductEntryRequest, DeleteConductEntryResponse>("unary", this._transport, method, opt, input);
    }
}
