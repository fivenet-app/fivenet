// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/rector/cron.proto" (package "services.rector", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Cronjob } from "../../resources/common/cron/cron";
/**
 * @generated from protobuf message services.rector.ListCronjobsRequest
 */
export interface ListCronjobsRequest {
}
/**
 * @generated from protobuf message services.rector.ListCronjobsResponse
 */
export interface ListCronjobsResponse {
    /**
     * @generated from protobuf field: repeated resources.common.cron.Cronjob jobs = 1;
     */
    jobs: Cronjob[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListCronjobsRequest$Type extends MessageType<ListCronjobsRequest> {
    constructor() {
        super("services.rector.ListCronjobsRequest", []);
    }
    create(value?: PartialMessage<ListCronjobsRequest>): ListCronjobsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListCronjobsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCronjobsRequest): ListCronjobsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCronjobsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.rector.ListCronjobsRequest
 */
export const ListCronjobsRequest = new ListCronjobsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListCronjobsResponse$Type extends MessageType<ListCronjobsResponse> {
    constructor() {
        super("services.rector.ListCronjobsResponse", [
            { no: 1, name: "jobs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Cronjob }
        ]);
    }
    create(value?: PartialMessage<ListCronjobsResponse>): ListCronjobsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobs = [];
        if (value !== undefined)
            reflectionMergePartial<ListCronjobsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListCronjobsResponse): ListCronjobsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.common.cron.Cronjob jobs */ 1:
                    message.jobs.push(Cronjob.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListCronjobsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.common.cron.Cronjob jobs = 1; */
        for (let i = 0; i < message.jobs.length; i++)
            Cronjob.internalBinaryWrite(message.jobs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.rector.ListCronjobsResponse
 */
export const ListCronjobsResponse = new ListCronjobsResponse$Type();
/**
 * @generated ServiceType for protobuf service services.rector.RectorCronService
 */
export const RectorCronService = new ServiceType("services.rector.RectorCronService", [
    { name: "ListCronjobs", options: {}, I: ListCronjobsRequest, O: ListCronjobsResponse }
]);
