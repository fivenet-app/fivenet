// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/rector/accounts.proto" (package "services.rector", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RectorAccountsService } from "./accounts";
import type { DeleteAccountResponse } from "./accounts";
import type { DeleteAccountRequest } from "./accounts";
import type { UpdateAccountResponse } from "./accounts";
import type { UpdateAccountRequest } from "./accounts";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListAccountsResponse } from "./accounts";
import type { ListAccountsRequest } from "./accounts";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.rector.RectorAccountsService
 */
export interface IRectorAccountsServiceClient {
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: ListAccounts(services.rector.ListAccountsRequest) returns (services.rector.ListAccountsResponse);
     */
    listAccounts(input: ListAccountsRequest, options?: RpcOptions): UnaryCall<ListAccountsRequest, ListAccountsResponse>;
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: UpdateAccount(services.rector.UpdateAccountRequest) returns (services.rector.UpdateAccountResponse);
     */
    updateAccount(input: UpdateAccountRequest, options?: RpcOptions): UnaryCall<UpdateAccountRequest, UpdateAccountResponse>;
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: DeleteAccount(services.rector.DeleteAccountRequest) returns (services.rector.DeleteAccountResponse);
     */
    deleteAccount(input: DeleteAccountRequest, options?: RpcOptions): UnaryCall<DeleteAccountRequest, DeleteAccountResponse>;
}
/**
 * @generated from protobuf service services.rector.RectorAccountsService
 */
export class RectorAccountsServiceClient implements IRectorAccountsServiceClient, ServiceInfo {
    typeName = RectorAccountsService.typeName;
    methods = RectorAccountsService.methods;
    options = RectorAccountsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: ListAccounts(services.rector.ListAccountsRequest) returns (services.rector.ListAccountsResponse);
     */
    listAccounts(input: ListAccountsRequest, options?: RpcOptions): UnaryCall<ListAccountsRequest, ListAccountsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAccountsRequest, ListAccountsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: UpdateAccount(services.rector.UpdateAccountRequest) returns (services.rector.UpdateAccountResponse);
     */
    updateAccount(input: UpdateAccountRequest, options?: RpcOptions): UnaryCall<UpdateAccountRequest, UpdateAccountResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateAccountRequest, UpdateAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=SuperUser
     *
     * @generated from protobuf rpc: DeleteAccount(services.rector.DeleteAccountRequest) returns (services.rector.DeleteAccountResponse);
     */
    deleteAccount(input: DeleteAccountRequest, options?: RpcOptions): UnaryCall<DeleteAccountRequest, DeleteAccountResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteAccountRequest, DeleteAccountResponse>("unary", this._transport, method, opt, input);
    }
}
