// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/wiki/wiki.proto" (package "services.wiki", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { WikiService } from "./wiki";
import type { UploadFileResponse } from "../../resources/file/filestore";
import type { UploadFileRequest } from "../../resources/file/filestore";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ListPageActivityResponse } from "./wiki";
import type { ListPageActivityRequest } from "./wiki";
import type { DeletePageResponse } from "./wiki";
import type { DeletePageRequest } from "./wiki";
import type { UpdatePageResponse } from "./wiki";
import type { UpdatePageRequest } from "./wiki";
import type { CreatePageResponse } from "./wiki";
import type { CreatePageRequest } from "./wiki";
import type { GetPageResponse } from "./wiki";
import type { GetPageRequest } from "./wiki";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListPagesResponse } from "./wiki";
import type { ListPagesRequest } from "./wiki";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.wiki.WikiService
 */
export interface IWikiServiceClient {
    /**
     * @generated from protobuf rpc: ListPages
     */
    listPages(input: ListPagesRequest, options?: RpcOptions): UnaryCall<ListPagesRequest, ListPagesResponse>;
    /**
     * @generated from protobuf rpc: GetPage
     */
    getPage(input: GetPageRequest, options?: RpcOptions): UnaryCall<GetPageRequest, GetPageResponse>;
    /**
     * @generated from protobuf rpc: CreatePage
     */
    createPage(input: CreatePageRequest, options?: RpcOptions): UnaryCall<CreatePageRequest, CreatePageResponse>;
    /**
     * @generated from protobuf rpc: UpdatePage
     */
    updatePage(input: UpdatePageRequest, options?: RpcOptions): UnaryCall<UpdatePageRequest, UpdatePageResponse>;
    /**
     * @generated from protobuf rpc: DeletePage
     */
    deletePage(input: DeletePageRequest, options?: RpcOptions): UnaryCall<DeletePageRequest, DeletePageResponse>;
    /**
     * @generated from protobuf rpc: ListPageActivity
     */
    listPageActivity(input: ListPageActivityRequest, options?: RpcOptions): UnaryCall<ListPageActivityRequest, ListPageActivityResponse>;
    /**
     * @generated from protobuf rpc: UploadFile
     */
    uploadFile(options?: RpcOptions): ClientStreamingCall<UploadFileRequest, UploadFileResponse>;
}
/**
 * @generated from protobuf service services.wiki.WikiService
 */
export class WikiServiceClient implements IWikiServiceClient, ServiceInfo {
    typeName = WikiService.typeName;
    methods = WikiService.methods;
    options = WikiService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListPages
     */
    listPages(input: ListPagesRequest, options?: RpcOptions): UnaryCall<ListPagesRequest, ListPagesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListPagesRequest, ListPagesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetPage
     */
    getPage(input: GetPageRequest, options?: RpcOptions): UnaryCall<GetPageRequest, GetPageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPageRequest, GetPageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreatePage
     */
    createPage(input: CreatePageRequest, options?: RpcOptions): UnaryCall<CreatePageRequest, CreatePageResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreatePageRequest, CreatePageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdatePage
     */
    updatePage(input: UpdatePageRequest, options?: RpcOptions): UnaryCall<UpdatePageRequest, UpdatePageResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdatePageRequest, UpdatePageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeletePage
     */
    deletePage(input: DeletePageRequest, options?: RpcOptions): UnaryCall<DeletePageRequest, DeletePageResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeletePageRequest, DeletePageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListPageActivity
     */
    listPageActivity(input: ListPageActivityRequest, options?: RpcOptions): UnaryCall<ListPageActivityRequest, ListPageActivityResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListPageActivityRequest, ListPageActivityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UploadFile
     */
    uploadFile(options?: RpcOptions): ClientStreamingCall<UploadFileRequest, UploadFileResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadFileRequest, UploadFileResponse>("clientStreaming", this._transport, method, opt);
    }
}
