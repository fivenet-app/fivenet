// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/wiki/collab.proto" (package "services.wiki", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CollabService } from "./collab";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ServerPacket } from "../../resources/collab/collab";
import type { ClientPacket } from "../../resources/collab/collab";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.wiki.CollabService
 */
export interface ICollabServiceClient {
    /**
     * @perm: Name=wiki.WikiService/ListPages
     *
     * @generated from protobuf rpc: JoinDocument(stream resources.collab.ClientPacket) returns (stream resources.collab.ServerPacket);
     */
    joinDocument(options?: RpcOptions): DuplexStreamingCall<ClientPacket, ServerPacket>;
}
/**
 * @generated from protobuf service services.wiki.CollabService
 */
export class CollabServiceClient implements ICollabServiceClient, ServiceInfo {
    typeName = CollabService.typeName;
    methods = CollabService.methods;
    options = CollabService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=wiki.WikiService/ListPages
     *
     * @generated from protobuf rpc: JoinDocument(stream resources.collab.ClientPacket) returns (stream resources.collab.ServerPacket);
     */
    joinDocument(options?: RpcOptions): DuplexStreamingCall<ClientPacket, ServerPacket> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ClientPacket, ServerPacket>("duplex", this._transport, method, opt);
    }
}
