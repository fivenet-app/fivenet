// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/notifications/notifications.proto" (package "services.notifications", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { NotificationsService } from "./notifications";
import type { StreamResponse } from "./notifications";
import type { StreamRequest } from "./notifications";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { MarkNotificationsResponse } from "./notifications";
import type { MarkNotificationsRequest } from "./notifications";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetNotificationsResponse } from "./notifications";
import type { GetNotificationsRequest } from "./notifications";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.notifications.NotificationsService
 */
export interface INotificationsServiceClient {
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetNotifications
     */
    getNotifications(input: GetNotificationsRequest, options?: RpcOptions): UnaryCall<GetNotificationsRequest, GetNotificationsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: MarkNotifications
     */
    markNotifications(input: MarkNotificationsRequest, options?: RpcOptions): UnaryCall<MarkNotificationsRequest, MarkNotificationsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: Stream
     */
    stream(options?: RpcOptions): DuplexStreamingCall<StreamRequest, StreamResponse>;
}
/**
 * @generated from protobuf service services.notifications.NotificationsService
 */
export class NotificationsServiceClient implements INotificationsServiceClient, ServiceInfo {
    typeName = NotificationsService.typeName;
    methods = NotificationsService.methods;
    options = NotificationsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetNotifications
     */
    getNotifications(input: GetNotificationsRequest, options?: RpcOptions): UnaryCall<GetNotificationsRequest, GetNotificationsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetNotificationsRequest, GetNotificationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: MarkNotifications
     */
    markNotifications(input: MarkNotificationsRequest, options?: RpcOptions): UnaryCall<MarkNotificationsRequest, MarkNotificationsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<MarkNotificationsRequest, MarkNotificationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: Stream
     */
    stream(options?: RpcOptions): DuplexStreamingCall<StreamRequest, StreamResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamRequest, StreamResponse>("duplex", this._transport, method, opt);
    }
}
