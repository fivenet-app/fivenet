// @generated by protobuf-ts 2.9.6 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/centrum/centrum.proto" (package "services.centrum", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Disponents } from "../../resources/centrum/disponents";
import { Colleague } from "../../resources/jobs/colleagues";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { TakeDispatchResp } from "../../resources/centrum/dispatches";
import { DispatchStatus } from "../../resources/centrum/dispatches";
import { Dispatch } from "../../resources/centrum/dispatches";
import { StatusDispatch } from "../../resources/centrum/dispatches";
import { UnitStatus } from "../../resources/centrum/units";
import { PaginationResponse } from "../../resources/common/database/database";
import { Unit } from "../../resources/centrum/units";
import { StatusUnit } from "../../resources/centrum/units";
import { Settings } from "../../resources/centrum/settings";
import { PaginationRequest } from "../../resources/common/database/database";
// Common

/**
 * @generated from protobuf message services.centrum.ListDispatchActivityRequest
 */
export interface ListDispatchActivityRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message services.centrum.ListUnitActivityRequest
 */
export interface ListUnitActivityRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: uint64 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message services.centrum.GetSettingsRequest
 */
export interface GetSettingsRequest {
}
/**
 * @generated from protobuf message services.centrum.GetSettingsResponse
 */
export interface GetSettingsResponse {
    /**
     * @generated from protobuf field: resources.centrum.Settings settings = 1;
     */
    settings?: Settings;
}
/**
 * @generated from protobuf message services.centrum.UpdateSettingsRequest
 */
export interface UpdateSettingsRequest {
    /**
     * @generated from protobuf field: resources.centrum.Settings settings = 1;
     */
    settings?: Settings;
}
/**
 * @generated from protobuf message services.centrum.UpdateSettingsResponse
 */
export interface UpdateSettingsResponse {
    /**
     * @generated from protobuf field: resources.centrum.Settings settings = 1;
     */
    settings?: Settings;
}
// Unit Management

/**
 * @generated from protobuf message services.centrum.ListUnitsRequest
 */
export interface ListUnitsRequest {
    /**
     * @generated from protobuf field: repeated resources.centrum.StatusUnit status = 1;
     */
    status: StatusUnit[];
}
/**
 * @generated from protobuf message services.centrum.ListUnitsResponse
 */
export interface ListUnitsResponse {
    /**
     * @generated from protobuf field: repeated resources.centrum.Unit units = 1;
     */
    units: Unit[];
}
/**
 * @generated from protobuf message services.centrum.CreateOrUpdateUnitRequest
 */
export interface CreateOrUpdateUnitRequest {
    /**
     * @generated from protobuf field: resources.centrum.Unit unit = 1;
     */
    unit?: Unit;
}
/**
 * @generated from protobuf message services.centrum.CreateOrUpdateUnitResponse
 */
export interface CreateOrUpdateUnitResponse {
    /**
     * @generated from protobuf field: resources.centrum.Unit unit = 1;
     */
    unit?: Unit;
}
/**
 * @generated from protobuf message services.centrum.DeleteUnitRequest
 */
export interface DeleteUnitRequest {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: number;
}
/**
 * @generated from protobuf message services.centrum.DeleteUnitResponse
 */
export interface DeleteUnitResponse {
}
/**
 * @generated from protobuf message services.centrum.UpdateUnitStatusRequest
 */
export interface UpdateUnitStatusRequest {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: number;
    /**
     * @generated from protobuf field: resources.centrum.StatusUnit status = 2;
     */
    status: StatusUnit;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 3;
     */
    reason?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string code = 4;
     */
    code?: string;
}
/**
 * @generated from protobuf message services.centrum.UpdateUnitStatusResponse
 */
export interface UpdateUnitStatusResponse {
}
/**
 * @generated from protobuf message services.centrum.AssignUnitRequest
 */
export interface AssignUnitRequest {
    /**
     * @generated from protobuf field: uint64 unit_id = 1;
     */
    unitId: number;
    /**
     * @generated from protobuf field: repeated int32 to_add = 2;
     */
    toAdd: number[];
    /**
     * @generated from protobuf field: repeated int32 to_remove = 3;
     */
    toRemove: number[];
}
/**
 * @generated from protobuf message services.centrum.AssignUnitResponse
 */
export interface AssignUnitResponse {
}
/**
 * @generated from protobuf message services.centrum.ListUnitActivityResponse
 */
export interface ListUnitActivityResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.centrum.UnitStatus activity = 2;
     */
    activity: UnitStatus[];
}
// Dispatch Management

/**
 * @generated from protobuf message services.centrum.TakeControlRequest
 */
export interface TakeControlRequest {
    /**
     * @generated from protobuf field: bool signon = 1;
     */
    signon: boolean;
}
/**
 * @generated from protobuf message services.centrum.TakeControlResponse
 */
export interface TakeControlResponse {
}
/**
 * @generated from protobuf message services.centrum.ListDispatchesRequest
 */
export interface ListDispatchesRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: repeated resources.centrum.StatusDispatch status = 2;
     */
    status: StatusDispatch[];
    /**
     * @generated from protobuf field: repeated resources.centrum.StatusDispatch not_status = 3;
     */
    notStatus: StatusDispatch[];
    /**
     * @generated from protobuf field: repeated uint64 ids = 4;
     */
    ids: number[];
    /**
     * @generated from protobuf field: optional string postal = 5;
     */
    postal?: string;
}
/**
 * @generated from protobuf message services.centrum.ListDispatchesResponse
 */
export interface ListDispatchesResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.centrum.Dispatch dispatches = 2;
     */
    dispatches: Dispatch[];
}
/**
 * @generated from protobuf message services.centrum.GetDispatchRequest
 */
export interface GetDispatchRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message services.centrum.GetDispatchResponse
 */
export interface GetDispatchResponse {
    /**
     * @generated from protobuf field: resources.centrum.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.CreateDispatchRequest
 */
export interface CreateDispatchRequest {
    /**
     * @generated from protobuf field: resources.centrum.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.CreateDispatchResponse
 */
export interface CreateDispatchResponse {
    /**
     * @generated from protobuf field: resources.centrum.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.UpdateDispatchRequest
 */
export interface UpdateDispatchRequest {
    /**
     * @generated from protobuf field: resources.centrum.Dispatch dispatch = 1;
     */
    dispatch?: Dispatch;
}
/**
 * @generated from protobuf message services.centrum.UpdateDispatchResponse
 */
export interface UpdateDispatchResponse {
}
/**
 * @generated from protobuf message services.centrum.DeleteDispatchRequest
 */
export interface DeleteDispatchRequest {
    /**
     * @generated from protobuf field: uint64 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message services.centrum.DeleteDispatchResponse
 */
export interface DeleteDispatchResponse {
}
/**
 * @generated from protobuf message services.centrum.UpdateDispatchStatusRequest
 */
export interface UpdateDispatchStatusRequest {
    /**
     * @generated from protobuf field: uint64 dispatch_id = 1;
     */
    dispatchId: number;
    /**
     * @generated from protobuf field: resources.centrum.StatusDispatch status = 2;
     */
    status: StatusDispatch;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 3;
     */
    reason?: string;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string code = 4;
     */
    code?: string;
}
/**
 * @generated from protobuf message services.centrum.UpdateDispatchStatusResponse
 */
export interface UpdateDispatchStatusResponse {
}
/**
 * @generated from protobuf message services.centrum.AssignDispatchRequest
 */
export interface AssignDispatchRequest {
    /**
     * @generated from protobuf field: uint64 dispatch_id = 1;
     */
    dispatchId: number;
    /**
     * @generated from protobuf field: repeated uint64 to_add = 2;
     */
    toAdd: number[];
    /**
     * @generated from protobuf field: repeated uint64 to_remove = 3;
     */
    toRemove: number[];
    /**
     * @generated from protobuf field: optional bool forced = 4;
     */
    forced?: boolean;
}
/**
 * @generated from protobuf message services.centrum.AssignDispatchResponse
 */
export interface AssignDispatchResponse {
}
/**
 * @generated from protobuf message services.centrum.ListDispatchActivityResponse
 */
export interface ListDispatchActivityResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.centrum.DispatchStatus activity = 2;
     */
    activity: DispatchStatus[];
}
/**
 * @generated from protobuf message services.centrum.JoinUnitRequest
 */
export interface JoinUnitRequest {
    /**
     * @generated from protobuf field: optional uint64 unit_id = 1;
     */
    unitId?: number;
}
/**
 * @generated from protobuf message services.centrum.JoinUnitResponse
 */
export interface JoinUnitResponse {
    /**
     * @generated from protobuf field: resources.centrum.Unit unit = 1;
     */
    unit?: Unit;
}
/**
 * @generated from protobuf message services.centrum.TakeDispatchRequest
 */
export interface TakeDispatchRequest {
    /**
     * @generated from protobuf field: repeated uint64 dispatch_ids = 1;
     */
    dispatchIds: number[];
    /**
     * @generated from protobuf field: resources.centrum.TakeDispatchResp resp = 2;
     */
    resp: TakeDispatchResp;
    /**
     * @sanitize
     *
     * @generated from protobuf field: optional string reason = 3;
     */
    reason?: string;
}
/**
 * @generated from protobuf message services.centrum.TakeDispatchResponse
 */
export interface TakeDispatchResponse {
}
/**
 * @generated from protobuf message services.centrum.LatestState
 */
export interface LatestState {
    /**
     * @generated from protobuf field: resources.timestamp.Timestamp server_time = 1;
     */
    serverTime?: Timestamp;
    /**
     * @generated from protobuf field: resources.centrum.Settings settings = 2;
     */
    settings?: Settings;
    /**
     * @generated from protobuf field: repeated resources.jobs.Colleague disponents = 3;
     */
    disponents: Colleague[];
    /**
     * @generated from protobuf field: optional uint64 own_unit_id = 4;
     */
    ownUnitId?: number;
    /**
     * Send the current units and dispatches
     *
     * @generated from protobuf field: repeated resources.centrum.Unit units = 5;
     */
    units: Unit[];
    /**
     * @generated from protobuf field: repeated resources.centrum.Dispatch dispatches = 6;
     */
    dispatches: Dispatch[];
}
/**
 * @generated from protobuf message services.centrum.StreamRequest
 */
export interface StreamRequest {
}
/**
 * @generated from protobuf message services.centrum.StreamResponse
 */
export interface StreamResponse {
    /**
     * @generated from protobuf oneof: change
     */
    change: {
        oneofKind: "latestState";
        /**
         * @generated from protobuf field: services.centrum.LatestState latest_state = 1;
         */
        latestState: LatestState;
    } | {
        oneofKind: "settings";
        /**
         * @generated from protobuf field: resources.centrum.Settings settings = 2;
         */
        settings: Settings;
    } | {
        oneofKind: "disponents";
        /**
         * @generated from protobuf field: resources.centrum.Disponents disponents = 3;
         */
        disponents: Disponents;
    } | {
        oneofKind: "unitCreated";
        /**
         * @generated from protobuf field: resources.centrum.Unit unit_created = 4;
         */
        unitCreated: Unit;
    } | {
        oneofKind: "unitDeleted";
        /**
         * @generated from protobuf field: resources.centrum.Unit unit_deleted = 5;
         */
        unitDeleted: Unit;
    } | {
        oneofKind: "unitUpdated";
        /**
         * @generated from protobuf field: resources.centrum.Unit unit_updated = 6;
         */
        unitUpdated: Unit;
    } | {
        oneofKind: "unitStatus";
        /**
         * @generated from protobuf field: resources.centrum.UnitStatus unit_status = 7;
         */
        unitStatus: UnitStatus;
    } | {
        oneofKind: "dispatchCreated";
        /**
         * @generated from protobuf field: resources.centrum.Dispatch dispatch_created = 8;
         */
        dispatchCreated: Dispatch;
    } | {
        oneofKind: "dispatchDeleted";
        /**
         * @generated from protobuf field: resources.centrum.Dispatch dispatch_deleted = 9;
         */
        dispatchDeleted: Dispatch;
    } | {
        oneofKind: "dispatchUpdated";
        /**
         * @generated from protobuf field: resources.centrum.Dispatch dispatch_updated = 10;
         */
        dispatchUpdated: Dispatch;
    } | {
        oneofKind: "dispatchStatus";
        /**
         * @generated from protobuf field: resources.centrum.DispatchStatus dispatch_status = 11;
         */
        dispatchStatus: DispatchStatus;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class ListDispatchActivityRequest$Type extends MessageType<ListDispatchActivityRequest> {
    constructor() {
        super("services.centrum.ListDispatchActivityRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListDispatchActivityRequest>): ListDispatchActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<ListDispatchActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDispatchActivityRequest): ListDispatchActivityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDispatchActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListDispatchActivityRequest
 */
export const ListDispatchActivityRequest = new ListDispatchActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUnitActivityRequest$Type extends MessageType<ListUnitActivityRequest> {
    constructor() {
        super("services.centrum.ListUnitActivityRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<ListUnitActivityRequest>): ListUnitActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<ListUnitActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUnitActivityRequest): ListUnitActivityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUnitActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListUnitActivityRequest
 */
export const ListUnitActivityRequest = new ListUnitActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSettingsRequest$Type extends MessageType<GetSettingsRequest> {
    constructor() {
        super("services.centrum.GetSettingsRequest", []);
    }
    create(value?: PartialMessage<GetSettingsRequest>): GetSettingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSettingsRequest): GetSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.GetSettingsRequest
 */
export const GetSettingsRequest = new GetSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSettingsResponse$Type extends MessageType<GetSettingsResponse> {
    constructor() {
        super("services.centrum.GetSettingsResponse", [
            { no: 1, name: "settings", kind: "message", T: () => Settings }
        ]);
    }
    create(value?: PartialMessage<GetSettingsResponse>): GetSettingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetSettingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSettingsResponse): GetSettingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Settings settings */ 1:
                    message.settings = Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSettingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Settings settings = 1; */
        if (message.settings)
            Settings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.GetSettingsResponse
 */
export const GetSettingsResponse = new GetSettingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSettingsRequest$Type extends MessageType<UpdateSettingsRequest> {
    constructor() {
        super("services.centrum.UpdateSettingsRequest", [
            { no: 1, name: "settings", kind: "message", T: () => Settings }
        ]);
    }
    create(value?: PartialMessage<UpdateSettingsRequest>): UpdateSettingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSettingsRequest): UpdateSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Settings settings */ 1:
                    message.settings = Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Settings settings = 1; */
        if (message.settings)
            Settings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateSettingsRequest
 */
export const UpdateSettingsRequest = new UpdateSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSettingsResponse$Type extends MessageType<UpdateSettingsResponse> {
    constructor() {
        super("services.centrum.UpdateSettingsResponse", [
            { no: 1, name: "settings", kind: "message", T: () => Settings }
        ]);
    }
    create(value?: PartialMessage<UpdateSettingsResponse>): UpdateSettingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateSettingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSettingsResponse): UpdateSettingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Settings settings */ 1:
                    message.settings = Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateSettingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Settings settings = 1; */
        if (message.settings)
            Settings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateSettingsResponse
 */
export const UpdateSettingsResponse = new UpdateSettingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUnitsRequest$Type extends MessageType<ListUnitsRequest> {
    constructor() {
        super("services.centrum.ListUnitsRequest", [
            { no: 1, name: "status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.centrum.StatusUnit", StatusUnit, "STATUS_UNIT_"], options: { "validate.rules": { repeated: { items: { enum: { definedOnly: true } } } } } }
        ]);
    }
    create(value?: PartialMessage<ListUnitsRequest>): ListUnitsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = [];
        if (value !== undefined)
            reflectionMergePartial<ListUnitsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUnitsRequest): ListUnitsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.centrum.StatusUnit status */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.status.push(reader.int32());
                    else
                        message.status.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUnitsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.centrum.StatusUnit status = 1; */
        if (message.status.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.status.length; i++)
                writer.int32(message.status[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListUnitsRequest
 */
export const ListUnitsRequest = new ListUnitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUnitsResponse$Type extends MessageType<ListUnitsResponse> {
    constructor() {
        super("services.centrum.ListUnitsResponse", [
            { no: 1, name: "units", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Unit }
        ]);
    }
    create(value?: PartialMessage<ListUnitsResponse>): ListUnitsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.units = [];
        if (value !== undefined)
            reflectionMergePartial<ListUnitsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUnitsResponse): ListUnitsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.centrum.Unit units */ 1:
                    message.units.push(Unit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUnitsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.centrum.Unit units = 1; */
        for (let i = 0; i < message.units.length; i++)
            Unit.internalBinaryWrite(message.units[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListUnitsResponse
 */
export const ListUnitsResponse = new ListUnitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateUnitRequest$Type extends MessageType<CreateOrUpdateUnitRequest> {
    constructor() {
        super("services.centrum.CreateOrUpdateUnitRequest", [
            { no: 1, name: "unit", kind: "message", T: () => Unit, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateUnitRequest>): CreateOrUpdateUnitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateUnitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateUnitRequest): CreateOrUpdateUnitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Unit unit */ 1:
                    message.unit = Unit.internalBinaryRead(reader, reader.uint32(), options, message.unit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateUnitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Unit unit = 1; */
        if (message.unit)
            Unit.internalBinaryWrite(message.unit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateOrUpdateUnitRequest
 */
export const CreateOrUpdateUnitRequest = new CreateOrUpdateUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateUnitResponse$Type extends MessageType<CreateOrUpdateUnitResponse> {
    constructor() {
        super("services.centrum.CreateOrUpdateUnitResponse", [
            { no: 1, name: "unit", kind: "message", T: () => Unit }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateUnitResponse>): CreateOrUpdateUnitResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateUnitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateUnitResponse): CreateOrUpdateUnitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Unit unit */ 1:
                    message.unit = Unit.internalBinaryRead(reader, reader.uint32(), options, message.unit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateUnitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Unit unit = 1; */
        if (message.unit)
            Unit.internalBinaryWrite(message.unit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateOrUpdateUnitResponse
 */
export const CreateOrUpdateUnitResponse = new CreateOrUpdateUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUnitRequest$Type extends MessageType<DeleteUnitRequest> {
    constructor() {
        super("services.centrum.DeleteUnitRequest", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUnitRequest>): DeleteUnitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unitId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteUnitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUnitRequest): DeleteUnitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 unit_id */ 1:
                    message.unitId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUnitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 unit_id = 1; */
        if (message.unitId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.unitId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DeleteUnitRequest
 */
export const DeleteUnitRequest = new DeleteUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUnitResponse$Type extends MessageType<DeleteUnitResponse> {
    constructor() {
        super("services.centrum.DeleteUnitResponse", []);
    }
    create(value?: PartialMessage<DeleteUnitResponse>): DeleteUnitResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteUnitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUnitResponse): DeleteUnitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUnitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DeleteUnitResponse
 */
export const DeleteUnitResponse = new DeleteUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUnitStatusRequest$Type extends MessageType<UpdateUnitStatusRequest> {
    constructor() {
        super("services.centrum.UpdateUnitStatusRequest", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["resources.centrum.StatusUnit", StatusUnit, "STATUS_UNIT_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 4, name: "code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateUnitStatusRequest>): UpdateUnitStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unitId = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateUnitStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUnitStatusRequest): UpdateUnitStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 unit_id */ 1:
                    message.unitId = reader.uint64().toNumber();
                    break;
                case /* resources.centrum.StatusUnit status */ 2:
                    message.status = reader.int32();
                    break;
                case /* optional string reason */ 3:
                    message.reason = reader.string();
                    break;
                case /* optional string code */ 4:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUnitStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 unit_id = 1; */
        if (message.unitId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.unitId);
        /* resources.centrum.StatusUnit status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* optional string reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        /* optional string code = 4; */
        if (message.code !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateUnitStatusRequest
 */
export const UpdateUnitStatusRequest = new UpdateUnitStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUnitStatusResponse$Type extends MessageType<UpdateUnitStatusResponse> {
    constructor() {
        super("services.centrum.UpdateUnitStatusResponse", []);
    }
    create(value?: PartialMessage<UpdateUnitStatusResponse>): UpdateUnitStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUnitStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUnitStatusResponse): UpdateUnitStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUnitStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateUnitStatusResponse
 */
export const UpdateUnitStatusResponse = new UpdateUnitStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignUnitRequest$Type extends MessageType<AssignUnitRequest> {
    constructor() {
        super("services.centrum.AssignUnitRequest", [
            { no: 1, name: "unit_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "to_add", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "to_remove", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AssignUnitRequest>): AssignUnitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.unitId = 0;
        message.toAdd = [];
        message.toRemove = [];
        if (value !== undefined)
            reflectionMergePartial<AssignUnitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignUnitRequest): AssignUnitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 unit_id */ 1:
                    message.unitId = reader.uint64().toNumber();
                    break;
                case /* repeated int32 to_add */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.toAdd.push(reader.int32());
                    else
                        message.toAdd.push(reader.int32());
                    break;
                case /* repeated int32 to_remove */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.toRemove.push(reader.int32());
                    else
                        message.toRemove.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignUnitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 unit_id = 1; */
        if (message.unitId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.unitId);
        /* repeated int32 to_add = 2; */
        if (message.toAdd.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.toAdd.length; i++)
                writer.int32(message.toAdd[i]);
            writer.join();
        }
        /* repeated int32 to_remove = 3; */
        if (message.toRemove.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.toRemove.length; i++)
                writer.int32(message.toRemove[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.AssignUnitRequest
 */
export const AssignUnitRequest = new AssignUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignUnitResponse$Type extends MessageType<AssignUnitResponse> {
    constructor() {
        super("services.centrum.AssignUnitResponse", []);
    }
    create(value?: PartialMessage<AssignUnitResponse>): AssignUnitResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AssignUnitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignUnitResponse): AssignUnitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignUnitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.AssignUnitResponse
 */
export const AssignUnitResponse = new AssignUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListUnitActivityResponse$Type extends MessageType<ListUnitActivityResponse> {
    constructor() {
        super("services.centrum.ListUnitActivityResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "activity", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitStatus }
        ]);
    }
    create(value?: PartialMessage<ListUnitActivityResponse>): ListUnitActivityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activity = [];
        if (value !== undefined)
            reflectionMergePartial<ListUnitActivityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListUnitActivityResponse): ListUnitActivityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.centrum.UnitStatus activity */ 2:
                    message.activity.push(UnitStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListUnitActivityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.centrum.UnitStatus activity = 2; */
        for (let i = 0; i < message.activity.length; i++)
            UnitStatus.internalBinaryWrite(message.activity[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListUnitActivityResponse
 */
export const ListUnitActivityResponse = new ListUnitActivityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeControlRequest$Type extends MessageType<TakeControlRequest> {
    constructor() {
        super("services.centrum.TakeControlRequest", [
            { no: 1, name: "signon", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TakeControlRequest>): TakeControlRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.signon = false;
        if (value !== undefined)
            reflectionMergePartial<TakeControlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeControlRequest): TakeControlRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool signon */ 1:
                    message.signon = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeControlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool signon = 1; */
        if (message.signon !== false)
            writer.tag(1, WireType.Varint).bool(message.signon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.TakeControlRequest
 */
export const TakeControlRequest = new TakeControlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeControlResponse$Type extends MessageType<TakeControlResponse> {
    constructor() {
        super("services.centrum.TakeControlResponse", []);
    }
    create(value?: PartialMessage<TakeControlResponse>): TakeControlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakeControlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeControlResponse): TakeControlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeControlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.TakeControlResponse
 */
export const TakeControlResponse = new TakeControlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDispatchesRequest$Type extends MessageType<ListDispatchesRequest> {
    constructor() {
        super("services.centrum.ListDispatchesRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.centrum.StatusDispatch", StatusDispatch, "STATUS_DISPATCH_"], options: { "validate.rules": { repeated: { items: { enum: { definedOnly: true } } } } } },
            { no: 3, name: "not_status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.centrum.StatusDispatch", StatusDispatch, "STATUS_DISPATCH_"], options: { "validate.rules": { repeated: { items: { enum: { definedOnly: true } } } } } },
            { no: 4, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { repeated: { maxItems: "10" } } } },
            { no: 5, name: "postal", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "12" } } } }
        ]);
    }
    create(value?: PartialMessage<ListDispatchesRequest>): ListDispatchesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = [];
        message.notStatus = [];
        message.ids = [];
        if (value !== undefined)
            reflectionMergePartial<ListDispatchesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDispatchesRequest): ListDispatchesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.centrum.StatusDispatch status */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.status.push(reader.int32());
                    else
                        message.status.push(reader.int32());
                    break;
                case /* repeated resources.centrum.StatusDispatch not_status */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.notStatus.push(reader.int32());
                    else
                        message.notStatus.push(reader.int32());
                    break;
                case /* repeated uint64 ids */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.uint64().toNumber());
                    else
                        message.ids.push(reader.uint64().toNumber());
                    break;
                case /* optional string postal */ 5:
                    message.postal = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDispatchesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.centrum.StatusDispatch status = 2; */
        if (message.status.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.status.length; i++)
                writer.int32(message.status[i]);
            writer.join();
        }
        /* repeated resources.centrum.StatusDispatch not_status = 3; */
        if (message.notStatus.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.notStatus.length; i++)
                writer.int32(message.notStatus[i]);
            writer.join();
        }
        /* repeated uint64 ids = 4; */
        if (message.ids.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.uint64(message.ids[i]);
            writer.join();
        }
        /* optional string postal = 5; */
        if (message.postal !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.postal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListDispatchesRequest
 */
export const ListDispatchesRequest = new ListDispatchesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDispatchesResponse$Type extends MessageType<ListDispatchesResponse> {
    constructor() {
        super("services.centrum.ListDispatchesResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "dispatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Dispatch }
        ]);
    }
    create(value?: PartialMessage<ListDispatchesResponse>): ListDispatchesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dispatches = [];
        if (value !== undefined)
            reflectionMergePartial<ListDispatchesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDispatchesResponse): ListDispatchesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.centrum.Dispatch dispatches */ 2:
                    message.dispatches.push(Dispatch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDispatchesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.centrum.Dispatch dispatches = 2; */
        for (let i = 0; i < message.dispatches.length; i++)
            Dispatch.internalBinaryWrite(message.dispatches[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListDispatchesResponse
 */
export const ListDispatchesResponse = new ListDispatchesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchRequest$Type extends MessageType<GetDispatchRequest> {
    constructor() {
        super("services.centrum.GetDispatchRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { uint64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<GetDispatchRequest>): GetDispatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDispatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchRequest): GetDispatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.GetDispatchRequest
 */
export const GetDispatchRequest = new GetDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDispatchResponse$Type extends MessageType<GetDispatchResponse> {
    constructor() {
        super("services.centrum.GetDispatchResponse", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch }
        ]);
    }
    create(value?: PartialMessage<GetDispatchResponse>): GetDispatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetDispatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDispatchResponse): GetDispatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Dispatch dispatch */ 1:
                    message.dispatch = Dispatch.internalBinaryRead(reader, reader.uint32(), options, message.dispatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDispatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Dispatch dispatch = 1; */
        if (message.dispatch)
            Dispatch.internalBinaryWrite(message.dispatch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.GetDispatchResponse
 */
export const GetDispatchResponse = new GetDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDispatchRequest$Type extends MessageType<CreateDispatchRequest> {
    constructor() {
        super("services.centrum.CreateDispatchRequest", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateDispatchRequest>): CreateDispatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateDispatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDispatchRequest): CreateDispatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Dispatch dispatch */ 1:
                    message.dispatch = Dispatch.internalBinaryRead(reader, reader.uint32(), options, message.dispatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDispatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Dispatch dispatch = 1; */
        if (message.dispatch)
            Dispatch.internalBinaryWrite(message.dispatch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateDispatchRequest
 */
export const CreateDispatchRequest = new CreateDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDispatchResponse$Type extends MessageType<CreateDispatchResponse> {
    constructor() {
        super("services.centrum.CreateDispatchResponse", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch }
        ]);
    }
    create(value?: PartialMessage<CreateDispatchResponse>): CreateDispatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateDispatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDispatchResponse): CreateDispatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Dispatch dispatch */ 1:
                    message.dispatch = Dispatch.internalBinaryRead(reader, reader.uint32(), options, message.dispatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDispatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Dispatch dispatch = 1; */
        if (message.dispatch)
            Dispatch.internalBinaryWrite(message.dispatch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.CreateDispatchResponse
 */
export const CreateDispatchResponse = new CreateDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDispatchRequest$Type extends MessageType<UpdateDispatchRequest> {
    constructor() {
        super("services.centrum.UpdateDispatchRequest", [
            { no: 1, name: "dispatch", kind: "message", T: () => Dispatch, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateDispatchRequest>): UpdateDispatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDispatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDispatchRequest): UpdateDispatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Dispatch dispatch */ 1:
                    message.dispatch = Dispatch.internalBinaryRead(reader, reader.uint32(), options, message.dispatch);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDispatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Dispatch dispatch = 1; */
        if (message.dispatch)
            Dispatch.internalBinaryWrite(message.dispatch, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateDispatchRequest
 */
export const UpdateDispatchRequest = new UpdateDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDispatchResponse$Type extends MessageType<UpdateDispatchResponse> {
    constructor() {
        super("services.centrum.UpdateDispatchResponse", []);
    }
    create(value?: PartialMessage<UpdateDispatchResponse>): UpdateDispatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDispatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDispatchResponse): UpdateDispatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDispatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateDispatchResponse
 */
export const UpdateDispatchResponse = new UpdateDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDispatchRequest$Type extends MessageType<DeleteDispatchRequest> {
    constructor() {
        super("services.centrum.DeleteDispatchRequest", [
            { no: 1, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { uint64: { gt: "0" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteDispatchRequest>): DeleteDispatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteDispatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDispatchRequest): DeleteDispatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 1:
                    message.id = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDispatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DeleteDispatchRequest
 */
export const DeleteDispatchRequest = new DeleteDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDispatchResponse$Type extends MessageType<DeleteDispatchResponse> {
    constructor() {
        super("services.centrum.DeleteDispatchResponse", []);
    }
    create(value?: PartialMessage<DeleteDispatchResponse>): DeleteDispatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteDispatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDispatchResponse): DeleteDispatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDispatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.DeleteDispatchResponse
 */
export const DeleteDispatchResponse = new DeleteDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDispatchStatusRequest$Type extends MessageType<UpdateDispatchStatusRequest> {
    constructor() {
        super("services.centrum.UpdateDispatchStatusRequest", [
            { no: 1, name: "dispatch_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "status", kind: "enum", T: () => ["resources.centrum.StatusDispatch", StatusDispatch, "STATUS_DISPATCH_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } },
            { no: 4, name: "code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDispatchStatusRequest>): UpdateDispatchStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dispatchId = 0;
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateDispatchStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDispatchStatusRequest): UpdateDispatchStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 dispatch_id */ 1:
                    message.dispatchId = reader.uint64().toNumber();
                    break;
                case /* resources.centrum.StatusDispatch status */ 2:
                    message.status = reader.int32();
                    break;
                case /* optional string reason */ 3:
                    message.reason = reader.string();
                    break;
                case /* optional string code */ 4:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDispatchStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 dispatch_id = 1; */
        if (message.dispatchId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.dispatchId);
        /* resources.centrum.StatusDispatch status = 2; */
        if (message.status !== 0)
            writer.tag(2, WireType.Varint).int32(message.status);
        /* optional string reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        /* optional string code = 4; */
        if (message.code !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateDispatchStatusRequest
 */
export const UpdateDispatchStatusRequest = new UpdateDispatchStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDispatchStatusResponse$Type extends MessageType<UpdateDispatchStatusResponse> {
    constructor() {
        super("services.centrum.UpdateDispatchStatusResponse", []);
    }
    create(value?: PartialMessage<UpdateDispatchStatusResponse>): UpdateDispatchStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateDispatchStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDispatchStatusResponse): UpdateDispatchStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDispatchStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.UpdateDispatchStatusResponse
 */
export const UpdateDispatchStatusResponse = new UpdateDispatchStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignDispatchRequest$Type extends MessageType<AssignDispatchRequest> {
    constructor() {
        super("services.centrum.AssignDispatchRequest", [
            { no: 1, name: "dispatch_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "to_add", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "to_remove", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "forced", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AssignDispatchRequest>): AssignDispatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dispatchId = 0;
        message.toAdd = [];
        message.toRemove = [];
        if (value !== undefined)
            reflectionMergePartial<AssignDispatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignDispatchRequest): AssignDispatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 dispatch_id */ 1:
                    message.dispatchId = reader.uint64().toNumber();
                    break;
                case /* repeated uint64 to_add */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.toAdd.push(reader.uint64().toNumber());
                    else
                        message.toAdd.push(reader.uint64().toNumber());
                    break;
                case /* repeated uint64 to_remove */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.toRemove.push(reader.uint64().toNumber());
                    else
                        message.toRemove.push(reader.uint64().toNumber());
                    break;
                case /* optional bool forced */ 4:
                    message.forced = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignDispatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 dispatch_id = 1; */
        if (message.dispatchId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.dispatchId);
        /* repeated uint64 to_add = 2; */
        if (message.toAdd.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.toAdd.length; i++)
                writer.uint64(message.toAdd[i]);
            writer.join();
        }
        /* repeated uint64 to_remove = 3; */
        if (message.toRemove.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.toRemove.length; i++)
                writer.uint64(message.toRemove[i]);
            writer.join();
        }
        /* optional bool forced = 4; */
        if (message.forced !== undefined)
            writer.tag(4, WireType.Varint).bool(message.forced);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.AssignDispatchRequest
 */
export const AssignDispatchRequest = new AssignDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AssignDispatchResponse$Type extends MessageType<AssignDispatchResponse> {
    constructor() {
        super("services.centrum.AssignDispatchResponse", []);
    }
    create(value?: PartialMessage<AssignDispatchResponse>): AssignDispatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AssignDispatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssignDispatchResponse): AssignDispatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AssignDispatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.AssignDispatchResponse
 */
export const AssignDispatchResponse = new AssignDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDispatchActivityResponse$Type extends MessageType<ListDispatchActivityResponse> {
    constructor() {
        super("services.centrum.ListDispatchActivityResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "activity", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DispatchStatus }
        ]);
    }
    create(value?: PartialMessage<ListDispatchActivityResponse>): ListDispatchActivityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.activity = [];
        if (value !== undefined)
            reflectionMergePartial<ListDispatchActivityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDispatchActivityResponse): ListDispatchActivityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.centrum.DispatchStatus activity */ 2:
                    message.activity.push(DispatchStatus.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDispatchActivityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.centrum.DispatchStatus activity = 2; */
        for (let i = 0; i < message.activity.length; i++)
            DispatchStatus.internalBinaryWrite(message.activity[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.ListDispatchActivityResponse
 */
export const ListDispatchActivityResponse = new ListDispatchActivityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinUnitRequest$Type extends MessageType<JoinUnitRequest> {
    constructor() {
        super("services.centrum.JoinUnitRequest", [
            { no: 1, name: "unit_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<JoinUnitRequest>): JoinUnitRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<JoinUnitRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinUnitRequest): JoinUnitRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 unit_id */ 1:
                    message.unitId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinUnitRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 unit_id = 1; */
        if (message.unitId !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.unitId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.JoinUnitRequest
 */
export const JoinUnitRequest = new JoinUnitRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinUnitResponse$Type extends MessageType<JoinUnitResponse> {
    constructor() {
        super("services.centrum.JoinUnitResponse", [
            { no: 1, name: "unit", kind: "message", T: () => Unit }
        ]);
    }
    create(value?: PartialMessage<JoinUnitResponse>): JoinUnitResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<JoinUnitResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinUnitResponse): JoinUnitResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.centrum.Unit unit */ 1:
                    message.unit = Unit.internalBinaryRead(reader, reader.uint32(), options, message.unit);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinUnitResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.centrum.Unit unit = 1; */
        if (message.unit)
            Unit.internalBinaryWrite(message.unit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.JoinUnitResponse
 */
export const JoinUnitResponse = new JoinUnitResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDispatchRequest$Type extends MessageType<TakeDispatchRequest> {
    constructor() {
        super("services.centrum.TakeDispatchRequest", [
            { no: 1, name: "dispatch_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "validate.rules": { repeated: { minItems: "1" } } } },
            { no: 2, name: "resp", kind: "enum", T: () => ["resources.centrum.TakeDispatchResp", TakeDispatchResp, "TAKE_DISPATCH_RESP_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 3, name: "reason", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "255" } } } }
        ]);
    }
    create(value?: PartialMessage<TakeDispatchRequest>): TakeDispatchRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dispatchIds = [];
        message.resp = 0;
        if (value !== undefined)
            reflectionMergePartial<TakeDispatchRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeDispatchRequest): TakeDispatchRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 dispatch_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.dispatchIds.push(reader.uint64().toNumber());
                    else
                        message.dispatchIds.push(reader.uint64().toNumber());
                    break;
                case /* resources.centrum.TakeDispatchResp resp */ 2:
                    message.resp = reader.int32();
                    break;
                case /* optional string reason */ 3:
                    message.reason = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeDispatchRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 dispatch_ids = 1; */
        if (message.dispatchIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.dispatchIds.length; i++)
                writer.uint64(message.dispatchIds[i]);
            writer.join();
        }
        /* resources.centrum.TakeDispatchResp resp = 2; */
        if (message.resp !== 0)
            writer.tag(2, WireType.Varint).int32(message.resp);
        /* optional string reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.TakeDispatchRequest
 */
export const TakeDispatchRequest = new TakeDispatchRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDispatchResponse$Type extends MessageType<TakeDispatchResponse> {
    constructor() {
        super("services.centrum.TakeDispatchResponse", []);
    }
    create(value?: PartialMessage<TakeDispatchResponse>): TakeDispatchResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakeDispatchResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeDispatchResponse): TakeDispatchResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeDispatchResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.TakeDispatchResponse
 */
export const TakeDispatchResponse = new TakeDispatchResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LatestState$Type extends MessageType<LatestState> {
    constructor() {
        super("services.centrum.LatestState", [
            { no: 1, name: "server_time", kind: "message", T: () => Timestamp },
            { no: 2, name: "settings", kind: "message", T: () => Settings },
            { no: 3, name: "disponents", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Colleague },
            { no: 4, name: "own_unit_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 5, name: "units", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Unit },
            { no: 6, name: "dispatches", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Dispatch }
        ]);
    }
    create(value?: PartialMessage<LatestState>): LatestState {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.disponents = [];
        message.units = [];
        message.dispatches = [];
        if (value !== undefined)
            reflectionMergePartial<LatestState>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LatestState): LatestState {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.timestamp.Timestamp server_time */ 1:
                    message.serverTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.serverTime);
                    break;
                case /* resources.centrum.Settings settings */ 2:
                    message.settings = Settings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                case /* repeated resources.jobs.Colleague disponents */ 3:
                    message.disponents.push(Colleague.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 own_unit_id */ 4:
                    message.ownUnitId = reader.uint64().toNumber();
                    break;
                case /* repeated resources.centrum.Unit units */ 5:
                    message.units.push(Unit.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.centrum.Dispatch dispatches */ 6:
                    message.dispatches.push(Dispatch.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LatestState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.timestamp.Timestamp server_time = 1; */
        if (message.serverTime)
            Timestamp.internalBinaryWrite(message.serverTime, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Settings settings = 2; */
        if (message.settings)
            Settings.internalBinaryWrite(message.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.jobs.Colleague disponents = 3; */
        for (let i = 0; i < message.disponents.length; i++)
            Colleague.internalBinaryWrite(message.disponents[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 own_unit_id = 4; */
        if (message.ownUnitId !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.ownUnitId);
        /* repeated resources.centrum.Unit units = 5; */
        for (let i = 0; i < message.units.length; i++)
            Unit.internalBinaryWrite(message.units[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.centrum.Dispatch dispatches = 6; */
        for (let i = 0; i < message.dispatches.length; i++)
            Dispatch.internalBinaryWrite(message.dispatches[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.LatestState
 */
export const LatestState = new LatestState$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRequest$Type extends MessageType<StreamRequest> {
    constructor() {
        super("services.centrum.StreamRequest", []);
    }
    create(value?: PartialMessage<StreamRequest>): StreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<StreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRequest): StreamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.StreamRequest
 */
export const StreamRequest = new StreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamResponse$Type extends MessageType<StreamResponse> {
    constructor() {
        super("services.centrum.StreamResponse", [
            { no: 1, name: "latest_state", kind: "message", oneof: "change", T: () => LatestState },
            { no: 2, name: "settings", kind: "message", oneof: "change", T: () => Settings },
            { no: 3, name: "disponents", kind: "message", oneof: "change", T: () => Disponents },
            { no: 4, name: "unit_created", kind: "message", oneof: "change", T: () => Unit },
            { no: 5, name: "unit_deleted", kind: "message", oneof: "change", T: () => Unit },
            { no: 6, name: "unit_updated", kind: "message", oneof: "change", T: () => Unit },
            { no: 7, name: "unit_status", kind: "message", oneof: "change", T: () => UnitStatus },
            { no: 8, name: "dispatch_created", kind: "message", oneof: "change", T: () => Dispatch },
            { no: 9, name: "dispatch_deleted", kind: "message", oneof: "change", T: () => Dispatch },
            { no: 10, name: "dispatch_updated", kind: "message", oneof: "change", T: () => Dispatch },
            { no: 11, name: "dispatch_status", kind: "message", oneof: "change", T: () => DispatchStatus }
        ]);
    }
    create(value?: PartialMessage<StreamResponse>): StreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.change = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamResponse): StreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* services.centrum.LatestState latest_state */ 1:
                    message.change = {
                        oneofKind: "latestState",
                        latestState: LatestState.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).latestState)
                    };
                    break;
                case /* resources.centrum.Settings settings */ 2:
                    message.change = {
                        oneofKind: "settings",
                        settings: Settings.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).settings)
                    };
                    break;
                case /* resources.centrum.Disponents disponents */ 3:
                    message.change = {
                        oneofKind: "disponents",
                        disponents: Disponents.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).disponents)
                    };
                    break;
                case /* resources.centrum.Unit unit_created */ 4:
                    message.change = {
                        oneofKind: "unitCreated",
                        unitCreated: Unit.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).unitCreated)
                    };
                    break;
                case /* resources.centrum.Unit unit_deleted */ 5:
                    message.change = {
                        oneofKind: "unitDeleted",
                        unitDeleted: Unit.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).unitDeleted)
                    };
                    break;
                case /* resources.centrum.Unit unit_updated */ 6:
                    message.change = {
                        oneofKind: "unitUpdated",
                        unitUpdated: Unit.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).unitUpdated)
                    };
                    break;
                case /* resources.centrum.UnitStatus unit_status */ 7:
                    message.change = {
                        oneofKind: "unitStatus",
                        unitStatus: UnitStatus.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).unitStatus)
                    };
                    break;
                case /* resources.centrum.Dispatch dispatch_created */ 8:
                    message.change = {
                        oneofKind: "dispatchCreated",
                        dispatchCreated: Dispatch.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).dispatchCreated)
                    };
                    break;
                case /* resources.centrum.Dispatch dispatch_deleted */ 9:
                    message.change = {
                        oneofKind: "dispatchDeleted",
                        dispatchDeleted: Dispatch.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).dispatchDeleted)
                    };
                    break;
                case /* resources.centrum.Dispatch dispatch_updated */ 10:
                    message.change = {
                        oneofKind: "dispatchUpdated",
                        dispatchUpdated: Dispatch.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).dispatchUpdated)
                    };
                    break;
                case /* resources.centrum.DispatchStatus dispatch_status */ 11:
                    message.change = {
                        oneofKind: "dispatchStatus",
                        dispatchStatus: DispatchStatus.internalBinaryRead(reader, reader.uint32(), options, (message.change as any).dispatchStatus)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* services.centrum.LatestState latest_state = 1; */
        if (message.change.oneofKind === "latestState")
            LatestState.internalBinaryWrite(message.change.latestState, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Settings settings = 2; */
        if (message.change.oneofKind === "settings")
            Settings.internalBinaryWrite(message.change.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Disponents disponents = 3; */
        if (message.change.oneofKind === "disponents")
            Disponents.internalBinaryWrite(message.change.disponents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Unit unit_created = 4; */
        if (message.change.oneofKind === "unitCreated")
            Unit.internalBinaryWrite(message.change.unitCreated, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Unit unit_deleted = 5; */
        if (message.change.oneofKind === "unitDeleted")
            Unit.internalBinaryWrite(message.change.unitDeleted, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Unit unit_updated = 6; */
        if (message.change.oneofKind === "unitUpdated")
            Unit.internalBinaryWrite(message.change.unitUpdated, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.UnitStatus unit_status = 7; */
        if (message.change.oneofKind === "unitStatus")
            UnitStatus.internalBinaryWrite(message.change.unitStatus, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Dispatch dispatch_created = 8; */
        if (message.change.oneofKind === "dispatchCreated")
            Dispatch.internalBinaryWrite(message.change.dispatchCreated, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Dispatch dispatch_deleted = 9; */
        if (message.change.oneofKind === "dispatchDeleted")
            Dispatch.internalBinaryWrite(message.change.dispatchDeleted, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.Dispatch dispatch_updated = 10; */
        if (message.change.oneofKind === "dispatchUpdated")
            Dispatch.internalBinaryWrite(message.change.dispatchUpdated, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* resources.centrum.DispatchStatus dispatch_status = 11; */
        if (message.change.oneofKind === "dispatchStatus")
            DispatchStatus.internalBinaryWrite(message.change.dispatchStatus, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.centrum.StreamResponse
 */
export const StreamResponse = new StreamResponse$Type();
/**
 * @generated ServiceType for protobuf service services.centrum.CentrumService
 */
export const CentrumService = new ServiceType("services.centrum.CentrumService", [
    { name: "UpdateSettings", options: {}, I: UpdateSettingsRequest, O: UpdateSettingsResponse },
    { name: "CreateDispatch", options: {}, I: CreateDispatchRequest, O: CreateDispatchResponse },
    { name: "UpdateDispatch", options: {}, I: UpdateDispatchRequest, O: UpdateDispatchResponse },
    { name: "DeleteDispatch", options: {}, I: DeleteDispatchRequest, O: DeleteDispatchResponse },
    { name: "TakeControl", options: {}, I: TakeControlRequest, O: TakeControlResponse },
    { name: "AssignDispatch", options: {}, I: AssignDispatchRequest, O: AssignDispatchResponse },
    { name: "AssignUnit", options: {}, I: AssignUnitRequest, O: AssignUnitResponse },
    { name: "Stream", serverStreaming: true, options: {}, I: StreamRequest, O: StreamResponse },
    { name: "GetSettings", options: {}, I: GetSettingsRequest, O: GetSettingsResponse },
    { name: "JoinUnit", options: {}, I: JoinUnitRequest, O: JoinUnitResponse },
    { name: "ListUnits", options: {}, I: ListUnitsRequest, O: ListUnitsResponse },
    { name: "ListUnitActivity", options: {}, I: ListUnitActivityRequest, O: ListUnitActivityResponse },
    { name: "GetDispatch", options: {}, I: GetDispatchRequest, O: GetDispatchResponse },
    { name: "ListDispatches", options: {}, I: ListDispatchesRequest, O: ListDispatchesResponse },
    { name: "ListDispatchActivity", options: {}, I: ListDispatchActivityRequest, O: ListDispatchActivityResponse },
    { name: "CreateOrUpdateUnit", options: {}, I: CreateOrUpdateUnitRequest, O: CreateOrUpdateUnitResponse },
    { name: "DeleteUnit", options: {}, I: DeleteUnitRequest, O: DeleteUnitResponse },
    { name: "TakeDispatch", options: {}, I: TakeDispatchRequest, O: TakeDispatchResponse },
    { name: "UpdateUnitStatus", options: {}, I: UpdateUnitStatusRequest, O: UpdateUnitStatusResponse },
    { name: "UpdateDispatchStatus", options: {}, I: UpdateDispatchStatusRequest, O: UpdateDispatchStatusResponse }
]);
