// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/livemapper/livemap.proto" (package "services.livemapper", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { LivemapperService } from "./livemap";
import type { DeleteMarkerResponse } from "./livemap";
import type { DeleteMarkerRequest } from "./livemap";
import type { CreateOrUpdateMarkerResponse } from "./livemap";
import type { CreateOrUpdateMarkerRequest } from "./livemap";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamResponse } from "./livemap";
import type { StreamRequest } from "./livemap";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.livemapper.LivemapperService
 */
export interface ILivemapperServiceClient {
    /**
     * @perm: Attrs=Markers/JobList|Players/JobGradeList
     *
     * @generated from protobuf rpc: Stream(services.livemapper.StreamRequest) returns (stream services.livemapper.StreamResponse);
     */
    stream(input: StreamRequest, options?: RpcOptions): ServerStreamingCall<StreamRequest, StreamResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: CreateOrUpdateMarker(services.livemapper.CreateOrUpdateMarkerRequest) returns (services.livemapper.CreateOrUpdateMarkerResponse);
     */
    createOrUpdateMarker(input: CreateOrUpdateMarkerRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateMarkerRequest, CreateOrUpdateMarkerResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteMarker(services.livemapper.DeleteMarkerRequest) returns (services.livemapper.DeleteMarkerResponse);
     */
    deleteMarker(input: DeleteMarkerRequest, options?: RpcOptions): UnaryCall<DeleteMarkerRequest, DeleteMarkerResponse>;
}
/**
 * @generated from protobuf service services.livemapper.LivemapperService
 */
export class LivemapperServiceClient implements ILivemapperServiceClient, ServiceInfo {
    typeName = LivemapperService.typeName;
    methods = LivemapperService.methods;
    options = LivemapperService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Attrs=Markers/JobList|Players/JobGradeList
     *
     * @generated from protobuf rpc: Stream(services.livemapper.StreamRequest) returns (stream services.livemapper.StreamResponse);
     */
    stream(input: StreamRequest, options?: RpcOptions): ServerStreamingCall<StreamRequest, StreamResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamRequest, StreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: CreateOrUpdateMarker(services.livemapper.CreateOrUpdateMarkerRequest) returns (services.livemapper.CreateOrUpdateMarkerResponse);
     */
    createOrUpdateMarker(input: CreateOrUpdateMarkerRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateMarkerRequest, CreateOrUpdateMarkerResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateMarkerRequest, CreateOrUpdateMarkerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteMarker(services.livemapper.DeleteMarkerRequest) returns (services.livemapper.DeleteMarkerResponse);
     */
    deleteMarker(input: DeleteMarkerRequest, options?: RpcOptions): UnaryCall<DeleteMarkerRequest, DeleteMarkerResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteMarkerRequest, DeleteMarkerResponse>("unary", this._transport, method, opt, input);
    }
}
