// @generated by protobuf-ts 2.9.5 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/auth/auth.proto" (package "services.auth", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AuthService } from "./auth";
import type { SetSuperUserModeResponse } from "./auth";
import type { SetSuperUserModeRequest } from "./auth";
import type { DeleteOAuth2ConnectionResponse } from "./auth";
import type { DeleteOAuth2ConnectionRequest } from "./auth";
import type { GetAccountInfoResponse } from "./auth";
import type { GetAccountInfoRequest } from "./auth";
import type { ChooseCharacterResponse } from "./auth";
import type { ChooseCharacterRequest } from "./auth";
import type { GetCharactersResponse } from "./auth";
import type { GetCharactersRequest } from "./auth";
import type { ForgotPasswordResponse } from "./auth";
import type { ForgotPasswordRequest } from "./auth";
import type { ChangePasswordResponse } from "./auth";
import type { ChangePasswordRequest } from "./auth";
import type { ChangeUsernameResponse } from "./auth";
import type { ChangeUsernameRequest } from "./auth";
import type { CreateAccountResponse } from "./auth";
import type { CreateAccountRequest } from "./auth";
import type { LogoutResponse } from "./auth";
import type { LogoutRequest } from "./auth";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { LoginResponse } from "./auth";
import type { LoginRequest } from "./auth";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Auth Service handles user authentication, character selection and oauth2 connections
 * Some methods **must** be caled via HTTP-based GRPC web request to allow cookies to be set/unset.
 *
 * @generated from protobuf service services.auth.AuthService
 */
export interface IAuthServiceClient {
    /**
     * @generated from protobuf rpc: Login(services.auth.LoginRequest) returns (services.auth.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: Logout(services.auth.LogoutRequest) returns (services.auth.LogoutResponse);
     */
    logout(input: LogoutRequest, options?: RpcOptions): UnaryCall<LogoutRequest, LogoutResponse>;
    /**
     * @generated from protobuf rpc: CreateAccount(services.auth.CreateAccountRequest) returns (services.auth.CreateAccountResponse);
     */
    createAccount(input: CreateAccountRequest, options?: RpcOptions): UnaryCall<CreateAccountRequest, CreateAccountResponse>;
    /**
     * @generated from protobuf rpc: ChangeUsername(services.auth.ChangeUsernameRequest) returns (services.auth.ChangeUsernameResponse);
     */
    changeUsername(input: ChangeUsernameRequest, options?: RpcOptions): UnaryCall<ChangeUsernameRequest, ChangeUsernameResponse>;
    /**
     * @generated from protobuf rpc: ChangePassword(services.auth.ChangePasswordRequest) returns (services.auth.ChangePasswordResponse);
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, ChangePasswordResponse>;
    /**
     * @generated from protobuf rpc: ForgotPassword(services.auth.ForgotPasswordRequest) returns (services.auth.ForgotPasswordResponse);
     */
    forgotPassword(input: ForgotPasswordRequest, options?: RpcOptions): UnaryCall<ForgotPasswordRequest, ForgotPasswordResponse>;
    /**
     * @generated from protobuf rpc: GetCharacters(services.auth.GetCharactersRequest) returns (services.auth.GetCharactersResponse);
     */
    getCharacters(input: GetCharactersRequest, options?: RpcOptions): UnaryCall<GetCharactersRequest, GetCharactersResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ChooseCharacter(services.auth.ChooseCharacterRequest) returns (services.auth.ChooseCharacterResponse);
     */
    chooseCharacter(input: ChooseCharacterRequest, options?: RpcOptions): UnaryCall<ChooseCharacterRequest, ChooseCharacterResponse>;
    /**
     * @generated from protobuf rpc: GetAccountInfo(services.auth.GetAccountInfoRequest) returns (services.auth.GetAccountInfoResponse);
     */
    getAccountInfo(input: GetAccountInfoRequest, options?: RpcOptions): UnaryCall<GetAccountInfoRequest, GetAccountInfoResponse>;
    /**
     * @generated from protobuf rpc: DeleteOAuth2Connection(services.auth.DeleteOAuth2ConnectionRequest) returns (services.auth.DeleteOAuth2ConnectionResponse);
     */
    deleteOAuth2Connection(input: DeleteOAuth2ConnectionRequest, options?: RpcOptions): UnaryCall<DeleteOAuth2ConnectionRequest, DeleteOAuth2ConnectionResponse>;
    /**
     * @generated from protobuf rpc: SetSuperUserMode(services.auth.SetSuperUserModeRequest) returns (services.auth.SetSuperUserModeResponse);
     */
    setSuperUserMode(input: SetSuperUserModeRequest, options?: RpcOptions): UnaryCall<SetSuperUserModeRequest, SetSuperUserModeResponse>;
}
/**
 * Auth Service handles user authentication, character selection and oauth2 connections
 * Some methods **must** be caled via HTTP-based GRPC web request to allow cookies to be set/unset.
 *
 * @generated from protobuf service services.auth.AuthService
 */
export class AuthServiceClient implements IAuthServiceClient, ServiceInfo {
    typeName = AuthService.typeName;
    methods = AuthService.methods;
    options = AuthService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Login(services.auth.LoginRequest) returns (services.auth.LoginResponse);
     */
    login(input: LoginRequest, options?: RpcOptions): UnaryCall<LoginRequest, LoginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<LoginRequest, LoginResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Logout(services.auth.LogoutRequest) returns (services.auth.LogoutResponse);
     */
    logout(input: LogoutRequest, options?: RpcOptions): UnaryCall<LogoutRequest, LogoutResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<LogoutRequest, LogoutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateAccount(services.auth.CreateAccountRequest) returns (services.auth.CreateAccountResponse);
     */
    createAccount(input: CreateAccountRequest, options?: RpcOptions): UnaryCall<CreateAccountRequest, CreateAccountResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAccountRequest, CreateAccountResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangeUsername(services.auth.ChangeUsernameRequest) returns (services.auth.ChangeUsernameResponse);
     */
    changeUsername(input: ChangeUsernameRequest, options?: RpcOptions): UnaryCall<ChangeUsernameRequest, ChangeUsernameResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangeUsernameRequest, ChangeUsernameResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ChangePassword(services.auth.ChangePasswordRequest) returns (services.auth.ChangePasswordResponse);
     */
    changePassword(input: ChangePasswordRequest, options?: RpcOptions): UnaryCall<ChangePasswordRequest, ChangePasswordResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangePasswordRequest, ChangePasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ForgotPassword(services.auth.ForgotPasswordRequest) returns (services.auth.ForgotPasswordResponse);
     */
    forgotPassword(input: ForgotPasswordRequest, options?: RpcOptions): UnaryCall<ForgotPasswordRequest, ForgotPasswordResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ForgotPasswordRequest, ForgotPasswordResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetCharacters(services.auth.GetCharactersRequest) returns (services.auth.GetCharactersResponse);
     */
    getCharacters(input: GetCharactersRequest, options?: RpcOptions): UnaryCall<GetCharactersRequest, GetCharactersResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCharactersRequest, GetCharactersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ChooseCharacter(services.auth.ChooseCharacterRequest) returns (services.auth.ChooseCharacterResponse);
     */
    chooseCharacter(input: ChooseCharacterRequest, options?: RpcOptions): UnaryCall<ChooseCharacterRequest, ChooseCharacterResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChooseCharacterRequest, ChooseCharacterResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAccountInfo(services.auth.GetAccountInfoRequest) returns (services.auth.GetAccountInfoResponse);
     */
    getAccountInfo(input: GetAccountInfoRequest, options?: RpcOptions): UnaryCall<GetAccountInfoRequest, GetAccountInfoResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAccountInfoRequest, GetAccountInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteOAuth2Connection(services.auth.DeleteOAuth2ConnectionRequest) returns (services.auth.DeleteOAuth2ConnectionResponse);
     */
    deleteOAuth2Connection(input: DeleteOAuth2ConnectionRequest, options?: RpcOptions): UnaryCall<DeleteOAuth2ConnectionRequest, DeleteOAuth2ConnectionResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteOAuth2ConnectionRequest, DeleteOAuth2ConnectionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SetSuperUserMode(services.auth.SetSuperUserModeRequest) returns (services.auth.SetSuperUserModeResponse);
     */
    setSuperUserMode(input: SetSuperUserModeRequest, options?: RpcOptions): UnaryCall<SetSuperUserModeRequest, SetSuperUserModeResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetSuperUserModeRequest, SetSuperUserModeResponse>("unary", this._transport, method, opt, input);
    }
}
