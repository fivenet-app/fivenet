// @generated by protobuf-ts 2.9.6 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/docstore/docstore.proto" (package "services.docstore", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DocStoreService } from "./docstore";
import type { SetDocumentReminderResponse } from "./docstore";
import type { SetDocumentReminderRequest } from "./docstore";
import type { ToggleDocumentPinResponse } from "./docstore";
import type { ToggleDocumentPinRequest } from "./docstore";
import type { ListDocumentPinsResponse } from "./docstore";
import type { ListDocumentPinsRequest } from "./docstore";
import type { DeleteCategoryResponse } from "./docstore";
import type { DeleteCategoryRequest } from "./docstore";
import type { UpdateCategoryResponse } from "./docstore";
import type { UpdateCategoryRequest } from "./docstore";
import type { CreateCategoryResponse } from "./docstore";
import type { CreateCategoryRequest } from "./docstore";
import type { ListCategoriesResponse } from "./docstore";
import type { ListCategoriesRequest } from "./docstore";
import type { ListUserDocumentsResponse } from "./docstore";
import type { ListUserDocumentsRequest } from "./docstore";
import type { DeleteDocumentReqResponse } from "./docstore";
import type { DeleteDocumentReqRequest } from "./docstore";
import type { UpdateDocumentReqResponse } from "./docstore";
import type { UpdateDocumentReqRequest } from "./docstore";
import type { CreateDocumentReqResponse } from "./docstore";
import type { CreateDocumentReqRequest } from "./docstore";
import type { ListDocumentReqsResponse } from "./docstore";
import type { ListDocumentReqsRequest } from "./docstore";
import type { ListDocumentActivityResponse } from "./docstore";
import type { ListDocumentActivityRequest } from "./docstore";
import type { SetDocumentAccessResponse } from "./docstore";
import type { SetDocumentAccessRequest } from "./docstore";
import type { GetDocumentAccessResponse } from "./docstore";
import type { GetDocumentAccessRequest } from "./docstore";
import type { DeleteCommentResponse } from "./docstore";
import type { DeleteCommentRequest } from "./docstore";
import type { EditCommentResponse } from "./docstore";
import type { EditCommentRequest } from "./docstore";
import type { PostCommentResponse } from "./docstore";
import type { PostCommentRequest } from "./docstore";
import type { GetCommentsResponse } from "./docstore";
import type { GetCommentsRequest } from "./docstore";
import type { RemoveDocumentRelationResponse } from "./docstore";
import type { RemoveDocumentRelationRequest } from "./docstore";
import type { AddDocumentRelationResponse } from "./docstore";
import type { AddDocumentRelationRequest } from "./docstore";
import type { RemoveDocumentReferenceResponse } from "./docstore";
import type { RemoveDocumentReferenceRequest } from "./docstore";
import type { AddDocumentReferenceResponse } from "./docstore";
import type { AddDocumentReferenceRequest } from "./docstore";
import type { GetDocumentRelationsResponse } from "./docstore";
import type { GetDocumentRelationsRequest } from "./docstore";
import type { GetDocumentReferencesResponse } from "./docstore";
import type { GetDocumentReferencesRequest } from "./docstore";
import type { ChangeDocumentOwnerResponse } from "./docstore";
import type { ChangeDocumentOwnerRequest } from "./docstore";
import type { ToggleDocumentResponse } from "./docstore";
import type { ToggleDocumentRequest } from "./docstore";
import type { DeleteDocumentResponse } from "./docstore";
import type { DeleteDocumentRequest } from "./docstore";
import type { UpdateDocumentResponse } from "./docstore";
import type { UpdateDocumentRequest } from "./docstore";
import type { CreateDocumentResponse } from "./docstore";
import type { CreateDocumentRequest } from "./docstore";
import type { GetDocumentResponse } from "./docstore";
import type { GetDocumentRequest } from "./docstore";
import type { ListDocumentsResponse } from "./docstore";
import type { ListDocumentsRequest } from "./docstore";
import type { DeleteTemplateResponse } from "./docstore";
import type { DeleteTemplateRequest } from "./docstore";
import type { UpdateTemplateResponse } from "./docstore";
import type { UpdateTemplateRequest } from "./docstore";
import type { CreateTemplateResponse } from "./docstore";
import type { CreateTemplateRequest } from "./docstore";
import type { GetTemplateResponse } from "./docstore";
import type { GetTemplateRequest } from "./docstore";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListTemplatesResponse } from "./docstore";
import type { ListTemplatesRequest } from "./docstore";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.docstore.DocStoreService
 */
export interface IDocStoreServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListTemplates(services.docstore.ListTemplatesRequest) returns (services.docstore.ListTemplatesResponse);
     */
    listTemplates(input: ListTemplatesRequest, options?: RpcOptions): UnaryCall<ListTemplatesRequest, ListTemplatesResponse>;
    /**
     * @perm: Name=ListTemplates
     *
     * @generated from protobuf rpc: GetTemplate(services.docstore.GetTemplateRequest) returns (services.docstore.GetTemplateResponse);
     */
    getTemplate(input: GetTemplateRequest, options?: RpcOptions): UnaryCall<GetTemplateRequest, GetTemplateResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateTemplate(services.docstore.CreateTemplateRequest) returns (services.docstore.CreateTemplateResponse);
     */
    createTemplate(input: CreateTemplateRequest, options?: RpcOptions): UnaryCall<CreateTemplateRequest, CreateTemplateResponse>;
    /**
     * @perm: Name=CreateTemplate
     *
     * @generated from protobuf rpc: UpdateTemplate(services.docstore.UpdateTemplateRequest) returns (services.docstore.UpdateTemplateResponse);
     */
    updateTemplate(input: UpdateTemplateRequest, options?: RpcOptions): UnaryCall<UpdateTemplateRequest, UpdateTemplateResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteTemplate(services.docstore.DeleteTemplateRequest) returns (services.docstore.DeleteTemplateResponse);
     */
    deleteTemplate(input: DeleteTemplateRequest, options?: RpcOptions): UnaryCall<DeleteTemplateRequest, DeleteTemplateResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocuments(services.docstore.ListDocumentsRequest) returns (services.docstore.ListDocumentsResponse);
     */
    listDocuments(input: ListDocumentsRequest, options?: RpcOptions): UnaryCall<ListDocumentsRequest, ListDocumentsResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocument(services.docstore.GetDocumentRequest) returns (services.docstore.GetDocumentResponse);
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateDocument(services.docstore.CreateDocumentRequest) returns (services.docstore.CreateDocumentResponse);
     */
    createDocument(input: CreateDocumentRequest, options?: RpcOptions): UnaryCall<CreateDocumentRequest, CreateDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: UpdateDocument(services.docstore.UpdateDocumentRequest) returns (services.docstore.UpdateDocumentResponse);
     */
    updateDocument(input: UpdateDocumentRequest, options?: RpcOptions): UnaryCall<UpdateDocumentRequest, UpdateDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteDocument(services.docstore.DeleteDocumentRequest) returns (services.docstore.DeleteDocumentResponse);
     */
    deleteDocument(input: DeleteDocumentRequest, options?: RpcOptions): UnaryCall<DeleteDocumentRequest, DeleteDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ToggleDocument(services.docstore.ToggleDocumentRequest) returns (services.docstore.ToggleDocumentResponse);
     */
    toggleDocument(input: ToggleDocumentRequest, options?: RpcOptions): UnaryCall<ToggleDocumentRequest, ToggleDocumentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ChangeDocumentOwner(services.docstore.ChangeDocumentOwnerRequest) returns (services.docstore.ChangeDocumentOwnerResponse);
     */
    changeDocumentOwner(input: ChangeDocumentOwnerRequest, options?: RpcOptions): UnaryCall<ChangeDocumentOwnerRequest, ChangeDocumentOwnerResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentReferences(services.docstore.GetDocumentReferencesRequest) returns (services.docstore.GetDocumentReferencesResponse);
     */
    getDocumentReferences(input: GetDocumentReferencesRequest, options?: RpcOptions): UnaryCall<GetDocumentReferencesRequest, GetDocumentReferencesResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentRelations(services.docstore.GetDocumentRelationsRequest) returns (services.docstore.GetDocumentRelationsResponse);
     */
    getDocumentRelations(input: GetDocumentRelationsRequest, options?: RpcOptions): UnaryCall<GetDocumentRelationsRequest, GetDocumentRelationsResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentReference(services.docstore.AddDocumentReferenceRequest) returns (services.docstore.AddDocumentReferenceResponse);
     */
    addDocumentReference(input: AddDocumentReferenceRequest, options?: RpcOptions): UnaryCall<AddDocumentReferenceRequest, AddDocumentReferenceResponse>;
    /**
     * @perm: Name=AddDocumentReference
     *
     * @generated from protobuf rpc: RemoveDocumentReference(services.docstore.RemoveDocumentReferenceRequest) returns (services.docstore.RemoveDocumentReferenceResponse);
     */
    removeDocumentReference(input: RemoveDocumentReferenceRequest, options?: RpcOptions): UnaryCall<RemoveDocumentReferenceRequest, RemoveDocumentReferenceResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentRelation(services.docstore.AddDocumentRelationRequest) returns (services.docstore.AddDocumentRelationResponse);
     */
    addDocumentRelation(input: AddDocumentRelationRequest, options?: RpcOptions): UnaryCall<AddDocumentRelationRequest, AddDocumentRelationResponse>;
    /**
     * @perm: Name=AddDocumentRelation
     *
     * @generated from protobuf rpc: RemoveDocumentRelation(services.docstore.RemoveDocumentRelationRequest) returns (services.docstore.RemoveDocumentRelationResponse);
     */
    removeDocumentRelation(input: RemoveDocumentRelationRequest, options?: RpcOptions): UnaryCall<RemoveDocumentRelationRequest, RemoveDocumentRelationResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetComments(services.docstore.GetCommentsRequest) returns (services.docstore.GetCommentsResponse);
     */
    getComments(input: GetCommentsRequest, options?: RpcOptions): UnaryCall<GetCommentsRequest, GetCommentsResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: PostComment(services.docstore.PostCommentRequest) returns (services.docstore.PostCommentResponse);
     */
    postComment(input: PostCommentRequest, options?: RpcOptions): UnaryCall<PostCommentRequest, PostCommentResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: EditComment(services.docstore.EditCommentRequest) returns (services.docstore.EditCommentResponse);
     */
    editComment(input: EditCommentRequest, options?: RpcOptions): UnaryCall<EditCommentRequest, EditCommentResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteComment(services.docstore.DeleteCommentRequest) returns (services.docstore.DeleteCommentResponse);
     */
    deleteComment(input: DeleteCommentRequest, options?: RpcOptions): UnaryCall<DeleteCommentRequest, DeleteCommentResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentAccess(services.docstore.GetDocumentAccessRequest) returns (services.docstore.GetDocumentAccessResponse);
     */
    getDocumentAccess(input: GetDocumentAccessRequest, options?: RpcOptions): UnaryCall<GetDocumentAccessRequest, GetDocumentAccessResponse>;
    /**
     * @perm: Name=CreateDocument
     *
     * @generated from protobuf rpc: SetDocumentAccess(services.docstore.SetDocumentAccessRequest) returns (services.docstore.SetDocumentAccessResponse);
     */
    setDocumentAccess(input: SetDocumentAccessRequest, options?: RpcOptions): UnaryCall<SetDocumentAccessRequest, SetDocumentAccessResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentActivity(services.docstore.ListDocumentActivityRequest) returns (services.docstore.ListDocumentActivityResponse);
     */
    listDocumentActivity(input: ListDocumentActivityRequest, options?: RpcOptions): UnaryCall<ListDocumentActivityRequest, ListDocumentActivityResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentReqs(services.docstore.ListDocumentReqsRequest) returns (services.docstore.ListDocumentReqsResponse);
     */
    listDocumentReqs(input: ListDocumentReqsRequest, options?: RpcOptions): UnaryCall<ListDocumentReqsRequest, ListDocumentReqsResponse>;
    /**
     * @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
     *
     * @generated from protobuf rpc: CreateDocumentReq(services.docstore.CreateDocumentReqRequest) returns (services.docstore.CreateDocumentReqResponse);
     */
    createDocumentReq(input: CreateDocumentReqRequest, options?: RpcOptions): UnaryCall<CreateDocumentReqRequest, CreateDocumentReqResponse>;
    /**
     * @perm: Name=CreateDocumentReq
     *
     * @generated from protobuf rpc: UpdateDocumentReq(services.docstore.UpdateDocumentReqRequest) returns (services.docstore.UpdateDocumentReqResponse);
     */
    updateDocumentReq(input: UpdateDocumentReqRequest, options?: RpcOptions): UnaryCall<UpdateDocumentReqRequest, UpdateDocumentReqResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteDocumentReq(services.docstore.DeleteDocumentReqRequest) returns (services.docstore.DeleteDocumentReqResponse);
     */
    deleteDocumentReq(input: DeleteDocumentReqRequest, options?: RpcOptions): UnaryCall<DeleteDocumentReqRequest, DeleteDocumentReqResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListUserDocuments(services.docstore.ListUserDocumentsRequest) returns (services.docstore.ListUserDocumentsResponse);
     */
    listUserDocuments(input: ListUserDocumentsRequest, options?: RpcOptions): UnaryCall<ListUserDocumentsRequest, ListUserDocumentsResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListCategories(services.docstore.ListCategoriesRequest) returns (services.docstore.ListCategoriesResponse);
     */
    listCategories(input: ListCategoriesRequest, options?: RpcOptions): UnaryCall<ListCategoriesRequest, ListCategoriesResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateCategory(services.docstore.CreateCategoryRequest) returns (services.docstore.CreateCategoryResponse);
     */
    createCategory(input: CreateCategoryRequest, options?: RpcOptions): UnaryCall<CreateCategoryRequest, CreateCategoryResponse>;
    /**
     * @perm: Name=CreateCategory
     *
     * @generated from protobuf rpc: UpdateCategory(services.docstore.UpdateCategoryRequest) returns (services.docstore.UpdateCategoryResponse);
     */
    updateCategory(input: UpdateCategoryRequest, options?: RpcOptions): UnaryCall<UpdateCategoryRequest, UpdateCategoryResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCategory(services.docstore.DeleteCategoryRequest) returns (services.docstore.DeleteCategoryResponse);
     */
    deleteCategory(input: DeleteCategoryRequest, options?: RpcOptions): UnaryCall<DeleteCategoryRequest, DeleteCategoryResponse>;
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: ListDocumentPins(services.docstore.ListDocumentPinsRequest) returns (services.docstore.ListDocumentPinsResponse);
     */
    listDocumentPins(input: ListDocumentPinsRequest, options?: RpcOptions): UnaryCall<ListDocumentPinsRequest, ListDocumentPinsResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: ToggleDocumentPin(services.docstore.ToggleDocumentPinRequest) returns (services.docstore.ToggleDocumentPinResponse);
     */
    toggleDocumentPin(input: ToggleDocumentPinRequest, options?: RpcOptions): UnaryCall<ToggleDocumentPinRequest, ToggleDocumentPinResponse>;
    /**
     * @perm
     *
     * @generated from protobuf rpc: SetDocumentReminder(services.docstore.SetDocumentReminderRequest) returns (services.docstore.SetDocumentReminderResponse);
     */
    setDocumentReminder(input: SetDocumentReminderRequest, options?: RpcOptions): UnaryCall<SetDocumentReminderRequest, SetDocumentReminderResponse>;
}
/**
 * @generated from protobuf service services.docstore.DocStoreService
 */
export class DocStoreServiceClient implements IDocStoreServiceClient, ServiceInfo {
    typeName = DocStoreService.typeName;
    methods = DocStoreService.methods;
    options = DocStoreService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListTemplates(services.docstore.ListTemplatesRequest) returns (services.docstore.ListTemplatesResponse);
     */
    listTemplates(input: ListTemplatesRequest, options?: RpcOptions): UnaryCall<ListTemplatesRequest, ListTemplatesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTemplatesRequest, ListTemplatesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListTemplates
     *
     * @generated from protobuf rpc: GetTemplate(services.docstore.GetTemplateRequest) returns (services.docstore.GetTemplateResponse);
     */
    getTemplate(input: GetTemplateRequest, options?: RpcOptions): UnaryCall<GetTemplateRequest, GetTemplateResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTemplateRequest, GetTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateTemplate(services.docstore.CreateTemplateRequest) returns (services.docstore.CreateTemplateResponse);
     */
    createTemplate(input: CreateTemplateRequest, options?: RpcOptions): UnaryCall<CreateTemplateRequest, CreateTemplateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTemplateRequest, CreateTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateTemplate
     *
     * @generated from protobuf rpc: UpdateTemplate(services.docstore.UpdateTemplateRequest) returns (services.docstore.UpdateTemplateResponse);
     */
    updateTemplate(input: UpdateTemplateRequest, options?: RpcOptions): UnaryCall<UpdateTemplateRequest, UpdateTemplateResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateTemplateRequest, UpdateTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteTemplate(services.docstore.DeleteTemplateRequest) returns (services.docstore.DeleteTemplateResponse);
     */
    deleteTemplate(input: DeleteTemplateRequest, options?: RpcOptions): UnaryCall<DeleteTemplateRequest, DeleteTemplateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteTemplateRequest, DeleteTemplateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocuments(services.docstore.ListDocumentsRequest) returns (services.docstore.ListDocumentsResponse);
     */
    listDocuments(input: ListDocumentsRequest, options?: RpcOptions): UnaryCall<ListDocumentsRequest, ListDocumentsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentsRequest, ListDocumentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocument(services.docstore.GetDocumentRequest) returns (services.docstore.GetDocumentResponse);
     */
    getDocument(input: GetDocumentRequest, options?: RpcOptions): UnaryCall<GetDocumentRequest, GetDocumentResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentRequest, GetDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateDocument(services.docstore.CreateDocumentRequest) returns (services.docstore.CreateDocumentResponse);
     */
    createDocument(input: CreateDocumentRequest, options?: RpcOptions): UnaryCall<CreateDocumentRequest, CreateDocumentResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateDocumentRequest, CreateDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: UpdateDocument(services.docstore.UpdateDocumentRequest) returns (services.docstore.UpdateDocumentResponse);
     */
    updateDocument(input: UpdateDocumentRequest, options?: RpcOptions): UnaryCall<UpdateDocumentRequest, UpdateDocumentResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDocumentRequest, UpdateDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteDocument(services.docstore.DeleteDocumentRequest) returns (services.docstore.DeleteDocumentResponse);
     */
    deleteDocument(input: DeleteDocumentRequest, options?: RpcOptions): UnaryCall<DeleteDocumentRequest, DeleteDocumentResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDocumentRequest, DeleteDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ToggleDocument(services.docstore.ToggleDocumentRequest) returns (services.docstore.ToggleDocumentResponse);
     */
    toggleDocument(input: ToggleDocumentRequest, options?: RpcOptions): UnaryCall<ToggleDocumentRequest, ToggleDocumentResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleDocumentRequest, ToggleDocumentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: ChangeDocumentOwner(services.docstore.ChangeDocumentOwnerRequest) returns (services.docstore.ChangeDocumentOwnerResponse);
     */
    changeDocumentOwner(input: ChangeDocumentOwnerRequest, options?: RpcOptions): UnaryCall<ChangeDocumentOwnerRequest, ChangeDocumentOwnerResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChangeDocumentOwnerRequest, ChangeDocumentOwnerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentReferences(services.docstore.GetDocumentReferencesRequest) returns (services.docstore.GetDocumentReferencesResponse);
     */
    getDocumentReferences(input: GetDocumentReferencesRequest, options?: RpcOptions): UnaryCall<GetDocumentReferencesRequest, GetDocumentReferencesResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentReferencesRequest, GetDocumentReferencesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentRelations(services.docstore.GetDocumentRelationsRequest) returns (services.docstore.GetDocumentRelationsResponse);
     */
    getDocumentRelations(input: GetDocumentRelationsRequest, options?: RpcOptions): UnaryCall<GetDocumentRelationsRequest, GetDocumentRelationsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentRelationsRequest, GetDocumentRelationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentReference(services.docstore.AddDocumentReferenceRequest) returns (services.docstore.AddDocumentReferenceResponse);
     */
    addDocumentReference(input: AddDocumentReferenceRequest, options?: RpcOptions): UnaryCall<AddDocumentReferenceRequest, AddDocumentReferenceResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddDocumentReferenceRequest, AddDocumentReferenceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=AddDocumentReference
     *
     * @generated from protobuf rpc: RemoveDocumentReference(services.docstore.RemoveDocumentReferenceRequest) returns (services.docstore.RemoveDocumentReferenceResponse);
     */
    removeDocumentReference(input: RemoveDocumentReferenceRequest, options?: RpcOptions): UnaryCall<RemoveDocumentReferenceRequest, RemoveDocumentReferenceResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveDocumentReferenceRequest, RemoveDocumentReferenceResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: AddDocumentRelation(services.docstore.AddDocumentRelationRequest) returns (services.docstore.AddDocumentRelationResponse);
     */
    addDocumentRelation(input: AddDocumentRelationRequest, options?: RpcOptions): UnaryCall<AddDocumentRelationRequest, AddDocumentRelationResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddDocumentRelationRequest, AddDocumentRelationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=AddDocumentRelation
     *
     * @generated from protobuf rpc: RemoveDocumentRelation(services.docstore.RemoveDocumentRelationRequest) returns (services.docstore.RemoveDocumentRelationResponse);
     */
    removeDocumentRelation(input: RemoveDocumentRelationRequest, options?: RpcOptions): UnaryCall<RemoveDocumentRelationRequest, RemoveDocumentRelationResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<RemoveDocumentRelationRequest, RemoveDocumentRelationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetComments(services.docstore.GetCommentsRequest) returns (services.docstore.GetCommentsResponse);
     */
    getComments(input: GetCommentsRequest, options?: RpcOptions): UnaryCall<GetCommentsRequest, GetCommentsResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCommentsRequest, GetCommentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: PostComment(services.docstore.PostCommentRequest) returns (services.docstore.PostCommentResponse);
     */
    postComment(input: PostCommentRequest, options?: RpcOptions): UnaryCall<PostCommentRequest, PostCommentResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<PostCommentRequest, PostCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: EditComment(services.docstore.EditCommentRequest) returns (services.docstore.EditCommentResponse);
     */
    editComment(input: EditCommentRequest, options?: RpcOptions): UnaryCall<EditCommentRequest, EditCommentResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<EditCommentRequest, EditCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteComment(services.docstore.DeleteCommentRequest) returns (services.docstore.DeleteCommentResponse);
     */
    deleteComment(input: DeleteCommentRequest, options?: RpcOptions): UnaryCall<DeleteCommentRequest, DeleteCommentResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCommentRequest, DeleteCommentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: GetDocumentAccess(services.docstore.GetDocumentAccessRequest) returns (services.docstore.GetDocumentAccessResponse);
     */
    getDocumentAccess(input: GetDocumentAccessRequest, options?: RpcOptions): UnaryCall<GetDocumentAccessRequest, GetDocumentAccessResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDocumentAccessRequest, GetDocumentAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateDocument
     *
     * @generated from protobuf rpc: SetDocumentAccess(services.docstore.SetDocumentAccessRequest) returns (services.docstore.SetDocumentAccessResponse);
     */
    setDocumentAccess(input: SetDocumentAccessRequest, options?: RpcOptions): UnaryCall<SetDocumentAccessRequest, SetDocumentAccessResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetDocumentAccessRequest, SetDocumentAccessResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentActivity(services.docstore.ListDocumentActivityRequest) returns (services.docstore.ListDocumentActivityResponse);
     */
    listDocumentActivity(input: ListDocumentActivityRequest, options?: RpcOptions): UnaryCall<ListDocumentActivityRequest, ListDocumentActivityResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentActivityRequest, ListDocumentActivityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListDocumentReqs(services.docstore.ListDocumentReqsRequest) returns (services.docstore.ListDocumentReqsResponse);
     */
    listDocumentReqs(input: ListDocumentReqsRequest, options?: RpcOptions): UnaryCall<ListDocumentReqsRequest, ListDocumentReqsResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentReqsRequest, ListDocumentReqsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Types/StringList:[]string{"Access", "Closure", "Update", "Deletion", "OwnerChange"}
     *
     * @generated from protobuf rpc: CreateDocumentReq(services.docstore.CreateDocumentReqRequest) returns (services.docstore.CreateDocumentReqResponse);
     */
    createDocumentReq(input: CreateDocumentReqRequest, options?: RpcOptions): UnaryCall<CreateDocumentReqRequest, CreateDocumentReqResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateDocumentReqRequest, CreateDocumentReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateDocumentReq
     *
     * @generated from protobuf rpc: UpdateDocumentReq(services.docstore.UpdateDocumentReqRequest) returns (services.docstore.UpdateDocumentReqResponse);
     */
    updateDocumentReq(input: UpdateDocumentReqRequest, options?: RpcOptions): UnaryCall<UpdateDocumentReqRequest, UpdateDocumentReqResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDocumentReqRequest, UpdateDocumentReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteDocumentReq(services.docstore.DeleteDocumentReqRequest) returns (services.docstore.DeleteDocumentReqResponse);
     */
    deleteDocumentReq(input: DeleteDocumentReqRequest, options?: RpcOptions): UnaryCall<DeleteDocumentReqRequest, DeleteDocumentReqResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDocumentReqRequest, DeleteDocumentReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListUserDocuments(services.docstore.ListUserDocumentsRequest) returns (services.docstore.ListUserDocumentsResponse);
     */
    listUserDocuments(input: ListUserDocumentsRequest, options?: RpcOptions): UnaryCall<ListUserDocumentsRequest, ListUserDocumentsResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListUserDocumentsRequest, ListUserDocumentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListCategories(services.docstore.ListCategoriesRequest) returns (services.docstore.ListCategoriesResponse);
     */
    listCategories(input: ListCategoriesRequest, options?: RpcOptions): UnaryCall<ListCategoriesRequest, ListCategoriesResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCategoriesRequest, ListCategoriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: CreateCategory(services.docstore.CreateCategoryRequest) returns (services.docstore.CreateCategoryResponse);
     */
    createCategory(input: CreateCategoryRequest, options?: RpcOptions): UnaryCall<CreateCategoryRequest, CreateCategoryResponse> {
        const method = this.methods[31], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateCategoryRequest, CreateCategoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=CreateCategory
     *
     * @generated from protobuf rpc: UpdateCategory(services.docstore.UpdateCategoryRequest) returns (services.docstore.UpdateCategoryResponse);
     */
    updateCategory(input: UpdateCategoryRequest, options?: RpcOptions): UnaryCall<UpdateCategoryRequest, UpdateCategoryResponse> {
        const method = this.methods[32], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateCategoryRequest, UpdateCategoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: DeleteCategory(services.docstore.DeleteCategoryRequest) returns (services.docstore.DeleteCategoryResponse);
     */
    deleteCategory(input: DeleteCategoryRequest, options?: RpcOptions): UnaryCall<DeleteCategoryRequest, DeleteCategoryResponse> {
        const method = this.methods[33], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCategoryRequest, DeleteCategoryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListDocuments
     *
     * @generated from protobuf rpc: ListDocumentPins(services.docstore.ListDocumentPinsRequest) returns (services.docstore.ListDocumentPinsResponse);
     */
    listDocumentPins(input: ListDocumentPinsRequest, options?: RpcOptions): UnaryCall<ListDocumentPinsRequest, ListDocumentPinsResponse> {
        const method = this.methods[34], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDocumentPinsRequest, ListDocumentPinsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ToggleDocumentPin(services.docstore.ToggleDocumentPinRequest) returns (services.docstore.ToggleDocumentPinResponse);
     */
    toggleDocumentPin(input: ToggleDocumentPinRequest, options?: RpcOptions): UnaryCall<ToggleDocumentPinRequest, ToggleDocumentPinResponse> {
        const method = this.methods[35], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleDocumentPinRequest, ToggleDocumentPinResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: SetDocumentReminder(services.docstore.SetDocumentReminderRequest) returns (services.docstore.SetDocumentReminderResponse);
     */
    setDocumentReminder(input: SetDocumentReminderRequest, options?: RpcOptions): UnaryCall<SetDocumentReminderRequest, SetDocumentReminderResponse> {
        const method = this.methods[36], opt = this._transport.mergeOptions(options);
        return stackIntercept<SetDocumentReminderRequest, SetDocumentReminderResponse>("unary", this._transport, method, opt, input);
    }
}
