// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/settings/system.proto" (package "services.settings", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../../resources/timestamp/timestamp";
import { AttrsUpdate } from "../../resources/settings/perms";
import { PermsUpdate } from "../../resources/settings/perms";
import { RoleAttribute } from "../../resources/permissions/attributes";
import { Permission } from "../../resources/permissions/permissions";
/**
 * @generated from protobuf message services.settings.GetAllPermissionsRequest
 */
export interface GetAllPermissionsRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
}
/**
 * @generated from protobuf message services.settings.GetAllPermissionsResponse
 */
export interface GetAllPermissionsResponse {
    /**
     * @generated from protobuf field: repeated resources.permissions.Permission permissions = 1
     */
    permissions: Permission[];
    /**
     * @generated from protobuf field: repeated resources.permissions.RoleAttribute attributes = 2
     */
    attributes: RoleAttribute[];
}
/**
 * @generated from protobuf message services.settings.GetJobLimitsRequest
 */
export interface GetJobLimitsRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
}
/**
 * @generated from protobuf message services.settings.GetJobLimitsResponse
 */
export interface GetJobLimitsResponse {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 2
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: repeated resources.permissions.Permission permissions = 3
     */
    permissions: Permission[];
    /**
     * @generated from protobuf field: repeated resources.permissions.RoleAttribute attributes = 4
     */
    attributes: RoleAttribute[];
}
/**
 * @generated from protobuf message services.settings.UpdateJobLimitsRequest
 */
export interface UpdateJobLimitsRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
    /**
     * @generated from protobuf field: optional resources.settings.PermsUpdate perms = 2
     */
    perms?: PermsUpdate;
    /**
     * @generated from protobuf field: optional resources.settings.AttrsUpdate attrs = 3
     */
    attrs?: AttrsUpdate;
}
/**
 * @generated from protobuf message services.settings.UpdateJobLimitsResponse
 */
export interface UpdateJobLimitsResponse {
}
/**
 * @generated from protobuf message services.settings.DeleteFactionRequest
 */
export interface DeleteFactionRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
}
/**
 * @generated from protobuf message services.settings.DeleteFactionResponse
 */
export interface DeleteFactionResponse {
}
/**
 * @generated from protobuf message services.settings.GetStatusRequest
 */
export interface GetStatusRequest {
}
/**
 * @generated from protobuf message services.settings.GetStatusResponse
 */
export interface GetStatusResponse {
    /**
     * @generated from protobuf field: services.settings.Database database = 1
     */
    database?: Database;
    /**
     * @generated from protobuf field: services.settings.Nats nats = 2
     */
    nats?: Nats;
    /**
     * @generated from protobuf field: services.settings.DBSyncStatus dbsync = 3
     */
    dbsync?: DBSyncStatus;
}
/**
 * @generated from protobuf message services.settings.Nats
 */
export interface Nats {
    /**
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: bool connected = 2
     */
    connected: boolean;
}
/**
 * @generated from protobuf message services.settings.Database
 */
export interface Database {
    /**
     * @generated from protobuf field: string version = 1
     */
    version: string;
    /**
     * @generated from protobuf field: bool connected = 2
     */
    connected: boolean;
    /**
     * @generated from protobuf field: uint64 migration_version = 3
     */
    migrationVersion: number;
    /**
     * @generated from protobuf field: bool migration_dirty = 4
     */
    migrationDirty: boolean;
    /**
     * @generated from protobuf field: string db_charset = 5
     */
    dbCharset: string;
    /**
     * @generated from protobuf field: string db_collation = 6
     */
    dbCollation: string;
    /**
     * @generated from protobuf field: bool tables_ok = 7
     */
    tablesOk: boolean;
}
/**
 * @generated from protobuf message services.settings.DBSyncStatus
 */
export interface DBSyncStatus {
    /**
     * @generated from protobuf field: bool enabled = 1
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_synced_data = 2
     */
    lastSyncedData?: Timestamp;
    /**
     * @generated from protobuf field: optional resources.timestamp.Timestamp last_synced_activity = 3
     */
    lastSyncedActivity?: Timestamp;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAllPermissionsRequest$Type extends MessageType<GetAllPermissionsRequest> {
    constructor() {
        super("services.settings.GetAllPermissionsRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<GetAllPermissionsRequest>): GetAllPermissionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<GetAllPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllPermissionsRequest): GetAllPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetAllPermissionsRequest
 */
export const GetAllPermissionsRequest = new GetAllPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllPermissionsResponse$Type extends MessageType<GetAllPermissionsResponse> {
    constructor() {
        super("services.settings.GetAllPermissionsResponse", [
            { no: 1, name: "permissions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission },
            { no: 2, name: "attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoleAttribute }
        ]);
    }
    create(value?: PartialMessage<GetAllPermissionsResponse>): GetAllPermissionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissions = [];
        message.attributes = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllPermissionsResponse): GetAllPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.permissions.Permission permissions */ 1:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.permissions.RoleAttribute attributes */ 2:
                    message.attributes.push(RoleAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.permissions.Permission permissions = 1; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.permissions.RoleAttribute attributes = 2; */
        for (let i = 0; i < message.attributes.length; i++)
            RoleAttribute.internalBinaryWrite(message.attributes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetAllPermissionsResponse
 */
export const GetAllPermissionsResponse = new GetAllPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobLimitsRequest$Type extends MessageType<GetJobLimitsRequest> {
    constructor() {
        super("services.settings.GetJobLimitsRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<GetJobLimitsRequest>): GetJobLimitsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<GetJobLimitsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobLimitsRequest): GetJobLimitsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobLimitsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetJobLimitsRequest
 */
export const GetJobLimitsRequest = new GetJobLimitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobLimitsResponse$Type extends MessageType<GetJobLimitsResponse> {
    constructor() {
        super("services.settings.GetJobLimitsResponse", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 2, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "permissions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission },
            { no: 4, name: "attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoleAttribute }
        ]);
    }
    create(value?: PartialMessage<GetJobLimitsResponse>): GetJobLimitsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        message.permissions = [];
        message.attributes = [];
        if (value !== undefined)
            reflectionMergePartial<GetJobLimitsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobLimitsResponse): GetJobLimitsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 2:
                    message.jobLabel = reader.string();
                    break;
                case /* repeated resources.permissions.Permission permissions */ 3:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.permissions.RoleAttribute attributes */ 4:
                    message.attributes.push(RoleAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobLimitsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 2; */
        if (message.jobLabel !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.jobLabel);
        /* repeated resources.permissions.Permission permissions = 3; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.permissions.RoleAttribute attributes = 4; */
        for (let i = 0; i < message.attributes.length; i++)
            RoleAttribute.internalBinaryWrite(message.attributes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetJobLimitsResponse
 */
export const GetJobLimitsResponse = new GetJobLimitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateJobLimitsRequest$Type extends MessageType<UpdateJobLimitsRequest> {
    constructor() {
        super("services.settings.UpdateJobLimitsRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 2, name: "perms", kind: "message", T: () => PermsUpdate },
            { no: 3, name: "attrs", kind: "message", T: () => AttrsUpdate }
        ]);
    }
    create(value?: PartialMessage<UpdateJobLimitsRequest>): UpdateJobLimitsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateJobLimitsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateJobLimitsRequest): UpdateJobLimitsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* optional resources.settings.PermsUpdate perms */ 2:
                    message.perms = PermsUpdate.internalBinaryRead(reader, reader.uint32(), options, message.perms);
                    break;
                case /* optional resources.settings.AttrsUpdate attrs */ 3:
                    message.attrs = AttrsUpdate.internalBinaryRead(reader, reader.uint32(), options, message.attrs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateJobLimitsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* optional resources.settings.PermsUpdate perms = 2; */
        if (message.perms)
            PermsUpdate.internalBinaryWrite(message.perms, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.settings.AttrsUpdate attrs = 3; */
        if (message.attrs)
            AttrsUpdate.internalBinaryWrite(message.attrs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.UpdateJobLimitsRequest
 */
export const UpdateJobLimitsRequest = new UpdateJobLimitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateJobLimitsResponse$Type extends MessageType<UpdateJobLimitsResponse> {
    constructor() {
        super("services.settings.UpdateJobLimitsResponse", []);
    }
    create(value?: PartialMessage<UpdateJobLimitsResponse>): UpdateJobLimitsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateJobLimitsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateJobLimitsResponse): UpdateJobLimitsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateJobLimitsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.UpdateJobLimitsResponse
 */
export const UpdateJobLimitsResponse = new UpdateJobLimitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFactionRequest$Type extends MessageType<DeleteFactionRequest> {
    constructor() {
        super("services.settings.DeleteFactionRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteFactionRequest>): DeleteFactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteFactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFactionRequest): DeleteFactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.DeleteFactionRequest
 */
export const DeleteFactionRequest = new DeleteFactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFactionResponse$Type extends MessageType<DeleteFactionResponse> {
    constructor() {
        super("services.settings.DeleteFactionResponse", []);
    }
    create(value?: PartialMessage<DeleteFactionResponse>): DeleteFactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteFactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFactionResponse): DeleteFactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.DeleteFactionResponse
 */
export const DeleteFactionResponse = new DeleteFactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusRequest$Type extends MessageType<GetStatusRequest> {
    constructor() {
        super("services.settings.GetStatusRequest", []);
    }
    create(value?: PartialMessage<GetStatusRequest>): GetStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusRequest): GetStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetStatusRequest
 */
export const GetStatusRequest = new GetStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusResponse$Type extends MessageType<GetStatusResponse> {
    constructor() {
        super("services.settings.GetStatusResponse", [
            { no: 1, name: "database", kind: "message", T: () => Database },
            { no: 2, name: "nats", kind: "message", T: () => Nats },
            { no: 3, name: "dbsync", kind: "message", T: () => DBSyncStatus }
        ]);
    }
    create(value?: PartialMessage<GetStatusResponse>): GetStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusResponse): GetStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* services.settings.Database database */ 1:
                    message.database = Database.internalBinaryRead(reader, reader.uint32(), options, message.database);
                    break;
                case /* services.settings.Nats nats */ 2:
                    message.nats = Nats.internalBinaryRead(reader, reader.uint32(), options, message.nats);
                    break;
                case /* services.settings.DBSyncStatus dbsync */ 3:
                    message.dbsync = DBSyncStatus.internalBinaryRead(reader, reader.uint32(), options, message.dbsync);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* services.settings.Database database = 1; */
        if (message.database)
            Database.internalBinaryWrite(message.database, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* services.settings.Nats nats = 2; */
        if (message.nats)
            Nats.internalBinaryWrite(message.nats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* services.settings.DBSyncStatus dbsync = 3; */
        if (message.dbsync)
            DBSyncStatus.internalBinaryWrite(message.dbsync, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetStatusResponse
 */
export const GetStatusResponse = new GetStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Nats$Type extends MessageType<Nats> {
    constructor() {
        super("services.settings.Nats", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Nats>): Nats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.connected = false;
        if (value !== undefined)
            reflectionMergePartial<Nats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Nats): Nats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* bool connected */ 2:
                    message.connected = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Nats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* bool connected = 2; */
        if (message.connected !== false)
            writer.tag(2, WireType.Varint).bool(message.connected);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.Nats
 */
export const Nats = new Nats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Database$Type extends MessageType<Database> {
    constructor() {
        super("services.settings.Database", [
            { no: 1, name: "version", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 2, name: "connected", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "migration_version", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/, options: { "buf.validate.field": { uint64: { gt: "0" } } } },
            { no: 4, name: "migration_dirty", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "db_charset", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 6, name: "db_collation", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "32" } } } },
            { no: 7, name: "tables_ok", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<Database>): Database {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.version = "";
        message.connected = false;
        message.migrationVersion = 0;
        message.migrationDirty = false;
        message.dbCharset = "";
        message.dbCollation = "";
        message.tablesOk = false;
        if (value !== undefined)
            reflectionMergePartial<Database>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Database): Database {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string version */ 1:
                    message.version = reader.string();
                    break;
                case /* bool connected */ 2:
                    message.connected = reader.bool();
                    break;
                case /* uint64 migration_version */ 3:
                    message.migrationVersion = reader.uint64().toNumber();
                    break;
                case /* bool migration_dirty */ 4:
                    message.migrationDirty = reader.bool();
                    break;
                case /* string db_charset */ 5:
                    message.dbCharset = reader.string();
                    break;
                case /* string db_collation */ 6:
                    message.dbCollation = reader.string();
                    break;
                case /* bool tables_ok */ 7:
                    message.tablesOk = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Database, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string version = 1; */
        if (message.version !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.version);
        /* bool connected = 2; */
        if (message.connected !== false)
            writer.tag(2, WireType.Varint).bool(message.connected);
        /* uint64 migration_version = 3; */
        if (message.migrationVersion !== 0)
            writer.tag(3, WireType.Varint).uint64(message.migrationVersion);
        /* bool migration_dirty = 4; */
        if (message.migrationDirty !== false)
            writer.tag(4, WireType.Varint).bool(message.migrationDirty);
        /* string db_charset = 5; */
        if (message.dbCharset !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.dbCharset);
        /* string db_collation = 6; */
        if (message.dbCollation !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.dbCollation);
        /* bool tables_ok = 7; */
        if (message.tablesOk !== false)
            writer.tag(7, WireType.Varint).bool(message.tablesOk);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.Database
 */
export const Database = new Database$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DBSyncStatus$Type extends MessageType<DBSyncStatus> {
    constructor() {
        super("services.settings.DBSyncStatus", [
            { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "last_synced_data", kind: "message", T: () => Timestamp },
            { no: 3, name: "last_synced_activity", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<DBSyncStatus>): DBSyncStatus {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        if (value !== undefined)
            reflectionMergePartial<DBSyncStatus>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DBSyncStatus): DBSyncStatus {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enabled */ 1:
                    message.enabled = reader.bool();
                    break;
                case /* optional resources.timestamp.Timestamp last_synced_data */ 2:
                    message.lastSyncedData = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastSyncedData);
                    break;
                case /* optional resources.timestamp.Timestamp last_synced_activity */ 3:
                    message.lastSyncedActivity = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.lastSyncedActivity);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DBSyncStatus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enabled = 1; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* optional resources.timestamp.Timestamp last_synced_data = 2; */
        if (message.lastSyncedData)
            Timestamp.internalBinaryWrite(message.lastSyncedData, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.timestamp.Timestamp last_synced_activity = 3; */
        if (message.lastSyncedActivity)
            Timestamp.internalBinaryWrite(message.lastSyncedActivity, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.DBSyncStatus
 */
export const DBSyncStatus = new DBSyncStatus$Type();
/**
 * @generated ServiceType for protobuf service services.settings.SystemService
 */
export const SystemService = new ServiceType("services.settings.SystemService", [
    { name: "GetStatus", options: {}, I: GetStatusRequest, O: GetStatusResponse },
    { name: "GetAllPermissions", options: {}, I: GetAllPermissionsRequest, O: GetAllPermissionsResponse },
    { name: "GetJobLimits", options: {}, I: GetJobLimitsRequest, O: GetJobLimitsResponse },
    { name: "UpdateJobLimits", options: {}, I: UpdateJobLimitsRequest, O: UpdateJobLimitsResponse },
    { name: "DeleteFaction", options: {}, I: DeleteFactionRequest, O: DeleteFactionResponse }
]);
