// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/settings/system.proto" (package "services.settings", syntax proto3)
// tslint:disable
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SystemStatus } from "../../resources/settings/status";
import { AttrsUpdate } from "../../resources/settings/perms";
import { PermsUpdate } from "../../resources/settings/perms";
import { RoleAttribute } from "../../resources/permissions/attributes";
import { Permission } from "../../resources/permissions/permissions";
/**
 * @generated from protobuf message services.settings.GetAllPermissionsRequest
 */
export interface GetAllPermissionsRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
}
/**
 * @generated from protobuf message services.settings.GetAllPermissionsResponse
 */
export interface GetAllPermissionsResponse {
    /**
     * @generated from protobuf field: repeated resources.permissions.Permission permissions = 1
     */
    permissions: Permission[];
    /**
     * @generated from protobuf field: repeated resources.permissions.RoleAttribute attributes = 2
     */
    attributes: RoleAttribute[];
}
/**
 * @generated from protobuf message services.settings.GetJobLimitsRequest
 */
export interface GetJobLimitsRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
}
/**
 * @generated from protobuf message services.settings.GetJobLimitsResponse
 */
export interface GetJobLimitsResponse {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
    /**
     * @generated from protobuf field: optional string job_label = 2
     */
    jobLabel?: string;
    /**
     * @generated from protobuf field: repeated resources.permissions.Permission permissions = 3
     */
    permissions: Permission[];
    /**
     * @generated from protobuf field: repeated resources.permissions.RoleAttribute attributes = 4
     */
    attributes: RoleAttribute[];
}
/**
 * @generated from protobuf message services.settings.UpdateJobLimitsRequest
 */
export interface UpdateJobLimitsRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
    /**
     * @generated from protobuf field: optional resources.settings.PermsUpdate perms = 2
     */
    perms?: PermsUpdate;
    /**
     * @generated from protobuf field: optional resources.settings.AttrsUpdate attrs = 3
     */
    attrs?: AttrsUpdate;
}
/**
 * @generated from protobuf message services.settings.UpdateJobLimitsResponse
 */
export interface UpdateJobLimitsResponse {
}
/**
 * @generated from protobuf message services.settings.DeleteFactionRequest
 */
export interface DeleteFactionRequest {
    /**
     * @generated from protobuf field: string job = 1
     */
    job: string;
}
/**
 * @generated from protobuf message services.settings.DeleteFactionResponse
 */
export interface DeleteFactionResponse {
}
/**
 * @generated from protobuf message services.settings.GetStatusRequest
 */
export interface GetStatusRequest {
}
/**
 * @generated from protobuf message services.settings.GetStatusResponse
 */
export interface GetStatusResponse {
    /**
     * @generated from protobuf field: resources.settings.SystemStatus status = 1
     */
    status?: SystemStatus;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAllPermissionsRequest$Type extends MessageType<GetAllPermissionsRequest> {
    constructor() {
        super("services.settings.GetAllPermissionsRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<GetAllPermissionsRequest>): GetAllPermissionsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<GetAllPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllPermissionsRequest): GetAllPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetAllPermissionsRequest
 */
export const GetAllPermissionsRequest = new GetAllPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllPermissionsResponse$Type extends MessageType<GetAllPermissionsResponse> {
    constructor() {
        super("services.settings.GetAllPermissionsResponse", [
            { no: 1, name: "permissions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission },
            { no: 2, name: "attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoleAttribute }
        ]);
    }
    create(value?: PartialMessage<GetAllPermissionsResponse>): GetAllPermissionsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.permissions = [];
        message.attributes = [];
        if (value !== undefined)
            reflectionMergePartial<GetAllPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllPermissionsResponse): GetAllPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.permissions.Permission permissions */ 1:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.permissions.RoleAttribute attributes */ 2:
                    message.attributes.push(RoleAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.permissions.Permission permissions = 1; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.permissions.RoleAttribute attributes = 2; */
        for (let i = 0; i < message.attributes.length; i++)
            RoleAttribute.internalBinaryWrite(message.attributes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetAllPermissionsResponse
 */
export const GetAllPermissionsResponse = new GetAllPermissionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobLimitsRequest$Type extends MessageType<GetJobLimitsRequest> {
    constructor() {
        super("services.settings.GetJobLimitsRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<GetJobLimitsRequest>): GetJobLimitsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<GetJobLimitsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobLimitsRequest): GetJobLimitsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobLimitsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetJobLimitsRequest
 */
export const GetJobLimitsRequest = new GetJobLimitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobLimitsResponse$Type extends MessageType<GetJobLimitsResponse> {
    constructor() {
        super("services.settings.GetJobLimitsResponse", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 2, name: "job_label", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "permissions", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Permission },
            { no: 4, name: "attributes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RoleAttribute }
        ]);
    }
    create(value?: PartialMessage<GetJobLimitsResponse>): GetJobLimitsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        message.permissions = [];
        message.attributes = [];
        if (value !== undefined)
            reflectionMergePartial<GetJobLimitsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobLimitsResponse): GetJobLimitsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* optional string job_label */ 2:
                    message.jobLabel = reader.string();
                    break;
                case /* repeated resources.permissions.Permission permissions */ 3:
                    message.permissions.push(Permission.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated resources.permissions.RoleAttribute attributes */ 4:
                    message.attributes.push(RoleAttribute.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobLimitsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* optional string job_label = 2; */
        if (message.jobLabel !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.jobLabel);
        /* repeated resources.permissions.Permission permissions = 3; */
        for (let i = 0; i < message.permissions.length; i++)
            Permission.internalBinaryWrite(message.permissions[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.permissions.RoleAttribute attributes = 4; */
        for (let i = 0; i < message.attributes.length; i++)
            RoleAttribute.internalBinaryWrite(message.attributes[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetJobLimitsResponse
 */
export const GetJobLimitsResponse = new GetJobLimitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateJobLimitsRequest$Type extends MessageType<UpdateJobLimitsRequest> {
    constructor() {
        super("services.settings.UpdateJobLimitsRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } },
            { no: 2, name: "perms", kind: "message", T: () => PermsUpdate },
            { no: 3, name: "attrs", kind: "message", T: () => AttrsUpdate }
        ]);
    }
    create(value?: PartialMessage<UpdateJobLimitsRequest>): UpdateJobLimitsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateJobLimitsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateJobLimitsRequest): UpdateJobLimitsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                case /* optional resources.settings.PermsUpdate perms */ 2:
                    message.perms = PermsUpdate.internalBinaryRead(reader, reader.uint32(), options, message.perms);
                    break;
                case /* optional resources.settings.AttrsUpdate attrs */ 3:
                    message.attrs = AttrsUpdate.internalBinaryRead(reader, reader.uint32(), options, message.attrs);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateJobLimitsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        /* optional resources.settings.PermsUpdate perms = 2; */
        if (message.perms)
            PermsUpdate.internalBinaryWrite(message.perms, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.settings.AttrsUpdate attrs = 3; */
        if (message.attrs)
            AttrsUpdate.internalBinaryWrite(message.attrs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.UpdateJobLimitsRequest
 */
export const UpdateJobLimitsRequest = new UpdateJobLimitsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateJobLimitsResponse$Type extends MessageType<UpdateJobLimitsResponse> {
    constructor() {
        super("services.settings.UpdateJobLimitsResponse", []);
    }
    create(value?: PartialMessage<UpdateJobLimitsResponse>): UpdateJobLimitsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateJobLimitsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateJobLimitsResponse): UpdateJobLimitsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateJobLimitsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.UpdateJobLimitsResponse
 */
export const UpdateJobLimitsResponse = new UpdateJobLimitsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFactionRequest$Type extends MessageType<DeleteFactionRequest> {
    constructor() {
        super("services.settings.DeleteFactionRequest", [
            { no: 1, name: "job", kind: "scalar", T: 9 /*ScalarType.STRING*/, options: { "buf.validate.field": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteFactionRequest>): DeleteFactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.job = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteFactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFactionRequest): DeleteFactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string job */ 1:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string job = 1; */
        if (message.job !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.DeleteFactionRequest
 */
export const DeleteFactionRequest = new DeleteFactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteFactionResponse$Type extends MessageType<DeleteFactionResponse> {
    constructor() {
        super("services.settings.DeleteFactionResponse", []);
    }
    create(value?: PartialMessage<DeleteFactionResponse>): DeleteFactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteFactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteFactionResponse): DeleteFactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteFactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.DeleteFactionResponse
 */
export const DeleteFactionResponse = new DeleteFactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusRequest$Type extends MessageType<GetStatusRequest> {
    constructor() {
        super("services.settings.GetStatusRequest", []);
    }
    create(value?: PartialMessage<GetStatusRequest>): GetStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusRequest): GetStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetStatusRequest
 */
export const GetStatusRequest = new GetStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetStatusResponse$Type extends MessageType<GetStatusResponse> {
    constructor() {
        super("services.settings.GetStatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => SystemStatus }
        ]);
    }
    create(value?: PartialMessage<GetStatusResponse>): GetStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetStatusResponse): GetStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.settings.SystemStatus status */ 1:
                    message.status = SystemStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.settings.SystemStatus status = 1; */
        if (message.status)
            SystemStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.settings.GetStatusResponse
 */
export const GetStatusResponse = new GetStatusResponse$Type();
/**
 * @generated ServiceType for protobuf service services.settings.SystemService
 */
export const SystemService = new ServiceType("services.settings.SystemService", [
    { name: "GetStatus", options: { "codegen.perms.perms": { enabled: true, name: "Superuser" } }, I: GetStatusRequest, O: GetStatusResponse },
    { name: "GetAllPermissions", options: { "codegen.perms.perms": { enabled: true, name: "Superuser" } }, I: GetAllPermissionsRequest, O: GetAllPermissionsResponse },
    { name: "GetJobLimits", options: { "codegen.perms.perms": { enabled: true, name: "Superuser" } }, I: GetJobLimitsRequest, O: GetJobLimitsResponse },
    { name: "UpdateJobLimits", options: { "codegen.perms.perms": { enabled: true, name: "Superuser" } }, I: UpdateJobLimitsRequest, O: UpdateJobLimitsResponse },
    { name: "DeleteFaction", options: { "codegen.perms.perms": { enabled: true, name: "Superuser" } }, I: DeleteFactionRequest, O: DeleteFactionResponse }
]);
