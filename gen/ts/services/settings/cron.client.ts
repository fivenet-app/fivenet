// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/settings/cron.proto" (package "services.settings", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CronService } from "./cron";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListCronjobsResponse } from "./cron";
import type { ListCronjobsRequest } from "./cron";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.settings.CronService
 */
export interface ICronServiceClient {
    /**
     * @generated from protobuf rpc: ListCronjobs
     */
    listCronjobs(input: ListCronjobsRequest, options?: RpcOptions): UnaryCall<ListCronjobsRequest, ListCronjobsResponse>;
}
/**
 * @generated from protobuf service services.settings.CronService
 */
export class CronServiceClient implements ICronServiceClient, ServiceInfo {
    typeName = CronService.typeName;
    methods = CronService.methods;
    options = CronService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListCronjobs
     */
    listCronjobs(input: ListCronjobsRequest, options?: RpcOptions): UnaryCall<ListCronjobsRequest, ListCronjobsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCronjobsRequest, ListCronjobsResponse>("unary", this._transport, method, opt, input);
    }
}
