// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "services/filestore/filestore.proto" (package "services.filestore", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { FilestoreService } from "./filestore";
import type { DeleteFileByPathResponse } from "./filestore";
import type { DeleteFileByPathRequest } from "./filestore";
import type { DeleteFileResponse } from "../../resources/file/filestore";
import type { DeleteFileRequest } from "../../resources/file/filestore";
import type { ListFilesResponse } from "./filestore";
import type { ListFilesRequest } from "./filestore";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UploadFileResponse } from "../../resources/file/filestore";
import type { UploadFileRequest } from "../../resources/file/filestore";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.filestore.FilestoreService
 */
export interface IFilestoreServiceClient {
    /**
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     * buf:lint:ignore RPC_REQUEST_STANDARD_NAME
     * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
     *
     * @generated from protobuf rpc: Upload
     */
    upload(options?: RpcOptions): ClientStreamingCall<UploadFileRequest, UploadFileResponse>;
    /**
     * @generated from protobuf rpc: ListFiles
     */
    listFiles(input: ListFilesRequest, options?: RpcOptions): UnaryCall<ListFilesRequest, ListFilesResponse>;
    /**
     * @generated from protobuf rpc: DeleteFile
     */
    deleteFile(input: DeleteFileRequest, options?: RpcOptions): UnaryCall<DeleteFileRequest, DeleteFileResponse>;
    /**
     * @generated from protobuf rpc: DeleteFileByPath
     */
    deleteFileByPath(input: DeleteFileByPathRequest, options?: RpcOptions): UnaryCall<DeleteFileByPathRequest, DeleteFileByPathResponse>;
}
/**
 * @generated from protobuf service services.filestore.FilestoreService
 */
export class FilestoreServiceClient implements IFilestoreServiceClient, ServiceInfo {
    typeName = FilestoreService.typeName;
    methods = FilestoreService.methods;
    options = FilestoreService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * buf:lint:ignore RPC_REQUEST_RESPONSE_UNIQUE
     * buf:lint:ignore RPC_REQUEST_STANDARD_NAME
     * buf:lint:ignore RPC_RESPONSE_STANDARD_NAME
     *
     * @generated from protobuf rpc: Upload
     */
    upload(options?: RpcOptions): ClientStreamingCall<UploadFileRequest, UploadFileResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadFileRequest, UploadFileResponse>("clientStreaming", this._transport, method, opt);
    }
    /**
     * @generated from protobuf rpc: ListFiles
     */
    listFiles(input: ListFilesRequest, options?: RpcOptions): UnaryCall<ListFilesRequest, ListFilesResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListFilesRequest, ListFilesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteFile
     */
    deleteFile(input: DeleteFileRequest, options?: RpcOptions): UnaryCall<DeleteFileRequest, DeleteFileResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteFileRequest, DeleteFileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteFileByPath
     */
    deleteFileByPath(input: DeleteFileByPathRequest, options?: RpcOptions): UnaryCall<DeleteFileByPathRequest, DeleteFileByPathResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteFileByPathRequest, DeleteFileByPathResponse>("unary", this._transport, method, opt, input);
    }
}
