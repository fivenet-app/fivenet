// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/calendar/calendar.proto" (package "services.calendar", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CalendarService } from "./calendar";
import type { SubscribeToCalendarResponse } from "./calendar";
import type { SubscribeToCalendarRequest } from "./calendar";
import type { ListSubscriptionsResponse } from "./calendar";
import type { ListSubscriptionsRequest } from "./calendar";
import type { RSVPCalendarEntryResponse } from "./calendar";
import type { RSVPCalendarEntryRequest } from "./calendar";
import type { ListCalendarEntryRSVPResponse } from "./calendar";
import type { ListCalendarEntryRSVPRequest } from "./calendar";
import type { ShareCalendarEntryResponse } from "./calendar";
import type { ShareCalendarEntryRequest } from "./calendar";
import type { DeleteCalendarEntryResponse } from "./calendar";
import type { DeleteCalendarEntryRequest } from "./calendar";
import type { CreateOrUpdateCalendarEntryResponse } from "./calendar";
import type { CreateOrUpdateCalendarEntryRequest } from "./calendar";
import type { GetCalendarEntryResponse } from "./calendar";
import type { GetCalendarEntryRequest } from "./calendar";
import type { GetUpcomingEntriesResponse } from "./calendar";
import type { GetUpcomingEntriesRequest } from "./calendar";
import type { ListCalendarEntriesResponse } from "./calendar";
import type { ListCalendarEntriesRequest } from "./calendar";
import type { DeleteCalendarResponse } from "./calendar";
import type { DeleteCalendarRequest } from "./calendar";
import type { UpdateCalendarResponse } from "./calendar";
import type { UpdateCalendarRequest } from "./calendar";
import type { CreateCalendarResponse } from "./calendar";
import type { CreateCalendarRequest } from "./calendar";
import type { GetCalendarResponse } from "./calendar";
import type { GetCalendarRequest } from "./calendar";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListCalendarsResponse } from "./calendar";
import type { ListCalendarsRequest } from "./calendar";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.calendar.CalendarService
 */
export interface ICalendarServiceClient {
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendars(services.calendar.ListCalendarsRequest) returns (services.calendar.ListCalendarsResponse);
     */
    listCalendars(input: ListCalendarsRequest, options?: RpcOptions): UnaryCall<ListCalendarsRequest, ListCalendarsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendar(services.calendar.GetCalendarRequest) returns (services.calendar.GetCalendarResponse);
     */
    getCalendar(input: GetCalendarRequest, options?: RpcOptions): UnaryCall<GetCalendarRequest, GetCalendarResponse>;
    /**
     * @perm: Attrs=Fields/StringList:[]string{"Job", "Public"}
     *
     * @generated from protobuf rpc: CreateCalendar(services.calendar.CreateCalendarRequest) returns (services.calendar.CreateCalendarResponse);
     */
    createCalendar(input: CreateCalendarRequest, options?: RpcOptions): UnaryCall<CreateCalendarRequest, CreateCalendarResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: UpdateCalendar(services.calendar.UpdateCalendarRequest) returns (services.calendar.UpdateCalendarResponse);
     */
    updateCalendar(input: UpdateCalendarRequest, options?: RpcOptions): UnaryCall<UpdateCalendarRequest, UpdateCalendarResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: DeleteCalendar(services.calendar.DeleteCalendarRequest) returns (services.calendar.DeleteCalendarResponse);
     */
    deleteCalendar(input: DeleteCalendarRequest, options?: RpcOptions): UnaryCall<DeleteCalendarRequest, DeleteCalendarResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntries(services.calendar.ListCalendarEntriesRequest) returns (services.calendar.ListCalendarEntriesResponse);
     */
    listCalendarEntries(input: ListCalendarEntriesRequest, options?: RpcOptions): UnaryCall<ListCalendarEntriesRequest, ListCalendarEntriesResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetUpcomingEntries(services.calendar.GetUpcomingEntriesRequest) returns (services.calendar.GetUpcomingEntriesResponse);
     */
    getUpcomingEntries(input: GetUpcomingEntriesRequest, options?: RpcOptions): UnaryCall<GetUpcomingEntriesRequest, GetUpcomingEntriesResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendarEntry(services.calendar.GetCalendarEntryRequest) returns (services.calendar.GetCalendarEntryResponse);
     */
    getCalendarEntry(input: GetCalendarEntryRequest, options?: RpcOptions): UnaryCall<GetCalendarEntryRequest, GetCalendarEntryResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: CreateOrUpdateCalendarEntry(services.calendar.CreateOrUpdateCalendarEntryRequest) returns (services.calendar.CreateOrUpdateCalendarEntryResponse);
     */
    createOrUpdateCalendarEntry(input: CreateOrUpdateCalendarEntryRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCalendarEntryRequest, CreateOrUpdateCalendarEntryResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: DeleteCalendarEntry(services.calendar.DeleteCalendarEntryRequest) returns (services.calendar.DeleteCalendarEntryResponse);
     */
    deleteCalendarEntry(input: DeleteCalendarEntryRequest, options?: RpcOptions): UnaryCall<DeleteCalendarEntryRequest, DeleteCalendarEntryResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ShareCalendarEntry(services.calendar.ShareCalendarEntryRequest) returns (services.calendar.ShareCalendarEntryResponse);
     */
    shareCalendarEntry(input: ShareCalendarEntryRequest, options?: RpcOptions): UnaryCall<ShareCalendarEntryRequest, ShareCalendarEntryResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntryRSVP(services.calendar.ListCalendarEntryRSVPRequest) returns (services.calendar.ListCalendarEntryRSVPResponse);
     */
    listCalendarEntryRSVP(input: ListCalendarEntryRSVPRequest, options?: RpcOptions): UnaryCall<ListCalendarEntryRSVPRequest, ListCalendarEntryRSVPResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: RSVPCalendarEntry(services.calendar.RSVPCalendarEntryRequest) returns (services.calendar.RSVPCalendarEntryResponse);
     */
    rSVPCalendarEntry(input: RSVPCalendarEntryRequest, options?: RpcOptions): UnaryCall<RSVPCalendarEntryRequest, RSVPCalendarEntryResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListSubscriptions(services.calendar.ListSubscriptionsRequest) returns (services.calendar.ListSubscriptionsResponse);
     */
    listSubscriptions(input: ListSubscriptionsRequest, options?: RpcOptions): UnaryCall<ListSubscriptionsRequest, ListSubscriptionsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: SubscribeToCalendar(services.calendar.SubscribeToCalendarRequest) returns (services.calendar.SubscribeToCalendarResponse);
     */
    subscribeToCalendar(input: SubscribeToCalendarRequest, options?: RpcOptions): UnaryCall<SubscribeToCalendarRequest, SubscribeToCalendarResponse>;
}
/**
 * @generated from protobuf service services.calendar.CalendarService
 */
export class CalendarServiceClient implements ICalendarServiceClient, ServiceInfo {
    typeName = CalendarService.typeName;
    methods = CalendarService.methods;
    options = CalendarService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendars(services.calendar.ListCalendarsRequest) returns (services.calendar.ListCalendarsResponse);
     */
    listCalendars(input: ListCalendarsRequest, options?: RpcOptions): UnaryCall<ListCalendarsRequest, ListCalendarsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCalendarsRequest, ListCalendarsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendar(services.calendar.GetCalendarRequest) returns (services.calendar.GetCalendarResponse);
     */
    getCalendar(input: GetCalendarRequest, options?: RpcOptions): UnaryCall<GetCalendarRequest, GetCalendarResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCalendarRequest, GetCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Fields/StringList:[]string{"Job", "Public"}
     *
     * @generated from protobuf rpc: CreateCalendar(services.calendar.CreateCalendarRequest) returns (services.calendar.CreateCalendarResponse);
     */
    createCalendar(input: CreateCalendarRequest, options?: RpcOptions): UnaryCall<CreateCalendarRequest, CreateCalendarResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateCalendarRequest, CreateCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: UpdateCalendar(services.calendar.UpdateCalendarRequest) returns (services.calendar.UpdateCalendarResponse);
     */
    updateCalendar(input: UpdateCalendarRequest, options?: RpcOptions): UnaryCall<UpdateCalendarRequest, UpdateCalendarResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateCalendarRequest, UpdateCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: DeleteCalendar(services.calendar.DeleteCalendarRequest) returns (services.calendar.DeleteCalendarResponse);
     */
    deleteCalendar(input: DeleteCalendarRequest, options?: RpcOptions): UnaryCall<DeleteCalendarRequest, DeleteCalendarResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCalendarRequest, DeleteCalendarResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntries(services.calendar.ListCalendarEntriesRequest) returns (services.calendar.ListCalendarEntriesResponse);
     */
    listCalendarEntries(input: ListCalendarEntriesRequest, options?: RpcOptions): UnaryCall<ListCalendarEntriesRequest, ListCalendarEntriesResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCalendarEntriesRequest, ListCalendarEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetUpcomingEntries(services.calendar.GetUpcomingEntriesRequest) returns (services.calendar.GetUpcomingEntriesResponse);
     */
    getUpcomingEntries(input: GetUpcomingEntriesRequest, options?: RpcOptions): UnaryCall<GetUpcomingEntriesRequest, GetUpcomingEntriesResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUpcomingEntriesRequest, GetUpcomingEntriesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetCalendarEntry(services.calendar.GetCalendarEntryRequest) returns (services.calendar.GetCalendarEntryResponse);
     */
    getCalendarEntry(input: GetCalendarEntryRequest, options?: RpcOptions): UnaryCall<GetCalendarEntryRequest, GetCalendarEntryResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetCalendarEntryRequest, GetCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: CreateOrUpdateCalendarEntry(services.calendar.CreateOrUpdateCalendarEntryRequest) returns (services.calendar.CreateOrUpdateCalendarEntryResponse);
     */
    createOrUpdateCalendarEntry(input: CreateOrUpdateCalendarEntryRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateCalendarEntryRequest, CreateOrUpdateCalendarEntryResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateCalendarEntryRequest, CreateOrUpdateCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: DeleteCalendarEntry(services.calendar.DeleteCalendarEntryRequest) returns (services.calendar.DeleteCalendarEntryResponse);
     */
    deleteCalendarEntry(input: DeleteCalendarEntryRequest, options?: RpcOptions): UnaryCall<DeleteCalendarEntryRequest, DeleteCalendarEntryResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteCalendarEntryRequest, DeleteCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ShareCalendarEntry(services.calendar.ShareCalendarEntryRequest) returns (services.calendar.ShareCalendarEntryResponse);
     */
    shareCalendarEntry(input: ShareCalendarEntryRequest, options?: RpcOptions): UnaryCall<ShareCalendarEntryRequest, ShareCalendarEntryResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<ShareCalendarEntryRequest, ShareCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListCalendarEntryRSVP(services.calendar.ListCalendarEntryRSVPRequest) returns (services.calendar.ListCalendarEntryRSVPResponse);
     */
    listCalendarEntryRSVP(input: ListCalendarEntryRSVPRequest, options?: RpcOptions): UnaryCall<ListCalendarEntryRSVPRequest, ListCalendarEntryRSVPResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListCalendarEntryRSVPRequest, ListCalendarEntryRSVPResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: RSVPCalendarEntry(services.calendar.RSVPCalendarEntryRequest) returns (services.calendar.RSVPCalendarEntryResponse);
     */
    rSVPCalendarEntry(input: RSVPCalendarEntryRequest, options?: RpcOptions): UnaryCall<RSVPCalendarEntryRequest, RSVPCalendarEntryResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<RSVPCalendarEntryRequest, RSVPCalendarEntryResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListSubscriptions(services.calendar.ListSubscriptionsRequest) returns (services.calendar.ListSubscriptionsResponse);
     */
    listSubscriptions(input: ListSubscriptionsRequest, options?: RpcOptions): UnaryCall<ListSubscriptionsRequest, ListSubscriptionsResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListSubscriptionsRequest, ListSubscriptionsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: SubscribeToCalendar(services.calendar.SubscribeToCalendarRequest) returns (services.calendar.SubscribeToCalendarResponse);
     */
    subscribeToCalendar(input: SubscribeToCalendarRequest, options?: RpcOptions): UnaryCall<SubscribeToCalendarRequest, SubscribeToCalendarResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeToCalendarRequest, SubscribeToCalendarResponse>("unary", this._transport, method, opt, input);
    }
}
