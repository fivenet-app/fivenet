// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/qualifications/qualifications.proto" (package "services.qualifications", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { QualificationsService } from "./qualifications";
import type { UploadResponse } from "../../resources/file/filestore";
import type { UploadPacket } from "../../resources/file/filestore";
import type { ClientStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetUserExamResponse } from "./qualifications";
import type { GetUserExamRequest } from "./qualifications";
import type { SubmitExamResponse } from "./qualifications";
import type { SubmitExamRequest } from "./qualifications";
import type { TakeExamResponse } from "./qualifications";
import type { TakeExamRequest } from "./qualifications";
import type { GetExamInfoResponse } from "./qualifications";
import type { GetExamInfoRequest } from "./qualifications";
import type { DeleteQualificationResultResponse } from "./qualifications";
import type { DeleteQualificationResultRequest } from "./qualifications";
import type { CreateOrUpdateQualificationResultResponse } from "./qualifications";
import type { CreateOrUpdateQualificationResultRequest } from "./qualifications";
import type { ListQualificationsResultsResponse } from "./qualifications";
import type { ListQualificationsResultsRequest } from "./qualifications";
import type { DeleteQualificationReqResponse } from "./qualifications";
import type { DeleteQualificationReqRequest } from "./qualifications";
import type { CreateOrUpdateQualificationRequestResponse } from "./qualifications";
import type { CreateOrUpdateQualificationRequestRequest } from "./qualifications";
import type { ListQualificationRequestsResponse } from "./qualifications";
import type { ListQualificationRequestsRequest } from "./qualifications";
import type { DeleteQualificationResponse } from "./qualifications";
import type { DeleteQualificationRequest } from "./qualifications";
import type { UpdateQualificationResponse } from "./qualifications";
import type { UpdateQualificationRequest } from "./qualifications";
import type { CreateQualificationResponse } from "./qualifications";
import type { CreateQualificationRequest } from "./qualifications";
import type { GetQualificationResponse } from "./qualifications";
import type { GetQualificationRequest } from "./qualifications";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListQualificationsResponse } from "./qualifications";
import type { ListQualificationsRequest } from "./qualifications";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.qualifications.QualificationsService
 */
export interface IQualificationsServiceClient {
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListQualifications
     */
    listQualifications(input: ListQualificationsRequest, options?: RpcOptions): UnaryCall<ListQualificationsRequest, ListQualificationsResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: GetQualification
     */
    getQualification(input: GetQualificationRequest, options?: RpcOptions): UnaryCall<GetQualificationRequest, GetQualificationResponse>;
    /**
     * @perm: Name=UpdateQualification
     *
     * @generated from protobuf rpc: CreateQualification
     */
    createQualification(input: CreateQualificationRequest, options?: RpcOptions): UnaryCall<CreateQualificationRequest, CreateQualificationResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}|Fields/StringList:[]string{"Public"}
     *
     * @generated from protobuf rpc: UpdateQualification
     */
    updateQualification(input: UpdateQualificationRequest, options?: RpcOptions): UnaryCall<UpdateQualificationRequest, UpdateQualificationResponse>;
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteQualification
     */
    deleteQualification(input: DeleteQualificationRequest, options?: RpcOptions): UnaryCall<DeleteQualificationRequest, DeleteQualificationResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: ListQualificationRequests
     */
    listQualificationRequests(input: ListQualificationRequestsRequest, options?: RpcOptions): UnaryCall<ListQualificationRequestsRequest, ListQualificationRequestsResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: CreateOrUpdateQualificationRequest
     */
    createOrUpdateQualificationRequest(input: CreateOrUpdateQualificationRequestRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateQualificationRequestRequest, CreateOrUpdateQualificationRequestResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: DeleteQualificationReq
     */
    deleteQualificationReq(input: DeleteQualificationReqRequest, options?: RpcOptions): UnaryCall<DeleteQualificationReqRequest, DeleteQualificationReqResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: ListQualificationsResults
     */
    listQualificationsResults(input: ListQualificationsResultsRequest, options?: RpcOptions): UnaryCall<ListQualificationsResultsRequest, ListQualificationsResultsResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: CreateOrUpdateQualificationResult
     */
    createOrUpdateQualificationResult(input: CreateOrUpdateQualificationResultRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateQualificationResultRequest, CreateOrUpdateQualificationResultResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: DeleteQualificationResult
     */
    deleteQualificationResult(input: DeleteQualificationResultRequest, options?: RpcOptions): UnaryCall<DeleteQualificationResultRequest, DeleteQualificationResultResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: GetExamInfo
     */
    getExamInfo(input: GetExamInfoRequest, options?: RpcOptions): UnaryCall<GetExamInfoRequest, GetExamInfoResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: TakeExam
     */
    takeExam(input: TakeExamRequest, options?: RpcOptions): UnaryCall<TakeExamRequest, TakeExamResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: SubmitExam
     */
    submitExam(input: SubmitExamRequest, options?: RpcOptions): UnaryCall<SubmitExamRequest, SubmitExamResponse>;
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: GetUserExam
     */
    getUserExam(input: GetUserExamRequest, options?: RpcOptions): UnaryCall<GetUserExamRequest, GetUserExamResponse>;
    /**
     * @perm: Name=UpdateQualification
     *
     * @generated from protobuf rpc: UploadFile
     */
    uploadFile(options?: RpcOptions): ClientStreamingCall<UploadPacket, UploadResponse>;
}
/**
 * @generated from protobuf service services.qualifications.QualificationsService
 */
export class QualificationsServiceClient implements IQualificationsServiceClient, ServiceInfo {
    typeName = QualificationsService.typeName;
    methods = QualificationsService.methods;
    options = QualificationsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm
     *
     * @generated from protobuf rpc: ListQualifications
     */
    listQualifications(input: ListQualificationsRequest, options?: RpcOptions): UnaryCall<ListQualificationsRequest, ListQualificationsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListQualificationsRequest, ListQualificationsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: GetQualification
     */
    getQualification(input: GetQualificationRequest, options?: RpcOptions): UnaryCall<GetQualificationRequest, GetQualificationResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetQualificationRequest, GetQualificationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=UpdateQualification
     *
     * @generated from protobuf rpc: CreateQualification
     */
    createQualification(input: CreateQualificationRequest, options?: RpcOptions): UnaryCall<CreateQualificationRequest, CreateQualificationResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateQualificationRequest, CreateQualificationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}|Fields/StringList:[]string{"Public"}
     *
     * @generated from protobuf rpc: UpdateQualification
     */
    updateQualification(input: UpdateQualificationRequest, options?: RpcOptions): UnaryCall<UpdateQualificationRequest, UpdateQualificationResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateQualificationRequest, UpdateQualificationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Attrs=Access/StringList:[]string{"Own", "Lower_Rank", "Same_Rank", "Any"}
     *
     * @generated from protobuf rpc: DeleteQualification
     */
    deleteQualification(input: DeleteQualificationRequest, options?: RpcOptions): UnaryCall<DeleteQualificationRequest, DeleteQualificationResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteQualificationRequest, DeleteQualificationResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: ListQualificationRequests
     */
    listQualificationRequests(input: ListQualificationRequestsRequest, options?: RpcOptions): UnaryCall<ListQualificationRequestsRequest, ListQualificationRequestsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListQualificationRequestsRequest, ListQualificationRequestsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: CreateOrUpdateQualificationRequest
     */
    createOrUpdateQualificationRequest(input: CreateOrUpdateQualificationRequestRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateQualificationRequestRequest, CreateOrUpdateQualificationRequestResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateQualificationRequestRequest, CreateOrUpdateQualificationRequestResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: DeleteQualificationReq
     */
    deleteQualificationReq(input: DeleteQualificationReqRequest, options?: RpcOptions): UnaryCall<DeleteQualificationReqRequest, DeleteQualificationReqResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteQualificationReqRequest, DeleteQualificationReqResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: ListQualificationsResults
     */
    listQualificationsResults(input: ListQualificationsResultsRequest, options?: RpcOptions): UnaryCall<ListQualificationsResultsRequest, ListQualificationsResultsResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListQualificationsResultsRequest, ListQualificationsResultsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: CreateOrUpdateQualificationResult
     */
    createOrUpdateQualificationResult(input: CreateOrUpdateQualificationResultRequest, options?: RpcOptions): UnaryCall<CreateOrUpdateQualificationResultRequest, CreateOrUpdateQualificationResultResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateOrUpdateQualificationResultRequest, CreateOrUpdateQualificationResultResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: DeleteQualificationResult
     */
    deleteQualificationResult(input: DeleteQualificationResultRequest, options?: RpcOptions): UnaryCall<DeleteQualificationResultRequest, DeleteQualificationResultResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteQualificationResultRequest, DeleteQualificationResultResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: GetExamInfo
     */
    getExamInfo(input: GetExamInfoRequest, options?: RpcOptions): UnaryCall<GetExamInfoRequest, GetExamInfoResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetExamInfoRequest, GetExamInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: TakeExam
     */
    takeExam(input: TakeExamRequest, options?: RpcOptions): UnaryCall<TakeExamRequest, TakeExamResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<TakeExamRequest, TakeExamResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: SubmitExam
     */
    submitExam(input: SubmitExamRequest, options?: RpcOptions): UnaryCall<SubmitExamRequest, SubmitExamResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitExamRequest, SubmitExamResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=ListQualifications
     *
     * @generated from protobuf rpc: GetUserExam
     */
    getUserExam(input: GetUserExamRequest, options?: RpcOptions): UnaryCall<GetUserExamRequest, GetUserExamResponse> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserExamRequest, GetUserExamResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=UpdateQualification
     *
     * @generated from protobuf rpc: UploadFile
     */
    uploadFile(options?: RpcOptions): ClientStreamingCall<UploadPacket, UploadResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadPacket, UploadResponse>("clientStreaming", this._transport, method, opt);
    }
}
