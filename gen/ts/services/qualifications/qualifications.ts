// @generated by protobuf-ts 2.9.4 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/qualifications/qualifications.proto" (package "services.qualifications", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Duration } from "../../google/protobuf/duration";
import { ExamResponses } from "../../resources/qualifications/exam";
import { ExamQuestions } from "../../resources/qualifications/exam";
import { ExamUser } from "../../resources/qualifications/exam";
import { QualificationShort } from "../../resources/qualifications/qualifications";
import { ExamGrading } from "../../resources/qualifications/exam";
import { QualificationResult } from "../../resources/qualifications/qualifications";
import { ResultStatus } from "../../resources/qualifications/qualifications";
import { QualificationRequest } from "../../resources/qualifications/qualifications";
import { RequestStatus } from "../../resources/qualifications/qualifications";
import { QualificationAccess } from "../../resources/qualifications/access";
import { Qualification } from "../../resources/qualifications/qualifications";
import { PaginationResponse } from "../../resources/common/database/database";
import { Sort } from "../../resources/common/database/database";
import { PaginationRequest } from "../../resources/common/database/database";
/**
 * @generated from protobuf message services.qualifications.ListQualificationsRequest
 */
export interface ListQualificationsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2;
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: optional string search = 3;
     */
    search?: string;
    /**
     * @generated from protobuf field: optional string job = 4;
     */
    job?: string;
}
/**
 * @generated from protobuf message services.qualifications.ListQualificationsResponse
 */
export interface ListQualificationsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.qualifications.Qualification qualifications = 2;
     */
    qualifications: Qualification[];
}
/**
 * @generated from protobuf message services.qualifications.GetQualificationRequest
 */
export interface GetQualificationRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: optional bool with_exam = 2;
     */
    withExam?: boolean;
}
/**
 * @generated from protobuf message services.qualifications.GetQualificationResponse
 */
export interface GetQualificationResponse {
    /**
     * @generated from protobuf field: resources.qualifications.Qualification qualification = 1;
     */
    qualification?: Qualification;
}
/**
 * @generated from protobuf message services.qualifications.CreateQualificationRequest
 */
export interface CreateQualificationRequest {
    /**
     * @generated from protobuf field: resources.qualifications.Qualification qualification = 1;
     */
    qualification?: Qualification;
}
/**
 * @generated from protobuf message services.qualifications.CreateQualificationResponse
 */
export interface CreateQualificationResponse {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
}
/**
 * @generated from protobuf message services.qualifications.UpdateQualificationRequest
 */
export interface UpdateQualificationRequest {
    /**
     * @generated from protobuf field: resources.qualifications.Qualification qualification = 1;
     */
    qualification?: Qualification;
}
/**
 * @generated from protobuf message services.qualifications.UpdateQualificationResponse
 */
export interface UpdateQualificationResponse {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
}
/**
 * @generated from protobuf message services.qualifications.DeleteQualificationRequest
 */
export interface DeleteQualificationRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
}
/**
 * @generated from protobuf message services.qualifications.DeleteQualificationResponse
 */
export interface DeleteQualificationResponse {
}
// Access =====================================================================

/**
 * @generated from protobuf message services.qualifications.GetQualificationAccessRequest
 */
export interface GetQualificationAccessRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
}
/**
 * @generated from protobuf message services.qualifications.GetQualificationAccessResponse
 */
export interface GetQualificationAccessResponse {
    /**
     * @generated from protobuf field: resources.qualifications.QualificationAccess access = 1;
     */
    access?: QualificationAccess;
}
/**
 * @generated from protobuf message services.qualifications.SetQualificationAccessRequest
 */
export interface SetQualificationAccessRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: resources.qualifications.QualificationAccess access = 2;
     */
    access?: QualificationAccess;
}
/**
 * @generated from protobuf message services.qualifications.SetQualificationAccessResponse
 */
export interface SetQualificationAccessResponse {
}
// Requests ===================================================================

/**
 * @generated from protobuf message services.qualifications.ListQualificationRequestsRequest
 */
export interface ListQualificationRequestsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2;
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: optional uint64 qualification_id = 3;
     */
    qualificationId?: number;
    /**
     * @generated from protobuf field: repeated resources.qualifications.RequestStatus status = 4;
     */
    status: RequestStatus[];
    /**
     * @generated from protobuf field: optional int32 user_id = 5;
     */
    userId?: number;
}
/**
 * @generated from protobuf message services.qualifications.ListQualificationRequestsResponse
 */
export interface ListQualificationRequestsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationRequest requests = 2;
     */
    requests: QualificationRequest[];
}
/**
 * @generated from protobuf message services.qualifications.CreateOrUpdateQualificationRequestRequest
 */
export interface CreateOrUpdateQualificationRequestRequest {
    /**
     * @generated from protobuf field: resources.qualifications.QualificationRequest request = 1;
     */
    request?: QualificationRequest;
}
/**
 * @generated from protobuf message services.qualifications.CreateOrUpdateQualificationRequestResponse
 */
export interface CreateOrUpdateQualificationRequestResponse {
    /**
     * @generated from protobuf field: resources.qualifications.QualificationRequest request = 1;
     */
    request?: QualificationRequest;
}
/**
 * @generated from protobuf message services.qualifications.DeleteQualificationReqRequest
 */
export interface DeleteQualificationReqRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
}
/**
 * @generated from protobuf message services.qualifications.DeleteQualificationReqResponse
 */
export interface DeleteQualificationReqResponse {
}
// Results ====================================================================

/**
 * @generated from protobuf message services.qualifications.ListQualificationsResultsRequest
 */
export interface ListQualificationsResultsRequest {
    /**
     * @generated from protobuf field: resources.common.database.PaginationRequest pagination = 1;
     */
    pagination?: PaginationRequest;
    /**
     * @generated from protobuf field: optional resources.common.database.Sort sort = 2;
     */
    sort?: Sort;
    /**
     * Search params
     *
     * @generated from protobuf field: optional uint64 qualification_id = 3;
     */
    qualificationId?: number;
    /**
     * @generated from protobuf field: repeated resources.qualifications.ResultStatus status = 4;
     */
    status: ResultStatus[];
    /**
     * @generated from protobuf field: optional int32 user_id = 5;
     */
    userId?: number;
}
/**
 * @generated from protobuf message services.qualifications.ListQualificationsResultsResponse
 */
export interface ListQualificationsResultsResponse {
    /**
     * @generated from protobuf field: resources.common.database.PaginationResponse pagination = 1;
     */
    pagination?: PaginationResponse;
    /**
     * @generated from protobuf field: repeated resources.qualifications.QualificationResult results = 2;
     */
    results: QualificationResult[];
}
/**
 * @generated from protobuf message services.qualifications.CreateOrUpdateQualificationResultRequest
 */
export interface CreateOrUpdateQualificationResultRequest {
    /**
     * @generated from protobuf field: resources.qualifications.QualificationResult result = 1;
     */
    result?: QualificationResult;
    /**
     * @generated from protobuf field: optional resources.qualifications.ExamGrading grading = 2;
     */
    grading?: ExamGrading;
}
/**
 * @generated from protobuf message services.qualifications.CreateOrUpdateQualificationResultResponse
 */
export interface CreateOrUpdateQualificationResultResponse {
    /**
     * @generated from protobuf field: resources.qualifications.QualificationResult result = 1;
     */
    result?: QualificationResult;
}
/**
 * @generated from protobuf message services.qualifications.DeleteQualificationResultRequest
 */
export interface DeleteQualificationResultRequest {
    /**
     * @generated from protobuf field: uint64 result_id = 1;
     */
    resultId: number;
}
/**
 * @generated from protobuf message services.qualifications.DeleteQualificationResultResponse
 */
export interface DeleteQualificationResultResponse {
}
// Exam =======================================================================

/**
 * @generated from protobuf message services.qualifications.GetExamInfoRequest
 */
export interface GetExamInfoRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
}
/**
 * @generated from protobuf message services.qualifications.GetExamInfoResponse
 */
export interface GetExamInfoResponse {
    /**
     * @generated from protobuf field: resources.qualifications.QualificationShort qualification = 1;
     */
    qualification?: QualificationShort;
    /**
     * @generated from protobuf field: int32 question_count = 2;
     */
    questionCount: number;
    /**
     * @generated from protobuf field: optional resources.qualifications.ExamUser exam_user = 3;
     */
    examUser?: ExamUser;
}
/**
 * @generated from protobuf message services.qualifications.TakeExamRequest
 */
export interface TakeExamRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: optional bool cancel = 2;
     */
    cancel?: boolean;
}
/**
 * @generated from protobuf message services.qualifications.TakeExamResponse
 */
export interface TakeExamResponse {
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestions exam = 1;
     */
    exam?: ExamQuestions;
    /**
     * @generated from protobuf field: resources.qualifications.ExamUser exam_user = 2;
     */
    examUser?: ExamUser;
}
/**
 * @generated from protobuf message services.qualifications.SubmitExamRequest
 */
export interface SubmitExamRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: resources.qualifications.ExamResponses responses = 2;
     */
    responses?: ExamResponses;
}
/**
 * @generated from protobuf message services.qualifications.SubmitExamResponse
 */
export interface SubmitExamResponse {
    /**
     * @generated from protobuf field: google.protobuf.Duration duration = 1;
     */
    duration?: Duration;
}
/**
 * @generated from protobuf message services.qualifications.GetUserExamRequest
 */
export interface GetUserExamRequest {
    /**
     * @generated from protobuf field: uint64 qualification_id = 1;
     */
    qualificationId: number;
    /**
     * @generated from protobuf field: int32 user_id = 2;
     */
    userId: number;
}
/**
 * @generated from protobuf message services.qualifications.GetUserExamResponse
 */
export interface GetUserExamResponse {
    /**
     * @generated from protobuf field: resources.qualifications.ExamQuestions exam = 1;
     */
    exam?: ExamQuestions;
    /**
     * @generated from protobuf field: resources.qualifications.ExamUser exam_user = 2;
     */
    examUser?: ExamUser;
    /**
     * @generated from protobuf field: resources.qualifications.ExamResponses responses = 3;
     */
    responses?: ExamResponses;
    /**
     * @generated from protobuf field: resources.qualifications.ExamGrading grading = 4;
     */
    grading?: ExamGrading;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationsRequest$Type extends MessageType<ListQualificationsRequest> {
    constructor() {
        super("services.qualifications.ListQualificationsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "search", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "64" } } } },
            { no: 4, name: "job", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/, options: { "validate.rules": { string: { maxLen: "20" } } } }
        ]);
    }
    create(value?: PartialMessage<ListQualificationsRequest>): ListQualificationsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListQualificationsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationsRequest): ListQualificationsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* optional string search */ 3:
                    message.search = reader.string();
                    break;
                case /* optional string job */ 4:
                    message.job = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional string search = 3; */
        if (message.search !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.search);
        /* optional string job = 4; */
        if (message.job !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.job);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.ListQualificationsRequest
 */
export const ListQualificationsRequest = new ListQualificationsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationsResponse$Type extends MessageType<ListQualificationsResponse> {
    constructor() {
        super("services.qualifications.ListQualificationsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "qualifications", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Qualification }
        ]);
    }
    create(value?: PartialMessage<ListQualificationsResponse>): ListQualificationsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualifications = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationsResponse): ListQualificationsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.qualifications.Qualification qualifications */ 2:
                    message.qualifications.push(Qualification.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.qualifications.Qualification qualifications = 2; */
        for (let i = 0; i < message.qualifications.length; i++)
            Qualification.internalBinaryWrite(message.qualifications[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.ListQualificationsResponse
 */
export const ListQualificationsResponse = new ListQualificationsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationRequest$Type extends MessageType<GetQualificationRequest> {
    constructor() {
        super("services.qualifications.GetQualificationRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "with_exam", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GetQualificationRequest>): GetQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationRequest): GetQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* optional bool with_exam */ 2:
                    message.withExam = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* optional bool with_exam = 2; */
        if (message.withExam !== undefined)
            writer.tag(2, WireType.Varint).bool(message.withExam);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetQualificationRequest
 */
export const GetQualificationRequest = new GetQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationResponse$Type extends MessageType<GetQualificationResponse> {
    constructor() {
        super("services.qualifications.GetQualificationResponse", [
            { no: 1, name: "qualification", kind: "message", T: () => Qualification }
        ]);
    }
    create(value?: PartialMessage<GetQualificationResponse>): GetQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationResponse): GetQualificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.Qualification qualification */ 1:
                    message.qualification = Qualification.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.Qualification qualification = 1; */
        if (message.qualification)
            Qualification.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetQualificationResponse
 */
export const GetQualificationResponse = new GetQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQualificationRequest$Type extends MessageType<CreateQualificationRequest> {
    constructor() {
        super("services.qualifications.CreateQualificationRequest", [
            { no: 1, name: "qualification", kind: "message", T: () => Qualification, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateQualificationRequest>): CreateQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQualificationRequest): CreateQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.Qualification qualification */ 1:
                    message.qualification = Qualification.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.Qualification qualification = 1; */
        if (message.qualification)
            Qualification.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.CreateQualificationRequest
 */
export const CreateQualificationRequest = new CreateQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQualificationResponse$Type extends MessageType<CreateQualificationResponse> {
    constructor() {
        super("services.qualifications.CreateQualificationResponse", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<CreateQualificationResponse>): CreateQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<CreateQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQualificationResponse): CreateQualificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.CreateQualificationResponse
 */
export const CreateQualificationResponse = new CreateQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQualificationRequest$Type extends MessageType<UpdateQualificationRequest> {
    constructor() {
        super("services.qualifications.UpdateQualificationRequest", [
            { no: 1, name: "qualification", kind: "message", T: () => Qualification, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<UpdateQualificationRequest>): UpdateQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQualificationRequest): UpdateQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.Qualification qualification */ 1:
                    message.qualification = Qualification.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.Qualification qualification = 1; */
        if (message.qualification)
            Qualification.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.UpdateQualificationRequest
 */
export const UpdateQualificationRequest = new UpdateQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateQualificationResponse$Type extends MessageType<UpdateQualificationResponse> {
    constructor() {
        super("services.qualifications.UpdateQualificationResponse", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateQualificationResponse>): UpdateQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateQualificationResponse): UpdateQualificationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.UpdateQualificationResponse
 */
export const UpdateQualificationResponse = new UpdateQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationRequest$Type extends MessageType<DeleteQualificationRequest> {
    constructor() {
        super("services.qualifications.DeleteQualificationRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQualificationRequest>): DeleteQualificationRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationRequest): DeleteQualificationRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQualificationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.DeleteQualificationRequest
 */
export const DeleteQualificationRequest = new DeleteQualificationRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationResponse$Type extends MessageType<DeleteQualificationResponse> {
    constructor() {
        super("services.qualifications.DeleteQualificationResponse", []);
    }
    create(value?: PartialMessage<DeleteQualificationResponse>): DeleteQualificationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationResponse): DeleteQualificationResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteQualificationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.DeleteQualificationResponse
 */
export const DeleteQualificationResponse = new DeleteQualificationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationAccessRequest$Type extends MessageType<GetQualificationAccessRequest> {
    constructor() {
        super("services.qualifications.GetQualificationAccessRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetQualificationAccessRequest>): GetQualificationAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetQualificationAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationAccessRequest): GetQualificationAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetQualificationAccessRequest
 */
export const GetQualificationAccessRequest = new GetQualificationAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQualificationAccessResponse$Type extends MessageType<GetQualificationAccessResponse> {
    constructor() {
        super("services.qualifications.GetQualificationAccessResponse", [
            { no: 1, name: "access", kind: "message", T: () => QualificationAccess, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<GetQualificationAccessResponse>): GetQualificationAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetQualificationAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQualificationAccessResponse): GetQualificationAccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.QualificationAccess access */ 1:
                    message.access = QualificationAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQualificationAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.QualificationAccess access = 1; */
        if (message.access)
            QualificationAccess.internalBinaryWrite(message.access, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetQualificationAccessResponse
 */
export const GetQualificationAccessResponse = new GetQualificationAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQualificationAccessRequest$Type extends MessageType<SetQualificationAccessRequest> {
    constructor() {
        super("services.qualifications.SetQualificationAccessRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "access", kind: "message", T: () => QualificationAccess, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<SetQualificationAccessRequest>): SetQualificationAccessRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<SetQualificationAccessRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQualificationAccessRequest): SetQualificationAccessRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* resources.qualifications.QualificationAccess access */ 2:
                    message.access = QualificationAccess.internalBinaryRead(reader, reader.uint32(), options, message.access);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetQualificationAccessRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* resources.qualifications.QualificationAccess access = 2; */
        if (message.access)
            QualificationAccess.internalBinaryWrite(message.access, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.SetQualificationAccessRequest
 */
export const SetQualificationAccessRequest = new SetQualificationAccessRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetQualificationAccessResponse$Type extends MessageType<SetQualificationAccessResponse> {
    constructor() {
        super("services.qualifications.SetQualificationAccessResponse", []);
    }
    create(value?: PartialMessage<SetQualificationAccessResponse>): SetQualificationAccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SetQualificationAccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetQualificationAccessResponse): SetQualificationAccessResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: SetQualificationAccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.SetQualificationAccessResponse
 */
export const SetQualificationAccessResponse = new SetQualificationAccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationRequestsRequest$Type extends MessageType<ListQualificationRequestsRequest> {
    constructor() {
        super("services.qualifications.ListQualificationRequestsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "qualification_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.qualifications.RequestStatus", RequestStatus, "REQUEST_STATUS_"] },
            { no: 5, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<ListQualificationRequestsRequest>): ListQualificationRequestsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationRequestsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationRequestsRequest): ListQualificationRequestsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* optional uint64 qualification_id */ 3:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* repeated resources.qualifications.RequestStatus status */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.status.push(reader.int32());
                    else
                        message.status.push(reader.int32());
                    break;
                case /* optional int32 user_id */ 5:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationRequestsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 qualification_id = 3; */
        if (message.qualificationId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* repeated resources.qualifications.RequestStatus status = 4; */
        if (message.status.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.status.length; i++)
                writer.int32(message.status[i]);
            writer.join();
        }
        /* optional int32 user_id = 5; */
        if (message.userId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.ListQualificationRequestsRequest
 */
export const ListQualificationRequestsRequest = new ListQualificationRequestsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationRequestsResponse$Type extends MessageType<ListQualificationRequestsResponse> {
    constructor() {
        super("services.qualifications.ListQualificationRequestsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "requests", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationRequest }
        ]);
    }
    create(value?: PartialMessage<ListQualificationRequestsResponse>): ListQualificationRequestsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requests = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationRequestsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationRequestsResponse): ListQualificationRequestsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.qualifications.QualificationRequest requests */ 2:
                    message.requests.push(QualificationRequest.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationRequestsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.qualifications.QualificationRequest requests = 2; */
        for (let i = 0; i < message.requests.length; i++)
            QualificationRequest.internalBinaryWrite(message.requests[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.ListQualificationRequestsResponse
 */
export const ListQualificationRequestsResponse = new ListQualificationRequestsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateQualificationRequestRequest$Type extends MessageType<CreateOrUpdateQualificationRequestRequest> {
    constructor() {
        super("services.qualifications.CreateOrUpdateQualificationRequestRequest", [
            { no: 1, name: "request", kind: "message", T: () => QualificationRequest, options: { "validate.rules": { message: { required: true } } } }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateQualificationRequestRequest>): CreateOrUpdateQualificationRequestRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateQualificationRequestRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateQualificationRequestRequest): CreateOrUpdateQualificationRequestRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.QualificationRequest request */ 1:
                    message.request = QualificationRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateQualificationRequestRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.QualificationRequest request = 1; */
        if (message.request)
            QualificationRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.CreateOrUpdateQualificationRequestRequest
 */
export const CreateOrUpdateQualificationRequestRequest = new CreateOrUpdateQualificationRequestRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateQualificationRequestResponse$Type extends MessageType<CreateOrUpdateQualificationRequestResponse> {
    constructor() {
        super("services.qualifications.CreateOrUpdateQualificationRequestResponse", [
            { no: 1, name: "request", kind: "message", T: () => QualificationRequest }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateQualificationRequestResponse>): CreateOrUpdateQualificationRequestResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateQualificationRequestResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateQualificationRequestResponse): CreateOrUpdateQualificationRequestResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.QualificationRequest request */ 1:
                    message.request = QualificationRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateQualificationRequestResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.QualificationRequest request = 1; */
        if (message.request)
            QualificationRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.CreateOrUpdateQualificationRequestResponse
 */
export const CreateOrUpdateQualificationRequestResponse = new CreateOrUpdateQualificationRequestResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationReqRequest$Type extends MessageType<DeleteQualificationReqRequest> {
    constructor() {
        super("services.qualifications.DeleteQualificationReqRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<DeleteQualificationReqRequest>): DeleteQualificationReqRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationReqRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationReqRequest): DeleteQualificationReqRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQualificationReqRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.DeleteQualificationReqRequest
 */
export const DeleteQualificationReqRequest = new DeleteQualificationReqRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationReqResponse$Type extends MessageType<DeleteQualificationReqResponse> {
    constructor() {
        super("services.qualifications.DeleteQualificationReqResponse", []);
    }
    create(value?: PartialMessage<DeleteQualificationReqResponse>): DeleteQualificationReqResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationReqResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationReqResponse): DeleteQualificationReqResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteQualificationReqResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.DeleteQualificationReqResponse
 */
export const DeleteQualificationReqResponse = new DeleteQualificationReqResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationsResultsRequest$Type extends MessageType<ListQualificationsResultsRequest> {
    constructor() {
        super("services.qualifications.ListQualificationsResultsRequest", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationRequest, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "sort", kind: "message", T: () => Sort },
            { no: 3, name: "qualification_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "status", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["resources.qualifications.ResultStatus", ResultStatus, "RESULT_STATUS_"] },
            { no: 5, name: "user_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<ListQualificationsResultsRequest>): ListQualificationsResultsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationsResultsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationsResultsRequest): ListQualificationsResultsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationRequest pagination */ 1:
                    message.pagination = PaginationRequest.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* optional resources.common.database.Sort sort */ 2:
                    message.sort = Sort.internalBinaryRead(reader, reader.uint32(), options, message.sort);
                    break;
                case /* optional uint64 qualification_id */ 3:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* repeated resources.qualifications.ResultStatus status */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.status.push(reader.int32());
                    else
                        message.status.push(reader.int32());
                    break;
                case /* optional int32 user_id */ 5:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationsResultsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationRequest pagination = 1; */
        if (message.pagination)
            PaginationRequest.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.common.database.Sort sort = 2; */
        if (message.sort)
            Sort.internalBinaryWrite(message.sort, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 qualification_id = 3; */
        if (message.qualificationId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.qualificationId);
        /* repeated resources.qualifications.ResultStatus status = 4; */
        if (message.status.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.status.length; i++)
                writer.int32(message.status[i]);
            writer.join();
        }
        /* optional int32 user_id = 5; */
        if (message.userId !== undefined)
            writer.tag(5, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.ListQualificationsResultsRequest
 */
export const ListQualificationsResultsRequest = new ListQualificationsResultsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListQualificationsResultsResponse$Type extends MessageType<ListQualificationsResultsResponse> {
    constructor() {
        super("services.qualifications.ListQualificationsResultsResponse", [
            { no: 1, name: "pagination", kind: "message", T: () => PaginationResponse },
            { no: 2, name: "results", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => QualificationResult }
        ]);
    }
    create(value?: PartialMessage<ListQualificationsResultsResponse>): ListQualificationsResultsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.results = [];
        if (value !== undefined)
            reflectionMergePartial<ListQualificationsResultsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListQualificationsResultsResponse): ListQualificationsResultsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.common.database.PaginationResponse pagination */ 1:
                    message.pagination = PaginationResponse.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                case /* repeated resources.qualifications.QualificationResult results */ 2:
                    message.results.push(QualificationResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListQualificationsResultsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.common.database.PaginationResponse pagination = 1; */
        if (message.pagination)
            PaginationResponse.internalBinaryWrite(message.pagination, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated resources.qualifications.QualificationResult results = 2; */
        for (let i = 0; i < message.results.length; i++)
            QualificationResult.internalBinaryWrite(message.results[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.ListQualificationsResultsResponse
 */
export const ListQualificationsResultsResponse = new ListQualificationsResultsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateQualificationResultRequest$Type extends MessageType<CreateOrUpdateQualificationResultRequest> {
    constructor() {
        super("services.qualifications.CreateOrUpdateQualificationResultRequest", [
            { no: 1, name: "result", kind: "message", T: () => QualificationResult, options: { "validate.rules": { message: { required: true } } } },
            { no: 2, name: "grading", kind: "message", T: () => ExamGrading }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateQualificationResultRequest>): CreateOrUpdateQualificationResultRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateQualificationResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateQualificationResultRequest): CreateOrUpdateQualificationResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.QualificationResult result */ 1:
                    message.result = QualificationResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                case /* optional resources.qualifications.ExamGrading grading */ 2:
                    message.grading = ExamGrading.internalBinaryRead(reader, reader.uint32(), options, message.grading);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateQualificationResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.QualificationResult result = 1; */
        if (message.result)
            QualificationResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional resources.qualifications.ExamGrading grading = 2; */
        if (message.grading)
            ExamGrading.internalBinaryWrite(message.grading, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.CreateOrUpdateQualificationResultRequest
 */
export const CreateOrUpdateQualificationResultRequest = new CreateOrUpdateQualificationResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateOrUpdateQualificationResultResponse$Type extends MessageType<CreateOrUpdateQualificationResultResponse> {
    constructor() {
        super("services.qualifications.CreateOrUpdateQualificationResultResponse", [
            { no: 1, name: "result", kind: "message", T: () => QualificationResult }
        ]);
    }
    create(value?: PartialMessage<CreateOrUpdateQualificationResultResponse>): CreateOrUpdateQualificationResultResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateOrUpdateQualificationResultResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateOrUpdateQualificationResultResponse): CreateOrUpdateQualificationResultResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.QualificationResult result */ 1:
                    message.result = QualificationResult.internalBinaryRead(reader, reader.uint32(), options, message.result);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateOrUpdateQualificationResultResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.QualificationResult result = 1; */
        if (message.result)
            QualificationResult.internalBinaryWrite(message.result, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.CreateOrUpdateQualificationResultResponse
 */
export const CreateOrUpdateQualificationResultResponse = new CreateOrUpdateQualificationResultResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationResultRequest$Type extends MessageType<DeleteQualificationResultRequest> {
    constructor() {
        super("services.qualifications.DeleteQualificationResultRequest", [
            { no: 1, name: "result_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQualificationResultRequest>): DeleteQualificationResultRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.resultId = 0;
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationResultRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationResultRequest): DeleteQualificationResultRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 result_id */ 1:
                    message.resultId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQualificationResultRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 result_id = 1; */
        if (message.resultId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.resultId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.DeleteQualificationResultRequest
 */
export const DeleteQualificationResultRequest = new DeleteQualificationResultRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQualificationResultResponse$Type extends MessageType<DeleteQualificationResultResponse> {
    constructor() {
        super("services.qualifications.DeleteQualificationResultResponse", []);
    }
    create(value?: PartialMessage<DeleteQualificationResultResponse>): DeleteQualificationResultResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteQualificationResultResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQualificationResultResponse): DeleteQualificationResultResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteQualificationResultResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.DeleteQualificationResultResponse
 */
export const DeleteQualificationResultResponse = new DeleteQualificationResultResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExamInfoRequest$Type extends MessageType<GetExamInfoRequest> {
    constructor() {
        super("services.qualifications.GetExamInfoRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetExamInfoRequest>): GetExamInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetExamInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExamInfoRequest): GetExamInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExamInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetExamInfoRequest
 */
export const GetExamInfoRequest = new GetExamInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExamInfoResponse$Type extends MessageType<GetExamInfoResponse> {
    constructor() {
        super("services.qualifications.GetExamInfoResponse", [
            { no: 1, name: "qualification", kind: "message", T: () => QualificationShort },
            { no: 2, name: "question_count", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "exam_user", kind: "message", T: () => ExamUser }
        ]);
    }
    create(value?: PartialMessage<GetExamInfoResponse>): GetExamInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.questionCount = 0;
        if (value !== undefined)
            reflectionMergePartial<GetExamInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetExamInfoResponse): GetExamInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.QualificationShort qualification */ 1:
                    message.qualification = QualificationShort.internalBinaryRead(reader, reader.uint32(), options, message.qualification);
                    break;
                case /* int32 question_count */ 2:
                    message.questionCount = reader.int32();
                    break;
                case /* optional resources.qualifications.ExamUser exam_user */ 3:
                    message.examUser = ExamUser.internalBinaryRead(reader, reader.uint32(), options, message.examUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetExamInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.QualificationShort qualification = 1; */
        if (message.qualification)
            QualificationShort.internalBinaryWrite(message.qualification, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* int32 question_count = 2; */
        if (message.questionCount !== 0)
            writer.tag(2, WireType.Varint).int32(message.questionCount);
        /* optional resources.qualifications.ExamUser exam_user = 3; */
        if (message.examUser)
            ExamUser.internalBinaryWrite(message.examUser, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetExamInfoResponse
 */
export const GetExamInfoResponse = new GetExamInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeExamRequest$Type extends MessageType<TakeExamRequest> {
    constructor() {
        super("services.qualifications.TakeExamRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "cancel", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<TakeExamRequest>): TakeExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<TakeExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeExamRequest): TakeExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* optional bool cancel */ 2:
                    message.cancel = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* optional bool cancel = 2; */
        if (message.cancel !== undefined)
            writer.tag(2, WireType.Varint).bool(message.cancel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.TakeExamRequest
 */
export const TakeExamRequest = new TakeExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeExamResponse$Type extends MessageType<TakeExamResponse> {
    constructor() {
        super("services.qualifications.TakeExamResponse", [
            { no: 1, name: "exam", kind: "message", T: () => ExamQuestions },
            { no: 2, name: "exam_user", kind: "message", T: () => ExamUser }
        ]);
    }
    create(value?: PartialMessage<TakeExamResponse>): TakeExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TakeExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeExamResponse): TakeExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.ExamQuestions exam */ 1:
                    message.exam = ExamQuestions.internalBinaryRead(reader, reader.uint32(), options, message.exam);
                    break;
                case /* resources.qualifications.ExamUser exam_user */ 2:
                    message.examUser = ExamUser.internalBinaryRead(reader, reader.uint32(), options, message.examUser);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.ExamQuestions exam = 1; */
        if (message.exam)
            ExamQuestions.internalBinaryWrite(message.exam, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamUser exam_user = 2; */
        if (message.examUser)
            ExamUser.internalBinaryWrite(message.examUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.TakeExamResponse
 */
export const TakeExamResponse = new TakeExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitExamRequest$Type extends MessageType<SubmitExamRequest> {
    constructor() {
        super("services.qualifications.SubmitExamRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "responses", kind: "message", T: () => ExamResponses }
        ]);
    }
    create(value?: PartialMessage<SubmitExamRequest>): SubmitExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        if (value !== undefined)
            reflectionMergePartial<SubmitExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitExamRequest): SubmitExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* resources.qualifications.ExamResponses responses */ 2:
                    message.responses = ExamResponses.internalBinaryRead(reader, reader.uint32(), options, message.responses);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* resources.qualifications.ExamResponses responses = 2; */
        if (message.responses)
            ExamResponses.internalBinaryWrite(message.responses, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.SubmitExamRequest
 */
export const SubmitExamRequest = new SubmitExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitExamResponse$Type extends MessageType<SubmitExamResponse> {
    constructor() {
        super("services.qualifications.SubmitExamResponse", [
            { no: 1, name: "duration", kind: "message", T: () => Duration }
        ]);
    }
    create(value?: PartialMessage<SubmitExamResponse>): SubmitExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitExamResponse): SubmitExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* google.protobuf.Duration duration */ 1:
                    message.duration = Duration.internalBinaryRead(reader, reader.uint32(), options, message.duration);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* google.protobuf.Duration duration = 1; */
        if (message.duration)
            Duration.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.SubmitExamResponse
 */
export const SubmitExamResponse = new SubmitExamResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserExamRequest$Type extends MessageType<GetUserExamRequest> {
    constructor() {
        super("services.qualifications.GetUserExamRequest", [
            { no: 1, name: "qualification_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 2, name: "user_id", kind: "scalar", T: 5 /*ScalarType.INT32*/, options: { "validate.rules": { int32: { gte: 0 } } } }
        ]);
    }
    create(value?: PartialMessage<GetUserExamRequest>): GetUserExamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.qualificationId = 0;
        message.userId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUserExamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserExamRequest): GetUserExamRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 qualification_id */ 1:
                    message.qualificationId = reader.uint64().toNumber();
                    break;
                case /* int32 user_id */ 2:
                    message.userId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserExamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 qualification_id = 1; */
        if (message.qualificationId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.qualificationId);
        /* int32 user_id = 2; */
        if (message.userId !== 0)
            writer.tag(2, WireType.Varint).int32(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetUserExamRequest
 */
export const GetUserExamRequest = new GetUserExamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserExamResponse$Type extends MessageType<GetUserExamResponse> {
    constructor() {
        super("services.qualifications.GetUserExamResponse", [
            { no: 1, name: "exam", kind: "message", T: () => ExamQuestions },
            { no: 2, name: "exam_user", kind: "message", T: () => ExamUser },
            { no: 3, name: "responses", kind: "message", T: () => ExamResponses },
            { no: 4, name: "grading", kind: "message", T: () => ExamGrading }
        ]);
    }
    create(value?: PartialMessage<GetUserExamResponse>): GetUserExamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserExamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserExamResponse): GetUserExamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.qualifications.ExamQuestions exam */ 1:
                    message.exam = ExamQuestions.internalBinaryRead(reader, reader.uint32(), options, message.exam);
                    break;
                case /* resources.qualifications.ExamUser exam_user */ 2:
                    message.examUser = ExamUser.internalBinaryRead(reader, reader.uint32(), options, message.examUser);
                    break;
                case /* resources.qualifications.ExamResponses responses */ 3:
                    message.responses = ExamResponses.internalBinaryRead(reader, reader.uint32(), options, message.responses);
                    break;
                case /* resources.qualifications.ExamGrading grading */ 4:
                    message.grading = ExamGrading.internalBinaryRead(reader, reader.uint32(), options, message.grading);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserExamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.qualifications.ExamQuestions exam = 1; */
        if (message.exam)
            ExamQuestions.internalBinaryWrite(message.exam, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamUser exam_user = 2; */
        if (message.examUser)
            ExamUser.internalBinaryWrite(message.examUser, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamResponses responses = 3; */
        if (message.responses)
            ExamResponses.internalBinaryWrite(message.responses, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* resources.qualifications.ExamGrading grading = 4; */
        if (message.grading)
            ExamGrading.internalBinaryWrite(message.grading, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.qualifications.GetUserExamResponse
 */
export const GetUserExamResponse = new GetUserExamResponse$Type();
/**
 * @generated ServiceType for protobuf service services.qualifications.QualificationsService
 */
export const QualificationsService = new ServiceType("services.qualifications.QualificationsService", [
    { name: "ListQualifications", options: {}, I: ListQualificationsRequest, O: ListQualificationsResponse },
    { name: "GetQualification", options: {}, I: GetQualificationRequest, O: GetQualificationResponse },
    { name: "CreateQualification", options: {}, I: CreateQualificationRequest, O: CreateQualificationResponse },
    { name: "UpdateQualification", options: {}, I: UpdateQualificationRequest, O: UpdateQualificationResponse },
    { name: "DeleteQualification", options: {}, I: DeleteQualificationRequest, O: DeleteQualificationResponse },
    { name: "ListQualificationRequests", options: {}, I: ListQualificationRequestsRequest, O: ListQualificationRequestsResponse },
    { name: "CreateOrUpdateQualificationRequest", options: {}, I: CreateOrUpdateQualificationRequestRequest, O: CreateOrUpdateQualificationRequestResponse },
    { name: "DeleteQualificationReq", options: {}, I: DeleteQualificationReqRequest, O: DeleteQualificationReqResponse },
    { name: "ListQualificationsResults", options: {}, I: ListQualificationsResultsRequest, O: ListQualificationsResultsResponse },
    { name: "CreateOrUpdateQualificationResult", options: {}, I: CreateOrUpdateQualificationResultRequest, O: CreateOrUpdateQualificationResultResponse },
    { name: "DeleteQualificationResult", options: {}, I: DeleteQualificationResultRequest, O: DeleteQualificationResultResponse },
    { name: "GetExamInfo", options: {}, I: GetExamInfoRequest, O: GetExamInfoResponse },
    { name: "TakeExam", options: {}, I: TakeExamRequest, O: TakeExamResponse },
    { name: "SubmitExam", options: {}, I: SubmitExamRequest, O: SubmitExamResponse },
    { name: "GetUserExam", options: {}, I: GetUserExamRequest, O: GetUserExamResponse }
]);
