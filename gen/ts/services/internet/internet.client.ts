// @generated by protobuf-ts 2.11.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/internet/internet.proto" (package "services.internet", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { InternetService } from "./internet";
import type { GetPageResponse } from "./internet";
import type { GetPageRequest } from "./internet";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SearchResponse } from "./internet";
import type { SearchRequest } from "./internet";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.internet.InternetService
 */
export interface IInternetServiceClient {
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: Search
     */
    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetPage
     */
    getPage(input: GetPageRequest, options?: RpcOptions): UnaryCall<GetPageRequest, GetPageResponse>;
}
/**
 * @generated from protobuf service services.internet.InternetService
 */
export class InternetServiceClient implements IInternetServiceClient, ServiceInfo {
    typeName = InternetService.typeName;
    methods = InternetService.methods;
    options = InternetService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: Search
     */
    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchRequest, SearchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: GetPage
     */
    getPage(input: GetPageRequest, options?: RpcOptions): UnaryCall<GetPageRequest, GetPageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPageRequest, GetPageResponse>("unary", this._transport, method, opt, input);
    }
}
