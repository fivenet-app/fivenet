// @generated by protobuf-ts 2.10.0 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/internet/ads.proto" (package "services.internet", syntax proto3)
// @ts-nocheck
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Ad } from "../../resources/internet/ads";
import { AdType } from "../../resources/internet/ads";
/**
 * @generated from protobuf message services.internet.GetAdsRequest
 */
export interface GetAdsRequest {
    /**
     * @generated from protobuf field: resources.internet.AdType ad_type = 1;
     */
    adType: AdType;
    /**
     * @generated from protobuf field: int32 count = 2;
     */
    count: number;
}
/**
 * @generated from protobuf message services.internet.GetAdsResponse
 */
export interface GetAdsResponse {
    /**
     * @generated from protobuf field: repeated resources.internet.Ad ads = 1;
     */
    ads: Ad[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAdsRequest$Type extends MessageType<GetAdsRequest> {
    constructor() {
        super("services.internet.GetAdsRequest", [
            { no: 1, name: "ad_type", kind: "enum", T: () => ["resources.internet.AdType", AdType, "AD_TYPE_"], options: { "validate.rules": { enum: { definedOnly: true } } } },
            { no: 2, name: "count", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAdsRequest>): GetAdsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.adType = 0;
        message.count = 0;
        if (value !== undefined)
            reflectionMergePartial<GetAdsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAdsRequest): GetAdsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* resources.internet.AdType ad_type */ 1:
                    message.adType = reader.int32();
                    break;
                case /* int32 count */ 2:
                    message.count = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAdsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* resources.internet.AdType ad_type = 1; */
        if (message.adType !== 0)
            writer.tag(1, WireType.Varint).int32(message.adType);
        /* int32 count = 2; */
        if (message.count !== 0)
            writer.tag(2, WireType.Varint).int32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.internet.GetAdsRequest
 */
export const GetAdsRequest = new GetAdsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAdsResponse$Type extends MessageType<GetAdsResponse> {
    constructor() {
        super("services.internet.GetAdsResponse", [
            { no: 1, name: "ads", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Ad }
        ]);
    }
    create(value?: PartialMessage<GetAdsResponse>): GetAdsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ads = [];
        if (value !== undefined)
            reflectionMergePartial<GetAdsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAdsResponse): GetAdsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated resources.internet.Ad ads */ 1:
                    message.ads.push(Ad.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAdsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated resources.internet.Ad ads = 1; */
        for (let i = 0; i < message.ads.length; i++)
            Ad.internalBinaryWrite(message.ads[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message services.internet.GetAdsResponse
 */
export const GetAdsResponse = new GetAdsResponse$Type();
/**
 * @generated ServiceType for protobuf service services.internet.AdsService
 */
export const AdsService = new ServiceType("services.internet.AdsService", [
    { name: "GetAds", options: {}, I: GetAdsRequest, O: GetAdsResponse }
]);
