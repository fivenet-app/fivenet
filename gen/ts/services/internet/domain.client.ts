// @generated by protobuf-ts 2.11.1 with parameter optimize_speed,long_type_number,force_server_none
// @generated from protobuf file "services/internet/domain.proto" (package "services.internet", syntax proto3)
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DomainService } from "./domain";
import type { UpdateDomainResponse } from "./domain";
import type { UpdateDomainRequest } from "./domain";
import type { ListDomainsResponse } from "./domain";
import type { ListDomainsRequest } from "./domain";
import type { RegisterDomainResponse } from "./domain";
import type { RegisterDomainRequest } from "./domain";
import type { CheckDomainAvailabilityResponse } from "./domain";
import type { CheckDomainAvailabilityRequest } from "./domain";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListTLDsResponse } from "./domain";
import type { ListTLDsRequest } from "./domain";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service services.internet.DomainService
 */
export interface IDomainServiceClient {
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListTLDs
     */
    listTLDs(input: ListTLDsRequest, options?: RpcOptions): UnaryCall<ListTLDsRequest, ListTLDsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: CheckDomainAvailability
     */
    checkDomainAvailability(input: CheckDomainAvailabilityRequest, options?: RpcOptions): UnaryCall<CheckDomainAvailabilityRequest, CheckDomainAvailabilityResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: RegisterDomain
     */
    registerDomain(input: RegisterDomainRequest, options?: RpcOptions): UnaryCall<RegisterDomainRequest, RegisterDomainResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListDomains
     */
    listDomains(input: ListDomainsRequest, options?: RpcOptions): UnaryCall<ListDomainsRequest, ListDomainsResponse>;
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: UpdateDomain
     */
    updateDomain(input: UpdateDomainRequest, options?: RpcOptions): UnaryCall<UpdateDomainRequest, UpdateDomainResponse>;
}
/**
 * @generated from protobuf service services.internet.DomainService
 */
export class DomainServiceClient implements IDomainServiceClient, ServiceInfo {
    typeName = DomainService.typeName;
    methods = DomainService.methods;
    options = DomainService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListTLDs
     */
    listTLDs(input: ListTLDsRequest, options?: RpcOptions): UnaryCall<ListTLDsRequest, ListTLDsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTLDsRequest, ListTLDsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: CheckDomainAvailability
     */
    checkDomainAvailability(input: CheckDomainAvailabilityRequest, options?: RpcOptions): UnaryCall<CheckDomainAvailabilityRequest, CheckDomainAvailabilityResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckDomainAvailabilityRequest, CheckDomainAvailabilityResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: RegisterDomain
     */
    registerDomain(input: RegisterDomainRequest, options?: RpcOptions): UnaryCall<RegisterDomainRequest, RegisterDomainResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterDomainRequest, RegisterDomainResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: ListDomains
     */
    listDomains(input: ListDomainsRequest, options?: RpcOptions): UnaryCall<ListDomainsRequest, ListDomainsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDomainsRequest, ListDomainsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @perm: Name=Any
     *
     * @generated from protobuf rpc: UpdateDomain
     */
    updateDomain(input: UpdateDomainRequest, options?: RpcOptions): UnaryCall<UpdateDomainRequest, UpdateDomainResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDomainRequest, UpdateDomainResponse>("unary", this._transport, method, opt, input);
    }
}
