// @generated by protobuf-ts 2.11.1 with parameter force_server_none,long_type_number,optimize_speed,ts_nocheck
// @generated from protobuf file "codegen/perms/perms.proto" (package "codegen.perms", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AttributeType } from "../../resources/permissions/attributes";
/**
 * @generated from protobuf message codegen.perms.FieldOptions
 */
export interface FieldOptions {
    /**
     * @generated from protobuf field: bool enabled = 1
     */
    enabled: boolean;
    /**
     * @generated from protobuf field: optional string service = 2
     */
    service?: string;
    /**
     * @generated from protobuf field: optional string name = 3
     */
    name?: string;
    /**
     * @generated from protobuf field: int32 order = 4
     */
    order: number;
    /**
     * @generated from protobuf field: repeated codegen.perms.Attr attrs = 5
     */
    attrs: Attr[];
}
/**
 * @generated from protobuf message codegen.perms.Attr
 */
export interface Attr {
    /**
     * @generated from protobuf field: string key = 1
     */
    key: string;
    /**
     * @generated from protobuf field: string value = 2
     */
    value: string;
    /**
     * @generated from protobuf field: resources.permissions.AttributeType type = 3
     */
    type: AttributeType;
    /**
     * @generated from protobuf field: repeated string valid_string_list = 4
     */
    validStringList: string[];
}
/**
 * @generated from protobuf message codegen.perms.ServiceOptions
 */
export interface ServiceOptions {
    /**
     * @generated from protobuf field: int32 order = 1
     */
    order: number;
    /**
     * @generated from protobuf field: optional string icon = 2
     */
    icon?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FieldOptions$Type extends MessageType<FieldOptions> {
    constructor() {
        super("codegen.perms.FieldOptions", [
            { no: 1, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "service", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "attrs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Attr }
        ]);
    }
    create(value?: PartialMessage<FieldOptions>): FieldOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.enabled = false;
        message.order = 0;
        message.attrs = [];
        if (value !== undefined)
            reflectionMergePartial<FieldOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FieldOptions): FieldOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool enabled */ 1:
                    message.enabled = reader.bool();
                    break;
                case /* optional string service */ 2:
                    message.service = reader.string();
                    break;
                case /* optional string name */ 3:
                    message.name = reader.string();
                    break;
                case /* int32 order */ 4:
                    message.order = reader.int32();
                    break;
                case /* repeated codegen.perms.Attr attrs */ 5:
                    message.attrs.push(Attr.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FieldOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool enabled = 1; */
        if (message.enabled !== false)
            writer.tag(1, WireType.Varint).bool(message.enabled);
        /* optional string service = 2; */
        if (message.service !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.service);
        /* optional string name = 3; */
        if (message.name !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* int32 order = 4; */
        if (message.order !== 0)
            writer.tag(4, WireType.Varint).int32(message.order);
        /* repeated codegen.perms.Attr attrs = 5; */
        for (let i = 0; i < message.attrs.length; i++)
            Attr.internalBinaryWrite(message.attrs[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codegen.perms.FieldOptions
 */
export const FieldOptions = new FieldOptions$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Attr$Type extends MessageType<Attr> {
    constructor() {
        super("codegen.perms.Attr", [
            { no: 1, name: "key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "value", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "type", kind: "enum", T: () => ["resources.permissions.AttributeType", AttributeType, "ATTRIBUTE_TYPE_"] },
            { no: 4, name: "valid_string_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Attr>): Attr {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.key = "";
        message.value = "";
        message.type = 0;
        message.validStringList = [];
        if (value !== undefined)
            reflectionMergePartial<Attr>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Attr): Attr {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string key */ 1:
                    message.key = reader.string();
                    break;
                case /* string value */ 2:
                    message.value = reader.string();
                    break;
                case /* resources.permissions.AttributeType type */ 3:
                    message.type = reader.int32();
                    break;
                case /* repeated string valid_string_list */ 4:
                    message.validStringList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Attr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string key = 1; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string value = 2; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        /* resources.permissions.AttributeType type = 3; */
        if (message.type !== 0)
            writer.tag(3, WireType.Varint).int32(message.type);
        /* repeated string valid_string_list = 4; */
        for (let i = 0; i < message.validStringList.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.validStringList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codegen.perms.Attr
 */
export const Attr = new Attr$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServiceOptions$Type extends MessageType<ServiceOptions> {
    constructor() {
        super("codegen.perms.ServiceOptions", [
            { no: 1, name: "order", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "icon", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ServiceOptions>): ServiceOptions {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.order = 0;
        if (value !== undefined)
            reflectionMergePartial<ServiceOptions>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServiceOptions): ServiceOptions {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 order */ 1:
                    message.order = reader.int32();
                    break;
                case /* optional string icon */ 2:
                    message.icon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServiceOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 order = 1; */
        if (message.order !== 0)
            writer.tag(1, WireType.Varint).int32(message.order);
        /* optional string icon = 2; */
        if (message.icon !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message codegen.perms.ServiceOptions
 */
export const ServiceOptions = new ServiceOptions$Type();
